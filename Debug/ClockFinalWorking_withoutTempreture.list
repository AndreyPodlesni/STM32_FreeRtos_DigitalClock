
ClockFinalWorking_withoutTempreture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000961c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e0  080099e0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e8  080099e8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099ec  080099ec  000199ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080099f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d04  2000006c  08009a5c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d70  08009a5c  00024d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e3be  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047f9  00000000  00000000  0003e49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  00042c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013d5  00000000  00000000  00044648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bdbb  00000000  00000000  00045a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f6c0  00000000  00000000  000617d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2b54  00000000  00000000  00080e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007224  00000000  00000000  001239ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0012ac10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097a4 	.word	0x080097a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080097a4 	.word	0x080097a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <setSegments>:
uint8_t MinutsSecondDigit;
uint8_t prevHour = 0;



void setSegments(uint8_t number) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
        0b00000111, // 7
        0b01111111, // 8
        0b01101111  // 9
    };

    uint8_t segments = segmentMap[number];
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a2c      	ldr	r2, [pc, #176]	; (800063c <setSegments+0xc0>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	73fb      	strb	r3, [r7, #15]

    GPIO_PinState PinA_State = (segments & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState PinB_State = (segments & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	105b      	asrs	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	737b      	strb	r3, [r7, #13]
    GPIO_PinState PinC_State = (segments & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	109b      	asrs	r3, r3, #2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	733b      	strb	r3, [r7, #12]
    GPIO_PinState PinD_State = (segments & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	10db      	asrs	r3, r3, #3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	72fb      	strb	r3, [r7, #11]
    GPIO_PinState PinE_State = (segments & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	111b      	asrs	r3, r3, #4
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	72bb      	strb	r3, [r7, #10]
    GPIO_PinState PinF_State = (segments & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	115b      	asrs	r3, r3, #5
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	727b      	strb	r3, [r7, #9]
    GPIO_PinState PinG_State = (segments & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	119b      	asrs	r3, r3, #6
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	723b      	strb	r3, [r7, #8]

    // Corresponding HAL_GPIO_WritePin calls
    HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, PinA_State);
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	461a      	mov	r2, r3
 80005e2:	2101      	movs	r1, #1
 80005e4:	4816      	ldr	r0, [pc, #88]	; (8000640 <setSegments+0xc4>)
 80005e6:	f002 fb65 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, PinB_State);
 80005ea:	7b7b      	ldrb	r3, [r7, #13]
 80005ec:	461a      	mov	r2, r3
 80005ee:	2102      	movs	r1, #2
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <setSegments+0xc4>)
 80005f2:	f002 fb5f 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, PinC_State);
 80005f6:	7b3b      	ldrb	r3, [r7, #12]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2110      	movs	r1, #16
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <setSegments+0xc4>)
 80005fe:	f002 fb59 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, PinD_State);
 8000602:	7afb      	ldrb	r3, [r7, #11]
 8000604:	461a      	mov	r2, r3
 8000606:	2101      	movs	r1, #1
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <setSegments+0xc8>)
 800060a:	f002 fb53 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, PinE_State);
 800060e:	7abb      	ldrb	r3, [r7, #10]
 8000610:	461a      	mov	r2, r3
 8000612:	2102      	movs	r1, #2
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <setSegments+0xcc>)
 8000616:	f002 fb4d 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, PinF_State);
 800061a:	7a7b      	ldrb	r3, [r7, #9]
 800061c:	461a      	mov	r2, r3
 800061e:	2101      	movs	r1, #1
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <setSegments+0xcc>)
 8000622:	f002 fb47 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, PinG_State);
 8000626:	7a3b      	ldrb	r3, [r7, #8]
 8000628:	461a      	mov	r2, r3
 800062a:	2104      	movs	r1, #4
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <setSegments+0xcc>)
 800062e:	f002 fb41 	bl	8002cb4 <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	08009884 	.word	0x08009884
 8000640:	40020000 	.word	0x40020000
 8000644:	40020400 	.word	0x40020400
 8000648:	40020800 	.word	0x40020800

0800064c <SetCathode>:

void SetCathode(uint8_t Digit)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState Cathode1_Pin_State = (Digit & 0b00000001)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf0c      	ite	eq
 8000660:	2301      	moveq	r3, #1
 8000662:	2300      	movne	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState Cathode2_Pin_State = (Digit & 0b00000010)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(Cathode_1_GPIO_Port, Cathode_1_Pin, Cathode1_Pin_State);
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	461a      	mov	r2, r3
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <SetCathode+0x54>)
 8000684:	f002 fb16 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Cathode_2_GPIO_Port, Cathode_2_Pin, Cathode2_Pin_State);
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	461a      	mov	r2, r3
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <SetCathode+0x54>)
 8000692:	f002 fb0f 	bl	8002cb4 <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020800 	.word	0x40020800

080006a4 <WriteDigit>:

void WriteDigit(uint8_t Digit,uint8_t number)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
	setSegments(number);
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff60 	bl	800057c <setSegments>
	SetCathode(Digit);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffc4 	bl	800064c <SetCathode>

}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <WriteNumber>:

void WriteNumber(uint8_t number)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
    // Ensure the number is within the range of two digits (0-99)
    if (number > 99) {
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b63      	cmp	r3, #99	; 0x63
 80006da:	d821      	bhi.n	8000720 <WriteNumber+0x54>
        return; // Or handle the error as needed
    }

    uint8_t firstDigit = number / 10;  // Extract the first digit
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <WriteNumber+0x5c>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	73fb      	strb	r3, [r7, #15]
    uint8_t secondDigit = number % 10; // Extract the second digit
 80006e8:	79fa      	ldrb	r2, [r7, #7]
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <WriteNumber+0x5c>)
 80006ec:	fba3 1302 	umull	r1, r3, r3, r2
 80006f0:	08d9      	lsrs	r1, r3, #3
 80006f2:	460b      	mov	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	73bb      	strb	r3, [r7, #14]
  //  for(uint8_t counter = 0; counter <20; counter++ )
   //{
    // Display the first digit
    WriteDigit(1, firstDigit);
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	4619      	mov	r1, r3
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ffce 	bl	80006a4 <WriteDigit>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 8000708:	2005      	movs	r0, #5
 800070a:	f004 ffce 	bl	80056aa <osDelay>

    // Display the second digit
    WriteDigit(2, secondDigit);
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	4619      	mov	r1, r3
 8000712:	2002      	movs	r0, #2
 8000714:	f7ff ffc6 	bl	80006a4 <WriteDigit>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 8000718:	2005      	movs	r0, #5
 800071a:	f004 ffc6 	bl	80056aa <osDelay>
 800071e:	e000      	b.n	8000722 <WriteNumber+0x56>
        return; // Or handle the error as needed
 8000720:	bf00      	nop
}
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	cccccccd 	.word	0xcccccccd

0800072c <FourDigitsetSegments>:

void FourDigitsetSegments(uint8_t number) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
        0b00110111, // 15 (M, simplified representation)
        0b01110011  // 16 (P)
    };


    uint8_t segments = segmentMap[number];
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4a32      	ldr	r2, [pc, #200]	; (8000804 <FourDigitsetSegments+0xd8>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	75fb      	strb	r3, [r7, #23]

    GPIO_PinState FourDigitsPinA_State = (segments & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	75bb      	strb	r3, [r7, #22]
    GPIO_PinState FourDigitsPinB_State = (segments & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	105b      	asrs	r3, r3, #1
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	757b      	strb	r3, [r7, #21]
    GPIO_PinState FourDigitsPinC_State = (segments & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	109b      	asrs	r3, r3, #2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	753b      	strb	r3, [r7, #20]
    GPIO_PinState FourDigitsPinD_State = (segments & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800075e:	7dfb      	ldrb	r3, [r7, #23]
 8000760:	10db      	asrs	r3, r3, #3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	74fb      	strb	r3, [r7, #19]
    GPIO_PinState FourDigitsPinE_State = (segments & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	111b      	asrs	r3, r3, #4
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	74bb      	strb	r3, [r7, #18]
    GPIO_PinState FourDigitsPinF_State = (segments & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	115b      	asrs	r3, r3, #5
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	747b      	strb	r3, [r7, #17]
    GPIO_PinState FourDigitsPinG_State = (segments & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000782:	7dfb      	ldrb	r3, [r7, #23]
 8000784:	119b      	asrs	r3, r3, #6
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	743b      	strb	r3, [r7, #16]
    GPIO_PinState FourDigitsPinDP_State = (segments & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	09db      	lsrs	r3, r3, #7
 8000792:	73fb      	strb	r3, [r7, #15]

    // Corresponding HAL_GPIO_WritePin calls
    HAL_GPIO_WritePin(FourDigitA_GPIO_Port, FourDigitA_Pin, FourDigitsPinA_State);
 8000794:	7dbb      	ldrb	r3, [r7, #22]
 8000796:	461a      	mov	r2, r3
 8000798:	2104      	movs	r1, #4
 800079a:	481b      	ldr	r0, [pc, #108]	; (8000808 <FourDigitsetSegments+0xdc>)
 800079c:	f002 fa8a 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitB_GPIO_Port, FourDigitB_Pin, FourDigitsPinB_State);
 80007a0:	7d7b      	ldrb	r3, [r7, #21]
 80007a2:	461a      	mov	r2, r3
 80007a4:	2102      	movs	r1, #2
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007a8:	f002 fa84 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitC_GPIO_Port, FourDigitC_Pin, FourDigitsPinC_State);
 80007ac:	7d3b      	ldrb	r3, [r7, #20]
 80007ae:	461a      	mov	r2, r3
 80007b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b4:	4814      	ldr	r0, [pc, #80]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007b6:	f002 fa7d 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD_GPIO_Port, FourDigitD_Pin, FourDigitsPinD_State);
 80007ba:	7cfb      	ldrb	r3, [r7, #19]
 80007bc:	461a      	mov	r2, r3
 80007be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007c4:	f002 fa76 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitE_GPIO_Port, FourDigitE_Pin, FourDigitsPinE_State);
 80007c8:	7cbb      	ldrb	r3, [r7, #18]
 80007ca:	461a      	mov	r2, r3
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007d2:	f002 fa6f 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitF_GPIO_Port, FourDigitF_Pin, FourDigitsPinF_State);
 80007d6:	7c7b      	ldrb	r3, [r7, #17]
 80007d8:	461a      	mov	r2, r3
 80007da:	2110      	movs	r1, #16
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <FourDigitsetSegments+0xe0>)
 80007de:	f002 fa69 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitG_GPIO_Port, FourDigitG_Pin, FourDigitsPinG_State);
 80007e2:	7c3b      	ldrb	r3, [r7, #16]
 80007e4:	461a      	mov	r2, r3
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <FourDigitsetSegments+0xe4>)
 80007ec:	f002 fa62 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, FourDigitsPinDP_State);
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	461a      	mov	r2, r3
 80007f4:	2110      	movs	r1, #16
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007f8:	f002 fa5c 	bl	8002cb4 <HAL_GPIO_WritePin>

}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08009890 	.word	0x08009890
 8000808:	40020400 	.word	0x40020400
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <FourDigitsSetCathode>:

void FourDigitsSetCathode(uint8_t Digit)
{	//Problem Here
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState FourDigitsCathodeD1_Pin_State = (Digit == 1)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b01      	cmp	r3, #1
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState FourDigitsCathodeD2_Pin_State = (Digit == 2)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b02      	cmp	r3, #2
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState FourDigitsCathodeD3_Pin_State = (Digit == 3)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b03      	cmp	r3, #3
 800083e:	bf14      	ite	ne
 8000840:	2301      	movne	r3, #1
 8000842:	2300      	moveq	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	737b      	strb	r3, [r7, #13]
	GPIO_PinState FourDigitsCathodeD4_Pin_State = (Digit == 4)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b04      	cmp	r3, #4
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	733b      	strb	r3, [r7, #12]



    HAL_GPIO_WritePin(FourDigitD1_GPIO_Port, FourDigitD1_Pin, FourDigitsCathodeD1_Pin_State);
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	461a      	mov	r2, r3
 800085a:	2120      	movs	r1, #32
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <FourDigitsSetCathode+0x80>)
 800085e:	f002 fa29 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD2_GPIO_Port, FourDigitD2_Pin, FourDigitsCathodeD2_Pin_State);
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	461a      	mov	r2, r3
 8000866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <FourDigitsSetCathode+0x84>)
 800086c:	f002 fa22 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD3_GPIO_Port, FourDigitD3_Pin, FourDigitsCathodeD3_Pin_State);
 8000870:	7b7b      	ldrb	r3, [r7, #13]
 8000872:	461a      	mov	r2, r3
 8000874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <FourDigitsSetCathode+0x84>)
 800087a:	f002 fa1b 	bl	8002cb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD4_GPIO_Port, FourDigitD4_Pin, FourDigitsCathodeD4_Pin_State);
 800087e:	7b3b      	ldrb	r3, [r7, #12]
 8000880:	461a      	mov	r2, r3
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <FourDigitsSetCathode+0x84>)
 8000886:	f002 fa15 	bl	8002cb4 <HAL_GPIO_WritePin>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40020400 	.word	0x40020400
 8000898:	40020000 	.word	0x40020000

0800089c <FourDigitsWrite>:
void FourDigitsWrite(uint8_t Digit,uint8_t number)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
	FourDigitsetSegments(number);
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff3c 	bl	800072c <FourDigitsetSegments>
	FourDigitsSetCathode(Digit);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffac 	bl	8000814 <FourDigitsSetCathode>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <DisplayTime>:
	  FourDigitsSetCathode(3);
	  HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, State);
}

void DisplayTime(RTC_TimeTypeDef Time, RTC_DateTypeDef Date, osMutexId_t UartMutexHandle)
{
 80008c4:	b084      	sub	sp, #16
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	f107 0c10 	add.w	ip, r7, #16
 80008d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f107 0110 	add.w	r1, r7, #16
 80008da:	485a      	ldr	r0, [pc, #360]	; (8000a44 <DisplayTime+0x180>)
 80008dc:	f003 f8f2 	bl	8003ac4 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	2200      	movs	r2, #0
 80008e6:	4619      	mov	r1, r3
 80008e8:	4856      	ldr	r0, [pc, #344]	; (8000a44 <DisplayTime+0x180>)
 80008ea:	f003 f9cd 	bl	8003c88 <HAL_RTC_GetDate>


	  HoursFirstDigit = Time.Hours / 10;  // Extract the first digit
 80008ee:	7c3b      	ldrb	r3, [r7, #16]
 80008f0:	4a55      	ldr	r2, [pc, #340]	; (8000a48 <DisplayTime+0x184>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b54      	ldr	r3, [pc, #336]	; (8000a4c <DisplayTime+0x188>)
 80008fc:	701a      	strb	r2, [r3, #0]
	  HoursSecondDigit=Time.Hours % 10; // Extract the second digit
 80008fe:	7c3a      	ldrb	r2, [r7, #16]
 8000900:	4b51      	ldr	r3, [pc, #324]	; (8000a48 <DisplayTime+0x184>)
 8000902:	fba3 1302 	umull	r1, r3, r3, r2
 8000906:	08d9      	lsrs	r1, r3, #3
 8000908:	460b      	mov	r3, r1
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	440b      	add	r3, r1
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b4e      	ldr	r3, [pc, #312]	; (8000a50 <DisplayTime+0x18c>)
 8000916:	701a      	strb	r2, [r3, #0]

	  MinutsFirstDigit = Time.Minutes / 10;  // Extract the first digit
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	4a4b      	ldr	r2, [pc, #300]	; (8000a48 <DisplayTime+0x184>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	08db      	lsrs	r3, r3, #3
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <DisplayTime+0x190>)
 8000926:	701a      	strb	r2, [r3, #0]
	  MinutsSecondDigit=Time.Minutes % 10; // Extract the second digit
 8000928:	7c7a      	ldrb	r2, [r7, #17]
 800092a:	4b47      	ldr	r3, [pc, #284]	; (8000a48 <DisplayTime+0x184>)
 800092c:	fba3 1302 	umull	r1, r3, r3, r2
 8000930:	08d9      	lsrs	r1, r3, #3
 8000932:	460b      	mov	r3, r1
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	440b      	add	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b46      	ldr	r3, [pc, #280]	; (8000a58 <DisplayTime+0x194>)
 8000940:	701a      	strb	r2, [r3, #0]


	    // Display the first digit
	    FourDigitsWrite(4, HoursFirstDigit);
 8000942:	4b42      	ldr	r3, [pc, #264]	; (8000a4c <DisplayTime+0x188>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	2004      	movs	r0, #4
 800094a:	f7ff ffa7 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 800094e:	2001      	movs	r0, #1
 8000950:	f004 feab 	bl	80056aa <osDelay>

	    // Display the second digit
	    FourDigitsWrite(3, HoursSecondDigit);
 8000954:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <DisplayTime+0x18c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	2003      	movs	r0, #3
 800095c:	f7ff ff9e 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000960:	2001      	movs	r0, #1
 8000962:	f004 fea2 	bl	80056aa <osDelay>


	    FourDigitsWrite(2, MinutsFirstDigit);
 8000966:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <DisplayTime+0x190>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff ff95 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000972:	2001      	movs	r0, #1
 8000974:	f004 fe99 	bl	80056aa <osDelay>

	    FourDigitsWrite(1, MinutsSecondDigit);
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <DisplayTime+0x194>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff ff8c 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000984:	2001      	movs	r0, #1
 8000986:	f004 fe90 	bl	80056aa <osDelay>

		  if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <DisplayTime+0x180>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b40      	cmp	r3, #64	; 0x40
 8000990:	d109      	bne.n	80009a6 <DisplayTime+0xe2>
		  {

		    if (Time.TimeFormat == RTC_HOURFORMAT12_PM) {
 8000992:	7cfb      	ldrb	r3, [r7, #19]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d106      	bne.n	80009a6 <DisplayTime+0xe2>
		    	   FourDigitsWrite(1, 10);
 8000998:	210a      	movs	r1, #10
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff ff7e 	bl	800089c <FourDigitsWrite>
		    	osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 fe82 	bl	80056aa <osDelay>





	    	uint32_t currentTick = osKernelGetTickCount();
 80009a6:	f004 fdd9 	bl	800555c <osKernelGetTickCount>
 80009aa:	6078      	str	r0, [r7, #4]
	    	 if (currentTick - lastTick >= 500) {
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <DisplayTime+0x198>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009b8:	d311      	bcc.n	80009de <DisplayTime+0x11a>
	    		 DpState = !DpState;
 80009ba:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <DisplayTime+0x19c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bf14      	ite	ne
 80009c2:	2301      	movne	r3, #1
 80009c4:	2300      	moveq	r3, #0
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f083 0301 	eor.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <DisplayTime+0x19c>)
 80009d6:	701a      	strb	r2, [r3, #0]
	    	       lastTick = currentTick;
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <DisplayTime+0x198>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
	    	        }
	    if(DpState)
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <DisplayTime+0x19c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d004      	beq.n	80009f0 <DisplayTime+0x12c>
	    {
	    	FourDigitsWrite(3, 10);
 80009e6:	210a      	movs	r1, #10
 80009e8:	2003      	movs	r0, #3
 80009ea:	f7ff ff57 	bl	800089c <FourDigitsWrite>
 80009ee:	e003      	b.n	80009f8 <DisplayTime+0x134>
	    }
	    else
	    {
	    	FourDigitsWrite(3, 11);
 80009f0:	210b      	movs	r1, #11
 80009f2:	2003      	movs	r0, #3
 80009f4:	f7ff ff52 	bl	800089c <FourDigitsWrite>
	    }
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 80009f8:	2001      	movs	r0, #1
 80009fa:	f004 fe56 	bl	80056aa <osDelay>

	    //Update AM PM manualy
	    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <DisplayTime+0x180>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b40      	cmp	r3, #64	; 0x40
 8000a04:	d113      	bne.n	8000a2e <DisplayTime+0x16a>
	    {
	           // Check if the hour has transitioned from 12 to 1
	           if (prevHour == 12 && Time.Hours == 1)
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <DisplayTime+0x1a0>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b0c      	cmp	r3, #12
 8000a0c:	d10f      	bne.n	8000a2e <DisplayTime+0x16a>
 8000a0e:	7c3b      	ldrb	r3, [r7, #16]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10c      	bne.n	8000a2e <DisplayTime+0x16a>
	           {
	               // Toggle AM/PM
	               Time.TimeFormat = (Time.TimeFormat == RTC_HOURFORMAT12_AM) ? RTC_HOURFORMAT12_PM : RTC_HOURFORMAT12_AM;
 8000a14:	7cfb      	ldrb	r3, [r7, #19]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf0c      	ite	eq
 8000a1a:	2301      	moveq	r3, #1
 8000a1c:	2300      	movne	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	74fb      	strb	r3, [r7, #19]
	               HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN); // Update the RTC time
 8000a22:	2200      	movs	r2, #0
 8000a24:	f107 0110 	add.w	r1, r7, #16
 8000a28:	4806      	ldr	r0, [pc, #24]	; (8000a44 <DisplayTime+0x180>)
 8000a2a:	f002 ffb1 	bl	8003990 <HAL_RTC_SetTime>
	           }

	    }
	    prevHour = Time.Hours;
 8000a2e:	7c3a      	ldrb	r2, [r7, #16]
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <DisplayTime+0x1a0>)
 8000a32:	701a      	strb	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a3e:	b004      	add	sp, #16
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	200000d0 	.word	0x200000d0
 8000a48:	cccccccd 	.word	0xcccccccd
 8000a4c:	2000008f 	.word	0x2000008f
 8000a50:	20000090 	.word	0x20000090
 8000a54:	20000091 	.word	0x20000091
 8000a58:	20000092 	.word	0x20000092
 8000a5c:	20000088 	.word	0x20000088
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	20000093 	.word	0x20000093

08000a68 <DisplaySetMinutes>:

void DisplaySetMinutes(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000a68:	b084      	sub	sp, #16
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	f107 0c10 	add.w	ip, r7, #16
 8000a74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f107 0110 	add.w	r1, r7, #16
 8000a7e:	484a      	ldr	r0, [pc, #296]	; (8000ba8 <DisplaySetMinutes+0x140>)
 8000a80:	f003 f820 	bl	8003ac4 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4846      	ldr	r0, [pc, #280]	; (8000ba8 <DisplaySetMinutes+0x140>)
 8000a8e:	f003 f8fb 	bl	8003c88 <HAL_RTC_GetDate>

	  HoursFirstDigit = Time.Hours / 10;  // Extract the first digit
 8000a92:	7c3b      	ldrb	r3, [r7, #16]
 8000a94:	4a45      	ldr	r2, [pc, #276]	; (8000bac <DisplaySetMinutes+0x144>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b44      	ldr	r3, [pc, #272]	; (8000bb0 <DisplaySetMinutes+0x148>)
 8000aa0:	701a      	strb	r2, [r3, #0]
	  HoursSecondDigit=Time.Hours % 10; // Extract the second digit
 8000aa2:	7c3a      	ldrb	r2, [r7, #16]
 8000aa4:	4b41      	ldr	r3, [pc, #260]	; (8000bac <DisplaySetMinutes+0x144>)
 8000aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aaa:	08d9      	lsrs	r1, r3, #3
 8000aac:	460b      	mov	r3, r1
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <DisplaySetMinutes+0x14c>)
 8000aba:	701a      	strb	r2, [r3, #0]

	  MinutsFirstDigit = Time.Minutes / 10;  // Extract the first digit
 8000abc:	7c7b      	ldrb	r3, [r7, #17]
 8000abe:	4a3b      	ldr	r2, [pc, #236]	; (8000bac <DisplaySetMinutes+0x144>)
 8000ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac4:	08db      	lsrs	r3, r3, #3
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <DisplaySetMinutes+0x150>)
 8000aca:	701a      	strb	r2, [r3, #0]
	  MinutsSecondDigit=Time.Minutes % 10; // Extract the second digit
 8000acc:	7c7a      	ldrb	r2, [r7, #17]
 8000ace:	4b37      	ldr	r3, [pc, #220]	; (8000bac <DisplaySetMinutes+0x144>)
 8000ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ad4:	08d9      	lsrs	r1, r3, #3
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	440b      	add	r3, r1
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <DisplaySetMinutes+0x154>)
 8000ae4:	701a      	strb	r2, [r3, #0]

	 uint32_t currentTick = osKernelGetTickCount();
 8000ae6:	f004 fd39 	bl	800555c <osKernelGetTickCount>
 8000aea:	6078      	str	r0, [r7, #4]

	 if (currentTick - lastTick >= 500) {
 8000aec:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <DisplaySetMinutes+0x158>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000af8:	d311      	bcc.n	8000b1e <DisplaySetMinutes+0xb6>
		 MinutesState = !MinutesState;
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <DisplaySetMinutes+0x15c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf14      	ite	ne
 8000b02:	2301      	movne	r3, #1
 8000b04:	2300      	moveq	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f083 0301 	eor.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <DisplaySetMinutes+0x15c>)
 8000b16:	701a      	strb	r2, [r3, #0]
	 	    	       lastTick = currentTick;
 8000b18:	4a29      	ldr	r2, [pc, #164]	; (8000bc0 <DisplaySetMinutes+0x158>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
	 	    	        }


	    FourDigitsWrite(4, HoursFirstDigit);
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <DisplaySetMinutes+0x148>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4619      	mov	r1, r3
 8000b24:	2004      	movs	r0, #4
 8000b26:	f7ff feb9 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f004 fdbd 	bl	80056aa <osDelay>

	    // Display the second digit
	    FourDigitsWrite(3, HoursSecondDigit);
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <DisplaySetMinutes+0x14c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	2003      	movs	r0, #3
 8000b38:	f7ff feb0 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f004 fdb4 	bl	80056aa <osDelay>

		  if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <DisplaySetMinutes+0x140>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b40      	cmp	r3, #64	; 0x40
 8000b48:	d109      	bne.n	8000b5e <DisplaySetMinutes+0xf6>
		  {

		    if (Time.TimeFormat == RTC_HOURFORMAT12_PM) {
 8000b4a:	7cfb      	ldrb	r3, [r7, #19]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d106      	bne.n	8000b5e <DisplaySetMinutes+0xf6>
		    	   FourDigitsWrite(1, 10);
 8000b50:	210a      	movs	r1, #10
 8000b52:	2001      	movs	r0, #1
 8000b54:	f7ff fea2 	bl	800089c <FourDigitsWrite>
		    	osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f004 fda6 	bl	80056aa <osDelay>
		  }




	    if(MinutesState)
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <DisplaySetMinutes+0x15c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d012      	beq.n	8000b8c <DisplaySetMinutes+0x124>
	    {
		    FourDigitsWrite(2, MinutsFirstDigit);
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <DisplaySetMinutes+0x150>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fe95 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000b72:	2001      	movs	r0, #1
 8000b74:	f004 fd99 	bl	80056aa <osDelay>

		    FourDigitsWrite(1, MinutsSecondDigit);
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <DisplaySetMinutes+0x154>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fe8c 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000b84:	2001      	movs	r0, #1
 8000b86:	f004 fd90 	bl	80056aa <osDelay>
	    {
	    	FourDigitsWrite(3, 11);
	    	osDelay(pdMS_TO_TICKS(1));
	    }

}
 8000b8a:	e006      	b.n	8000b9a <DisplaySetMinutes+0x132>
	    	FourDigitsWrite(3, 11);
 8000b8c:	210b      	movs	r1, #11
 8000b8e:	2003      	movs	r0, #3
 8000b90:	f7ff fe84 	bl	800089c <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1));
 8000b94:	2001      	movs	r0, #1
 8000b96:	f004 fd88 	bl	80056aa <osDelay>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr
 8000ba8:	200000d0 	.word	0x200000d0
 8000bac:	cccccccd 	.word	0xcccccccd
 8000bb0:	2000008f 	.word	0x2000008f
 8000bb4:	20000090 	.word	0x20000090
 8000bb8:	20000091 	.word	0x20000091
 8000bbc:	20000092 	.word	0x20000092
 8000bc0:	20000088 	.word	0x20000088
 8000bc4:	2000008d 	.word	0x2000008d

08000bc8 <DisplaySetHours>:


void DisplaySetHours(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000bc8:	b084      	sub	sp, #16
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	f107 0c10 	add.w	ip, r7, #16
 8000bd4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f107 0110 	add.w	r1, r7, #16
 8000bde:	484a      	ldr	r0, [pc, #296]	; (8000d08 <DisplaySetHours+0x140>)
 8000be0:	f002 ff70 	bl	8003ac4 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	2200      	movs	r2, #0
 8000bea:	4619      	mov	r1, r3
 8000bec:	4846      	ldr	r0, [pc, #280]	; (8000d08 <DisplaySetHours+0x140>)
 8000bee:	f003 f84b 	bl	8003c88 <HAL_RTC_GetDate>


	  HoursFirstDigit = Time.Hours / 10;  // Extract the first digit
 8000bf2:	7c3b      	ldrb	r3, [r7, #16]
 8000bf4:	4a45      	ldr	r2, [pc, #276]	; (8000d0c <DisplaySetHours+0x144>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	08db      	lsrs	r3, r3, #3
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <DisplaySetHours+0x148>)
 8000c00:	701a      	strb	r2, [r3, #0]
	  HoursSecondDigit=Time.Hours % 10; // Extract the second digit
 8000c02:	7c3a      	ldrb	r2, [r7, #16]
 8000c04:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <DisplaySetHours+0x144>)
 8000c06:	fba3 1302 	umull	r1, r3, r3, r2
 8000c0a:	08d9      	lsrs	r1, r3, #3
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	440b      	add	r3, r1
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <DisplaySetHours+0x14c>)
 8000c1a:	701a      	strb	r2, [r3, #0]

	  MinutsFirstDigit = Time.Minutes / 10;  // Extract the first digit
 8000c1c:	7c7b      	ldrb	r3, [r7, #17]
 8000c1e:	4a3b      	ldr	r2, [pc, #236]	; (8000d0c <DisplaySetHours+0x144>)
 8000c20:	fba2 2303 	umull	r2, r3, r2, r3
 8000c24:	08db      	lsrs	r3, r3, #3
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <DisplaySetHours+0x150>)
 8000c2a:	701a      	strb	r2, [r3, #0]
	  MinutsSecondDigit=Time.Minutes % 10; // Extract the second digit
 8000c2c:	7c7a      	ldrb	r2, [r7, #17]
 8000c2e:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <DisplaySetHours+0x144>)
 8000c30:	fba3 1302 	umull	r1, r3, r3, r2
 8000c34:	08d9      	lsrs	r1, r3, #3
 8000c36:	460b      	mov	r3, r1
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <DisplaySetHours+0x154>)
 8000c44:	701a      	strb	r2, [r3, #0]

	  if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <DisplaySetHours+0x140>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b40      	cmp	r3, #64	; 0x40
 8000c4c:	d109      	bne.n	8000c62 <DisplaySetHours+0x9a>
	  {

	    if (Time.TimeFormat == RTC_HOURFORMAT12_PM) {
 8000c4e:	7cfb      	ldrb	r3, [r7, #19]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d106      	bne.n	8000c62 <DisplaySetHours+0x9a>
	    	   FourDigitsWrite(1, 10);
 8000c54:	210a      	movs	r1, #10
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fe20 	bl	800089c <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f004 fd24 	bl	80056aa <osDelay>

	  }



	 uint32_t currentTick = osKernelGetTickCount();
 8000c62:	f004 fc7b 	bl	800555c <osKernelGetTickCount>
 8000c66:	6078      	str	r0, [r7, #4]

	 if (currentTick - lastTick >= 500) {
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <DisplaySetHours+0x158>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c74:	d311      	bcc.n	8000c9a <DisplaySetHours+0xd2>
		 HoursState = !HoursState;
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <DisplaySetHours+0x15c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf14      	ite	ne
 8000c7e:	2301      	movne	r3, #1
 8000c80:	2300      	moveq	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	f083 0301 	eor.w	r3, r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <DisplaySetHours+0x15c>)
 8000c92:	701a      	strb	r2, [r3, #0]
	 	    	       lastTick = currentTick;
 8000c94:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <DisplaySetHours+0x158>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
	 	    	        }
	 	 	 	FourDigitsWrite(2, MinutsFirstDigit);
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <DisplaySetHours+0x150>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff fdfb 	bl	800089c <FourDigitsWrite>
	 		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f004 fcff 	bl	80056aa <osDelay>

	 		    FourDigitsWrite(1, MinutsSecondDigit);
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <DisplaySetHours+0x154>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fdf2 	bl	800089c <FourDigitsWrite>
	 		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f004 fcf6 	bl	80056aa <osDelay>
	    if(HoursState)
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <DisplaySetHours+0x15c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d012      	beq.n	8000cec <DisplaySetHours+0x124>
	    {
		    FourDigitsWrite(4, HoursFirstDigit);
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <DisplaySetHours+0x148>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f7ff fde5 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f004 fce9 	bl	80056aa <osDelay>

		    FourDigitsWrite(3, HoursSecondDigit);
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <DisplaySetHours+0x14c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f7ff fddc 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f004 fce0 	bl	80056aa <osDelay>
	    else
	    {
	    	FourDigitsWrite(3, 11);
	    	osDelay(pdMS_TO_TICKS(1));
	    }
}
 8000cea:	e006      	b.n	8000cfa <DisplaySetHours+0x132>
	    	FourDigitsWrite(3, 11);
 8000cec:	210b      	movs	r1, #11
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f7ff fdd4 	bl	800089c <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1));
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f004 fcd8 	bl	80056aa <osDelay>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr
 8000d08:	200000d0 	.word	0x200000d0
 8000d0c:	cccccccd 	.word	0xcccccccd
 8000d10:	2000008f 	.word	0x2000008f
 8000d14:	20000090 	.word	0x20000090
 8000d18:	20000091 	.word	0x20000091
 8000d1c:	20000092 	.word	0x20000092
 8000d20:	20000088 	.word	0x20000088
 8000d24:	2000008e 	.word	0x2000008e

08000d28 <AddOneMinuteToRTC>:


void AddOneMinuteToRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000d28:	b084      	sub	sp, #16
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	f107 0c08 	add.w	ip, r7, #8
 8000d32:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f107 0108 	add.w	r1, r7, #8
 8000d3c:	4812      	ldr	r0, [pc, #72]	; (8000d88 <AddOneMinuteToRTC+0x60>)
 8000d3e:	f002 fec1 	bl	8003ac4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This line is necessary due to the RTC hardware design
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480f      	ldr	r0, [pc, #60]	; (8000d88 <AddOneMinuteToRTC+0x60>)
 8000d4c:	f002 ff9c 	bl	8003c88 <HAL_RTC_GetDate>

    // Add one minute
    Time.Minutes++;
 8000d50:	7a7b      	ldrb	r3, [r7, #9]
 8000d52:	3301      	adds	r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	727b      	strb	r3, [r7, #9]

    // Handle minute overflow (if it goes beyond 59, reset to 0)
    if (Time.Minutes >= 60)
 8000d58:	7a7b      	ldrb	r3, [r7, #9]
 8000d5a:	2b3b      	cmp	r3, #59	; 0x3b
 8000d5c:	d901      	bls.n	8000d62 <AddOneMinuteToRTC+0x3a>
    {
        Time.Minutes = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	727b      	strb	r3, [r7, #9]
        // No change to the hours
    }

    // Set the new time
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f107 0108 	add.w	r1, r7, #8
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <AddOneMinuteToRTC+0x60>)
 8000d6a:	f002 fe11 	bl	8003990 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Set the date again due to the RTC hardware design
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <AddOneMinuteToRTC+0x60>)
 8000d78:	f002 ff02 	bl	8003b80 <HAL_RTC_SetDate>
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr
 8000d88:	200000d0 	.word	0x200000d0

08000d8c <SubtractOneMinuteFromRTC>:

void SubtractOneMinuteFromRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	f107 0c08 	add.w	ip, r7, #8
 8000d96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f107 0108 	add.w	r1, r7, #8
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <SubtractOneMinuteFromRTC+0x64>)
 8000da2:	f002 fe8f 	bl	8003ac4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This line is necessary due to the RTC hardware design
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	4810      	ldr	r0, [pc, #64]	; (8000df0 <SubtractOneMinuteFromRTC+0x64>)
 8000db0:	f002 ff6a 	bl	8003c88 <HAL_RTC_GetDate>

    // Check if the minutes are at 0, and if so, wrap around to 59
    if (Time.Minutes == 0) {
 8000db4:	7a7b      	ldrb	r3, [r7, #9]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <SubtractOneMinuteFromRTC+0x34>
        Time.Minutes = 59;
 8000dba:	233b      	movs	r3, #59	; 0x3b
 8000dbc:	727b      	strb	r3, [r7, #9]
 8000dbe:	e003      	b.n	8000dc8 <SubtractOneMinuteFromRTC+0x3c>
        // No change to the hours
    } else {
        // Subtract one minute
        Time.Minutes--;
 8000dc0:	7a7b      	ldrb	r3, [r7, #9]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	727b      	strb	r3, [r7, #9]
    }

    // Set the new time
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f107 0108 	add.w	r1, r7, #8
 8000dce:	4808      	ldr	r0, [pc, #32]	; (8000df0 <SubtractOneMinuteFromRTC+0x64>)
 8000dd0:	f002 fdde 	bl	8003990 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Set the date again due to the RTC hardware design
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <SubtractOneMinuteFromRTC+0x64>)
 8000dde:	f002 fecf 	bl	8003b80 <HAL_RTC_SetDate>
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dea:	b004      	add	sp, #16
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200000d0 	.word	0x200000d0

08000df4 <AddOneHourToRTC>:

void AddOneHourToRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000df4:	b084      	sub	sp, #16
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	f107 0c08 	add.w	ip, r7, #8
 8000dfe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <AddOneHourToRTC+0x94>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	22ca      	movs	r2, #202	; 0xca
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <AddOneHourToRTC+0x94>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2253      	movs	r2, #83	; 0x53
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24




    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f107 0108 	add.w	r1, r7, #8
 8000e18:	481b      	ldr	r0, [pc, #108]	; (8000e88 <AddOneHourToRTC+0x94>)
 8000e1a:	f002 fe53 	bl	8003ac4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This is necessary due to the RTC hardware design
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <AddOneHourToRTC+0x94>)
 8000e28:	f002 ff2e 	bl	8003c88 <HAL_RTC_GetDate>

    // Add one hour
    Time.Hours++;
 8000e2c:	7a3b      	ldrb	r3, [r7, #8]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	723b      	strb	r3, [r7, #8]

    // Handle hour overflow (if it goes beyond 23, reset to 0)
    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <AddOneHourToRTC+0x94>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b40      	cmp	r3, #64	; 0x40
 8000e3a:	d105      	bne.n	8000e48 <AddOneHourToRTC+0x54>
        if (Time.Hours >= 13)
 8000e3c:	7a3b      	ldrb	r3, [r7, #8]
 8000e3e:	2b0c      	cmp	r3, #12
 8000e40:	d90b      	bls.n	8000e5a <AddOneHourToRTC+0x66>
        {
            Time.Hours = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	723b      	strb	r3, [r7, #8]
 8000e46:	e008      	b.n	8000e5a <AddOneHourToRTC+0x66>
        }
    }
    else if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <AddOneHourToRTC+0x94>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d104      	bne.n	8000e5a <AddOneHourToRTC+0x66>
    {
			if (Time.Hours >= 24)
 8000e50:	7a3b      	ldrb	r3, [r7, #8]
 8000e52:	2b17      	cmp	r3, #23
 8000e54:	d901      	bls.n	8000e5a <AddOneHourToRTC+0x66>
			{
				Time.Hours = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	723b      	strb	r3, [r7, #8]
			}
    }
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f107 0108 	add.w	r1, r7, #8
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <AddOneHourToRTC+0x94>)
 8000e62:	f002 fd95 	bl	8003990 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <AddOneHourToRTC+0x94>)
 8000e70:	f002 fe86 	bl	8003b80 <HAL_RTC_SetDate>
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <AddOneHourToRTC+0x94>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	22ff      	movs	r2, #255	; 0xff
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e84:	b004      	add	sp, #16
 8000e86:	4770      	bx	lr
 8000e88:	200000d0 	.word	0x200000d0

08000e8c <SubtractOneHourFromRTC>:

void SubtractOneHourFromRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	f107 0c08 	add.w	ip, r7, #8
 8000e96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <SubtractOneHourFromRTC+0xa0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	22ca      	movs	r2, #202	; 0xca
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <SubtractOneHourFromRTC+0xa0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2253      	movs	r2, #83	; 0x53
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f107 0108 	add.w	r1, r7, #8
 8000eb0:	481e      	ldr	r0, [pc, #120]	; (8000f2c <SubtractOneHourFromRTC+0xa0>)
 8000eb2:	f002 fe07 	bl	8003ac4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This is necessary due to the RTC hardware design
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481b      	ldr	r0, [pc, #108]	; (8000f2c <SubtractOneHourFromRTC+0xa0>)
 8000ec0:	f002 fee2 	bl	8003c88 <HAL_RTC_GetDate>



    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <SubtractOneHourFromRTC+0xa0>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b40      	cmp	r3, #64	; 0x40
 8000eca:	d10a      	bne.n	8000ee2 <SubtractOneHourFromRTC+0x56>
    	  	  if (Time.Hours == 1)
 8000ecc:	7a3b      	ldrb	r3, [r7, #8]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d102      	bne.n	8000ed8 <SubtractOneHourFromRTC+0x4c>
    	  	  {
    	  		  Time.Hours = 12;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	723b      	strb	r3, [r7, #8]
 8000ed6:	e012      	b.n	8000efe <SubtractOneHourFromRTC+0x72>
    	  	  }
    	    else
    	    {

              Time.Hours--;
 8000ed8:	7a3b      	ldrb	r3, [r7, #8]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	723b      	strb	r3, [r7, #8]
 8000ee0:	e00d      	b.n	8000efe <SubtractOneHourFromRTC+0x72>
    	     }
       }

       else if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <SubtractOneHourFromRTC+0xa0>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d109      	bne.n	8000efe <SubtractOneHourFromRTC+0x72>
       {
    	   if (Time.Hours == 0) {
 8000eea:	7a3b      	ldrb	r3, [r7, #8]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <SubtractOneHourFromRTC+0x6a>
    	           Time.Hours = 23;
 8000ef0:	2317      	movs	r3, #23
 8000ef2:	723b      	strb	r3, [r7, #8]
 8000ef4:	e003      	b.n	8000efe <SubtractOneHourFromRTC+0x72>
    	           // No change to the date
    	       } else {
    	           // Subtract one hour
    	           Time.Hours--;
 8000ef6:	7a3b      	ldrb	r3, [r7, #8]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	723b      	strb	r3, [r7, #8]
    	       }
       }
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f107 0108 	add.w	r1, r7, #8
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <SubtractOneHourFromRTC+0xa0>)
 8000f06:	f002 fd43 	bl	8003990 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <SubtractOneHourFromRTC+0xa0>)
 8000f14:	f002 fe34 	bl	8003b80 <HAL_RTC_SetDate>
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <SubtractOneHourFromRTC+0xa0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f28:	b004      	add	sp, #16
 8000f2a:	4770      	bx	lr
 8000f2c:	200000d0 	.word	0x200000d0

08000f30 <ShowTimeFormat>:

void ShowTimeFormat(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000f30:	b084      	sub	sp, #16
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	f107 0c08 	add.w	ip, r7, #8
 8000f3a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <ShowTimeFormat+0x98>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	22ca      	movs	r2, #202	; 0xca
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <ShowTimeFormat+0x98>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2253      	movs	r2, #83	; 0x53
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
			FourDigitsWrite(1, 13);
 8000f4e:	210d      	movs	r1, #13
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff fca3 	bl	800089c <FourDigitsWrite>
			osDelay(pdMS_TO_TICKS(5));
 8000f56:	2005      	movs	r0, #5
 8000f58:	f004 fba7 	bl	80056aa <osDelay>


			FourDigitsWrite(2, 12);
 8000f5c:	210c      	movs	r1, #12
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f7ff fc9c 	bl	800089c <FourDigitsWrite>
			osDelay(pdMS_TO_TICKS(5));
 8000f64:	2005      	movs	r0, #5
 8000f66:	f004 fba0 	bl	80056aa <osDelay>


		if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <ShowTimeFormat+0x98>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10d      	bne.n	8000f8e <ShowTimeFormat+0x5e>
		{
		    FourDigitsWrite(3, 4);
 8000f72:	2104      	movs	r1, #4
 8000f74:	2003      	movs	r0, #3
 8000f76:	f7ff fc91 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(5));
 8000f7a:	2005      	movs	r0, #5
 8000f7c:	f004 fb95 	bl	80056aa <osDelay>

		    FourDigitsWrite(4, 2);
 8000f80:	2102      	movs	r1, #2
 8000f82:	2004      	movs	r0, #4
 8000f84:	f7ff fc8a 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(5));
 8000f88:	2005      	movs	r0, #5
 8000f8a:	f004 fb8e 	bl	80056aa <osDelay>
		}
		if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <ShowTimeFormat+0x98>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b40      	cmp	r3, #64	; 0x40
 8000f94:	d10d      	bne.n	8000fb2 <ShowTimeFormat+0x82>
		{
		    FourDigitsWrite(3, 2);
 8000f96:	2102      	movs	r1, #2
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f7ff fc7f 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(5));
 8000f9e:	2005      	movs	r0, #5
 8000fa0:	f004 fb83 	bl	80056aa <osDelay>

		    FourDigitsWrite(4, 1);
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	2004      	movs	r0, #4
 8000fa8:	f7ff fc78 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(5));
 8000fac:	2005      	movs	r0, #5
 8000fae:	f004 fb7c 	bl	80056aa <osDelay>
		}
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <ShowTimeFormat+0x98>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	22ff      	movs	r2, #255	; 0xff
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fc2:	b004      	add	sp, #16
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200000d0 	.word	0x200000d0

08000fcc <ChangeTimeFormat>:


void ChangeTimeFormat(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef Time;
    RTC_DateTypeDef Date;

    // Unlock the RTC
    __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <ChangeTimeFormat+0xc0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	22ca      	movs	r2, #202	; 0xca
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <ChangeTimeFormat+0xc0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2253      	movs	r2, #83	; 0x53
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24

    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4828      	ldr	r0, [pc, #160]	; (800108c <ChangeTimeFormat+0xc0>)
 8000fea:	f002 fd6b 	bl	8003ac4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Necessary to unlock the shadow registers
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4825      	ldr	r0, [pc, #148]	; (800108c <ChangeTimeFormat+0xc0>)
 8000ff6:	f002 fe47 	bl	8003c88 <HAL_RTC_GetDate>

    // Check current format and switch
    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24) {
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <ChangeTimeFormat+0xc0>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d117      	bne.n	8001032 <ChangeTimeFormat+0x66>
        // Switching to 12-hour format
        hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <ChangeTimeFormat+0xc0>)
 8001004:	2240      	movs	r2, #64	; 0x40
 8001006:	605a      	str	r2, [r3, #4]

        // Convert 13:00 and later to PM
        if (Time.Hours >= 13) {
 8001008:	793b      	ldrb	r3, [r7, #4]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d906      	bls.n	800101c <ChangeTimeFormat+0x50>
            Time.Hours -= 12;
 800100e:	793b      	ldrb	r3, [r7, #4]
 8001010:	3b0c      	subs	r3, #12
 8001012:	b2db      	uxtb	r3, r3
 8001014:	713b      	strb	r3, [r7, #4]
            Time.TimeFormat = RTC_HOURFORMAT12_PM;
 8001016:	2301      	movs	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e020      	b.n	800105e <ChangeTimeFormat+0x92>
        } else if (Time.Hours == 0) {
 800101c:	793b      	ldrb	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d104      	bne.n	800102c <ChangeTimeFormat+0x60>
            // Convert 00:00 (midnight) to 12 AM
            Time.Hours = 12;
 8001022:	230c      	movs	r3, #12
 8001024:	713b      	strb	r3, [r7, #4]
            Time.TimeFormat = RTC_HOURFORMAT12_AM;
 8001026:	2300      	movs	r3, #0
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	e018      	b.n	800105e <ChangeTimeFormat+0x92>
        } else {
            // Morning times remain the same, set to AM
            Time.TimeFormat = RTC_HOURFORMAT12_AM;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	e015      	b.n	800105e <ChangeTimeFormat+0x92>
        }
    } else {
        // Switching to 24-hour format
        hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <ChangeTimeFormat+0xc0>)
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]

        // Convert 12 AM to 00
        if (Time.Hours == 12 && Time.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001038:	793b      	ldrb	r3, [r7, #4]
 800103a:	2b0c      	cmp	r3, #12
 800103c:	d105      	bne.n	800104a <ChangeTimeFormat+0x7e>
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <ChangeTimeFormat+0x7e>
            Time.Hours = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	713b      	strb	r3, [r7, #4]
 8001048:	e009      	b.n	800105e <ChangeTimeFormat+0x92>
        }
        // Convert PM times (except for 12 PM) by adding 12
        else if (Time.TimeFormat == RTC_HOURFORMAT12_PM && Time.Hours != 12) {
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d106      	bne.n	800105e <ChangeTimeFormat+0x92>
 8001050:	793b      	ldrb	r3, [r7, #4]
 8001052:	2b0c      	cmp	r3, #12
 8001054:	d003      	beq.n	800105e <ChangeTimeFormat+0x92>
            Time.Hours += 12;
 8001056:	793b      	ldrb	r3, [r7, #4]
 8001058:	330c      	adds	r3, #12
 800105a:	b2db      	uxtb	r3, r3
 800105c:	713b      	strb	r3, [r7, #4]
        }
    }

    // Re-initialize the RTC with the new settings
    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <ChangeTimeFormat+0xc0>)
 8001060:	f002 fc20 	bl	80038a4 <HAL_RTC_Init>
        // Handle initialization error
    }

    // Set the updated time and date
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <ChangeTimeFormat+0xc0>)
 800106c:	f002 fc90 	bl	8003990 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <ChangeTimeFormat+0xc0>)
 8001078:	f002 fd82 	bl	8003b80 <HAL_RTC_SetDate>

    // Lock the RTC
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <ChangeTimeFormat+0xc0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	22ff      	movs	r2, #255	; 0xff
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000d0 	.word	0x200000d0

08001090 <DisplayAmPm>:




void DisplayAmPm(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8001090:	b084      	sub	sp, #16
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
 8001096:	f107 0c08 	add.w	ip, r7, #8
 800109a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800109e:	2200      	movs	r2, #0
 80010a0:	f107 0108 	add.w	r1, r7, #8
 80010a4:	4820      	ldr	r0, [pc, #128]	; (8001128 <DisplayAmPm+0x98>)
 80010a6:	f002 fd0d 	bl	8003ac4 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	481d      	ldr	r0, [pc, #116]	; (8001128 <DisplayAmPm+0x98>)
 80010b4:	f002 fde8 	bl	8003c88 <HAL_RTC_GetDate>



	    FourDigitsWrite(1, 15); //M
 80010b8:	210f      	movs	r1, #15
 80010ba:	2001      	movs	r0, #1
 80010bc:	f7ff fbee 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(5));
 80010c0:	2005      	movs	r0, #5
 80010c2:	f004 faf2 	bl	80056aa <osDelay>

	    FourDigitsWrite(3, 11); //OFF
 80010c6:	210b      	movs	r1, #11
 80010c8:	2003      	movs	r0, #3
 80010ca:	f7ff fbe7 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(5));
 80010ce:	2005      	movs	r0, #5
 80010d0:	f004 faeb 	bl	80056aa <osDelay>

	    FourDigitsWrite(4, 11); //OFF
 80010d4:	210b      	movs	r1, #11
 80010d6:	2004      	movs	r0, #4
 80010d8:	f7ff fbe0 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(5));
 80010dc:	2005      	movs	r0, #5
 80010de:	f004 fae4 	bl	80056aa <osDelay>


	 			if (Time.TimeFormat == RTC_HOURFORMAT12_AM)
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d107      	bne.n	80010f8 <DisplayAmPm+0x68>
	 			{

	 			    FourDigitsWrite(2, 14); //A
 80010e8:	210e      	movs	r1, #14
 80010ea:	2002      	movs	r0, #2
 80010ec:	f7ff fbd6 	bl	800089c <FourDigitsWrite>
	 			    osDelay(pdMS_TO_TICKS(2));
 80010f0:	2002      	movs	r0, #2
 80010f2:	f004 fada 	bl	80056aa <osDelay>
	 			    FourDigitsWrite(2, 16); //P
	 			    osDelay(pdMS_TO_TICKS(2));
	 			   FourDigitsWrite(1, 10);
	 			  osDelay(pdMS_TO_TICKS(2)); // Show Dp in PM
	 			}
}
 80010f6:	e010      	b.n	800111a <DisplayAmPm+0x8a>
	 			else if (Time.TimeFormat == RTC_HOURFORMAT12_PM)
 80010f8:	7afb      	ldrb	r3, [r7, #11]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10d      	bne.n	800111a <DisplayAmPm+0x8a>
	 			    FourDigitsWrite(2, 16); //P
 80010fe:	2110      	movs	r1, #16
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff fbcb 	bl	800089c <FourDigitsWrite>
	 			    osDelay(pdMS_TO_TICKS(2));
 8001106:	2002      	movs	r0, #2
 8001108:	f004 facf 	bl	80056aa <osDelay>
	 			   FourDigitsWrite(1, 10);
 800110c:	210a      	movs	r1, #10
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff fbc4 	bl	800089c <FourDigitsWrite>
	 			  osDelay(pdMS_TO_TICKS(2)); // Show Dp in PM
 8001114:	2002      	movs	r0, #2
 8001116:	f004 fac8 	bl	80056aa <osDelay>
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001122:	b004      	add	sp, #16
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200000d0 	.word	0x200000d0

0800112c <ChangeAMPMFormat>:

void ChangeAMPMFormat(RTC_TimeTypeDef Time, RTC_DateTypeDef Date) {
 800112c:	b084      	sub	sp, #16
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
 8001132:	f107 0c08 	add.w	ip, r7, #8
 8001136:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // No need to declare sTime and sDate since we are using Time and Date passed as arguments

    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800113a:	2200      	movs	r2, #0
 800113c:	f107 0108 	add.w	r1, r7, #8
 8001140:	4814      	ldr	r0, [pc, #80]	; (8001194 <ChangeAMPMFormat+0x68>)
 8001142:	f002 fcbf 	bl	8003ac4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Necessary to unlock the shadow registers
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <ChangeAMPMFormat+0x68>)
 8001150:	f002 fd9a 	bl	8003c88 <HAL_RTC_GetDate>

    // Check if the RTC is in 12-hour format
    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <ChangeAMPMFormat+0x68>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b40      	cmp	r3, #64	; 0x40
 800115a:	d114      	bne.n	8001186 <ChangeAMPMFormat+0x5a>
        // Toggle AM/PM
        if (Time.TimeFormat == RTC_HOURFORMAT12_AM) {
 800115c:	7afb      	ldrb	r3, [r7, #11]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <ChangeAMPMFormat+0x3c>
            Time.TimeFormat = RTC_HOURFORMAT12_PM;
 8001162:	2301      	movs	r3, #1
 8001164:	72fb      	strb	r3, [r7, #11]
 8001166:	e001      	b.n	800116c <ChangeAMPMFormat+0x40>
        } else {
            Time.TimeFormat = RTC_HOURFORMAT12_AM;
 8001168:	2300      	movs	r3, #0
 800116a:	72fb      	strb	r3, [r7, #11]
        }

        // Set the new time with updated AM/PM format
        HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800116c:	2200      	movs	r2, #0
 800116e:	f107 0108 	add.w	r1, r7, #8
 8001172:	4808      	ldr	r0, [pc, #32]	; (8001194 <ChangeAMPMFormat+0x68>)
 8001174:	f002 fc0c 	bl	8003990 <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Set the date again due to RTC hardware design
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <ChangeAMPMFormat+0x68>)
 8001182:	f002 fcfd 	bl	8003b80 <HAL_RTC_SetDate>
    }
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800118e:	b004      	add	sp, #16
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200000d0 	.word	0x200000d0

08001198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_DMA_Init+0x3c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <MX_DMA_Init+0x3c>)
 80011a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_DMA_Init+0x3c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2105      	movs	r1, #5
 80011be:	200e      	movs	r0, #14
 80011c0:	f001 f842 	bl	8002248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011c4:	200e      	movs	r0, #14
 80011c6:	f001 f85b 	bl	8002280 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of UartMutex */
  UartMutexHandle = osMutexNew(&UartMutex_attributes);
 80011dc:	481b      	ldr	r0, [pc, #108]	; (800124c <MX_FREERTOS_Init+0x74>)
 80011de:	f004 fa7f 	bl	80056e0 <osMutexNew>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a1a      	ldr	r2, [pc, #104]	; (8001250 <MX_FREERTOS_Init+0x78>)
 80011e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadSpi */
  ReadSpiHandle = osThreadNew(Read_spi, NULL, &ReadSpi_attributes);
 80011e8:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <MX_FREERTOS_Init+0x7c>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	481a      	ldr	r0, [pc, #104]	; (8001258 <MX_FREERTOS_Init+0x80>)
 80011ee:	f004 f9ca 	bl	8005586 <osThreadNew>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <MX_FREERTOS_Init+0x84>)
 80011f6:	6013      	str	r3, [r2, #0]

  /* creation of TwoDigitsWrite */
  TwoDigitsWriteHandle = osThreadNew(TwoDigitsWriteTask, NULL, &TwoDigitsWrite_attributes);
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <MX_FREERTOS_Init+0x88>)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4819      	ldr	r0, [pc, #100]	; (8001264 <MX_FREERTOS_Init+0x8c>)
 80011fe:	f004 f9c2 	bl	8005586 <osThreadNew>
 8001202:	4603      	mov	r3, r0
 8001204:	4a18      	ldr	r2, [pc, #96]	; (8001268 <MX_FREERTOS_Init+0x90>)
 8001206:	6013      	str	r3, [r2, #0]

  /* creation of ShowTimeMode */
  ShowTimeModeHandle = osThreadNew(ShowTimeModeTask, NULL, &ShowTimeMode_attributes);
 8001208:	4a18      	ldr	r2, [pc, #96]	; (800126c <MX_FREERTOS_Init+0x94>)
 800120a:	2100      	movs	r1, #0
 800120c:	4818      	ldr	r0, [pc, #96]	; (8001270 <MX_FREERTOS_Init+0x98>)
 800120e:	f004 f9ba 	bl	8005586 <osThreadNew>
 8001212:	4603      	mov	r3, r0
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <MX_FREERTOS_Init+0x9c>)
 8001216:	6013      	str	r3, [r2, #0]

  /* creation of PushButtons */
  PushButtonsHandle = osThreadNew(PushButtonsTask, NULL, &PushButtons_attributes);
 8001218:	4a17      	ldr	r2, [pc, #92]	; (8001278 <MX_FREERTOS_Init+0xa0>)
 800121a:	2100      	movs	r1, #0
 800121c:	4817      	ldr	r0, [pc, #92]	; (800127c <MX_FREERTOS_Init+0xa4>)
 800121e:	f004 f9b2 	bl	8005586 <osThreadNew>
 8001222:	4603      	mov	r3, r0
 8001224:	4a16      	ldr	r2, [pc, #88]	; (8001280 <MX_FREERTOS_Init+0xa8>)
 8001226:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(ClockTask, NULL, &Clock_attributes);
 8001228:	4a16      	ldr	r2, [pc, #88]	; (8001284 <MX_FREERTOS_Init+0xac>)
 800122a:	2100      	movs	r1, #0
 800122c:	4816      	ldr	r0, [pc, #88]	; (8001288 <MX_FREERTOS_Init+0xb0>)
 800122e:	f004 f9aa 	bl	8005586 <osThreadNew>
 8001232:	4603      	mov	r3, r0
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <MX_FREERTOS_Init+0xb4>)
 8001236:	6013      	str	r3, [r2, #0]

  /* creation of SetMinutesMode */
  SetMinutesModeHandle = osThreadNew(SetMinutesModeTask, NULL, &SetMinutesMode_attributes);
 8001238:	4a15      	ldr	r2, [pc, #84]	; (8001290 <MX_FREERTOS_Init+0xb8>)
 800123a:	2100      	movs	r1, #0
 800123c:	4815      	ldr	r0, [pc, #84]	; (8001294 <MX_FREERTOS_Init+0xbc>)
 800123e:	f004 f9a2 	bl	8005586 <osThreadNew>
 8001242:	4603      	mov	r3, r0
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <MX_FREERTOS_Init+0xc0>)
 8001246:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	0800997c 	.word	0x0800997c
 8001250:	200000cc 	.word	0x200000cc
 8001254:	080098a4 	.word	0x080098a4
 8001258:	0800129d 	.word	0x0800129d
 800125c:	200000b4 	.word	0x200000b4
 8001260:	080098c8 	.word	0x080098c8
 8001264:	08001305 	.word	0x08001305
 8001268:	200000b8 	.word	0x200000b8
 800126c:	080098ec 	.word	0x080098ec
 8001270:	08001321 	.word	0x08001321
 8001274:	200000bc 	.word	0x200000bc
 8001278:	08009910 	.word	0x08009910
 800127c:	080013e1 	.word	0x080013e1
 8001280:	200000c0 	.word	0x200000c0
 8001284:	08009934 	.word	0x08009934
 8001288:	080016b5 	.word	0x080016b5
 800128c:	200000c4 	.word	0x200000c4
 8001290:	08009958 	.word	0x08009958
 8001294:	080016c5 	.word	0x080016c5
 8001298:	200000c8 	.word	0x200000c8

0800129c <Read_spi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_spi */
void Read_spi(void *argument)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_spi */
	uint16_t reading[1];
	 HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)reading, sizeof(reading));
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2202      	movs	r2, #2
 80012aa:	4619      	mov	r1, r3
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <Read_spi+0x5c>)
 80012ae:	f002 fe81 	bl	8003fb4 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  number++;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <Read_spi+0x60>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <Read_spi+0x60>)
 80012bc:	801a      	strh	r2, [r3, #0]
	  if (number == 100) { number = 0;}
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <Read_spi+0x60>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d102      	bne.n	80012cc <Read_spi+0x30>
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <Read_spi+0x60>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]
  	  osDelay(20);
 80012cc:	2014      	movs	r0, #20
 80012ce:	f004 f9ec 	bl	80056aa <osDelay>
  		if (osMutexAcquire(UartMutexHandle, 20) == osOK)
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <Read_spi+0x64>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2114      	movs	r1, #20
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 fa87 	bl	80057ec <osMutexAcquire>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e6      	bne.n	80012b2 <Read_spi+0x16>
  		  	{
  		  	    osDelay(20);
 80012e4:	2014      	movs	r0, #20
 80012e6:	f004 f9e0 	bl	80056aa <osDelay>
  		  //	 printf("reading values is: %d\n\r",reading[0]);
  		  	  osMutexRelease(UartMutexHandle);
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <Read_spi+0x64>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 fac7 	bl	8005882 <osMutexRelease>
	  number++;
 80012f4:	e7dd      	b.n	80012b2 <Read_spi+0x16>
 80012f6:	bf00      	nop
 80012f8:	200000f0 	.word	0x200000f0
 80012fc:	20000094 	.word	0x20000094
 8001300:	200000cc 	.word	0x200000cc

08001304 <TwoDigitsWriteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TwoDigitsWriteTask */
void TwoDigitsWriteTask(void *argument)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TwoDigitsWriteTask */
  /* Infinite loop */
  for(;;)
  {
	  //WriteDigit(2, 8);
	  WriteNumber(number);
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <TwoDigitsWriteTask+0x18>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f9da 	bl	80006cc <WriteNumber>
 8001318:	e7f8      	b.n	800130c <TwoDigitsWriteTask+0x8>
 800131a:	bf00      	nop
 800131c:	20000094 	.word	0x20000094

08001320 <ShowTimeModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ShowTimeModeTask */
void ShowTimeModeTask(void *argument)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af04      	add	r7, sp, #16
 8001326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ShowTimeModeTask */
		Time.Hours = 12;
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <ShowTimeModeTask+0xac>)
 800132a:	220c      	movs	r2, #12
 800132c:	701a      	strb	r2, [r3, #0]
		Time.Minutes = 59;
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <ShowTimeModeTask+0xac>)
 8001330:	223b      	movs	r2, #59	; 0x3b
 8001332:	705a      	strb	r2, [r3, #1]
		Time.Seconds = 30;
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <ShowTimeModeTask+0xac>)
 8001336:	221e      	movs	r2, #30
 8001338:	709a      	strb	r2, [r3, #2]
		HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800133a:	2200      	movs	r2, #0
 800133c:	4923      	ldr	r1, [pc, #140]	; (80013cc <ShowTimeModeTask+0xac>)
 800133e:	4824      	ldr	r0, [pc, #144]	; (80013d0 <ShowTimeModeTask+0xb0>)
 8001340:	f002 fb26 	bl	8003990 <HAL_RTC_SetTime>
	  /* Infinite loop */
	  for(;;)
	  {
		  if(currentState ==ShowTime)
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <ShowTimeModeTask+0xb4>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10b      	bne.n	8001366 <ShowTimeModeTask+0x46>
			  DisplayTime(Time,Date,UartMutexHandle);
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <ShowTimeModeTask+0xb8>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <ShowTimeModeTask+0xac>)
 8001354:	9202      	str	r2, [sp, #8]
 8001356:	4a21      	ldr	r2, [pc, #132]	; (80013dc <ShowTimeModeTask+0xbc>)
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	9201      	str	r2, [sp, #4]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001362:	f7ff faaf 	bl	80008c4 <DisplayTime>
		  if(currentState == SetMinutes)
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <ShowTimeModeTask+0xb4>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d108      	bne.n	8001382 <ShowTimeModeTask+0x62>
		  DisplaySetMinutes(Time, Date);
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <ShowTimeModeTask+0xac>)
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <ShowTimeModeTask+0xbc>)
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137e:	f7ff fb73 	bl	8000a68 <DisplaySetMinutes>
		  if(currentState == SetHours)
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <ShowTimeModeTask+0xb4>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d108      	bne.n	800139e <ShowTimeModeTask+0x7e>
		  DisplaySetHours(Time,Date);
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <ShowTimeModeTask+0xac>)
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <ShowTimeModeTask+0xbc>)
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	9201      	str	r2, [sp, #4]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139a:	f7ff fc15 	bl	8000bc8 <DisplaySetHours>
		  if(currentState == Set24or12)
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <ShowTimeModeTask+0xb4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d108      	bne.n	80013ba <ShowTimeModeTask+0x9a>
			  ShowTimeFormat(Time,Date);
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <ShowTimeModeTask+0xac>)
 80013aa:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <ShowTimeModeTask+0xbc>)
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	9201      	str	r2, [sp, #4]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	9200      	str	r2, [sp, #0]
 80013b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b6:	f7ff fdbb 	bl	8000f30 <ShowTimeFormat>
		  if (currentState == SetAMPM)
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <ShowTimeModeTask+0xb4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d1bf      	bne.n	8001344 <ShowTimeModeTask+0x24>
		  DisplayAmPm();
 80013c4:	f7ff fe64 	bl	8001090 <DisplayAmPm>
		  if(currentState ==ShowTime)
 80013c8:	e7bc      	b.n	8001344 <ShowTimeModeTask+0x24>
 80013ca:	bf00      	nop
 80013cc:	20000098 	.word	0x20000098
 80013d0:	200000d0 	.word	0x200000d0
 80013d4:	200000b0 	.word	0x200000b0
 80013d8:	200000cc 	.word	0x200000cc
 80013dc:	200000ac 	.word	0x200000ac

080013e0 <PushButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PushButtonsTask */
void PushButtonsTask(void *argument)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PushButtonsTask */
  /* Infinite loop */
  GPIO_PinState Mode, ModePrev = GPIO_PIN_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  GPIO_PinState Up, UpPrev = GPIO_PIN_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  GPIO_PinState Down, DownPrev = GPIO_PIN_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint32_t LastTimeMode = 0, LastTimeUp = 0, LastTimeDown = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  const uint32_t debounceDelay = 50; // Debounce time in milliseconds
 8001406:	2332      	movs	r3, #50	; 0x32
 8001408:	617b      	str	r3, [r7, #20]
  const uint32_t longPressThreshold = 1000; // Long press threshold in milliseconds for Mode button
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	613b      	str	r3, [r7, #16]


  for(;;)
  {
    // Read the current state of each button
    Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 8001410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001414:	489c      	ldr	r0, [pc, #624]	; (8001688 <PushButtonsTask+0x2a8>)
 8001416:	f001 fc35 	bl	8002c84 <HAL_GPIO_ReadPin>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    Up = HAL_GPIO_ReadPin(PushButtonUp_GPIO_Port, PushButtonUp_Pin);
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	489a      	ldr	r0, [pc, #616]	; (800168c <PushButtonsTask+0x2ac>)
 8001424:	f001 fc2e 	bl	8002c84 <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
    Down = HAL_GPIO_ReadPin(PushButtonDown_GPIO_Port, PushButtonDown_Pin);
 800142c:	2120      	movs	r1, #32
 800142e:	4897      	ldr	r0, [pc, #604]	; (800168c <PushButtonsTask+0x2ac>)
 8001430:	f001 fc28 	bl	8002c84 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	73bb      	strb	r3, [r7, #14]

    if (osMutexAcquire(UartMutexHandle, 20) == osOK)
 8001438:	4b95      	ldr	r3, [pc, #596]	; (8001690 <PushButtonsTask+0x2b0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2114      	movs	r1, #20
 800143e:	4618      	mov	r0, r3
 8001440:	f004 f9d4 	bl	80057ec <osMutexAcquire>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 8119 	bne.w	800167e <PushButtonsTask+0x29e>
    {
      // Check Mode button for short/long press
      if(Mode != ModePrev && (HAL_GetTick() - LastTimeMode) > debounceDelay)
 800144c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001450:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001454:	429a      	cmp	r2, r3
 8001456:	d06f      	beq.n	8001538 <PushButtonsTask+0x158>
 8001458:	f000 fe32 	bl	80020c0 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	429a      	cmp	r2, r3
 8001466:	d267      	bcs.n	8001538 <PushButtonsTask+0x158>
      {
        if(Mode == GPIO_PIN_SET)
 8001468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800146c:	2b01      	cmp	r3, #1
 800146e:	d160      	bne.n	8001532 <PushButtonsTask+0x152>
        {
          uint32_t pressTime = HAL_GetTick();
 8001470:	f000 fe26 	bl	80020c0 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
          while((Mode == GPIO_PIN_SET) && (HAL_GetTick() - pressTime < longPressThreshold))
 8001476:	e00a      	b.n	800148e <PushButtonsTask+0xae>
          {
            Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 8001478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147c:	4882      	ldr	r0, [pc, #520]	; (8001688 <PushButtonsTask+0x2a8>)
 800147e:	f001 fc01 	bl	8002c84 <HAL_GPIO_ReadPin>
 8001482:	4603      	mov	r3, r0
 8001484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            osDelay(1);
 8001488:	2001      	movs	r0, #1
 800148a:	f004 f90e 	bl	80056aa <osDelay>
          while((Mode == GPIO_PIN_SET) && (HAL_GetTick() - pressTime < longPressThreshold))
 800148e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <PushButtonsTask+0xc6>
 8001496:	f000 fe13 	bl	80020c0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d8e8      	bhi.n	8001478 <PushButtonsTask+0x98>
          }
          if(Mode == GPIO_PIN_SET)
 80014a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d10f      	bne.n	80014ce <PushButtonsTask+0xee>
          {
        	  if(currentState == ShowTime)
 80014ae:	4b79      	ldr	r3, [pc, #484]	; (8001694 <PushButtonsTask+0x2b4>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <PushButtonsTask+0xe0>
        	  {
        	  currentState = SetMinutes;
 80014b8:	4b76      	ldr	r3, [pc, #472]	; (8001694 <PushButtonsTask+0x2b4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e002      	b.n	80014c6 <PushButtonsTask+0xe6>
        	  }
        	  else
        	  {
        		  currentState = ShowTime;
 80014c0:	4b74      	ldr	r3, [pc, #464]	; (8001694 <PushButtonsTask+0x2b4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
        	  }
        	  printf("Mode Long Pressed\n\r");
 80014c6:	4874      	ldr	r0, [pc, #464]	; (8001698 <PushButtonsTask+0x2b8>)
 80014c8:	f007 fa92 	bl	80089f0 <iprintf>
 80014cc:	e031      	b.n	8001532 <PushButtonsTask+0x152>
          }
          else
          {
            printf("Mode Short Pressed\n\r");
 80014ce:	4873      	ldr	r0, [pc, #460]	; (800169c <PushButtonsTask+0x2bc>)
 80014d0:	f007 fa8e 	bl	80089f0 <iprintf>
            if (currentState == SetMinutes)
 80014d4:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <PushButtonsTask+0x2b4>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d103      	bne.n	80014e6 <PushButtonsTask+0x106>
            	currentState = SetHours;
 80014de:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <PushButtonsTask+0x2b4>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e025      	b.n	8001532 <PushButtonsTask+0x152>
            else if (currentState == SetHours)
 80014e6:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <PushButtonsTask+0x2b4>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d103      	bne.n	80014f8 <PushButtonsTask+0x118>
            	currentState = Set24or12;
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <PushButtonsTask+0x2b4>)
 80014f2:	2203      	movs	r2, #3
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e01c      	b.n	8001532 <PushButtonsTask+0x152>
            else if(currentState == Set24or12)
 80014f8:	4b66      	ldr	r3, [pc, #408]	; (8001694 <PushButtonsTask+0x2b4>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d10f      	bne.n	8001522 <PushButtonsTask+0x142>
            {
            	if(hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <PushButtonsTask+0x2c0>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <PushButtonsTask+0x132>
            	currentState = SetMinutes;
 800150a:	4b62      	ldr	r3, [pc, #392]	; (8001694 <PushButtonsTask+0x2b4>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	e00f      	b.n	8001532 <PushButtonsTask+0x152>
            	else if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <PushButtonsTask+0x2c0>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b40      	cmp	r3, #64	; 0x40
 8001518:	d10b      	bne.n	8001532 <PushButtonsTask+0x152>
            		currentState = SetAMPM;
 800151a:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <PushButtonsTask+0x2b4>)
 800151c:	2204      	movs	r2, #4
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <PushButtonsTask+0x152>
            }
            else if (currentState == SetAMPM)
 8001522:	4b5c      	ldr	r3, [pc, #368]	; (8001694 <PushButtonsTask+0x2b4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b04      	cmp	r3, #4
 800152a:	d102      	bne.n	8001532 <PushButtonsTask+0x152>
            	currentState = SetMinutes;
 800152c:	4b59      	ldr	r3, [pc, #356]	; (8001694 <PushButtonsTask+0x2b4>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
          }
        }
        LastTimeMode = HAL_GetTick();
 8001532:	f000 fdc5 	bl	80020c0 <HAL_GetTick>
 8001536:	6238      	str	r0, [r7, #32]
      }

      // Check Up button for short press only
      if(Up != UpPrev && (HAL_GetTick() - LastTimeUp) > debounceDelay)
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800153e:	429a      	cmp	r2, r3
 8001540:	d044      	beq.n	80015cc <PushButtonsTask+0x1ec>
 8001542:	f000 fdbd 	bl	80020c0 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	429a      	cmp	r2, r3
 8001550:	d23c      	bcs.n	80015cc <PushButtonsTask+0x1ec>
      {
        if(Up == GPIO_PIN_SET)
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d136      	bne.n	80015c6 <PushButtonsTask+0x1e6>
        {
        		if(currentState == SetMinutes)
 8001558:	4b4e      	ldr	r3, [pc, #312]	; (8001694 <PushButtonsTask+0x2b4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d109      	bne.n	8001576 <PushButtonsTask+0x196>
        		AddOneMinuteToRTC(Time,Date);
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <PushButtonsTask+0x2c4>)
 8001564:	4a50      	ldr	r2, [pc, #320]	; (80016a8 <PushButtonsTask+0x2c8>)
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	9201      	str	r2, [sp, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	9200      	str	r2, [sp, #0]
 800156e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001570:	f7ff fbda 	bl	8000d28 <AddOneMinuteToRTC>
 8001574:	e024      	b.n	80015c0 <PushButtonsTask+0x1e0>
        		else if(currentState == SetHours)
 8001576:	4b47      	ldr	r3, [pc, #284]	; (8001694 <PushButtonsTask+0x2b4>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d109      	bne.n	8001594 <PushButtonsTask+0x1b4>
        		{
        			AddOneHourToRTC(Time,Date);
 8001580:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <PushButtonsTask+0x2c4>)
 8001582:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <PushButtonsTask+0x2c8>)
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	9201      	str	r2, [sp, #4]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	9200      	str	r2, [sp, #0]
 800158c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158e:	f7ff fc31 	bl	8000df4 <AddOneHourToRTC>
 8001592:	e015      	b.n	80015c0 <PushButtonsTask+0x1e0>
        		}
         		else if (currentState == Set24or12)
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <PushButtonsTask+0x2b4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b03      	cmp	r3, #3
 800159c:	d102      	bne.n	80015a4 <PushButtonsTask+0x1c4>
         			ChangeTimeFormat();
 800159e:	f7ff fd15 	bl	8000fcc <ChangeTimeFormat>
 80015a2:	e00d      	b.n	80015c0 <PushButtonsTask+0x1e0>
         		else if(currentState == SetAMPM)
 80015a4:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <PushButtonsTask+0x2b4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d108      	bne.n	80015c0 <PushButtonsTask+0x1e0>
         		{
         			ChangeAMPMFormat(Time,Date);
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <PushButtonsTask+0x2c4>)
 80015b0:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <PushButtonsTask+0x2c8>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015bc:	f7ff fdb6 	bl	800112c <ChangeAMPMFormat>
         		}
          printf("Up Short Pressed\n\r");
 80015c0:	483a      	ldr	r0, [pc, #232]	; (80016ac <PushButtonsTask+0x2cc>)
 80015c2:	f007 fa15 	bl	80089f0 <iprintf>
        }
        LastTimeUp = HAL_GetTick();
 80015c6:	f000 fd7b 	bl	80020c0 <HAL_GetTick>
 80015ca:	61f8      	str	r0, [r7, #28]
      }

      // Check Down button for short press only
      if(Down != DownPrev && (HAL_GetTick() - LastTimeDown) > debounceDelay)
 80015cc:	7bba      	ldrb	r2, [r7, #14]
 80015ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d044      	beq.n	8001660 <PushButtonsTask+0x280>
 80015d6:	f000 fd73 	bl	80020c0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d23c      	bcs.n	8001660 <PushButtonsTask+0x280>
      {
        if(Down == GPIO_PIN_SET)
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d136      	bne.n	800165a <PushButtonsTask+0x27a>
        {
        	     	 if(currentState == SetMinutes)
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <PushButtonsTask+0x2b4>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d109      	bne.n	800160a <PushButtonsTask+0x22a>
        	     	 {
        	 		 SubtractOneMinuteFromRTC(Time, Date);
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <PushButtonsTask+0x2c4>)
 80015f8:	4a2b      	ldr	r2, [pc, #172]	; (80016a8 <PushButtonsTask+0x2c8>)
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	9201      	str	r2, [sp, #4]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	9200      	str	r2, [sp, #0]
 8001602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001604:	f7ff fbc2 	bl	8000d8c <SubtractOneMinuteFromRTC>
 8001608:	e024      	b.n	8001654 <PushButtonsTask+0x274>
        	     	 }
        	     	 else if(currentState == SetHours)
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <PushButtonsTask+0x2b4>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d109      	bne.n	8001628 <PushButtonsTask+0x248>
        	     	 {
        	     		SubtractOneHourFromRTC(Time, Date);
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <PushButtonsTask+0x2c4>)
 8001616:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <PushButtonsTask+0x2c8>)
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	9201      	str	r2, [sp, #4]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001622:	f7ff fc33 	bl	8000e8c <SubtractOneHourFromRTC>
 8001626:	e015      	b.n	8001654 <PushButtonsTask+0x274>
        	     	 }
              		else if (currentState == Set24or12)
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <PushButtonsTask+0x2b4>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b03      	cmp	r3, #3
 8001630:	d102      	bne.n	8001638 <PushButtonsTask+0x258>
              			ChangeTimeFormat();
 8001632:	f7ff fccb 	bl	8000fcc <ChangeTimeFormat>
 8001636:	e00d      	b.n	8001654 <PushButtonsTask+0x274>
              		else if(currentState == SetAMPM)
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <PushButtonsTask+0x2b4>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b04      	cmp	r3, #4
 8001640:	d108      	bne.n	8001654 <PushButtonsTask+0x274>
              		{
              			ChangeAMPMFormat(Time,Date);
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <PushButtonsTask+0x2c4>)
 8001644:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <PushButtonsTask+0x2c8>)
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	9201      	str	r2, [sp, #4]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	9200      	str	r2, [sp, #0]
 800164e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001650:	f7ff fd6c 	bl	800112c <ChangeAMPMFormat>
              		}
          printf("Down Short Pressed\n\r");
 8001654:	4816      	ldr	r0, [pc, #88]	; (80016b0 <PushButtonsTask+0x2d0>)
 8001656:	f007 f9cb 	bl	80089f0 <iprintf>
        }
        LastTimeDown = HAL_GetTick();
 800165a:	f000 fd31 	bl	80020c0 <HAL_GetTick>
 800165e:	61b8      	str	r0, [r7, #24]
      }

      // Update the previous state for each button
      ModePrev = Mode;
 8001660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001664:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      UpPrev = Up;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      DownPrev = Down;
 800166e:	7bbb      	ldrb	r3, [r7, #14]
 8001670:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

      osMutexRelease(UartMutexHandle);
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <PushButtonsTask+0x2b0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f004 f902 	bl	8005882 <osMutexRelease>
    }
    osDelay(1); // Adjust this delay as per your requirement
 800167e:	2001      	movs	r0, #1
 8001680:	f004 f813 	bl	80056aa <osDelay>
    Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 8001684:	e6c4      	b.n	8001410 <PushButtonsTask+0x30>
 8001686:	bf00      	nop
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	200000cc 	.word	0x200000cc
 8001694:	200000b0 	.word	0x200000b0
 8001698:	08009814 	.word	0x08009814
 800169c:	08009828 	.word	0x08009828
 80016a0:	200000d0 	.word	0x200000d0
 80016a4:	20000098 	.word	0x20000098
 80016a8:	200000ac 	.word	0x200000ac
 80016ac:	08009840 	.word	0x08009840
 80016b0:	08009854 	.word	0x08009854

080016b4 <ClockTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ClockTask */
void ClockTask(void *argument)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
//	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
  /* Infinite loop */
  for(;;)
  {
	//DisplayTime(Time,Date,UartMutexHandle);
    osDelay(1);
 80016bc:	2001      	movs	r0, #1
 80016be:	f003 fff4 	bl	80056aa <osDelay>
 80016c2:	e7fb      	b.n	80016bc <ClockTask+0x8>

080016c4 <SetMinutesModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SetMinutesModeTask */
void SetMinutesModeTask(void *argument)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SetMinutesModeTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f003 ffec 	bl	80056aa <osDelay>
 80016d2:	e7fb      	b.n	80016cc <SetMinutesModeTask+0x8>

080016d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b55      	ldr	r3, [pc, #340]	; (8001844 <MX_GPIO_Init+0x170>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a54      	ldr	r2, [pc, #336]	; (8001844 <MX_GPIO_Init+0x170>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b52      	ldr	r3, [pc, #328]	; (8001844 <MX_GPIO_Init+0x170>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b4e      	ldr	r3, [pc, #312]	; (8001844 <MX_GPIO_Init+0x170>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a4d      	ldr	r2, [pc, #308]	; (8001844 <MX_GPIO_Init+0x170>)
 8001710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <MX_GPIO_Init+0x170>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b47      	ldr	r3, [pc, #284]	; (8001844 <MX_GPIO_Init+0x170>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a46      	ldr	r2, [pc, #280]	; (8001844 <MX_GPIO_Init+0x170>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b44      	ldr	r3, [pc, #272]	; (8001844 <MX_GPIO_Init+0x170>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b40      	ldr	r3, [pc, #256]	; (8001844 <MX_GPIO_Init+0x170>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a3f      	ldr	r2, [pc, #252]	; (8001844 <MX_GPIO_Init+0x170>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <MX_GPIO_Init+0x170>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 800175a:	2200      	movs	r2, #0
 800175c:	f241 4117 	movw	r1, #5143	; 0x1417
 8001760:	4839      	ldr	r0, [pc, #228]	; (8001848 <MX_GPIO_Init+0x174>)
 8001762:	f001 faa7 	bl	8002cb4 <HAL_GPIO_WritePin>
                          |Cathode_1_Pin|Cathode_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|LD2_Pin
 8001766:	2200      	movs	r2, #0
 8001768:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800176c:	4837      	ldr	r0, [pc, #220]	; (800184c <MX_GPIO_Init+0x178>)
 800176e:	f001 faa1 	bl	8002cb4 <HAL_GPIO_WritePin>
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 8001772:	2200      	movs	r2, #0
 8001774:	f24e 0137 	movw	r1, #57399	; 0xe037
 8001778:	4835      	ldr	r0, [pc, #212]	; (8001850 <MX_GPIO_Init+0x17c>)
 800177a:	f001 fa9b 	bl	8002cb4 <HAL_GPIO_WritePin>
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800177e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001784:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	482c      	ldr	r0, [pc, #176]	; (8001848 <MX_GPIO_Init+0x174>)
 8001796:	f001 f8f1 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 800179a:	f241 4317 	movw	r3, #5143	; 0x1417
 800179e:	617b      	str	r3, [r7, #20]
                          |Cathode_1_Pin|Cathode_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4825      	ldr	r0, [pc, #148]	; (8001848 <MX_GPIO_Init+0x174>)
 80017b4:	f001 f8e2 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|LD2_Pin
 80017b8:	f240 73b3 	movw	r3, #1971	; 0x7b3
 80017bc:	617b      	str	r3, [r7, #20]
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	481e      	ldr	r0, [pc, #120]	; (800184c <MX_GPIO_Init+0x178>)
 80017d2:	f001 f8d3 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PushButtonDown_Pin|PushButtonUp_Pin;
 80017d6:	2360      	movs	r3, #96	; 0x60
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4817      	ldr	r0, [pc, #92]	; (8001848 <MX_GPIO_Init+0x174>)
 80017ec:	f001 f8c6 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 80017f0:	f24e 0337 	movw	r3, #57399	; 0xe037
 80017f4:	617b      	str	r3, [r7, #20]
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4811      	ldr	r0, [pc, #68]	; (8001850 <MX_GPIO_Init+0x17c>)
 800180a:	f001 f8b7 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PushButtonMode_Pin;
 800180e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001814:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800181a:	2302      	movs	r3, #2
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PushButtonMode_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <MX_GPIO_Init+0x17c>)
 8001826:	f001 f8a9 	bl	800297c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2105      	movs	r1, #5
 800182e:	2017      	movs	r0, #23
 8001830:	f000 fd0a 	bl	8002248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001834:	2017      	movs	r0, #23
 8001836:	f000 fd23 	bl	8002280 <HAL_NVIC_EnableIRQ>

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40020800 	.word	0x40020800
 800184c:	40020000 	.word	0x40020000
 8001850:	40020400 	.word	0x40020400

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001858:	f000 fbfc 	bl	8002054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185c:	f000 f812 	bl	8001884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001860:	f7ff ff38 	bl	80016d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001864:	f7ff fc98 	bl	8001198 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001868:	f000 fb58 	bl	8001f1c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800186c:	f000 f8de 	bl	8001a2c <MX_SPI2_Init>
  MX_RTC_Init();
 8001870:	f000 f88a 	bl	8001988 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001874:	f003 fe28 	bl	80054c8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001878:	f7ff fcae 	bl	80011d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800187c:	f003 fe48 	bl	8005510 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001880:	e7fe      	b.n	8001880 <main+0x2c>
	...

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b094      	sub	sp, #80	; 0x50
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	2230      	movs	r2, #48	; 0x30
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f007 f901 	bl	8008a9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <SystemClock_Config+0xcc>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <SystemClock_Config+0xcc>)
 80018b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <SystemClock_Config+0xcc>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <SystemClock_Config+0xd0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a21      	ldr	r2, [pc, #132]	; (8001954 <SystemClock_Config+0xd0>)
 80018ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <SystemClock_Config+0xd0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018e0:	2309      	movs	r3, #9
 80018e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018ea:	2301      	movs	r3, #1
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ee:	2302      	movs	r3, #2
 80018f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018fc:	2364      	movs	r3, #100	; 0x64
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001900:	2302      	movs	r3, #2
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001904:	2304      	movs	r3, #4
 8001906:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001908:	f107 0320 	add.w	r3, r7, #32
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fa0f 	bl	8002d30 <HAL_RCC_OscConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001918:	f000 f830 	bl	800197c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191c:	230f      	movs	r3, #15
 800191e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001920:	2302      	movs	r3, #2
 8001922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	2103      	movs	r1, #3
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fc71 	bl	8003220 <HAL_RCC_ClockConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001944:	f000 f81a 	bl	800197c <Error_Handler>
  }
}
 8001948:	bf00      	nop
 800194a:	3750      	adds	r7, #80	; 0x50
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40007000 	.word	0x40007000

08001958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196a:	f000 fb95 	bl	8002098 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40000400 	.word	0x40000400

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001984:	e7fe      	b.n	8001984 <Error_Handler+0x8>
	...

08001988 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_RTC_Init+0x44>)
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <MX_RTC_Init+0x48>)
 8001990:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_RTC_Init+0x44>)
 8001994:	2240      	movs	r2, #64	; 0x40
 8001996:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_RTC_Init+0x44>)
 800199a:	227f      	movs	r2, #127	; 0x7f
 800199c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_RTC_Init+0x44>)
 80019a0:	22ff      	movs	r2, #255	; 0xff
 80019a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_RTC_Init+0x44>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_RTC_Init+0x44>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_RTC_Init+0x44>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_RTC_Init+0x44>)
 80019b8:	f001 ff74 	bl	80038a4 <HAL_RTC_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80019c2:	f7ff ffdb 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000d0 	.word	0x200000d0
 80019d0:	40002800 	.word	0x40002800

080019d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
 80019ec:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <HAL_RTC_MspInit+0x50>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d111      	bne.n	8001a1c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a00:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fe5c 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a12:	f7ff ffb3 	bl	800197c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_RTC_MspInit+0x54>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40002800 	.word	0x40002800
 8001a28:	42470e3c 	.word	0x42470e3c

08001a2c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a32:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a74:	220a      	movs	r2, #10
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_SPI2_Init+0x60>)
 8001a7a:	f002 fa11 	bl	8003ea0 <HAL_SPI_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8001a84:	f7ff ff7a 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200000f0 	.word	0x200000f0
 8001a90:	40003800 	.word	0x40003800

08001a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a40      	ldr	r2, [pc, #256]	; (8001bb4 <HAL_SPI_MspInit+0x120>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d17a      	bne.n	8001bac <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_SPI_MspInit+0x124>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a3e      	ldr	r2, [pc, #248]	; (8001bb8 <HAL_SPI_MspInit+0x124>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <HAL_SPI_MspInit+0x124>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HAL_SPI_MspInit+0x124>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a37      	ldr	r2, [pc, #220]	; (8001bb8 <HAL_SPI_MspInit+0x124>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <HAL_SPI_MspInit+0x124>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <HAL_SPI_MspInit+0x124>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a30      	ldr	r2, [pc, #192]	; (8001bb8 <HAL_SPI_MspInit+0x124>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_SPI_MspInit+0x124>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4825      	ldr	r0, [pc, #148]	; (8001bbc <HAL_SPI_MspInit+0x128>)
 8001b26:	f000 ff29 	bl	800297c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	481e      	ldr	r0, [pc, #120]	; (8001bc0 <HAL_SPI_MspInit+0x12c>)
 8001b48:	f000 ff18 	bl	800297c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_SPI_MspInit+0x134>)
 8001b50:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b72:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b82:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001b92:	f000 fb83 	bl	800229c <HAL_DMA_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8001b9c:	f7ff feee 	bl	800197c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001ba4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_SPI_MspInit+0x130>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40003800 	.word	0x40003800
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	20000148 	.word	0x20000148
 8001bc8:	40026058 	.word	0x40026058

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_MspInit+0x54>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_MspInit+0x54>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_MspInit+0x54>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_MspInit+0x54>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_MspInit+0x54>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_MspInit+0x54>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	f06f 0001 	mvn.w	r0, #1
 8001c12:	f000 fb19 	bl	8002248 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08e      	sub	sp, #56	; 0x38
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <HAL_InitTick+0xe4>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <HAL_InitTick+0xe4>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	6413      	str	r3, [r2, #64]	; 0x40
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_InitTick+0xe4>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c50:	f107 0210 	add.w	r2, r7, #16
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 fd00 	bl	8003660 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c6a:	f001 fcd1 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8001c6e:	6378      	str	r0, [r7, #52]	; 0x34
 8001c70:	e004      	b.n	8001c7c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c72:	f001 fccd 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8001c76:	4603      	mov	r3, r0
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7e:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_InitTick+0xe8>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	0c9b      	lsrs	r3, r3, #18
 8001c86:	3b01      	subs	r3, #1
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_InitTick+0xec>)
 8001c8c:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <HAL_InitTick+0xf0>)
 8001c8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <HAL_InitTick+0xec>)
 8001c92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c96:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_InitTick+0xec>)
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_InitTick+0xec>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_InitTick+0xec>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_InitTick+0xec>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001cb0:	4817      	ldr	r0, [pc, #92]	; (8001d10 <HAL_InitTick+0xec>)
 8001cb2:	f002 fd83 	bl	80047bc <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11b      	bne.n	8001cfc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001cc4:	4812      	ldr	r0, [pc, #72]	; (8001d10 <HAL_InitTick+0xec>)
 8001cc6:	f002 fdd3 	bl	8004870 <HAL_TIM_Base_Start_IT>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001cd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d111      	bne.n	8001cfc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cd8:	201d      	movs	r0, #29
 8001cda:	f000 fad1 	bl	8002280 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d808      	bhi.n	8001cf6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	201d      	movs	r0, #29
 8001cea:	f000 faad 	bl	8002248 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_InitTick+0xf4>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e002      	b.n	8001cfc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3738      	adds	r7, #56	; 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	200001a8 	.word	0x200001a8
 8001d14:	40000400 	.word	0x40000400
 8001d18:	20000004 	.word	0x20000004

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <NMI_Handler+0x4>

08001d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <HardFault_Handler+0x4>

08001d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <MemManage_Handler+0x4>

08001d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <BusFault_Handler+0x4>

08001d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <UsageFault_Handler+0x4>

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <DMA1_Stream3_IRQHandler+0x10>)
 8001d4e:	f000 fbab 	bl	80024a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000148 	.word	0x20000148

08001d5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PushButtonDown_Pin);
 8001d60:	2020      	movs	r0, #32
 8001d62:	f000 ffc1 	bl	8002ce8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PushButtonUp_Pin);
 8001d66:	2040      	movs	r0, #64	; 0x40
 8001d68:	f000 ffbe 	bl	8002ce8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PushButtonMode_Pin);
 8001d6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d70:	f000 ffba 	bl	8002ce8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM3_IRQHandler+0x10>)
 8001d7e:	f002 fdd9 	bl	8004934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200001a8 	.word	0x200001a8

08001d8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e00a      	b.n	8001db4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d9e:	f3af 8000 	nop.w
 8001da2:	4601      	mov	r1, r0
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf0      	blt.n	8001d9e <_read+0x12>
  }

  return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e009      	b.n	8001dec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f889 	bl	8001ef8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf1      	blt.n	8001dd8 <_write+0x12>
  }
  return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_close>:

int _close(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e26:	605a      	str	r2, [r3, #4]
  return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_isatty>:

int _isatty(int file)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f006 fea4 	bl	8008be4 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20020000 	.word	0x20020000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	200001f0 	.word	0x200001f0
 8001ed0:	20004d70 	.word	0x20004d70

08001ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__io_putchar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 8001f00:	1d39      	adds	r1, r7, #4
 8001f02:	230a      	movs	r3, #10
 8001f04:	2201      	movs	r2, #1
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <__io_putchar+0x20>)
 8001f08:	f002 ff25 	bl	8004d56 <HAL_UART_Transmit>
	return ch;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200001f4 	.word	0x200001f4

08001f1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <MX_USART2_UART_Init+0x50>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f54:	f002 feb2 	bl	8004cbc <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f5e:	f7ff fd0d 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200001f4 	.word	0x200001f4
 8001f6c:	40004400 	.word	0x40004400

08001f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_UART_MspInit+0x84>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d12b      	bne.n	8001fea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_UART_MspInit+0x88>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fca:	230c      	movs	r3, #12
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_UART_MspInit+0x8c>)
 8001fe6:	f000 fcc9 	bl	800297c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40004400 	.word	0x40004400
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000

08002000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002006:	490e      	ldr	r1, [pc, #56]	; (8002040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800201c:	4c0b      	ldr	r4, [pc, #44]	; (800204c <LoopFillZerobss+0x26>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800202a:	f7ff ff53 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202e:	f006 fddf 	bl	8008bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002032:	f7ff fc0f 	bl	8001854 <main>
  bx  lr    
 8002036:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002044:	080099f0 	.word	0x080099f0
  ldr r2, =_sbss
 8002048:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800204c:	20004d70 	.word	0x20004d70

08002050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC_IRQHandler>
	...

08002054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_Init+0x40>)
 800205e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_Init+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_Init+0x40>)
 800206a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_Init+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_Init+0x40>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 f8d8 	bl	8002232 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002082:	200f      	movs	r0, #15
 8002084:	f7ff fdce 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002088:	f7ff fda0 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00

08002098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000008 	.word	0x20000008
 80020bc:	20000238 	.word	0x20000238

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000238 	.word	0x20000238

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	; (8002174 <__NVIC_EnableIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ff4c 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225a:	f7ff ff61 	bl	8002120 <__NVIC_GetPriorityGrouping>
 800225e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	6978      	ldr	r0, [r7, #20]
 8002266:	f7ff ffb1 	bl	80021cc <NVIC_EncodePriority>
 800226a:	4602      	mov	r2, r0
 800226c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff80 	bl	8002178 <__NVIC_SetPriority>
}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff54 	bl	800213c <__NVIC_EnableIRQ>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff ff0a 	bl	80020c0 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e099      	b.n	80023ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	e00f      	b.n	80022fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022da:	f7ff fef1 	bl	80020c0 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d908      	bls.n	80022fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e078      	b.n	80023ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e8      	bne.n	80022da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_DMA_Init+0x158>)
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2b04      	cmp	r3, #4
 8002352:	d107      	bne.n	8002364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4313      	orrs	r3, r2
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f023 0307 	bic.w	r3, r3, #7
 800237a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2b04      	cmp	r3, #4
 800238c:	d117      	bne.n	80023be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fa6f 	bl	8002884 <DMA_CheckFifoParam>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ba:	2301      	movs	r3, #1
 80023bc:	e016      	b.n	80023ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fa26 	bl	8002818 <DMA_CalcBaseAndBitshift>
 80023cc:	4603      	mov	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	223f      	movs	r2, #63	; 0x3f
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	f010803f 	.word	0xf010803f

080023f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_DMA_Start_IT+0x26>
 800241a:	2302      	movs	r3, #2
 800241c:	e040      	b.n	80024a0 <HAL_DMA_Start_IT+0xa8>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d12f      	bne.n	8002492 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9b8 	bl	80027bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	223f      	movs	r2, #63	; 0x3f
 8002452:	409a      	lsls	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0216 	orr.w	r2, r2, #22
 8002466:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0208 	orr.w	r2, r2, #8
 800247e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e005      	b.n	800249e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800249a:	2302      	movs	r3, #2
 800249c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800249e:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024b4:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <HAL_DMA_IRQHandler+0x248>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a8e      	ldr	r2, [pc, #568]	; (80026f4 <HAL_DMA_IRQHandler+0x24c>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2208      	movs	r2, #8
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01a      	beq.n	8002514 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0204 	bic.w	r2, r2, #4
 80024fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2208      	movs	r2, #8
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	2201      	movs	r2, #1
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0202 	orr.w	r2, r3, #2
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2204      	movs	r2, #4
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d012      	beq.n	8002580 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	2204      	movs	r2, #4
 800256e:	409a      	lsls	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2210      	movs	r2, #16
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d043      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d03c      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	2210      	movs	r2, #16
 80025a4:	409a      	lsls	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d018      	beq.n	80025ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d024      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
 80025d6:	e01f      	b.n	8002618 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01b      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
 80025e8:	e016      	b.n	8002618 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0208 	bic.w	r2, r2, #8
 8002606:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	2220      	movs	r2, #32
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 808f 	beq.w	8002748 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8087 	beq.w	8002748 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2220      	movs	r2, #32
 8002640:	409a      	lsls	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b05      	cmp	r3, #5
 8002650:	d136      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0216 	bic.w	r2, r2, #22
 8002660:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002670:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <HAL_DMA_IRQHandler+0x1da>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0208 	bic.w	r2, r2, #8
 8002690:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	223f      	movs	r2, #63	; 0x3f
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d07e      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
        }
        return;
 80026be:	e079      	b.n	80027b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d01d      	beq.n	800270a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d031      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
 80026ec:	e02c      	b.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
 80026ee:	bf00      	nop
 80026f0:	20000000 	.word	0x20000000
 80026f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
 8002708:	e01e      	b.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0210 	bic.w	r2, r2, #16
 8002726:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	2b00      	cmp	r3, #0
 800274e:	d032      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2205      	movs	r2, #5
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3301      	adds	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d307      	bcc.n	8002790 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f2      	bne.n	8002774 <HAL_DMA_IRQHandler+0x2cc>
 800278e:	e000      	b.n	8002792 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002790:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027b4:	bf00      	nop
    }
  }
}
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b40      	cmp	r3, #64	; 0x40
 80027e8:	d108      	bne.n	80027fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027fa:	e007      	b.n	800280c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	60da      	str	r2, [r3, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3b10      	subs	r3, #16
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <DMA_CalcBaseAndBitshift+0x64>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <DMA_CalcBaseAndBitshift+0x68>)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d909      	bls.n	800285a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	1d1a      	adds	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58
 8002858:	e007      	b.n	800286a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	aaaaaaab 	.word	0xaaaaaaab
 8002880:	080099a4 	.word	0x080099a4

08002884 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11f      	bne.n	80028de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d856      	bhi.n	8002952 <DMA_CheckFifoParam+0xce>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <DMA_CheckFifoParam+0x28>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	080028cf 	.word	0x080028cf
 80028b4:	080028bd 	.word	0x080028bd
 80028b8:	08002953 	.word	0x08002953
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d046      	beq.n	8002956 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028cc:	e043      	b.n	8002956 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028d6:	d140      	bne.n	800295a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e03d      	b.n	800295a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e6:	d121      	bne.n	800292c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d837      	bhi.n	800295e <DMA_CheckFifoParam+0xda>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <DMA_CheckFifoParam+0x70>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002905 	.word	0x08002905
 80028f8:	0800290b 	.word	0x0800290b
 80028fc:	08002905 	.word	0x08002905
 8002900:	0800291d 	.word	0x0800291d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      break;
 8002908:	e030      	b.n	800296c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d025      	beq.n	8002962 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291a:	e022      	b.n	8002962 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002924:	d11f      	bne.n	8002966 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800292a:	e01c      	b.n	8002966 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d903      	bls.n	800293a <DMA_CheckFifoParam+0xb6>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d003      	beq.n	8002940 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002938:	e018      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      break;
 800293e:	e015      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
      break;
 8002950:	e00b      	b.n	800296a <DMA_CheckFifoParam+0xe6>
      break;
 8002952:	bf00      	nop
 8002954:	e00a      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e008      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800295a:	bf00      	nop
 800295c:	e006      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e004      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e002      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;   
 8002966:	bf00      	nop
 8002968:	e000      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
    }
  } 
  
  return status; 
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e159      	b.n	8002c4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8148 	bne.w	8002c46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d005      	beq.n	80029ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a2 	beq.w	8002c46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <HAL_GPIO_Init+0x2e8>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	4a56      	ldr	r2, [pc, #344]	; (8002c64 <HAL_GPIO_Init+0x2e8>)
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b10:	6453      	str	r3, [r2, #68]	; 0x44
 8002b12:	4b54      	ldr	r3, [pc, #336]	; (8002c64 <HAL_GPIO_Init+0x2e8>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1e:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_GPIO_Init+0x2ec>)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a49      	ldr	r2, [pc, #292]	; (8002c6c <HAL_GPIO_Init+0x2f0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d019      	beq.n	8002b7e <HAL_GPIO_Init+0x202>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a48      	ldr	r2, [pc, #288]	; (8002c70 <HAL_GPIO_Init+0x2f4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_GPIO_Init+0x1fe>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a47      	ldr	r2, [pc, #284]	; (8002c74 <HAL_GPIO_Init+0x2f8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00d      	beq.n	8002b76 <HAL_GPIO_Init+0x1fa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a46      	ldr	r2, [pc, #280]	; (8002c78 <HAL_GPIO_Init+0x2fc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <HAL_GPIO_Init+0x1f6>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a45      	ldr	r2, [pc, #276]	; (8002c7c <HAL_GPIO_Init+0x300>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_GPIO_Init+0x1f2>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	e008      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b6e:	2307      	movs	r3, #7
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b72:	2303      	movs	r3, #3
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f002 0203 	and.w	r2, r2, #3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b90:	4935      	ldr	r1, [pc, #212]	; (8002c68 <HAL_GPIO_Init+0x2ec>)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a2f      	ldr	r2, [pc, #188]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c16:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f aea2 	bls.w	8002998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40013c00 	.word	0x40013c00

08002c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e001      	b.n	8002ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cfe:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f806 	bl	8002d18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e267      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d075      	beq.n	8002e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4e:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d00c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5a:	4b85      	ldr	r3, [pc, #532]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d112      	bne.n	8002d8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d66:	4b82      	ldr	r3, [pc, #520]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d72:	d10b      	bne.n	8002d8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	4b7e      	ldr	r3, [pc, #504]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d05b      	beq.n	8002e38 <HAL_RCC_OscConfig+0x108>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d157      	bne.n	8002e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e242      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d94:	d106      	bne.n	8002da4 <HAL_RCC_OscConfig+0x74>
 8002d96:	4b76      	ldr	r3, [pc, #472]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a75      	ldr	r2, [pc, #468]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e01d      	b.n	8002de0 <HAL_RCC_OscConfig+0xb0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x98>
 8002dae:	4b70      	ldr	r3, [pc, #448]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6f      	ldr	r2, [pc, #444]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6c      	ldr	r2, [pc, #432]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0xb0>
 8002dc8:	4b69      	ldr	r3, [pc, #420]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a68      	ldr	r2, [pc, #416]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b66      	ldr	r3, [pc, #408]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff f96a 	bl	80020c0 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7ff f966 	bl	80020c0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e207      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0xc0>
 8002e0e:	e014      	b.n	8002e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff f956 	bl	80020c0 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e18:	f7ff f952 	bl	80020c0 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1f3      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0xe8>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d063      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e46:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e52:	4b47      	ldr	r3, [pc, #284]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d11c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5e:	4b44      	ldr	r3, [pc, #272]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d116      	bne.n	8002e98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x152>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1c7      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4937      	ldr	r1, [pc, #220]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	e03a      	b.n	8002f0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCC_OscConfig+0x244>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7ff f90b 	bl	80020c0 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eae:	f7ff f907 	bl	80020c0 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e1a8      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4925      	ldr	r1, [pc, #148]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
 8002ee0:	e015      	b.n	8002f0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x244>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7ff f8ea 	bl	80020c0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7ff f8e6 	bl	80020c0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e187      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d036      	beq.n	8002f88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCC_OscConfig+0x248>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7ff f8ca 	bl	80020c0 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f30:	f7ff f8c6 	bl	80020c0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e167      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x200>
 8002f4e:	e01b      	b.n	8002f88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_OscConfig+0x248>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7ff f8b3 	bl	80020c0 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5c:	e00e      	b.n	8002f7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5e:	f7ff f8af 	bl	80020c0 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d907      	bls.n	8002f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e150      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
 8002f70:	40023800 	.word	0x40023800
 8002f74:	42470000 	.word	0x42470000
 8002f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	4b88      	ldr	r3, [pc, #544]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1ea      	bne.n	8002f5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8097 	beq.w	80030c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b81      	ldr	r3, [pc, #516]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	4b7d      	ldr	r3, [pc, #500]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a7c      	ldr	r2, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b7a      	ldr	r3, [pc, #488]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	4b77      	ldr	r3, [pc, #476]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d118      	bne.n	8003004 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd2:	4b74      	ldr	r3, [pc, #464]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a73      	ldr	r2, [pc, #460]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fde:	f7ff f86f 	bl	80020c0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe6:	f7ff f86b 	bl	80020c0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e10c      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x2ea>
 800300c:	4b64      	ldr	r3, [pc, #400]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a63      	ldr	r2, [pc, #396]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x324>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x30c>
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a5e      	ldr	r2, [pc, #376]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	4b5c      	ldr	r3, [pc, #368]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a5b      	ldr	r2, [pc, #364]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x324>
 800303c:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a57      	ldr	r2, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
 8003048:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7ff f830 	bl	80020c0 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7ff f82c 	bl	80020c0 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0cb      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ee      	beq.n	8003064 <HAL_RCC_OscConfig+0x334>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7ff f81a 	bl	80020c0 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7ff f816 	bl	80020c0 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0b5      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a6:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ee      	bne.n	8003090 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b8:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	4a38      	ldr	r2, [pc, #224]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80a1 	beq.w	8003210 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d05c      	beq.n	8003194 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d141      	bne.n	8003166 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe ffea 	bl	80020c0 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe ffe6 	bl	80020c0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e087      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	019b      	lsls	r3, r3, #6
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	3b01      	subs	r3, #1
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	491b      	ldr	r1, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fe ffbf 	bl	80020c0 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003146:	f7fe ffbb 	bl	80020c0 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e05c      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x416>
 8003164:	e054      	b.n	8003210 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe ffa8 	bl	80020c0 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe ffa4 	bl	80020c0 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e045      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x444>
 8003192:	e03d      	b.n	8003210 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e038      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40007000 	.word	0x40007000
 80031a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ac:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x4ec>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d028      	beq.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d121      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d11a      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d111      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	3b01      	subs	r3, #1
 80031f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d107      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800

08003220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0cc      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b68      	ldr	r3, [pc, #416]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d90c      	bls.n	800325c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0b8      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800327e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	494d      	ldr	r1, [pc, #308]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d044      	beq.n	8003340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d119      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d003      	beq.n	80032de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e06f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e067      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4934      	ldr	r1, [pc, #208]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003310:	f7fe fed6 	bl	80020c0 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fe fed2 	bl	80020c0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e04f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d20c      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e032      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4916      	ldr	r1, [pc, #88]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	490e      	ldr	r1, [pc, #56]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a6:	f000 f821 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80033aa:	4602      	mov	r2, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	490a      	ldr	r1, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	5ccb      	ldrb	r3, [r1, r3]
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe fc2c 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023c00 	.word	0x40023c00
 80033dc:	40023800 	.word	0x40023800
 80033e0:	0800998c 	.word	0x0800998c
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004

080033ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f0:	b094      	sub	sp, #80	; 0x50
 80033f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	647b      	str	r3, [r7, #68]	; 0x44
 80033f8:	2300      	movs	r3, #0
 80033fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033fc:	2300      	movs	r3, #0
 80033fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003404:	4b79      	ldr	r3, [pc, #484]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d00d      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x40>
 8003410:	2b08      	cmp	r3, #8
 8003412:	f200 80e1 	bhi.w	80035d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x34>
 800341a:	2b04      	cmp	r3, #4
 800341c:	d003      	beq.n	8003426 <HAL_RCC_GetSysClockFreq+0x3a>
 800341e:	e0db      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003424:	e0db      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003426:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800342a:	e0d8      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800342c:	4b6f      	ldr	r3, [pc, #444]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003442:	4b6a      	ldr	r3, [pc, #424]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	2200      	movs	r2, #0
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
 800344c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003454:	633b      	str	r3, [r7, #48]	; 0x30
 8003456:	2300      	movs	r3, #0
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
 800345a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800345e:	4622      	mov	r2, r4
 8003460:	462b      	mov	r3, r5
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	0159      	lsls	r1, r3, #5
 800346c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003470:	0150      	lsls	r0, r2, #5
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4621      	mov	r1, r4
 8003478:	1a51      	subs	r1, r2, r1
 800347a:	6139      	str	r1, [r7, #16]
 800347c:	4629      	mov	r1, r5
 800347e:	eb63 0301 	sbc.w	r3, r3, r1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003490:	4659      	mov	r1, fp
 8003492:	018b      	lsls	r3, r1, #6
 8003494:	4651      	mov	r1, sl
 8003496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349a:	4651      	mov	r1, sl
 800349c:	018a      	lsls	r2, r1, #6
 800349e:	4651      	mov	r1, sl
 80034a0:	ebb2 0801 	subs.w	r8, r2, r1
 80034a4:	4659      	mov	r1, fp
 80034a6:	eb63 0901 	sbc.w	r9, r3, r1
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034be:	4690      	mov	r8, r2
 80034c0:	4699      	mov	r9, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	eb18 0303 	adds.w	r3, r8, r3
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	462b      	mov	r3, r5
 80034cc:	eb49 0303 	adc.w	r3, r9, r3
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034de:	4629      	mov	r1, r5
 80034e0:	024b      	lsls	r3, r1, #9
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034e8:	4621      	mov	r1, r4
 80034ea:	024a      	lsls	r2, r1, #9
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f2:	2200      	movs	r2, #0
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034fc:	f7fc fec0 	bl	8000280 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003508:	e058      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b38      	ldr	r3, [pc, #224]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	2200      	movs	r2, #0
 8003512:	4618      	mov	r0, r3
 8003514:	4611      	mov	r1, r2
 8003516:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003524:	4642      	mov	r2, r8
 8003526:	464b      	mov	r3, r9
 8003528:	f04f 0000 	mov.w	r0, #0
 800352c:	f04f 0100 	mov.w	r1, #0
 8003530:	0159      	lsls	r1, r3, #5
 8003532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003536:	0150      	lsls	r0, r2, #5
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4641      	mov	r1, r8
 800353e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003542:	4649      	mov	r1, r9
 8003544:	eb63 0b01 	sbc.w	fp, r3, r1
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003554:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003558:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800355c:	ebb2 040a 	subs.w	r4, r2, sl
 8003560:	eb63 050b 	sbc.w	r5, r3, fp
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	00eb      	lsls	r3, r5, #3
 800356e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003572:	00e2      	lsls	r2, r4, #3
 8003574:	4614      	mov	r4, r2
 8003576:	461d      	mov	r5, r3
 8003578:	4643      	mov	r3, r8
 800357a:	18e3      	adds	r3, r4, r3
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	464b      	mov	r3, r9
 8003580:	eb45 0303 	adc.w	r3, r5, r3
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003592:	4629      	mov	r1, r5
 8003594:	028b      	lsls	r3, r1, #10
 8003596:	4621      	mov	r1, r4
 8003598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800359c:	4621      	mov	r1, r4
 800359e:	028a      	lsls	r2, r1, #10
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a6:	2200      	movs	r2, #0
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	61fa      	str	r2, [r7, #28]
 80035ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b0:	f7fc fe66 	bl	8000280 <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4613      	mov	r3, r2
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d6:	e002      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3750      	adds	r7, #80	; 0x50
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	007a1200 	.word	0x007a1200

080035f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000000 	.word	0x20000000

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a9b      	lsrs	r3, r3, #10
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	0800999c 	.word	0x0800999c

08003638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800363c:	f7ff ffdc 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0b5b      	lsrs	r3, r3, #13
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK2Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	0800999c 	.word	0x0800999c

08003660 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	220f      	movs	r2, #15
 800366e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_RCC_GetClockConfig+0x5c>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HAL_RCC_GetClockConfig+0x5c>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <HAL_RCC_GetClockConfig+0x5c>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_GetClockConfig+0x5c>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	08db      	lsrs	r3, r3, #3
 800369a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <HAL_RCC_GetClockConfig+0x60>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0207 	and.w	r2, r3, #7
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40023c00 	.word	0x40023c00

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d038      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036ec:	4b68      	ldr	r3, [pc, #416]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036f2:	f7fe fce5 	bl	80020c0 <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036fa:	f7fe fce1 	bl	80020c0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0bd      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800370c:	4b61      	ldr	r3, [pc, #388]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	019b      	lsls	r3, r3, #6
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	071b      	lsls	r3, r3, #28
 800372a:	495a      	ldr	r1, [pc, #360]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003732:	4b57      	ldr	r3, [pc, #348]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003738:	f7fe fcc2 	bl	80020c0 <HAL_GetTick>
 800373c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003740:	f7fe fcbe 	bl	80020c0 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e09a      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003752:	4b50      	ldr	r3, [pc, #320]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8083 	beq.w	8003872 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	4b48      	ldr	r3, [pc, #288]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	4a47      	ldr	r2, [pc, #284]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377a:	6413      	str	r3, [r2, #64]	; 0x40
 800377c:	4b45      	ldr	r3, [pc, #276]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003788:	4b43      	ldr	r3, [pc, #268]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a42      	ldr	r2, [pc, #264]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003794:	f7fe fc94 	bl	80020c0 <HAL_GetTick>
 8003798:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fe fc90 	bl	80020c0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e06c      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037ae:	4b3a      	ldr	r3, [pc, #232]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037ba:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02f      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d028      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d8:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e8:	4b2c      	ldr	r3, [pc, #176]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037ee:	4a29      	ldr	r2, [pc, #164]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037f4:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d114      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe fc5e 	bl	80020c0 <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe fc5a 	bl	80020c0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e034      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ee      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003836:	d10d      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384c:	4911      	ldr	r1, [pc, #68]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
 8003852:	e005      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800385e:	6093      	str	r3, [r2, #8]
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003862:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	4909      	ldr	r1, [pc, #36]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386e:	4313      	orrs	r3, r2
 8003870:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7d1a      	ldrb	r2, [r3, #20]
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003884:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	42470068 	.word	0x42470068
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000
 800389c:	42470e40 	.word	0x42470e40
 80038a0:	424711e0 	.word	0x424711e0

080038a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e066      	b.n	8003988 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7f5b      	ldrb	r3, [r3, #29]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe f882 	bl	80019d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	22ca      	movs	r2, #202	; 0xca
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2253      	movs	r2, #83	; 0x53
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa45 	bl	8003d76 <RTC_EnterInitMode>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d12c      	bne.n	8003950 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003908:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6899      	ldr	r1, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68d2      	ldr	r2, [r2, #12]
 8003930:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6919      	ldr	r1, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	041a      	lsls	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa4c 	bl	8003de4 <RTC_ExitInitMode>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d113      	bne.n	800397e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	22ff      	movs	r2, #255	; 0xff
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	7f1b      	ldrb	r3, [r3, #28]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_RTC_SetTime+0x1c>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e087      	b.n	8003abc <HAL_RTC_SetTime+0x12c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2202      	movs	r2, #2
 80039b6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d126      	bne.n	8003a0c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2200      	movs	r2, #0
 80039d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fa29 	bl	8003e2e <RTC_ByteToBcd2>
 80039dc:	4603      	mov	r3, r0
 80039de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fa22 	bl	8003e2e <RTC_ByteToBcd2>
 80039ea:	4603      	mov	r3, r0
 80039ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	789b      	ldrb	r3, [r3, #2]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fa1a 	bl	8003e2e <RTC_ByteToBcd2>
 80039fa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	78db      	ldrb	r3, [r3, #3]
 8003a04:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e018      	b.n	8003a3e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d102      	bne.n	8003a20 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a2c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a32:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	78db      	ldrb	r3, [r3, #3]
 8003a38:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	22ca      	movs	r2, #202	; 0xca
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2253      	movs	r2, #83	; 0x53
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f991 	bl	8003d76 <RTC_EnterInitMode>
 8003a54:	4603      	mov	r3, r0
 8003a56:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d120      	bne.n	8003aa0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a68:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a6c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f9a4 	bl	8003de4 <RTC_ExitInitMode>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	22ff      	movs	r2, #255	; 0xff
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	771a      	strb	r2, [r3, #28]

  return status;
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd90      	pop	{r4, r7, pc}

08003ac4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003af6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003afa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	0d9b      	lsrs	r3, r3, #22
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d11a      	bne.n	8003b76 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f98f 	bl	8003e68 <RTC_Bcd2ToByte>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f986 	bl	8003e68 <RTC_Bcd2ToByte>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	789b      	ldrb	r3, [r3, #2]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f97d 	bl	8003e68 <RTC_Bcd2ToByte>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	7f1b      	ldrb	r3, [r3, #28]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_RTC_SetDate+0x1c>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e071      	b.n	8003c80 <HAL_RTC_SetDate+0x100>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10e      	bne.n	8003bcc <HAL_RTC_SetDate+0x4c>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	785b      	ldrb	r3, [r3, #1]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	f023 0310 	bic.w	r3, r3, #16
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	330a      	adds	r3, #10
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11c      	bne.n	8003c0c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	78db      	ldrb	r3, [r3, #3]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f929 	bl	8003e2e <RTC_ByteToBcd2>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f922 	bl	8003e2e <RTC_ByteToBcd2>
 8003bea:	4603      	mov	r3, r0
 8003bec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	789b      	ldrb	r3, [r3, #2]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 f91a 	bl	8003e2e <RTC_ByteToBcd2>
 8003bfa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bfc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e00e      	b.n	8003c2a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	78db      	ldrb	r3, [r3, #3]
 8003c10:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	785b      	ldrb	r3, [r3, #1]
 8003c16:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c18:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c1e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	22ca      	movs	r2, #202	; 0xca
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2253      	movs	r2, #83	; 0x53
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f89b 	bl	8003d76 <RTC_EnterInitMode>
 8003c40:	4603      	mov	r3, r0
 8003c42:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10c      	bne.n	8003c64 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c58:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8c2 	bl	8003de4 <RTC_ExitInitMode>
 8003c60:	4603      	mov	r3, r0
 8003c62:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	22ff      	movs	r2, #255	; 0xff
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	771a      	strb	r2, [r3, #28]

  return status;
 8003c7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd90      	pop	{r4, r7, pc}

08003c88 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ca2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	0b5b      	lsrs	r3, r3, #13
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11a      	bne.n	8003d1c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	78db      	ldrb	r3, [r3, #3]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f8bc 	bl	8003e68 <RTC_Bcd2ToByte>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f8b3 	bl	8003e68 <RTC_Bcd2ToByte>
 8003d02:	4603      	mov	r3, r0
 8003d04:	461a      	mov	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	789b      	ldrb	r3, [r3, #2]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f8aa 	bl	8003e68 <RTC_Bcd2ToByte>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d40:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d42:	f7fe f9bd 	bl	80020c0 <HAL_GetTick>
 8003d46:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d48:	e009      	b.n	8003d5e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d4a:	f7fe f9b9 	bl	80020c0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d58:	d901      	bls.n	8003d5e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e007      	b.n	8003d6e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ee      	beq.n	8003d4a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d122      	bne.n	8003dda <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003da4:	f7fe f98c 	bl	80020c0 <HAL_GetTick>
 8003da8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003daa:	e00c      	b.n	8003dc6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dac:	f7fe f988 	bl	80020c0 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dba:	d904      	bls.n	8003dc6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <RTC_EnterInitMode+0x64>
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d1e8      	bne.n	8003dac <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dfe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ff89 	bl	8003d26 <HAL_RTC_WaitForSynchro>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	4603      	mov	r3, r0
 8003e36:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003e3c:	e005      	b.n	8003e4a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	3301      	adds	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	3b0a      	subs	r3, #10
 8003e48:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	2b09      	cmp	r3, #9
 8003e4e:	d8f6      	bhi.n	8003e3e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	b2db      	uxtb	r3, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	0092      	lsls	r2, r2, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	4413      	add	r3, r2
 8003e92:	b2db      	uxtb	r3, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07b      	b.n	8003faa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d108      	bne.n	8003ecc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec2:	d009      	beq.n	8003ed8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	61da      	str	r2, [r3, #28]
 8003eca:	e005      	b.n	8003ed8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fdce 	bl	8001a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	ea42 0103 	orr.w	r1, r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0104 	and.w	r1, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0210 	and.w	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d110      	bne.n	8003ff0 <HAL_SPI_Receive_DMA+0x3c>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2204      	movs	r2, #4
 8003fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f8ac 	bl	8004144 <HAL_SPI_TransmitReceive_DMA>
 8003fec:	4603      	mov	r3, r0
 8003fee:	e09f      	b.n	8004130 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_SPI_Receive_DMA+0x4a>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e098      	b.n	8004130 <HAL_SPI_Receive_DMA+0x17c>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b01      	cmp	r3, #1
 8004010:	d002      	beq.n	8004018 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004012:	2302      	movs	r3, #2
 8004014:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004016:	e086      	b.n	8004126 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_SPI_Receive_DMA+0x70>
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d102      	bne.n	800402a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004028:	e07d      	b.n	8004126 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2204      	movs	r2, #4
 800402e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406a:	d10f      	bne.n	800408c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800408a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	4a29      	ldr	r2, [pc, #164]	; (8004138 <HAL_SPI_Receive_DMA+0x184>)
 8004092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	4a28      	ldr	r2, [pc, #160]	; (800413c <HAL_SPI_Receive_DMA+0x188>)
 800409a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a0:	4a27      	ldr	r2, [pc, #156]	; (8004140 <HAL_SPI_Receive_DMA+0x18c>)
 80040a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a8:	2200      	movs	r2, #0
 80040aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	4619      	mov	r1, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80040c4:	f7fe f998 	bl	80023f8 <HAL_DMA_Start_IT>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f043 0210 	orr.w	r2, r3, #16
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80040e6:	e01e      	b.n	8004126 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d007      	beq.n	8004106 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004104:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0220 	orr.w	r2, r2, #32
 8004114:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800412e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	080044e5 	.word	0x080044e5
 800413c:	080043ad 	.word	0x080043ad
 8004140:	0800451d 	.word	0x0800451d

08004144 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004160:	2302      	movs	r3, #2
 8004162:	e0e3      	b.n	800432c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004172:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800417a:	7dbb      	ldrb	r3, [r7, #22]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d00d      	beq.n	800419c <HAL_SPI_TransmitReceive_DMA+0x58>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004186:	d106      	bne.n	8004196 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004190:	7dbb      	ldrb	r3, [r7, #22]
 8004192:	2b04      	cmp	r3, #4
 8004194:	d002      	beq.n	800419c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004196:	2302      	movs	r3, #2
 8004198:	75fb      	strb	r3, [r7, #23]
    goto error;
 800419a:	e0c2      	b.n	8004322 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041b2:	e0b6      	b.n	8004322 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d003      	beq.n	80041c8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2205      	movs	r2, #5
 80041c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	887a      	ldrh	r2, [r7, #2]
 80041de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	887a      	ldrh	r2, [r7, #2]
 80041ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b04      	cmp	r3, #4
 8004208:	d108      	bne.n	800421c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	4a49      	ldr	r2, [pc, #292]	; (8004334 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	4a48      	ldr	r2, [pc, #288]	; (8004338 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004218:	63da      	str	r2, [r3, #60]	; 0x3c
 800421a:	e007      	b.n	800422c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004220:	4a46      	ldr	r2, [pc, #280]	; (800433c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004228:	4a45      	ldr	r2, [pc, #276]	; (8004340 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800422a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	4a44      	ldr	r2, [pc, #272]	; (8004344 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004232:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004238:	2200      	movs	r2, #0
 800423a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	4619      	mov	r1, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004252:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004254:	f7fe f8d0 	bl	80023f8 <HAL_DMA_Start_IT>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f043 0210 	orr.w	r2, r3, #16
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004276:	e054      	b.n	8004322 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	2200      	movs	r2, #0
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004294:	2200      	movs	r2, #0
 8004296:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	2200      	movs	r2, #0
 800429e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	2200      	movs	r2, #0
 80042a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4619      	mov	r1, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042c0:	f7fe f89a 	bl	80023f8 <HAL_DMA_Start_IT>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	f043 0210 	orr.w	r2, r3, #16
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80042e2:	e01e      	b.n	8004322 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d007      	beq.n	8004302 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004300:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0220 	orr.w	r2, r2, #32
 8004310:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0202 	orr.w	r2, r2, #2
 8004320:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	080044e5 	.word	0x080044e5
 8004338:	080043ad 	.word	0x080043ad
 800433c:	08004501 	.word	0x08004501
 8004340:	08004455 	.word	0x08004455
 8004344:	0800451d 	.word	0x0800451d

08004348 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ba:	f7fd fe81 	bl	80020c0 <HAL_GetTick>
 80043be:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ce:	d03b      	beq.n	8004448 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0220 	bic.w	r2, r2, #32
 80043de:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <SPI_DMAReceiveCplt+0x58>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f0:	d108      	bne.n	8004404 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0203 	bic.w	r2, r2, #3
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	e007      	b.n	8004414 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	2164      	movs	r1, #100	; 0x64
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f927 	bl	800466c <SPI_EndRxTransaction>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff ffa9 	bl	8004398 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004446:	e002      	b.n	800444e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f7ff ff7d 	bl	8004348 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004462:	f7fd fe2d 	bl	80020c0 <HAL_GetTick>
 8004466:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004476:	d02f      	beq.n	80044d8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0220 	bic.w	r2, r2, #32
 8004486:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	2164      	movs	r1, #100	; 0x64
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f953 	bl	8004738 <SPI_EndRxTxTransaction>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0203 	bic.w	r2, r2, #3
 80044b2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff ff61 	bl	8004398 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80044d6:	e002      	b.n	80044de <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff ff3f 	bl	800435c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7ff ff3c 	bl	8004370 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff ff38 	bl	8004384 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0203 	bic.w	r2, r2, #3
 8004538:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff ff22 	bl	8004398 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800456c:	f7fd fda8 	bl	80020c0 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	4413      	add	r3, r2
 800457a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800457c:	f7fd fda0 	bl	80020c0 <HAL_GetTick>
 8004580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004582:	4b39      	ldr	r3, [pc, #228]	; (8004668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	015b      	lsls	r3, r3, #5
 8004588:	0d1b      	lsrs	r3, r3, #20
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	fb02 f303 	mul.w	r3, r2, r3
 8004590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004592:	e054      	b.n	800463e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d050      	beq.n	800463e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800459c:	f7fd fd90 	bl	80020c0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d902      	bls.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d13d      	bne.n	800462e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d111      	bne.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d4:	d004      	beq.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045de:	d107      	bne.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f8:	d10f      	bne.n	800461a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e017      	b.n	800465e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3b01      	subs	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	bf0c      	ite	eq
 800464e:	2301      	moveq	r3, #1
 8004650:	2300      	movne	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	429a      	cmp	r2, r3
 800465a:	d19b      	bne.n	8004594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000000 	.word	0x20000000

0800466c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004680:	d111      	bne.n	80046a6 <SPI_EndRxTransaction+0x3a>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468a:	d004      	beq.n	8004696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004694:	d107      	bne.n	80046a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ae:	d12a      	bne.n	8004706 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b8:	d012      	beq.n	80046e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f7ff ff49 	bl	800455c <SPI_WaitFlagStateUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02d      	beq.n	800472c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e026      	b.n	800472e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2101      	movs	r1, #1
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff ff36 	bl	800455c <SPI_WaitFlagStateUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01a      	beq.n	800472c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e013      	b.n	800472e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2200      	movs	r2, #0
 800470e:	2101      	movs	r1, #1
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f7ff ff23 	bl	800455c <SPI_WaitFlagStateUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	f043 0220 	orr.w	r2, r3, #32
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e000      	b.n	800472e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004744:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <SPI_EndRxTxTransaction+0x7c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <SPI_EndRxTxTransaction+0x80>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0d5b      	lsrs	r3, r3, #21
 8004750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004754:	fb02 f303 	mul.w	r3, r2, r3
 8004758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d112      	bne.n	800478a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2200      	movs	r2, #0
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff fef4 	bl	800455c <SPI_WaitFlagStateUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d016      	beq.n	80047a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	f043 0220 	orr.w	r2, r3, #32
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e00f      	b.n	80047aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	3b01      	subs	r3, #1
 8004794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b80      	cmp	r3, #128	; 0x80
 80047a2:	d0f2      	beq.n	800478a <SPI_EndRxTxTransaction+0x52>
 80047a4:	e000      	b.n	80047a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80047a6:	bf00      	nop
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000000 	.word	0x20000000
 80047b8:	165e9f81 	.word	0x165e9f81

080047bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e041      	b.n	8004852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f839 	bl	800485a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f000 f9ca 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e044      	b.n	8004912 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <HAL_TIM_Base_Start_IT+0xb0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d018      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d013      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <HAL_TIM_Base_Start_IT+0xb4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a19      	ldr	r2, [pc, #100]	; (8004928 <HAL_TIM_Base_Start_IT+0xb8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a17      	ldr	r2, [pc, #92]	; (800492c <HAL_TIM_Base_Start_IT+0xbc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x6c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a16      	ldr	r2, [pc, #88]	; (8004930 <HAL_TIM_Base_Start_IT+0xc0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d111      	bne.n	8004900 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d010      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fe:	e007      	b.n	8004910 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40014000 	.word	0x40014000

08004934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0202 	mvn.w	r2, #2
 8004960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8ee 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f8e0 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f8f1 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b04      	cmp	r3, #4
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0204 	mvn.w	r2, #4
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8c4 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f8b6 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8c7 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0208 	mvn.w	r2, #8
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f89a 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f88c 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f89d 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0210 	mvn.w	r2, #16
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2208      	movs	r2, #8
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f870 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f862 	bl	8004b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f873 	bl	8004b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10e      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0201 	mvn.w	r2, #1
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc ff50 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d10e      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d107      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8e2 	bl	8004ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b40      	cmp	r3, #64	; 0x40
 8004af0:	d10e      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d107      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f838 	bl	8004b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d10e      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d107      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0220 	mvn.w	r2, #32
 8004b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f8ac 	bl	8004c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a34      	ldr	r2, [pc, #208]	; (8004c78 <TIM_Base_SetConfig+0xe4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00f      	beq.n	8004bcc <TIM_Base_SetConfig+0x38>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d00b      	beq.n	8004bcc <TIM_Base_SetConfig+0x38>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a31      	ldr	r2, [pc, #196]	; (8004c7c <TIM_Base_SetConfig+0xe8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d007      	beq.n	8004bcc <TIM_Base_SetConfig+0x38>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a30      	ldr	r2, [pc, #192]	; (8004c80 <TIM_Base_SetConfig+0xec>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_Base_SetConfig+0x38>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <TIM_Base_SetConfig+0xf0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d108      	bne.n	8004bde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a25      	ldr	r2, [pc, #148]	; (8004c78 <TIM_Base_SetConfig+0xe4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01b      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d017      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a22      	ldr	r2, [pc, #136]	; (8004c7c <TIM_Base_SetConfig+0xe8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <TIM_Base_SetConfig+0xec>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00f      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <TIM_Base_SetConfig+0xf0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00b      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <TIM_Base_SetConfig+0xf4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d007      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <TIM_Base_SetConfig+0xf8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <TIM_Base_SetConfig+0xfc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d108      	bne.n	8004c30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a08      	ldr	r2, [pc, #32]	; (8004c78 <TIM_Base_SetConfig+0xe4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	40000c00 	.word	0x40000c00
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800

08004c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e03f      	b.n	8004d4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd f944 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	; 0x24
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f929 	bl	8004f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b08a      	sub	sp, #40	; 0x28
 8004d5a:	af02      	add	r7, sp, #8
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d17c      	bne.n	8004e70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_UART_Transmit+0x2c>
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e075      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_UART_Transmit+0x3e>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e06e      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2221      	movs	r2, #33	; 0x21
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004daa:	f7fd f989 	bl	80020c0 <HAL_GetTick>
 8004dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc4:	d108      	bne.n	8004dd8 <HAL_UART_Transmit+0x82>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e003      	b.n	8004de0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004de8:	e02a      	b.n	8004e40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f840 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e036      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e007      	b.n	8004e32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1cf      	bne.n	8004dea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2140      	movs	r1, #64	; 0x40
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f810 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e006      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e000      	b.n	8004e72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
  }
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b090      	sub	sp, #64	; 0x40
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8a:	e050      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d04c      	beq.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x30>
 8004e9a:	f7fd f911 	bl	80020c0 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d241      	bcs.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eca:	637a      	str	r2, [r7, #52]	; 0x34
 8004ecc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e5      	bne.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3314      	adds	r3, #20
 8004ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	613b      	str	r3, [r7, #16]
   return(result);
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004efe:	623a      	str	r2, [r7, #32]
 8004f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	69f9      	ldr	r1, [r7, #28]
 8004f04:	6a3a      	ldr	r2, [r7, #32]
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e5      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e00f      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d09f      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3740      	adds	r7, #64	; 0x40
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f5c:	b0c0      	sub	sp, #256	; 0x100
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	68d9      	ldr	r1, [r3, #12]
 8004f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	ea40 0301 	orr.w	r3, r0, r1
 8004f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fb0:	f021 010c 	bic.w	r1, r1, #12
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd2:	6999      	ldr	r1, [r3, #24]
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	ea40 0301 	orr.w	r3, r0, r1
 8004fde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4b8f      	ldr	r3, [pc, #572]	; (8005224 <UART_SetConfig+0x2cc>)
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d005      	beq.n	8004ff8 <UART_SetConfig+0xa0>
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	4b8d      	ldr	r3, [pc, #564]	; (8005228 <UART_SetConfig+0x2d0>)
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d104      	bne.n	8005002 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ff8:	f7fe fb1e 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8004ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005000:	e003      	b.n	800500a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005002:	f7fe fb05 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8005006:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005014:	f040 810c 	bne.w	8005230 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800501c:	2200      	movs	r2, #0
 800501e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800502a:	4622      	mov	r2, r4
 800502c:	462b      	mov	r3, r5
 800502e:	1891      	adds	r1, r2, r2
 8005030:	65b9      	str	r1, [r7, #88]	; 0x58
 8005032:	415b      	adcs	r3, r3
 8005034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800503a:	4621      	mov	r1, r4
 800503c:	eb12 0801 	adds.w	r8, r2, r1
 8005040:	4629      	mov	r1, r5
 8005042:	eb43 0901 	adc.w	r9, r3, r1
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800505a:	4690      	mov	r8, r2
 800505c:	4699      	mov	r9, r3
 800505e:	4623      	mov	r3, r4
 8005060:	eb18 0303 	adds.w	r3, r8, r3
 8005064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005068:	462b      	mov	r3, r5
 800506a:	eb49 0303 	adc.w	r3, r9, r3
 800506e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800507e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005086:	460b      	mov	r3, r1
 8005088:	18db      	adds	r3, r3, r3
 800508a:	653b      	str	r3, [r7, #80]	; 0x50
 800508c:	4613      	mov	r3, r2
 800508e:	eb42 0303 	adc.w	r3, r2, r3
 8005092:	657b      	str	r3, [r7, #84]	; 0x54
 8005094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800509c:	f7fb f8f0 	bl	8000280 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4b61      	ldr	r3, [pc, #388]	; (800522c <UART_SetConfig+0x2d4>)
 80050a6:	fba3 2302 	umull	r2, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	011c      	lsls	r4, r3, #4
 80050ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	1891      	adds	r1, r2, r2
 80050c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80050c8:	415b      	adcs	r3, r3
 80050ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050d0:	4641      	mov	r1, r8
 80050d2:	eb12 0a01 	adds.w	sl, r2, r1
 80050d6:	4649      	mov	r1, r9
 80050d8:	eb43 0b01 	adc.w	fp, r3, r1
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050f0:	4692      	mov	sl, r2
 80050f2:	469b      	mov	fp, r3
 80050f4:	4643      	mov	r3, r8
 80050f6:	eb1a 0303 	adds.w	r3, sl, r3
 80050fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050fe:	464b      	mov	r3, r9
 8005100:	eb4b 0303 	adc.w	r3, fp, r3
 8005104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005114:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800511c:	460b      	mov	r3, r1
 800511e:	18db      	adds	r3, r3, r3
 8005120:	643b      	str	r3, [r7, #64]	; 0x40
 8005122:	4613      	mov	r3, r2
 8005124:	eb42 0303 	adc.w	r3, r2, r3
 8005128:	647b      	str	r3, [r7, #68]	; 0x44
 800512a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800512e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005132:	f7fb f8a5 	bl	8000280 <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4611      	mov	r1, r2
 800513c:	4b3b      	ldr	r3, [pc, #236]	; (800522c <UART_SetConfig+0x2d4>)
 800513e:	fba3 2301 	umull	r2, r3, r3, r1
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	2264      	movs	r2, #100	; 0x64
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	1acb      	subs	r3, r1, r3
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005152:	4b36      	ldr	r3, [pc, #216]	; (800522c <UART_SetConfig+0x2d4>)
 8005154:	fba3 2302 	umull	r2, r3, r3, r2
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005160:	441c      	add	r4, r3
 8005162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005166:	2200      	movs	r2, #0
 8005168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800516c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005174:	4642      	mov	r2, r8
 8005176:	464b      	mov	r3, r9
 8005178:	1891      	adds	r1, r2, r2
 800517a:	63b9      	str	r1, [r7, #56]	; 0x38
 800517c:	415b      	adcs	r3, r3
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005184:	4641      	mov	r1, r8
 8005186:	1851      	adds	r1, r2, r1
 8005188:	6339      	str	r1, [r7, #48]	; 0x30
 800518a:	4649      	mov	r1, r9
 800518c:	414b      	adcs	r3, r1
 800518e:	637b      	str	r3, [r7, #52]	; 0x34
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800519c:	4659      	mov	r1, fp
 800519e:	00cb      	lsls	r3, r1, #3
 80051a0:	4651      	mov	r1, sl
 80051a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a6:	4651      	mov	r1, sl
 80051a8:	00ca      	lsls	r2, r1, #3
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	4642      	mov	r2, r8
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051b8:	464b      	mov	r3, r9
 80051ba:	460a      	mov	r2, r1
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051d8:	460b      	mov	r3, r1
 80051da:	18db      	adds	r3, r3, r3
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051de:	4613      	mov	r3, r2
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051ee:	f7fb f847 	bl	8000280 <__aeabi_uldivmod>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4b0d      	ldr	r3, [pc, #52]	; (800522c <UART_SetConfig+0x2d4>)
 80051f8:	fba3 1302 	umull	r1, r3, r3, r2
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	2164      	movs	r1, #100	; 0x64
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	3332      	adds	r3, #50	; 0x32
 800520a:	4a08      	ldr	r2, [pc, #32]	; (800522c <UART_SetConfig+0x2d4>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	f003 0207 	and.w	r2, r3, #7
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4422      	add	r2, r4
 800521e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005220:	e106      	b.n	8005430 <UART_SetConfig+0x4d8>
 8005222:	bf00      	nop
 8005224:	40011000 	.word	0x40011000
 8005228:	40011400 	.word	0x40011400
 800522c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005234:	2200      	movs	r2, #0
 8005236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800523a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800523e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005242:	4642      	mov	r2, r8
 8005244:	464b      	mov	r3, r9
 8005246:	1891      	adds	r1, r2, r2
 8005248:	6239      	str	r1, [r7, #32]
 800524a:	415b      	adcs	r3, r3
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005252:	4641      	mov	r1, r8
 8005254:	1854      	adds	r4, r2, r1
 8005256:	4649      	mov	r1, r9
 8005258:	eb43 0501 	adc.w	r5, r3, r1
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	00eb      	lsls	r3, r5, #3
 8005266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800526a:	00e2      	lsls	r2, r4, #3
 800526c:	4614      	mov	r4, r2
 800526e:	461d      	mov	r5, r3
 8005270:	4643      	mov	r3, r8
 8005272:	18e3      	adds	r3, r4, r3
 8005274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005278:	464b      	mov	r3, r9
 800527a:	eb45 0303 	adc.w	r3, r5, r3
 800527e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800528e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800529e:	4629      	mov	r1, r5
 80052a0:	008b      	lsls	r3, r1, #2
 80052a2:	4621      	mov	r1, r4
 80052a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052a8:	4621      	mov	r1, r4
 80052aa:	008a      	lsls	r2, r1, #2
 80052ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052b0:	f7fa ffe6 	bl	8000280 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4b60      	ldr	r3, [pc, #384]	; (800543c <UART_SetConfig+0x4e4>)
 80052ba:	fba3 2302 	umull	r2, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	011c      	lsls	r4, r3, #4
 80052c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052d4:	4642      	mov	r2, r8
 80052d6:	464b      	mov	r3, r9
 80052d8:	1891      	adds	r1, r2, r2
 80052da:	61b9      	str	r1, [r7, #24]
 80052dc:	415b      	adcs	r3, r3
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e4:	4641      	mov	r1, r8
 80052e6:	1851      	adds	r1, r2, r1
 80052e8:	6139      	str	r1, [r7, #16]
 80052ea:	4649      	mov	r1, r9
 80052ec:	414b      	adcs	r3, r1
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052fc:	4659      	mov	r1, fp
 80052fe:	00cb      	lsls	r3, r1, #3
 8005300:	4651      	mov	r1, sl
 8005302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005306:	4651      	mov	r1, sl
 8005308:	00ca      	lsls	r2, r1, #3
 800530a:	4610      	mov	r0, r2
 800530c:	4619      	mov	r1, r3
 800530e:	4603      	mov	r3, r0
 8005310:	4642      	mov	r2, r8
 8005312:	189b      	adds	r3, r3, r2
 8005314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005318:	464b      	mov	r3, r9
 800531a:	460a      	mov	r2, r1
 800531c:	eb42 0303 	adc.w	r3, r2, r3
 8005320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	67bb      	str	r3, [r7, #120]	; 0x78
 800532e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800533c:	4649      	mov	r1, r9
 800533e:	008b      	lsls	r3, r1, #2
 8005340:	4641      	mov	r1, r8
 8005342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005346:	4641      	mov	r1, r8
 8005348:	008a      	lsls	r2, r1, #2
 800534a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800534e:	f7fa ff97 	bl	8000280 <__aeabi_uldivmod>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4611      	mov	r1, r2
 8005358:	4b38      	ldr	r3, [pc, #224]	; (800543c <UART_SetConfig+0x4e4>)
 800535a:	fba3 2301 	umull	r2, r3, r3, r1
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2264      	movs	r2, #100	; 0x64
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	1acb      	subs	r3, r1, r3
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	3332      	adds	r3, #50	; 0x32
 800536c:	4a33      	ldr	r2, [pc, #204]	; (800543c <UART_SetConfig+0x4e4>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005378:	441c      	add	r4, r3
 800537a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537e:	2200      	movs	r2, #0
 8005380:	673b      	str	r3, [r7, #112]	; 0x70
 8005382:	677a      	str	r2, [r7, #116]	; 0x74
 8005384:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	1891      	adds	r1, r2, r2
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	415b      	adcs	r3, r3
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005398:	4641      	mov	r1, r8
 800539a:	1851      	adds	r1, r2, r1
 800539c:	6039      	str	r1, [r7, #0]
 800539e:	4649      	mov	r1, r9
 80053a0:	414b      	adcs	r3, r1
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053b0:	4659      	mov	r1, fp
 80053b2:	00cb      	lsls	r3, r1, #3
 80053b4:	4651      	mov	r1, sl
 80053b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ba:	4651      	mov	r1, sl
 80053bc:	00ca      	lsls	r2, r1, #3
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	4642      	mov	r2, r8
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ca:	464b      	mov	r3, r9
 80053cc:	460a      	mov	r2, r1
 80053ce:	eb42 0303 	adc.w	r3, r2, r3
 80053d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	663b      	str	r3, [r7, #96]	; 0x60
 80053de:	667a      	str	r2, [r7, #100]	; 0x64
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053ec:	4649      	mov	r1, r9
 80053ee:	008b      	lsls	r3, r1, #2
 80053f0:	4641      	mov	r1, r8
 80053f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053f6:	4641      	mov	r1, r8
 80053f8:	008a      	lsls	r2, r1, #2
 80053fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053fe:	f7fa ff3f 	bl	8000280 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <UART_SetConfig+0x4e4>)
 8005408:	fba3 1302 	umull	r1, r3, r3, r2
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	2164      	movs	r1, #100	; 0x64
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	3332      	adds	r3, #50	; 0x32
 800541a:	4a08      	ldr	r2, [pc, #32]	; (800543c <UART_SetConfig+0x4e4>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	f003 020f 	and.w	r2, r3, #15
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4422      	add	r2, r4
 800542e:	609a      	str	r2, [r3, #8]
}
 8005430:	bf00      	nop
 8005432:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005436:	46bd      	mov	sp, r7
 8005438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800543c:	51eb851f 	.word	0x51eb851f

08005440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	6039      	str	r1, [r7, #0]
 800544a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800544c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005450:	2b00      	cmp	r3, #0
 8005452:	db0a      	blt.n	800546a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	b2da      	uxtb	r2, r3
 8005458:	490c      	ldr	r1, [pc, #48]	; (800548c <__NVIC_SetPriority+0x4c>)
 800545a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545e:	0112      	lsls	r2, r2, #4
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	440b      	add	r3, r1
 8005464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005468:	e00a      	b.n	8005480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4908      	ldr	r1, [pc, #32]	; (8005490 <__NVIC_SetPriority+0x50>)
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	3b04      	subs	r3, #4
 8005478:	0112      	lsls	r2, r2, #4
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	440b      	add	r3, r1
 800547e:	761a      	strb	r2, [r3, #24]
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	e000e100 	.word	0xe000e100
 8005490:	e000ed00 	.word	0xe000ed00

08005494 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <SysTick_Handler+0x1c>)
 800549a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800549c:	f002 f880 	bl	80075a0 <xTaskGetSchedulerState>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d001      	beq.n	80054aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80054a6:	f002 ff67 	bl	8008378 <xPortSysTickHandler>
  }
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000e010 	.word	0xe000e010

080054b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80054b8:	2100      	movs	r1, #0
 80054ba:	f06f 0004 	mvn.w	r0, #4
 80054be:	f7ff ffbf 	bl	8005440 <__NVIC_SetPriority>
#endif
}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ce:	f3ef 8305 	mrs	r3, IPSR
 80054d2:	603b      	str	r3, [r7, #0]
  return(result);
 80054d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054da:	f06f 0305 	mvn.w	r3, #5
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	e00c      	b.n	80054fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054e2:	4b0a      	ldr	r3, [pc, #40]	; (800550c <osKernelInitialize+0x44>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054ea:	4b08      	ldr	r3, [pc, #32]	; (800550c <osKernelInitialize+0x44>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	e002      	b.n	80054fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295
 80054fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054fc:	687b      	ldr	r3, [r7, #4]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	2000023c 	.word	0x2000023c

08005510 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005516:	f3ef 8305 	mrs	r3, IPSR
 800551a:	603b      	str	r3, [r7, #0]
  return(result);
 800551c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005522:	f06f 0305 	mvn.w	r3, #5
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	e010      	b.n	800554c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800552a:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <osKernelStart+0x48>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d109      	bne.n	8005546 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005532:	f7ff ffbf 	bl	80054b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <osKernelStart+0x48>)
 8005538:	2202      	movs	r2, #2
 800553a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800553c:	f001 fbb2 	bl	8006ca4 <vTaskStartScheduler>
      stat = osOK;
 8005540:	2300      	movs	r3, #0
 8005542:	607b      	str	r3, [r7, #4]
 8005544:	e002      	b.n	800554c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005546:	f04f 33ff 	mov.w	r3, #4294967295
 800554a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800554c:	687b      	ldr	r3, [r7, #4]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	2000023c 	.word	0x2000023c

0800555c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005562:	f3ef 8305 	mrs	r3, IPSR
 8005566:	603b      	str	r3, [r7, #0]
  return(result);
 8005568:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800556e:	f001 fcc5 	bl	8006efc <xTaskGetTickCountFromISR>
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	e002      	b.n	800557c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005576:	f001 fcb1 	bl	8006edc <xTaskGetTickCount>
 800557a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800557c:	687b      	ldr	r3, [r7, #4]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005586:	b580      	push	{r7, lr}
 8005588:	b08e      	sub	sp, #56	; 0x38
 800558a:	af04      	add	r7, sp, #16
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005596:	f3ef 8305 	mrs	r3, IPSR
 800559a:	617b      	str	r3, [r7, #20]
  return(result);
 800559c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d17e      	bne.n	80056a0 <osThreadNew+0x11a>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d07b      	beq.n	80056a0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055ac:	2318      	movs	r3, #24
 80055ae:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80055b4:	f04f 33ff 	mov.w	r3, #4294967295
 80055b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d045      	beq.n	800564c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <osThreadNew+0x48>
        name = attr->name;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <osThreadNew+0x6e>
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	2b38      	cmp	r3, #56	; 0x38
 80055e6:	d805      	bhi.n	80055f4 <osThreadNew+0x6e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <osThreadNew+0x72>
        return (NULL);
 80055f4:	2300      	movs	r3, #0
 80055f6:	e054      	b.n	80056a2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	089b      	lsrs	r3, r3, #2
 8005606:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00e      	beq.n	800562e <osThreadNew+0xa8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2ba7      	cmp	r3, #167	; 0xa7
 8005616:	d90a      	bls.n	800562e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800561c:	2b00      	cmp	r3, #0
 800561e:	d006      	beq.n	800562e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <osThreadNew+0xa8>
        mem = 1;
 8005628:	2301      	movs	r3, #1
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	e010      	b.n	8005650 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10c      	bne.n	8005650 <osThreadNew+0xca>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d108      	bne.n	8005650 <osThreadNew+0xca>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <osThreadNew+0xca>
          mem = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e001      	b.n	8005650 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d110      	bne.n	8005678 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800565e:	9202      	str	r2, [sp, #8]
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6a3a      	ldr	r2, [r7, #32]
 800566a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f001 f92d 	bl	80068cc <xTaskCreateStatic>
 8005672:	4603      	mov	r3, r0
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	e013      	b.n	80056a0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d110      	bne.n	80056a0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	b29a      	uxth	r2, r3
 8005682:	f107 0310 	add.w	r3, r7, #16
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f001 f978 	bl	8006986 <xTaskCreate>
 8005696:	4603      	mov	r3, r0
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <osThreadNew+0x11a>
            hTask = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056a0:	693b      	ldr	r3, [r7, #16]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3728      	adds	r7, #40	; 0x28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b2:	f3ef 8305 	mrs	r3, IPSR
 80056b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <osDelay+0x1c>
    stat = osErrorISR;
 80056be:	f06f 0305 	mvn.w	r3, #5
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e007      	b.n	80056d6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 fab3 	bl	8006c3c <vTaskDelay>
    }
  }

  return (stat);
 80056d6:	68fb      	ldr	r3, [r7, #12]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ec:	f3ef 8305 	mrs	r3, IPSR
 80056f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80056f2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d174      	bne.n	80057e2 <osMutexNew+0x102>
    if (attr != NULL) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <osMutexNew+0x26>
      type = attr->attr_bits;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e001      	b.n	800570a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <osMutexNew+0x3a>
      rmtx = 1U;
 8005714:	2301      	movs	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e001      	b.n	800571e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d15c      	bne.n	80057e2 <osMutexNew+0x102>
      mem = -1;
 8005728:	f04f 33ff 	mov.w	r3, #4294967295
 800572c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d015      	beq.n	8005760 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d006      	beq.n	800574a <osMutexNew+0x6a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	2b4f      	cmp	r3, #79	; 0x4f
 8005742:	d902      	bls.n	800574a <osMutexNew+0x6a>
          mem = 1;
 8005744:	2301      	movs	r3, #1
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	e00c      	b.n	8005764 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <osMutexNew+0x84>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <osMutexNew+0x84>
            mem = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e001      	b.n	8005764 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d112      	bne.n	8005790 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4619      	mov	r1, r3
 8005776:	2004      	movs	r0, #4
 8005778:	f000 fb17 	bl	8005daa <xQueueCreateMutexStatic>
 800577c:	61f8      	str	r0, [r7, #28]
 800577e:	e016      	b.n	80057ae <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4619      	mov	r1, r3
 8005786:	2001      	movs	r0, #1
 8005788:	f000 fb0f 	bl	8005daa <xQueueCreateMutexStatic>
 800578c:	61f8      	str	r0, [r7, #28]
 800578e:	e00e      	b.n	80057ae <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d004      	beq.n	80057a6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800579c:	2004      	movs	r0, #4
 800579e:	f000 faec 	bl	8005d7a <xQueueCreateMutex>
 80057a2:	61f8      	str	r0, [r7, #28]
 80057a4:	e003      	b.n	80057ae <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80057a6:	2001      	movs	r0, #1
 80057a8:	f000 fae7 	bl	8005d7a <xQueueCreateMutex>
 80057ac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00c      	beq.n	80057ce <osMutexNew+0xee>
        if (attr != NULL) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <osMutexNew+0xe2>
          name = attr->name;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e001      	b.n	80057c6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80057c6:	68f9      	ldr	r1, [r7, #12]
 80057c8:	69f8      	ldr	r0, [r7, #28]
 80057ca:	f001 f821 	bl	8006810 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d006      	beq.n	80057e2 <osMutexNew+0x102>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80057e2:	69fb      	ldr	r3, [r7, #28]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800580a:	f3ef 8305 	mrs	r3, IPSR
 800580e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005810:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005816:	f06f 0305 	mvn.w	r3, #5
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e02c      	b.n	8005878 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005824:	f06f 0303 	mvn.w	r3, #3
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e025      	b.n	8005878 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d011      	beq.n	8005856 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6938      	ldr	r0, [r7, #16]
 8005836:	f000 fb07 	bl	8005e48 <xQueueTakeMutexRecursive>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d01b      	beq.n	8005878 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005846:	f06f 0301 	mvn.w	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e014      	b.n	8005878 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800584e:	f06f 0302 	mvn.w	r3, #2
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e010      	b.n	8005878 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	6938      	ldr	r0, [r7, #16]
 800585a:	f000 fda5 	bl	80063a8 <xQueueSemaphoreTake>
 800585e:	4603      	mov	r3, r0
 8005860:	2b01      	cmp	r3, #1
 8005862:	d009      	beq.n	8005878 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800586a:	f06f 0301 	mvn.w	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e002      	b.n	8005878 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005872:	f06f 0302 	mvn.w	r3, #2
 8005876:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005878:	697b      	ldr	r3, [r7, #20]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800589e:	f3ef 8305 	mrs	r3, IPSR
 80058a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058a4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <osMutexRelease+0x30>
    stat = osErrorISR;
 80058aa:	f06f 0305 	mvn.w	r3, #5
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e01f      	b.n	80058f2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d103      	bne.n	80058c0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80058b8:	f06f 0303 	mvn.w	r3, #3
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e018      	b.n	80058f2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80058c6:	6938      	ldr	r0, [r7, #16]
 80058c8:	f000 fa8a 	bl	8005de0 <xQueueGiveMutexRecursive>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d00f      	beq.n	80058f2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80058d2:	f06f 0302 	mvn.w	r3, #2
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e00b      	b.n	80058f2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80058da:	2300      	movs	r3, #0
 80058dc:	2200      	movs	r2, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	6938      	ldr	r0, [r7, #16]
 80058e2:	f000 fae7 	bl	8005eb4 <xQueueGenericSend>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d002      	beq.n	80058f2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80058ec:	f06f 0302 	mvn.w	r3, #2
 80058f0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80058f2:	697b      	ldr	r3, [r7, #20]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a07      	ldr	r2, [pc, #28]	; (8005928 <vApplicationGetIdleTaskMemory+0x2c>)
 800590c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4a06      	ldr	r2, [pc, #24]	; (800592c <vApplicationGetIdleTaskMemory+0x30>)
 8005912:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2280      	movs	r2, #128	; 0x80
 8005918:	601a      	str	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000240 	.word	0x20000240
 800592c:	200002e8 	.word	0x200002e8

08005930 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a07      	ldr	r2, [pc, #28]	; (800595c <vApplicationGetTimerTaskMemory+0x2c>)
 8005940:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	4a06      	ldr	r2, [pc, #24]	; (8005960 <vApplicationGetTimerTaskMemory+0x30>)
 8005946:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800594e:	601a      	str	r2, [r3, #0]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	200004e8 	.word	0x200004e8
 8005960:	20000590 	.word	0x20000590

08005964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f103 0208 	add.w	r2, r3, #8
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f04f 32ff 	mov.w	r2, #4294967295
 800597c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f103 0208 	add.w	r2, r3, #8
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f103 0208 	add.w	r2, r3, #8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
}
 80059fa:	bf00      	nop
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d103      	bne.n	8005a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e00c      	b.n	8005a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e002      	b.n	8005a34 <vListInsert+0x2e>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d2f6      	bcs.n	8005a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	601a      	str	r2, [r3, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6892      	ldr	r2, [r2, #8]
 8005a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6852      	ldr	r2, [r2, #4]
 8005a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d103      	bne.n	8005aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	1e5a      	subs	r2, r3, #1
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005af6:	f002 fbad 	bl	8008254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	441a      	add	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b26:	3b01      	subs	r3, #1
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b2c:	fb01 f303 	mul.w	r3, r1, r3
 8005b30:	441a      	add	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	22ff      	movs	r2, #255	; 0xff
 8005b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	22ff      	movs	r2, #255	; 0xff
 8005b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d114      	bne.n	8005b76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01a      	beq.n	8005b8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3310      	adds	r3, #16
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 fb4f 	bl	80071fc <xTaskRemoveFromEventList>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d012      	beq.n	8005b8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b64:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <xQueueGenericReset+0xcc>)
 8005b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	e009      	b.n	8005b8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3310      	adds	r3, #16
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fef2 	bl	8005964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3324      	adds	r3, #36	; 0x24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff feed 	bl	8005964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b8a:	f002 fb93 	bl	80082b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b8e:	2301      	movs	r3, #1
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08e      	sub	sp, #56	; 0x38
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <xQueueGenericCreateStatic+0x52>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <xQueueGenericCreateStatic+0x56>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <xQueueGenericCreateStatic+0x58>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	623b      	str	r3, [r7, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <xQueueGenericCreateStatic+0x7e>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <xQueueGenericCreateStatic+0x82>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <xQueueGenericCreateStatic+0x84>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	61fb      	str	r3, [r7, #28]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c3a:	2350      	movs	r3, #80	; 0x50
 8005c3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b50      	cmp	r3, #80	; 0x50
 8005c42:	d00a      	beq.n	8005c5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	61bb      	str	r3, [r7, #24]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00d      	beq.n	8005c82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	4613      	mov	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f83f 	bl	8005d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3730      	adds	r7, #48	; 0x30
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	; 0x28
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	613b      	str	r3, [r7, #16]
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	3350      	adds	r3, #80	; 0x50
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f002 fbe7 	bl	8008498 <pvPortMalloc>
 8005cca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d011      	beq.n	8005cf6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	3350      	adds	r3, #80	; 0x50
 8005cda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ce4:	79fa      	ldrb	r2, [r7, #7]
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f805 	bl	8005d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
	}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d103      	bne.n	8005d1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e002      	b.n	8005d22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d2e:	2101      	movs	r1, #1
 8005d30:	69b8      	ldr	r0, [r7, #24]
 8005d32:	f7ff fecb 	bl	8005acc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	78fa      	ldrb	r2, [r7, #3]
 8005d3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d66:	2300      	movs	r3, #0
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f8a1 	bl	8005eb4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	4603      	mov	r3, r0
 8005d82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6939      	ldr	r1, [r7, #16]
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	f7ff ff7a 	bl	8005c8c <xQueueGenericCreate>
 8005d98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff ffd3 	bl	8005d46 <prvInitialiseMutex>

		return xNewQueue;
 8005da0:	68fb      	ldr	r3, [r7, #12]
	}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b088      	sub	sp, #32
 8005dae:	af02      	add	r7, sp, #8
 8005db0:	4603      	mov	r3, r0
 8005db2:	6039      	str	r1, [r7, #0]
 8005db4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005db6:	2301      	movs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	6939      	ldr	r1, [r7, #16]
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7ff fee7 	bl	8005b9c <xQueueGenericCreateStatic>
 8005dce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff ffb8 	bl	8005d46 <prvInitialiseMutex>

		return xNewQueue;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	60fb      	str	r3, [r7, #12]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	689c      	ldr	r4, [r3, #8]
 8005e0c:	f001 fbb8 	bl	8007580 <xTaskGetCurrentTaskHandle>
 8005e10:	4603      	mov	r3, r0
 8005e12:	429c      	cmp	r4, r3
 8005e14:	d111      	bne.n	8005e3a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	1e5a      	subs	r2, r3, #1
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	6938      	ldr	r0, [r7, #16]
 8005e30:	f000 f840 	bl	8005eb4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005e34:	2301      	movs	r3, #1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e001      	b.n	8005e3e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005e3e:	697b      	ldr	r3, [r7, #20]
	}
 8005e40:	4618      	mov	r0, r3
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd90      	pop	{r4, r7, pc}

08005e48 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	60fb      	str	r3, [r7, #12]
}
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	689c      	ldr	r4, [r3, #8]
 8005e76:	f001 fb83 	bl	8007580 <xTaskGetCurrentTaskHandle>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	d107      	bne.n	8005e90 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	e00c      	b.n	8005eaa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6938      	ldr	r0, [r7, #16]
 8005e94:	f000 fa88 	bl	80063a8 <xQueueSemaphoreTake>
 8005e98:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005eaa:	697b      	ldr	r3, [r7, #20]
	}
 8005eac:	4618      	mov	r0, r3
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd90      	pop	{r4, r7, pc}

08005eb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08e      	sub	sp, #56	; 0x38
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <xQueueGenericSend+0x32>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d103      	bne.n	8005ef4 <xQueueGenericSend+0x40>
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <xQueueGenericSend+0x44>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <xQueueGenericSend+0x46>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <xQueueGenericSend+0x60>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d103      	bne.n	8005f22 <xQueueGenericSend+0x6e>
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <xQueueGenericSend+0x72>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <xQueueGenericSend+0x74>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xQueueGenericSend+0x8e>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	623b      	str	r3, [r7, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f42:	f001 fb2d 	bl	80075a0 <xTaskGetSchedulerState>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <xQueueGenericSend+0x9e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <xQueueGenericSend+0xa2>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <xQueueGenericSend+0xa4>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xQueueGenericSend+0xbe>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	61fb      	str	r3, [r7, #28]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f72:	f002 f96f 	bl	8008254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <xQueueGenericSend+0xd4>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d129      	bne.n	8005fdc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f8e:	f000 fb2f 	bl	80065f0 <prvCopyDataToQueue>
 8005f92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d010      	beq.n	8005fbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	3324      	adds	r3, #36	; 0x24
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f001 f92b 	bl	80071fc <xTaskRemoveFromEventList>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d013      	beq.n	8005fd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fac:	4b3f      	ldr	r3, [pc, #252]	; (80060ac <xQueueGenericSend+0x1f8>)
 8005fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	e00a      	b.n	8005fd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fc4:	4b39      	ldr	r3, [pc, #228]	; (80060ac <xQueueGenericSend+0x1f8>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fd4:	f002 f96e 	bl	80082b4 <vPortExitCritical>
				return pdPASS;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e063      	b.n	80060a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d103      	bne.n	8005fea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fe2:	f002 f967 	bl	80082b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e05c      	b.n	80060a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d106      	bne.n	8005ffe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ff0:	f107 0314 	add.w	r3, r7, #20
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f965 	bl	80072c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ffe:	f002 f959 	bl	80082b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006002:	f000 febf 	bl	8006d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006006:	f002 f925 	bl	8008254 <vPortEnterCritical>
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006010:	b25b      	sxtb	r3, r3
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006016:	d103      	bne.n	8006020 <xQueueGenericSend+0x16c>
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006026:	b25b      	sxtb	r3, r3
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d103      	bne.n	8006036 <xQueueGenericSend+0x182>
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006036:	f002 f93d 	bl	80082b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800603a:	1d3a      	adds	r2, r7, #4
 800603c:	f107 0314 	add.w	r3, r7, #20
 8006040:	4611      	mov	r1, r2
 8006042:	4618      	mov	r0, r3
 8006044:	f001 f954 	bl	80072f0 <xTaskCheckForTimeOut>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d124      	bne.n	8006098 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800604e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006050:	f000 fbc6 	bl	80067e0 <prvIsQueueFull>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d018      	beq.n	800608c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	3310      	adds	r3, #16
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4611      	mov	r1, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f001 f87a 	bl	800715c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800606a:	f000 fb51 	bl	8006710 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800606e:	f000 fe97 	bl	8006da0 <xTaskResumeAll>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	f47f af7c 	bne.w	8005f72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800607a:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <xQueueGenericSend+0x1f8>)
 800607c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	e772      	b.n	8005f72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800608c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800608e:	f000 fb3f 	bl	8006710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006092:	f000 fe85 	bl	8006da0 <xTaskResumeAll>
 8006096:	e76c      	b.n	8005f72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800609a:	f000 fb39 	bl	8006710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800609e:	f000 fe7f 	bl	8006da0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3738      	adds	r7, #56	; 0x38
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	e000ed04 	.word	0xe000ed04

080060b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b090      	sub	sp, #64	; 0x40
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <xQueueGenericSendFromISR+0x3c>
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <xQueueGenericSendFromISR+0x40>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <xQueueGenericSendFromISR+0x42>
 80060f0:	2300      	movs	r3, #0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d103      	bne.n	800611a <xQueueGenericSendFromISR+0x6a>
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <xQueueGenericSendFromISR+0x6e>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <xQueueGenericSendFromISR+0x70>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	623b      	str	r3, [r7, #32]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800613a:	f002 f96d 	bl	8008418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800613e:	f3ef 8211 	mrs	r2, BASEPRI
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	61fa      	str	r2, [r7, #28]
 8006154:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006156:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <xQueueGenericSendFromISR+0xbc>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b02      	cmp	r3, #2
 800616a:	d12f      	bne.n	80061cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006182:	f000 fa35 	bl	80065f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006186:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800618a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618e:	d112      	bne.n	80061b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	2b00      	cmp	r3, #0
 8006196:	d016      	beq.n	80061c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	3324      	adds	r3, #36	; 0x24
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f82d 	bl	80071fc <xTaskRemoveFromEventList>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00e      	beq.n	80061c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e007      	b.n	80061c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061ba:	3301      	adds	r3, #1
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	b25a      	sxtb	r2, r3
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061c6:	2301      	movs	r3, #1
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80061ca:	e001      	b.n	80061d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3740      	adds	r7, #64	; 0x40
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08c      	sub	sp, #48	; 0x30
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <xQueueReceive+0x30>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	623b      	str	r3, [r7, #32]
}
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <xQueueReceive+0x3e>
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <xQueueReceive+0x42>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <xQueueReceive+0x44>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <xQueueReceive+0x5e>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	61fb      	str	r3, [r7, #28]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006246:	f001 f9ab 	bl	80075a0 <xTaskGetSchedulerState>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <xQueueReceive+0x6e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <xQueueReceive+0x72>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <xQueueReceive+0x74>
 800625a:	2300      	movs	r3, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <xQueueReceive+0x8e>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	61bb      	str	r3, [r7, #24]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006276:	f001 ffed 	bl	8008254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01f      	beq.n	80062c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800628a:	f000 fa1b 	bl	80066c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	1e5a      	subs	r2, r3, #1
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00f      	beq.n	80062be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	3310      	adds	r3, #16
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 ffaa 	bl	80071fc <xTaskRemoveFromEventList>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062ae:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <xQueueReceive+0x1bc>)
 80062b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062be:	f001 fff9 	bl	80082b4 <vPortExitCritical>
				return pdPASS;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e069      	b.n	800639a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062cc:	f001 fff2 	bl	80082b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e062      	b.n	800639a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062da:	f107 0310 	add.w	r3, r7, #16
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fff0 	bl	80072c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062e4:	2301      	movs	r3, #1
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062e8:	f001 ffe4 	bl	80082b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ec:	f000 fd4a 	bl	8006d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062f0:	f001 ffb0 	bl	8008254 <vPortEnterCritical>
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d103      	bne.n	800630a <xQueueReceive+0x122>
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006310:	b25b      	sxtb	r3, r3
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d103      	bne.n	8006320 <xQueueReceive+0x138>
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006320:	f001 ffc8 	bl	80082b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006324:	1d3a      	adds	r2, r7, #4
 8006326:	f107 0310 	add.w	r3, r7, #16
 800632a:	4611      	mov	r1, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f000 ffdf 	bl	80072f0 <xTaskCheckForTimeOut>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d123      	bne.n	8006380 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633a:	f000 fa3b 	bl	80067b4 <prvIsQueueEmpty>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d017      	beq.n	8006374 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	4611      	mov	r1, r2
 800634c:	4618      	mov	r0, r3
 800634e:	f000 ff05 	bl	800715c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006354:	f000 f9dc 	bl	8006710 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006358:	f000 fd22 	bl	8006da0 <xTaskResumeAll>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d189      	bne.n	8006276 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006362:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <xQueueReceive+0x1bc>)
 8006364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	e780      	b.n	8006276 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006376:	f000 f9cb 	bl	8006710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800637a:	f000 fd11 	bl	8006da0 <xTaskResumeAll>
 800637e:	e77a      	b.n	8006276 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006382:	f000 f9c5 	bl	8006710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006386:	f000 fd0b 	bl	8006da0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800638a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638c:	f000 fa12 	bl	80067b4 <prvIsQueueEmpty>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	f43f af6f 	beq.w	8006276 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006398:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800639a:	4618      	mov	r0, r3
 800639c:	3730      	adds	r7, #48	; 0x30
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08e      	sub	sp, #56	; 0x38
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	623b      	str	r3, [r7, #32]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	61fb      	str	r3, [r7, #28]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063f8:	f001 f8d2 	bl	80075a0 <xTaskGetSchedulerState>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <xQueueSemaphoreTake+0x60>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <xQueueSemaphoreTake+0x64>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <xQueueSemaphoreTake+0x66>
 800640c:	2300      	movs	r3, #0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	61bb      	str	r3, [r7, #24]
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006428:	f001 ff14 	bl	8008254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d024      	beq.n	8006482 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	1e5a      	subs	r2, r3, #1
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006448:	f001 fa20 	bl	800788c <pvTaskIncrementMutexHeldCount>
 800644c:	4602      	mov	r2, r0
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00f      	beq.n	800647a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	3310      	adds	r3, #16
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fecc 	bl	80071fc <xTaskRemoveFromEventList>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800646a:	4b54      	ldr	r3, [pc, #336]	; (80065bc <xQueueSemaphoreTake+0x214>)
 800646c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800647a:	f001 ff1b 	bl	80082b4 <vPortExitCritical>
				return pdPASS;
 800647e:	2301      	movs	r3, #1
 8006480:	e097      	b.n	80065b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d111      	bne.n	80064ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	617b      	str	r3, [r7, #20]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064a4:	f001 ff06 	bl	80082b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e082      	b.n	80065b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064b2:	f107 030c 	add.w	r3, r7, #12
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 ff04 	bl	80072c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064bc:	2301      	movs	r3, #1
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064c0:	f001 fef8 	bl	80082b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064c4:	f000 fc5e 	bl	8006d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064c8:	f001 fec4 	bl	8008254 <vPortEnterCritical>
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d2:	b25b      	sxtb	r3, r3
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d103      	bne.n	80064e2 <xQueueSemaphoreTake+0x13a>
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d103      	bne.n	80064f8 <xQueueSemaphoreTake+0x150>
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064f8:	f001 fedc 	bl	80082b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064fc:	463a      	mov	r2, r7
 80064fe:	f107 030c 	add.w	r3, r7, #12
 8006502:	4611      	mov	r1, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fef3 	bl	80072f0 <xTaskCheckForTimeOut>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d132      	bne.n	8006576 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006512:	f000 f94f 	bl	80067b4 <prvIsQueueEmpty>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d026      	beq.n	800656a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006524:	f001 fe96 	bl	8008254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4618      	mov	r0, r3
 800652e:	f001 f855 	bl	80075dc <xTaskPriorityInherit>
 8006532:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006534:	f001 febe 	bl	80082b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	3324      	adds	r3, #36	; 0x24
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fe0b 	bl	800715c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006548:	f000 f8e2 	bl	8006710 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800654c:	f000 fc28 	bl	8006da0 <xTaskResumeAll>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	f47f af68 	bne.w	8006428 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006558:	4b18      	ldr	r3, [pc, #96]	; (80065bc <xQueueSemaphoreTake+0x214>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	e75e      	b.n	8006428 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800656a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800656c:	f000 f8d0 	bl	8006710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006570:	f000 fc16 	bl	8006da0 <xTaskResumeAll>
 8006574:	e758      	b.n	8006428 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006578:	f000 f8ca 	bl	8006710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800657c:	f000 fc10 	bl	8006da0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006582:	f000 f917 	bl	80067b4 <prvIsQueueEmpty>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	f43f af4d 	beq.w	8006428 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00d      	beq.n	80065b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006594:	f001 fe5e 	bl	8008254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800659a:	f000 f811 	bl	80065c0 <prvGetDisinheritPriorityAfterTimeout>
 800659e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 f8ee 	bl	8007788 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065ac:	f001 fe82 	bl	80082b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3738      	adds	r7, #56	; 0x38
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d006      	beq.n	80065de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e001      	b.n	80065e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065e2:	68fb      	ldr	r3, [r7, #12]
	}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10d      	bne.n	800662a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d14d      	bne.n	80066b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	4618      	mov	r0, r3
 800661c:	f001 f846 	bl	80076ac <xTaskPriorityDisinherit>
 8006620:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	609a      	str	r2, [r3, #8]
 8006628:	e043      	b.n	80066b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d119      	bne.n	8006664 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6858      	ldr	r0, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	461a      	mov	r2, r3
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	f002 faff 	bl	8008c3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	441a      	add	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	d32b      	bcc.n	80066b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	605a      	str	r2, [r3, #4]
 8006662:	e026      	b.n	80066b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68d8      	ldr	r0, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	461a      	mov	r2, r3
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	f002 fae5 	bl	8008c3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	425b      	negs	r3, r3
 800667e:	441a      	add	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d207      	bcs.n	80066a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	425b      	negs	r3, r3
 800669a:	441a      	add	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d105      	bne.n	80066b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066ba:	697b      	ldr	r3, [r7, #20]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d018      	beq.n	8006708 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	441a      	add	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d303      	bcc.n	80066f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68d9      	ldr	r1, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	461a      	mov	r2, r3
 8006702:	6838      	ldr	r0, [r7, #0]
 8006704:	f002 fa9b 	bl	8008c3e <memcpy>
	}
}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006718:	f001 fd9c 	bl	8008254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006722:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006724:	e011      	b.n	800674a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d012      	beq.n	8006754 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3324      	adds	r3, #36	; 0x24
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fd62 	bl	80071fc <xTaskRemoveFromEventList>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800673e:	f000 fe39 	bl	80073b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	3b01      	subs	r3, #1
 8006746:	b2db      	uxtb	r3, r3
 8006748:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800674a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800674e:	2b00      	cmp	r3, #0
 8006750:	dce9      	bgt.n	8006726 <prvUnlockQueue+0x16>
 8006752:	e000      	b.n	8006756 <prvUnlockQueue+0x46>
					break;
 8006754:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	22ff      	movs	r2, #255	; 0xff
 800675a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800675e:	f001 fda9 	bl	80082b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006762:	f001 fd77 	bl	8008254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800676c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800676e:	e011      	b.n	8006794 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d012      	beq.n	800679e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3310      	adds	r3, #16
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fd3d 	bl	80071fc <xTaskRemoveFromEventList>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006788:	f000 fe14 	bl	80073b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	3b01      	subs	r3, #1
 8006790:	b2db      	uxtb	r3, r3
 8006792:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	dce9      	bgt.n	8006770 <prvUnlockQueue+0x60>
 800679c:	e000      	b.n	80067a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800679e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	22ff      	movs	r2, #255	; 0xff
 80067a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067a8:	f001 fd84 	bl	80082b4 <vPortExitCritical>
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067bc:	f001 fd4a 	bl	8008254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	e001      	b.n	80067d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067d2:	f001 fd6f 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067e8:	f001 fd34 	bl	8008254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d102      	bne.n	80067fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067f8:	2301      	movs	r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e001      	b.n	8006802 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006802:	f001 fd57 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 8006806:	68fb      	ldr	r3, [r7, #12]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e014      	b.n	800684a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006820:	4a0f      	ldr	r2, [pc, #60]	; (8006860 <vQueueAddToRegistry+0x50>)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800682c:	490c      	ldr	r1, [pc, #48]	; (8006860 <vQueueAddToRegistry+0x50>)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006836:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <vQueueAddToRegistry+0x50>)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	4413      	add	r3, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006842:	e006      	b.n	8006852 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b07      	cmp	r3, #7
 800684e:	d9e7      	bls.n	8006820 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	20000990 	.word	0x20000990

08006864 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006874:	f001 fcee 	bl	8008254 <vPortEnterCritical>
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800687e:	b25b      	sxtb	r3, r3
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d103      	bne.n	800688e <vQueueWaitForMessageRestricted+0x2a>
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006894:	b25b      	sxtb	r3, r3
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d103      	bne.n	80068a4 <vQueueWaitForMessageRestricted+0x40>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068a4:	f001 fd06 	bl	80082b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	3324      	adds	r3, #36	; 0x24
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fc73 	bl	80071a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068be:	6978      	ldr	r0, [r7, #20]
 80068c0:	f7ff ff26 	bl	8006710 <prvUnlockQueue>
	}
 80068c4:	bf00      	nop
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08e      	sub	sp, #56	; 0x38
 80068d0:	af04      	add	r7, sp, #16
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	623b      	str	r3, [r7, #32]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xTaskCreateStatic+0x46>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	61fb      	str	r3, [r7, #28]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006912:	23a8      	movs	r3, #168	; 0xa8
 8006914:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2ba8      	cmp	r3, #168	; 0xa8
 800691a:	d00a      	beq.n	8006932 <xTaskCreateStatic+0x66>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	61bb      	str	r3, [r7, #24]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006932:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01e      	beq.n	8006978 <xTaskCreateStatic+0xac>
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006948:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2202      	movs	r2, #2
 800694e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006952:	2300      	movs	r3, #0
 8006954:	9303      	str	r3, [sp, #12]
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	9302      	str	r3, [sp, #8]
 800695a:	f107 0314 	add.w	r3, r7, #20
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f850 	bl	8006a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006972:	f000 f8f3 	bl	8006b5c <prvAddNewTaskToReadyList>
 8006976:	e001      	b.n	800697c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800697c:	697b      	ldr	r3, [r7, #20]
	}
 800697e:	4618      	mov	r0, r3
 8006980:	3728      	adds	r7, #40	; 0x28
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006986:	b580      	push	{r7, lr}
 8006988:	b08c      	sub	sp, #48	; 0x30
 800698a:	af04      	add	r7, sp, #16
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	603b      	str	r3, [r7, #0]
 8006992:	4613      	mov	r3, r2
 8006994:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4618      	mov	r0, r3
 800699c:	f001 fd7c 	bl	8008498 <pvPortMalloc>
 80069a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00e      	beq.n	80069c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069a8:	20a8      	movs	r0, #168	; 0xa8
 80069aa:	f001 fd75 	bl	8008498 <pvPortMalloc>
 80069ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30
 80069bc:	e005      	b.n	80069ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069be:	6978      	ldr	r0, [r7, #20]
 80069c0:	f001 fe36 	bl	8008630 <vPortFree>
 80069c4:	e001      	b.n	80069ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d017      	beq.n	8006a00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069d8:	88fa      	ldrh	r2, [r7, #6]
 80069da:	2300      	movs	r3, #0
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	9302      	str	r3, [sp, #8]
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f80e 	bl	8006a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069f4:	69f8      	ldr	r0, [r7, #28]
 80069f6:	f000 f8b1 	bl	8006b5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069fa:	2301      	movs	r3, #1
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	e002      	b.n	8006a06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295
 8006a04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a06:	69bb      	ldr	r3, [r7, #24]
	}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	461a      	mov	r2, r3
 8006a28:	21a5      	movs	r1, #165	; 0xa5
 8006a2a:	f002 f836 	bl	8008a9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f023 0307 	bic.w	r3, r3, #7
 8006a46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	617b      	str	r3, [r7, #20]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d01f      	beq.n	8006aae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	e012      	b.n	8006a9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	7819      	ldrb	r1, [r3, #0]
 8006a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4413      	add	r3, r2
 8006a82:	3334      	adds	r3, #52	; 0x34
 8006a84:	460a      	mov	r2, r1
 8006a86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d006      	beq.n	8006aa2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	2b0f      	cmp	r3, #15
 8006a9e:	d9e9      	bls.n	8006a74 <prvInitialiseNewTask+0x64>
 8006aa0:	e000      	b.n	8006aa4 <prvInitialiseNewTask+0x94>
			{
				break;
 8006aa2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aac:	e003      	b.n	8006ab6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	2b37      	cmp	r3, #55	; 0x37
 8006aba:	d901      	bls.n	8006ac0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006abc:	2337      	movs	r3, #55	; 0x37
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2200      	movs	r2, #0
 8006ad0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe ff64 	bl	80059a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	3318      	adds	r3, #24
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe ff5f 	bl	80059a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	3354      	adds	r3, #84	; 0x54
 8006b10:	224c      	movs	r2, #76	; 0x4c
 8006b12:	2100      	movs	r1, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 ffc0 	bl	8008a9a <memset>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	4a0c      	ldr	r2, [pc, #48]	; (8006b50 <prvInitialiseNewTask+0x140>)
 8006b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	4a0c      	ldr	r2, [pc, #48]	; (8006b54 <prvInitialiseNewTask+0x144>)
 8006b24:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	4a0b      	ldr	r2, [pc, #44]	; (8006b58 <prvInitialiseNewTask+0x148>)
 8006b2a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	68f9      	ldr	r1, [r7, #12]
 8006b30:	69b8      	ldr	r0, [r7, #24]
 8006b32:	f001 fa61 	bl	8007ff8 <pxPortInitialiseStack>
 8006b36:	4602      	mov	r2, r0
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b48:	bf00      	nop
 8006b4a:	3720      	adds	r7, #32
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20004c24 	.word	0x20004c24
 8006b54:	20004c8c 	.word	0x20004c8c
 8006b58:	20004cf4 	.word	0x20004cf4

08006b5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b64:	f001 fb76 	bl	8008254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b68:	4b2d      	ldr	r3, [pc, #180]	; (8006c20 <prvAddNewTaskToReadyList+0xc4>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	4a2c      	ldr	r2, [pc, #176]	; (8006c20 <prvAddNewTaskToReadyList+0xc4>)
 8006b70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b72:	4b2c      	ldr	r3, [pc, #176]	; (8006c24 <prvAddNewTaskToReadyList+0xc8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b7a:	4a2a      	ldr	r2, [pc, #168]	; (8006c24 <prvAddNewTaskToReadyList+0xc8>)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b80:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <prvAddNewTaskToReadyList+0xc4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d110      	bne.n	8006baa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b88:	f000 fc38 	bl	80073fc <prvInitialiseTaskLists>
 8006b8c:	e00d      	b.n	8006baa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b8e:	4b26      	ldr	r3, [pc, #152]	; (8006c28 <prvAddNewTaskToReadyList+0xcc>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b96:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <prvAddNewTaskToReadyList+0xc8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d802      	bhi.n	8006baa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ba4:	4a1f      	ldr	r2, [pc, #124]	; (8006c24 <prvAddNewTaskToReadyList+0xc8>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006baa:	4b20      	ldr	r3, [pc, #128]	; (8006c2c <prvAddNewTaskToReadyList+0xd0>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	4a1e      	ldr	r2, [pc, #120]	; (8006c2c <prvAddNewTaskToReadyList+0xd0>)
 8006bb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bb4:	4b1d      	ldr	r3, [pc, #116]	; (8006c2c <prvAddNewTaskToReadyList+0xd0>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <prvAddNewTaskToReadyList+0xd4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d903      	bls.n	8006bd0 <prvAddNewTaskToReadyList+0x74>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <prvAddNewTaskToReadyList+0xd4>)
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4a15      	ldr	r2, [pc, #84]	; (8006c34 <prvAddNewTaskToReadyList+0xd8>)
 8006bde:	441a      	add	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3304      	adds	r3, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	4610      	mov	r0, r2
 8006be8:	f7fe fee9 	bl	80059be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bec:	f001 fb62 	bl	80082b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bf0:	4b0d      	ldr	r3, [pc, #52]	; (8006c28 <prvAddNewTaskToReadyList+0xcc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00e      	beq.n	8006c16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <prvAddNewTaskToReadyList+0xc8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d207      	bcs.n	8006c16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <prvAddNewTaskToReadyList+0xdc>)
 8006c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000ea4 	.word	0x20000ea4
 8006c24:	200009d0 	.word	0x200009d0
 8006c28:	20000eb0 	.word	0x20000eb0
 8006c2c:	20000ec0 	.word	0x20000ec0
 8006c30:	20000eac 	.word	0x20000eac
 8006c34:	200009d4 	.word	0x200009d4
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d017      	beq.n	8006c7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <vTaskDelay+0x60>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <vTaskDelay+0x30>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	60bb      	str	r3, [r7, #8]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c6c:	f000 f88a 	bl	8006d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c70:	2100      	movs	r1, #0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fe1e 	bl	80078b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c78:	f000 f892 	bl	8006da0 <xTaskResumeAll>
 8006c7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d107      	bne.n	8006c94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c84:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <vTaskDelay+0x64>)
 8006c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000ecc 	.word	0x20000ecc
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	; 0x28
 8006ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cb2:	463a      	mov	r2, r7
 8006cb4:	1d39      	adds	r1, r7, #4
 8006cb6:	f107 0308 	add.w	r3, r7, #8
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe fe1e 	bl	80058fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	9202      	str	r2, [sp, #8]
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	460a      	mov	r2, r1
 8006cd2:	4924      	ldr	r1, [pc, #144]	; (8006d64 <vTaskStartScheduler+0xc0>)
 8006cd4:	4824      	ldr	r0, [pc, #144]	; (8006d68 <vTaskStartScheduler+0xc4>)
 8006cd6:	f7ff fdf9 	bl	80068cc <xTaskCreateStatic>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4a23      	ldr	r2, [pc, #140]	; (8006d6c <vTaskStartScheduler+0xc8>)
 8006cde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ce0:	4b22      	ldr	r3, [pc, #136]	; (8006d6c <vTaskStartScheduler+0xc8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	e001      	b.n	8006cf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d102      	bne.n	8006cfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006cf8:	f000 fe30 	bl	800795c <xTimerCreateTimerTask>
 8006cfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d11b      	bne.n	8006d3c <vTaskStartScheduler+0x98>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	613b      	str	r3, [r7, #16]
}
 8006d16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d18:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <vTaskStartScheduler+0xcc>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3354      	adds	r3, #84	; 0x54
 8006d1e:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <vTaskStartScheduler+0xd0>)
 8006d20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <vTaskStartScheduler+0xd4>)
 8006d24:	f04f 32ff 	mov.w	r2, #4294967295
 8006d28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <vTaskStartScheduler+0xd8>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d30:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <vTaskStartScheduler+0xdc>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d36:	f001 f9eb 	bl	8008110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d3a:	e00e      	b.n	8006d5a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d42:	d10a      	bne.n	8006d5a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	60fb      	str	r3, [r7, #12]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <vTaskStartScheduler+0xb4>
}
 8006d5a:	bf00      	nop
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	0800986c 	.word	0x0800986c
 8006d68:	080073cd 	.word	0x080073cd
 8006d6c:	20000ec8 	.word	0x20000ec8
 8006d70:	200009d0 	.word	0x200009d0
 8006d74:	20000068 	.word	0x20000068
 8006d78:	20000ec4 	.word	0x20000ec4
 8006d7c:	20000eb0 	.word	0x20000eb0
 8006d80:	20000ea8 	.word	0x20000ea8

08006d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d88:	4b04      	ldr	r3, [pc, #16]	; (8006d9c <vTaskSuspendAll+0x18>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	4a03      	ldr	r2, [pc, #12]	; (8006d9c <vTaskSuspendAll+0x18>)
 8006d90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d92:	bf00      	nop
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	20000ecc 	.word	0x20000ecc

08006da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dae:	4b42      	ldr	r3, [pc, #264]	; (8006eb8 <xTaskResumeAll+0x118>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <xTaskResumeAll+0x2c>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	603b      	str	r3, [r7, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006dcc:	f001 fa42 	bl	8008254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dd0:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <xTaskResumeAll+0x118>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	4a38      	ldr	r2, [pc, #224]	; (8006eb8 <xTaskResumeAll+0x118>)
 8006dd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dda:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <xTaskResumeAll+0x118>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d162      	bne.n	8006ea8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006de2:	4b36      	ldr	r3, [pc, #216]	; (8006ebc <xTaskResumeAll+0x11c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d05e      	beq.n	8006ea8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dea:	e02f      	b.n	8006e4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dec:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <xTaskResumeAll+0x120>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3318      	adds	r3, #24
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe fe3d 	bl	8005a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fe38 	bl	8005a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0c:	4b2d      	ldr	r3, [pc, #180]	; (8006ec4 <xTaskResumeAll+0x124>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d903      	bls.n	8006e1c <xTaskResumeAll+0x7c>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	4a2a      	ldr	r2, [pc, #168]	; (8006ec4 <xTaskResumeAll+0x124>)
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4a27      	ldr	r2, [pc, #156]	; (8006ec8 <xTaskResumeAll+0x128>)
 8006e2a:	441a      	add	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f7fe fdc3 	bl	80059be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3c:	4b23      	ldr	r3, [pc, #140]	; (8006ecc <xTaskResumeAll+0x12c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e46:	4b22      	ldr	r3, [pc, #136]	; (8006ed0 <xTaskResumeAll+0x130>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e4c:	4b1c      	ldr	r3, [pc, #112]	; (8006ec0 <xTaskResumeAll+0x120>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1cb      	bne.n	8006dec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e5a:	f000 fb71 	bl	8007540 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	; (8006ed4 <xTaskResumeAll+0x134>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d010      	beq.n	8006e8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e6a:	f000 f859 	bl	8006f20 <xTaskIncrementTick>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006e74:	4b16      	ldr	r3, [pc, #88]	; (8006ed0 <xTaskResumeAll+0x130>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f1      	bne.n	8006e6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <xTaskResumeAll+0x134>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e8c:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <xTaskResumeAll+0x130>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d009      	beq.n	8006ea8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e98:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <xTaskResumeAll+0x138>)
 8006e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ea8:	f001 fa04 	bl	80082b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006eac:	68bb      	ldr	r3, [r7, #8]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000ecc 	.word	0x20000ecc
 8006ebc:	20000ea4 	.word	0x20000ea4
 8006ec0:	20000e64 	.word	0x20000e64
 8006ec4:	20000eac 	.word	0x20000eac
 8006ec8:	200009d4 	.word	0x200009d4
 8006ecc:	200009d0 	.word	0x200009d0
 8006ed0:	20000eb8 	.word	0x20000eb8
 8006ed4:	20000eb4 	.word	0x20000eb4
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <xTaskGetTickCount+0x1c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ee8:	687b      	ldr	r3, [r7, #4]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000ea8 	.word	0x20000ea8

08006efc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f02:	f001 fa89 	bl	8008418 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006f06:	2300      	movs	r3, #0
 8006f08:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006f0a:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <xTaskGetTickCountFromISR+0x20>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f10:	683b      	ldr	r3, [r7, #0]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000ea8 	.word	0x20000ea8

08006f20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f2a:	4b4f      	ldr	r3, [pc, #316]	; (8007068 <xTaskIncrementTick+0x148>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 808f 	bne.w	8007052 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f34:	4b4d      	ldr	r3, [pc, #308]	; (800706c <xTaskIncrementTick+0x14c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f3c:	4a4b      	ldr	r2, [pc, #300]	; (800706c <xTaskIncrementTick+0x14c>)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d120      	bne.n	8006f8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f48:	4b49      	ldr	r3, [pc, #292]	; (8007070 <xTaskIncrementTick+0x150>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	603b      	str	r3, [r7, #0]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <xTaskIncrementTick+0x46>
 8006f68:	4b41      	ldr	r3, [pc, #260]	; (8007070 <xTaskIncrementTick+0x150>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	4b41      	ldr	r3, [pc, #260]	; (8007074 <xTaskIncrementTick+0x154>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a3f      	ldr	r2, [pc, #252]	; (8007070 <xTaskIncrementTick+0x150>)
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	4a3f      	ldr	r2, [pc, #252]	; (8007074 <xTaskIncrementTick+0x154>)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	4b3e      	ldr	r3, [pc, #248]	; (8007078 <xTaskIncrementTick+0x158>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a3d      	ldr	r2, [pc, #244]	; (8007078 <xTaskIncrementTick+0x158>)
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	f000 fadb 	bl	8007540 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f8a:	4b3c      	ldr	r3, [pc, #240]	; (800707c <xTaskIncrementTick+0x15c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d349      	bcc.n	8007028 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f94:	4b36      	ldr	r3, [pc, #216]	; (8007070 <xTaskIncrementTick+0x150>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d104      	bne.n	8006fa8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9e:	4b37      	ldr	r3, [pc, #220]	; (800707c <xTaskIncrementTick+0x15c>)
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa4:	601a      	str	r2, [r3, #0]
					break;
 8006fa6:	e03f      	b.n	8007028 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa8:	4b31      	ldr	r3, [pc, #196]	; (8007070 <xTaskIncrementTick+0x150>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d203      	bcs.n	8006fc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fc0:	4a2e      	ldr	r2, [pc, #184]	; (800707c <xTaskIncrementTick+0x15c>)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fc6:	e02f      	b.n	8007028 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe fd53 	bl	8005a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	3318      	adds	r3, #24
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fd4a 	bl	8005a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe8:	4b25      	ldr	r3, [pc, #148]	; (8007080 <xTaskIncrementTick+0x160>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d903      	bls.n	8006ff8 <xTaskIncrementTick+0xd8>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	4a22      	ldr	r2, [pc, #136]	; (8007080 <xTaskIncrementTick+0x160>)
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <xTaskIncrementTick+0x164>)
 8007006:	441a      	add	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f7fe fcd5 	bl	80059be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007018:	4b1b      	ldr	r3, [pc, #108]	; (8007088 <xTaskIncrementTick+0x168>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	429a      	cmp	r2, r3
 8007020:	d3b8      	bcc.n	8006f94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007022:	2301      	movs	r3, #1
 8007024:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007026:	e7b5      	b.n	8006f94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007028:	4b17      	ldr	r3, [pc, #92]	; (8007088 <xTaskIncrementTick+0x168>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702e:	4915      	ldr	r1, [pc, #84]	; (8007084 <xTaskIncrementTick+0x164>)
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d901      	bls.n	8007044 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007040:	2301      	movs	r3, #1
 8007042:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007044:	4b11      	ldr	r3, [pc, #68]	; (800708c <xTaskIncrementTick+0x16c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e004      	b.n	800705c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007052:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <xTaskIncrementTick+0x170>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	4a0d      	ldr	r2, [pc, #52]	; (8007090 <xTaskIncrementTick+0x170>)
 800705a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800705c:	697b      	ldr	r3, [r7, #20]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000ecc 	.word	0x20000ecc
 800706c:	20000ea8 	.word	0x20000ea8
 8007070:	20000e5c 	.word	0x20000e5c
 8007074:	20000e60 	.word	0x20000e60
 8007078:	20000ebc 	.word	0x20000ebc
 800707c:	20000ec4 	.word	0x20000ec4
 8007080:	20000eac 	.word	0x20000eac
 8007084:	200009d4 	.word	0x200009d4
 8007088:	200009d0 	.word	0x200009d0
 800708c:	20000eb8 	.word	0x20000eb8
 8007090:	20000eb4 	.word	0x20000eb4

08007094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800709a:	4b2a      	ldr	r3, [pc, #168]	; (8007144 <vTaskSwitchContext+0xb0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070a2:	4b29      	ldr	r3, [pc, #164]	; (8007148 <vTaskSwitchContext+0xb4>)
 80070a4:	2201      	movs	r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070a8:	e046      	b.n	8007138 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80070aa:	4b27      	ldr	r3, [pc, #156]	; (8007148 <vTaskSwitchContext+0xb4>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b0:	4b26      	ldr	r3, [pc, #152]	; (800714c <vTaskSwitchContext+0xb8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e010      	b.n	80070da <vTaskSwitchContext+0x46>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	607b      	str	r3, [r7, #4]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <vTaskSwitchContext+0x3e>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	491d      	ldr	r1, [pc, #116]	; (8007150 <vTaskSwitchContext+0xbc>)
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0e4      	beq.n	80070b8 <vTaskSwitchContext+0x24>
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4a15      	ldr	r2, [pc, #84]	; (8007150 <vTaskSwitchContext+0xbc>)
 80070fa:	4413      	add	r3, r2
 80070fc:	60bb      	str	r3, [r7, #8]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	605a      	str	r2, [r3, #4]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	3308      	adds	r3, #8
 8007110:	429a      	cmp	r2, r3
 8007112:	d104      	bne.n	800711e <vTaskSwitchContext+0x8a>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	605a      	str	r2, [r3, #4]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4a0b      	ldr	r2, [pc, #44]	; (8007154 <vTaskSwitchContext+0xc0>)
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	4a08      	ldr	r2, [pc, #32]	; (800714c <vTaskSwitchContext+0xb8>)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <vTaskSwitchContext+0xc0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3354      	adds	r3, #84	; 0x54
 8007134:	4a08      	ldr	r2, [pc, #32]	; (8007158 <vTaskSwitchContext+0xc4>)
 8007136:	6013      	str	r3, [r2, #0]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	20000ecc 	.word	0x20000ecc
 8007148:	20000eb8 	.word	0x20000eb8
 800714c:	20000eac 	.word	0x20000eac
 8007150:	200009d4 	.word	0x200009d4
 8007154:	200009d0 	.word	0x200009d0
 8007158:	20000068 	.word	0x20000068

0800715c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	60fb      	str	r3, [r7, #12]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <vTaskPlaceOnEventList+0x44>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3318      	adds	r3, #24
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fe fc3b 	bl	8005a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007190:	2101      	movs	r1, #1
 8007192:	6838      	ldr	r0, [r7, #0]
 8007194:	f000 fb8e 	bl	80078b4 <prvAddCurrentTaskToDelayedList>
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	200009d0 	.word	0x200009d0

080071a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	617b      	str	r3, [r7, #20]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071cc:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3318      	adds	r3, #24
 80071d2:	4619      	mov	r1, r3
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7fe fbf2 	bl	80059be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80071e0:	f04f 33ff 	mov.w	r3, #4294967295
 80071e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	68b8      	ldr	r0, [r7, #8]
 80071ea:	f000 fb63 	bl	80078b4 <prvAddCurrentTaskToDelayedList>
	}
 80071ee:	bf00      	nop
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200009d0 	.word	0x200009d0

080071fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	60fb      	str	r3, [r7, #12]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	3318      	adds	r3, #24
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fc23 	bl	8005a78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007232:	4b1e      	ldr	r3, [pc, #120]	; (80072ac <xTaskRemoveFromEventList+0xb0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d11d      	bne.n	8007276 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	3304      	adds	r3, #4
 800723e:	4618      	mov	r0, r3
 8007240:	f7fe fc1a 	bl	8005a78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007248:	4b19      	ldr	r3, [pc, #100]	; (80072b0 <xTaskRemoveFromEventList+0xb4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d903      	bls.n	8007258 <xTaskRemoveFromEventList+0x5c>
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	4a16      	ldr	r2, [pc, #88]	; (80072b0 <xTaskRemoveFromEventList+0xb4>)
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4a13      	ldr	r2, [pc, #76]	; (80072b4 <xTaskRemoveFromEventList+0xb8>)
 8007266:	441a      	add	r2, r3
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	3304      	adds	r3, #4
 800726c:	4619      	mov	r1, r3
 800726e:	4610      	mov	r0, r2
 8007270:	f7fe fba5 	bl	80059be <vListInsertEnd>
 8007274:	e005      	b.n	8007282 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	3318      	adds	r3, #24
 800727a:	4619      	mov	r1, r3
 800727c:	480e      	ldr	r0, [pc, #56]	; (80072b8 <xTaskRemoveFromEventList+0xbc>)
 800727e:	f7fe fb9e 	bl	80059be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <xTaskRemoveFromEventList+0xc0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	429a      	cmp	r2, r3
 800728e:	d905      	bls.n	800729c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007290:	2301      	movs	r3, #1
 8007292:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <xTaskRemoveFromEventList+0xc4>)
 8007296:	2201      	movs	r2, #1
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	e001      	b.n	80072a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072a0:	697b      	ldr	r3, [r7, #20]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000ecc 	.word	0x20000ecc
 80072b0:	20000eac 	.word	0x20000eac
 80072b4:	200009d4 	.word	0x200009d4
 80072b8:	20000e64 	.word	0x20000e64
 80072bc:	200009d0 	.word	0x200009d0
 80072c0:	20000eb8 	.word	0x20000eb8

080072c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072cc:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <vTaskInternalSetTimeOutState+0x24>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <vTaskInternalSetTimeOutState+0x28>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	605a      	str	r2, [r3, #4]
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20000ebc 	.word	0x20000ebc
 80072ec:	20000ea8 	.word	0x20000ea8

080072f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	613b      	str	r3, [r7, #16]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007332:	f000 ff8f 	bl	8008254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007336:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <xTaskCheckForTimeOut+0xbc>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d102      	bne.n	8007356 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	e023      	b.n	800739e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <xTaskCheckForTimeOut+0xc0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d007      	beq.n	8007372 <xTaskCheckForTimeOut+0x82>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	429a      	cmp	r2, r3
 800736a:	d302      	bcc.n	8007372 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800736c:	2301      	movs	r3, #1
 800736e:	61fb      	str	r3, [r7, #28]
 8007370:	e015      	b.n	800739e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	429a      	cmp	r2, r3
 800737a:	d20b      	bcs.n	8007394 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff ff9b 	bl	80072c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800738e:	2300      	movs	r3, #0
 8007390:	61fb      	str	r3, [r7, #28]
 8007392:	e004      	b.n	800739e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800739a:	2301      	movs	r3, #1
 800739c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800739e:	f000 ff89 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 80073a2:	69fb      	ldr	r3, [r7, #28]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000ea8 	.word	0x20000ea8
 80073b0:	20000ebc 	.word	0x20000ebc

080073b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073b8:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <vTaskMissedYield+0x14>)
 80073ba:	2201      	movs	r2, #1
 80073bc:	601a      	str	r2, [r3, #0]
}
 80073be:	bf00      	nop
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	20000eb8 	.word	0x20000eb8

080073cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073d4:	f000 f852 	bl	800747c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073d8:	4b06      	ldr	r3, [pc, #24]	; (80073f4 <prvIdleTask+0x28>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d9f9      	bls.n	80073d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073e0:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <prvIdleTask+0x2c>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073f0:	e7f0      	b.n	80073d4 <prvIdleTask+0x8>
 80073f2:	bf00      	nop
 80073f4:	200009d4 	.word	0x200009d4
 80073f8:	e000ed04 	.word	0xe000ed04

080073fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007402:	2300      	movs	r3, #0
 8007404:	607b      	str	r3, [r7, #4]
 8007406:	e00c      	b.n	8007422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4a12      	ldr	r2, [pc, #72]	; (800745c <prvInitialiseTaskLists+0x60>)
 8007414:	4413      	add	r3, r2
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe faa4 	bl	8005964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3301      	adds	r3, #1
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b37      	cmp	r3, #55	; 0x37
 8007426:	d9ef      	bls.n	8007408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007428:	480d      	ldr	r0, [pc, #52]	; (8007460 <prvInitialiseTaskLists+0x64>)
 800742a:	f7fe fa9b 	bl	8005964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800742e:	480d      	ldr	r0, [pc, #52]	; (8007464 <prvInitialiseTaskLists+0x68>)
 8007430:	f7fe fa98 	bl	8005964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007434:	480c      	ldr	r0, [pc, #48]	; (8007468 <prvInitialiseTaskLists+0x6c>)
 8007436:	f7fe fa95 	bl	8005964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800743a:	480c      	ldr	r0, [pc, #48]	; (800746c <prvInitialiseTaskLists+0x70>)
 800743c:	f7fe fa92 	bl	8005964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007440:	480b      	ldr	r0, [pc, #44]	; (8007470 <prvInitialiseTaskLists+0x74>)
 8007442:	f7fe fa8f 	bl	8005964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007446:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <prvInitialiseTaskLists+0x78>)
 8007448:	4a05      	ldr	r2, [pc, #20]	; (8007460 <prvInitialiseTaskLists+0x64>)
 800744a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800744c:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <prvInitialiseTaskLists+0x7c>)
 800744e:	4a05      	ldr	r2, [pc, #20]	; (8007464 <prvInitialiseTaskLists+0x68>)
 8007450:	601a      	str	r2, [r3, #0]
}
 8007452:	bf00      	nop
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	200009d4 	.word	0x200009d4
 8007460:	20000e34 	.word	0x20000e34
 8007464:	20000e48 	.word	0x20000e48
 8007468:	20000e64 	.word	0x20000e64
 800746c:	20000e78 	.word	0x20000e78
 8007470:	20000e90 	.word	0x20000e90
 8007474:	20000e5c 	.word	0x20000e5c
 8007478:	20000e60 	.word	0x20000e60

0800747c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007482:	e019      	b.n	80074b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007484:	f000 fee6 	bl	8008254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007488:	4b10      	ldr	r3, [pc, #64]	; (80074cc <prvCheckTasksWaitingTermination+0x50>)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe faef 	bl	8005a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800749a:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <prvCheckTasksWaitingTermination+0x54>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3b01      	subs	r3, #1
 80074a0:	4a0b      	ldr	r2, [pc, #44]	; (80074d0 <prvCheckTasksWaitingTermination+0x54>)
 80074a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074a4:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <prvCheckTasksWaitingTermination+0x58>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <prvCheckTasksWaitingTermination+0x58>)
 80074ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074ae:	f000 ff01 	bl	80082b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f810 	bl	80074d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074b8:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <prvCheckTasksWaitingTermination+0x58>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e1      	bne.n	8007484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000e78 	.word	0x20000e78
 80074d0:	20000ea4 	.word	0x20000ea4
 80074d4:	20000e8c 	.word	0x20000e8c

080074d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3354      	adds	r3, #84	; 0x54
 80074e4:	4618      	mov	r0, r3
 80074e6:	f001 faf1 	bl	8008acc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d108      	bne.n	8007506 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 f899 	bl	8008630 <vPortFree>
				vPortFree( pxTCB );
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f001 f896 	bl	8008630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007504:	e018      	b.n	8007538 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800750c:	2b01      	cmp	r3, #1
 800750e:	d103      	bne.n	8007518 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f001 f88d 	bl	8008630 <vPortFree>
	}
 8007516:	e00f      	b.n	8007538 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800751e:	2b02      	cmp	r3, #2
 8007520:	d00a      	beq.n	8007538 <prvDeleteTCB+0x60>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60fb      	str	r3, [r7, #12]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <prvDeleteTCB+0x5e>
	}
 8007538:	bf00      	nop
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007546:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvResetNextTaskUnblockTime+0x38>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007550:	4b0a      	ldr	r3, [pc, #40]	; (800757c <prvResetNextTaskUnblockTime+0x3c>)
 8007552:	f04f 32ff 	mov.w	r2, #4294967295
 8007556:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007558:	e008      	b.n	800756c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755a:	4b07      	ldr	r3, [pc, #28]	; (8007578 <prvResetNextTaskUnblockTime+0x38>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	4a04      	ldr	r2, [pc, #16]	; (800757c <prvResetNextTaskUnblockTime+0x3c>)
 800756a:	6013      	str	r3, [r2, #0]
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	20000e5c 	.word	0x20000e5c
 800757c:	20000ec4 	.word	0x20000ec4

08007580 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <xTaskGetCurrentTaskHandle+0x1c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800758c:	687b      	ldr	r3, [r7, #4]
	}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	200009d0 	.word	0x200009d0

080075a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <xTaskGetSchedulerState+0x34>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ae:	2301      	movs	r3, #1
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	e008      	b.n	80075c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b4:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <xTaskGetSchedulerState+0x38>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075bc:	2302      	movs	r3, #2
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	e001      	b.n	80075c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075c2:	2300      	movs	r3, #0
 80075c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075c6:	687b      	ldr	r3, [r7, #4]
	}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	20000eb0 	.word	0x20000eb0
 80075d8:	20000ecc 	.word	0x20000ecc

080075dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d051      	beq.n	8007696 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	4b2a      	ldr	r3, [pc, #168]	; (80076a0 <xTaskPriorityInherit+0xc4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d241      	bcs.n	8007684 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	db06      	blt.n	8007616 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <xTaskPriorityInherit+0xc4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6959      	ldr	r1, [r3, #20]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4a1f      	ldr	r2, [pc, #124]	; (80076a4 <xTaskPriorityInherit+0xc8>)
 8007628:	4413      	add	r3, r2
 800762a:	4299      	cmp	r1, r3
 800762c:	d122      	bne.n	8007674 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	3304      	adds	r3, #4
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fa20 	bl	8005a78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007638:	4b19      	ldr	r3, [pc, #100]	; (80076a0 <xTaskPriorityInherit+0xc4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007646:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <xTaskPriorityInherit+0xcc>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d903      	bls.n	8007656 <xTaskPriorityInherit+0x7a>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007652:	4a15      	ldr	r2, [pc, #84]	; (80076a8 <xTaskPriorityInherit+0xcc>)
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4a10      	ldr	r2, [pc, #64]	; (80076a4 <xTaskPriorityInherit+0xc8>)
 8007664:	441a      	add	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	3304      	adds	r3, #4
 800766a:	4619      	mov	r1, r3
 800766c:	4610      	mov	r0, r2
 800766e:	f7fe f9a6 	bl	80059be <vListInsertEnd>
 8007672:	e004      	b.n	800767e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007674:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <xTaskPriorityInherit+0xc4>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800767e:	2301      	movs	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	e008      	b.n	8007696 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <xTaskPriorityInherit+0xc4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	429a      	cmp	r2, r3
 8007690:	d201      	bcs.n	8007696 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007692:	2301      	movs	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007696:	68fb      	ldr	r3, [r7, #12]
	}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	200009d0 	.word	0x200009d0
 80076a4:	200009d4 	.word	0x200009d4
 80076a8:	20000eac 	.word	0x20000eac

080076ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d056      	beq.n	8007770 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076c2:	4b2e      	ldr	r3, [pc, #184]	; (800777c <xTaskPriorityDisinherit+0xd0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d00a      	beq.n	80076e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	60fb      	str	r3, [r7, #12]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	60bb      	str	r3, [r7, #8]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007704:	1e5a      	subs	r2, r3, #1
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007712:	429a      	cmp	r2, r3
 8007714:	d02c      	beq.n	8007770 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771a:	2b00      	cmp	r3, #0
 800771c:	d128      	bne.n	8007770 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	3304      	adds	r3, #4
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe f9a8 	bl	8005a78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007740:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <xTaskPriorityDisinherit+0xd4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d903      	bls.n	8007750 <xTaskPriorityDisinherit+0xa4>
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a0c      	ldr	r2, [pc, #48]	; (8007780 <xTaskPriorityDisinherit+0xd4>)
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4a09      	ldr	r2, [pc, #36]	; (8007784 <xTaskPriorityDisinherit+0xd8>)
 800775e:	441a      	add	r2, r3
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	3304      	adds	r3, #4
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f7fe f929 	bl	80059be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007770:	697b      	ldr	r3, [r7, #20]
	}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200009d0 	.word	0x200009d0
 8007780:	20000eac 	.word	0x20000eac
 8007784:	200009d4 	.word	0x200009d4

08007788 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007796:	2301      	movs	r3, #1
 8007798:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d06a      	beq.n	8007876 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	60fb      	str	r3, [r7, #12]
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d902      	bls.n	80077ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	e002      	b.n	80077d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d04b      	beq.n	8007876 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d146      	bne.n	8007876 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80077e8:	4b25      	ldr	r3, [pc, #148]	; (8007880 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d10a      	bne.n	8007808 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60bb      	str	r3, [r7, #8]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	db04      	blt.n	8007826 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	6959      	ldr	r1, [r3, #20]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4a13      	ldr	r2, [pc, #76]	; (8007884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007836:	4413      	add	r3, r2
 8007838:	4299      	cmp	r1, r3
 800783a:	d11c      	bne.n	8007876 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	3304      	adds	r3, #4
 8007840:	4618      	mov	r0, r3
 8007842:	f7fe f919 	bl	8005a78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d903      	bls.n	800785a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	4a0c      	ldr	r2, [pc, #48]	; (8007888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4a07      	ldr	r2, [pc, #28]	; (8007884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007868:	441a      	add	r2, r3
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	3304      	adds	r3, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f7fe f8a4 	bl	80059be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007876:	bf00      	nop
 8007878:	3720      	adds	r7, #32
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200009d0 	.word	0x200009d0
 8007884:	200009d4 	.word	0x200009d4
 8007888:	20000eac 	.word	0x20000eac

0800788c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d004      	beq.n	80078a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007898:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800789e:	3201      	adds	r2, #1
 80078a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80078a2:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80078a4:	681b      	ldr	r3, [r3, #0]
	}
 80078a6:	4618      	mov	r0, r3
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	200009d0 	.word	0x200009d0

080078b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078be:	4b21      	ldr	r3, [pc, #132]	; (8007944 <prvAddCurrentTaskToDelayedList+0x90>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078c4:	4b20      	ldr	r3, [pc, #128]	; (8007948 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3304      	adds	r3, #4
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe f8d4 	bl	8005a78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d10a      	bne.n	80078ee <prvAddCurrentTaskToDelayedList+0x3a>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d007      	beq.n	80078ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078de:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <prvAddCurrentTaskToDelayedList+0x94>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4819      	ldr	r0, [pc, #100]	; (800794c <prvAddCurrentTaskToDelayedList+0x98>)
 80078e8:	f7fe f869 	bl	80059be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078ec:	e026      	b.n	800793c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4413      	add	r3, r2
 80078f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078f6:	4b14      	ldr	r3, [pc, #80]	; (8007948 <prvAddCurrentTaskToDelayedList+0x94>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	429a      	cmp	r2, r3
 8007904:	d209      	bcs.n	800791a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007906:	4b12      	ldr	r3, [pc, #72]	; (8007950 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <prvAddCurrentTaskToDelayedList+0x94>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3304      	adds	r3, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f7fe f877 	bl	8005a06 <vListInsert>
}
 8007918:	e010      	b.n	800793c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800791a:	4b0e      	ldr	r3, [pc, #56]	; (8007954 <prvAddCurrentTaskToDelayedList+0xa0>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <prvAddCurrentTaskToDelayedList+0x94>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f7fe f86d 	bl	8005a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <prvAddCurrentTaskToDelayedList+0xa4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	429a      	cmp	r2, r3
 8007934:	d202      	bcs.n	800793c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007936:	4a08      	ldr	r2, [pc, #32]	; (8007958 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6013      	str	r3, [r2, #0]
}
 800793c:	bf00      	nop
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000ea8 	.word	0x20000ea8
 8007948:	200009d0 	.word	0x200009d0
 800794c:	20000e90 	.word	0x20000e90
 8007950:	20000e60 	.word	0x20000e60
 8007954:	20000e5c 	.word	0x20000e5c
 8007958:	20000ec4 	.word	0x20000ec4

0800795c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08a      	sub	sp, #40	; 0x28
 8007960:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007966:	f000 fb07 	bl	8007f78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800796a:	4b1c      	ldr	r3, [pc, #112]	; (80079dc <xTimerCreateTimerTask+0x80>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d021      	beq.n	80079b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800797a:	1d3a      	adds	r2, r7, #4
 800797c:	f107 0108 	add.w	r1, r7, #8
 8007980:	f107 030c 	add.w	r3, r7, #12
 8007984:	4618      	mov	r0, r3
 8007986:	f7fd ffd3 	bl	8005930 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	9202      	str	r2, [sp, #8]
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	2302      	movs	r3, #2
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	2300      	movs	r3, #0
 800799a:	460a      	mov	r2, r1
 800799c:	4910      	ldr	r1, [pc, #64]	; (80079e0 <xTimerCreateTimerTask+0x84>)
 800799e:	4811      	ldr	r0, [pc, #68]	; (80079e4 <xTimerCreateTimerTask+0x88>)
 80079a0:	f7fe ff94 	bl	80068cc <xTaskCreateStatic>
 80079a4:	4603      	mov	r3, r0
 80079a6:	4a10      	ldr	r2, [pc, #64]	; (80079e8 <xTimerCreateTimerTask+0x8c>)
 80079a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079aa:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <xTimerCreateTimerTask+0x8c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079b2:	2301      	movs	r3, #1
 80079b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	613b      	str	r3, [r7, #16]
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079d2:	697b      	ldr	r3, [r7, #20]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	20000f00 	.word	0x20000f00
 80079e0:	08009874 	.word	0x08009874
 80079e4:	08007b21 	.word	0x08007b21
 80079e8:	20000f04 	.word	0x20000f04

080079ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	; 0x28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	623b      	str	r3, [r7, #32]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a1a:	4b1a      	ldr	r3, [pc, #104]	; (8007a84 <xTimerGenericCommand+0x98>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d02a      	beq.n	8007a78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b05      	cmp	r3, #5
 8007a32:	dc18      	bgt.n	8007a66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a34:	f7ff fdb4 	bl	80075a0 <xTaskGetSchedulerState>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d109      	bne.n	8007a52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a3e:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <xTimerGenericCommand+0x98>)
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	f107 0110 	add.w	r1, r7, #16
 8007a46:	2300      	movs	r3, #0
 8007a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a4a:	f7fe fa33 	bl	8005eb4 <xQueueGenericSend>
 8007a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a50:	e012      	b.n	8007a78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a52:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <xTimerGenericCommand+0x98>)
 8007a54:	6818      	ldr	r0, [r3, #0]
 8007a56:	f107 0110 	add.w	r1, r7, #16
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f7fe fa29 	bl	8005eb4 <xQueueGenericSend>
 8007a62:	6278      	str	r0, [r7, #36]	; 0x24
 8007a64:	e008      	b.n	8007a78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a66:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <xTimerGenericCommand+0x98>)
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	f107 0110 	add.w	r1, r7, #16
 8007a6e:	2300      	movs	r3, #0
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	f7fe fb1d 	bl	80060b0 <xQueueGenericSendFromISR>
 8007a76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3728      	adds	r7, #40	; 0x28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000f00 	.word	0x20000f00

08007a88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a92:	4b22      	ldr	r3, [pc, #136]	; (8007b1c <prvProcessExpiredTimer+0x94>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fd ffe9 	bl	8005a78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d022      	beq.n	8007afa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	18d1      	adds	r1, r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	6978      	ldr	r0, [r7, #20]
 8007ac2:	f000 f8d1 	bl	8007c68 <prvInsertTimerInActiveList>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01f      	beq.n	8007b0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007acc:	2300      	movs	r3, #0
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	6978      	ldr	r0, [r7, #20]
 8007ad8:	f7ff ff88 	bl	80079ec <xTimerGenericCommand>
 8007adc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d113      	bne.n	8007b0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	60fb      	str	r3, [r7, #12]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b00:	f023 0301 	bic.w	r3, r3, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	6978      	ldr	r0, [r7, #20]
 8007b12:	4798      	blx	r3
}
 8007b14:	bf00      	nop
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000ef8 	.word	0x20000ef8

08007b20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b28:	f107 0308 	add.w	r3, r7, #8
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 f857 	bl	8007be0 <prvGetNextExpireTime>
 8007b32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4619      	mov	r1, r3
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f803 	bl	8007b44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b3e:	f000 f8d5 	bl	8007cec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b42:	e7f1      	b.n	8007b28 <prvTimerTask+0x8>

08007b44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b4e:	f7ff f919 	bl	8006d84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b52:	f107 0308 	add.w	r3, r7, #8
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f866 	bl	8007c28 <prvSampleTimeNow>
 8007b5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d130      	bne.n	8007bc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <prvProcessTimerOrBlockTask+0x3c>
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d806      	bhi.n	8007b80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b72:	f7ff f915 	bl	8006da0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b76:	68f9      	ldr	r1, [r7, #12]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff ff85 	bl	8007a88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b7e:	e024      	b.n	8007bca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d008      	beq.n	8007b98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b86:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <prvProcessTimerOrBlockTask+0x90>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <prvProcessTimerOrBlockTask+0x50>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e000      	b.n	8007b96 <prvProcessTimerOrBlockTask+0x52>
 8007b94:	2300      	movs	r3, #0
 8007b96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <prvProcessTimerOrBlockTask+0x94>)
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f7fe fe5d 	bl	8006864 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007baa:	f7ff f8f9 	bl	8006da0 <xTaskResumeAll>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10a      	bne.n	8007bca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bb4:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <prvProcessTimerOrBlockTask+0x98>)
 8007bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	f3bf 8f6f 	isb	sy
}
 8007bc4:	e001      	b.n	8007bca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bc6:	f7ff f8eb 	bl	8006da0 <xTaskResumeAll>
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000efc 	.word	0x20000efc
 8007bd8:	20000f00 	.word	0x20000f00
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <prvGetNextExpireTime+0x44>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <prvGetNextExpireTime+0x16>
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	e000      	b.n	8007bf8 <prvGetNextExpireTime+0x18>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d105      	bne.n	8007c10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c04:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <prvGetNextExpireTime+0x44>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e001      	b.n	8007c14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c14:	68fb      	ldr	r3, [r7, #12]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20000ef8 	.word	0x20000ef8

08007c28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c30:	f7ff f954 	bl	8006edc <xTaskGetTickCount>
 8007c34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c36:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <prvSampleTimeNow+0x3c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d205      	bcs.n	8007c4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c40:	f000 f936 	bl	8007eb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e002      	b.n	8007c52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c52:	4a04      	ldr	r2, [pc, #16]	; (8007c64 <prvSampleTimeNow+0x3c>)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c58:	68fb      	ldr	r3, [r7, #12]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000f08 	.word	0x20000f08

08007c68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d812      	bhi.n	8007cb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	1ad2      	subs	r2, r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d302      	bcc.n	8007ca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	e01b      	b.n	8007cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ca2:	4b10      	ldr	r3, [pc, #64]	; (8007ce4 <prvInsertTimerInActiveList+0x7c>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4619      	mov	r1, r3
 8007cac:	4610      	mov	r0, r2
 8007cae:	f7fd feaa 	bl	8005a06 <vListInsert>
 8007cb2:	e012      	b.n	8007cda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d206      	bcs.n	8007cca <prvInsertTimerInActiveList+0x62>
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d302      	bcc.n	8007cca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	e007      	b.n	8007cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cca:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <prvInsertTimerInActiveList+0x80>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	f7fd fe96 	bl	8005a06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cda:	697b      	ldr	r3, [r7, #20]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000efc 	.word	0x20000efc
 8007ce8:	20000ef8 	.word	0x20000ef8

08007cec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08e      	sub	sp, #56	; 0x38
 8007cf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cf2:	e0ca      	b.n	8007e8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da18      	bge.n	8007d2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	61fb      	str	r3, [r7, #28]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d22:	6850      	ldr	r0, [r2, #4]
 8007d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d26:	6892      	ldr	r2, [r2, #8]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f2c0 80ab 	blt.w	8007e8a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	3304      	adds	r3, #4
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fd fe97 	bl	8005a78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff ff6b 	bl	8007c28 <prvSampleTimeNow>
 8007d52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b09      	cmp	r3, #9
 8007d58:	f200 8096 	bhi.w	8007e88 <prvProcessReceivedCommands+0x19c>
 8007d5c:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <prvProcessReceivedCommands+0x78>)
 8007d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d62:	bf00      	nop
 8007d64:	08007d8d 	.word	0x08007d8d
 8007d68:	08007d8d 	.word	0x08007d8d
 8007d6c:	08007d8d 	.word	0x08007d8d
 8007d70:	08007e01 	.word	0x08007e01
 8007d74:	08007e15 	.word	0x08007e15
 8007d78:	08007e5f 	.word	0x08007e5f
 8007d7c:	08007d8d 	.word	0x08007d8d
 8007d80:	08007d8d 	.word	0x08007d8d
 8007d84:	08007e01 	.word	0x08007e01
 8007d88:	08007e15 	.word	0x08007e15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d92:	f043 0301 	orr.w	r3, r3, #1
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	18d1      	adds	r1, r2, r3
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dac:	f7ff ff5c 	bl	8007c68 <prvInsertTimerInActiveList>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d069      	beq.n	8007e8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d05e      	beq.n	8007e8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	441a      	add	r2, r3
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	2100      	movs	r1, #0
 8007ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dde:	f7ff fe05 	bl	80079ec <xTimerGenericCommand>
 8007de2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d14f      	bne.n	8007e8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	61bb      	str	r3, [r7, #24]
}
 8007dfc:	bf00      	nop
 8007dfe:	e7fe      	b.n	8007dfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e12:	e03a      	b.n	8007e8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	617b      	str	r3, [r7, #20]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	18d1      	adds	r1, r2, r3
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e58:	f7ff ff06 	bl	8007c68 <prvInsertTimerInActiveList>
					break;
 8007e5c:	e015      	b.n	8007e8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d103      	bne.n	8007e74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6e:	f000 fbdf 	bl	8008630 <vPortFree>
 8007e72:	e00a      	b.n	8007e8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e7a:	f023 0301 	bic.w	r3, r3, #1
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e86:	e000      	b.n	8007e8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007e88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e8a:	4b08      	ldr	r3, [pc, #32]	; (8007eac <prvProcessReceivedCommands+0x1c0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	1d39      	adds	r1, r7, #4
 8007e90:	2200      	movs	r2, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe f9a8 	bl	80061e8 <xQueueReceive>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f47f af2a 	bne.w	8007cf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	3730      	adds	r7, #48	; 0x30
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000f00 	.word	0x20000f00

08007eb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eb6:	e048      	b.n	8007f4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007eb8:	4b2d      	ldr	r3, [pc, #180]	; (8007f70 <prvSwitchTimerLists+0xc0>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec2:	4b2b      	ldr	r3, [pc, #172]	; (8007f70 <prvSwitchTimerLists+0xc0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fd fdd1 	bl	8005a78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d02e      	beq.n	8007f4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d90e      	bls.n	8007f1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f0a:	4b19      	ldr	r3, [pc, #100]	; (8007f70 <prvSwitchTimerLists+0xc0>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3304      	adds	r3, #4
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7fd fd76 	bl	8005a06 <vListInsert>
 8007f1a:	e016      	b.n	8007f4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	2300      	movs	r3, #0
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	2100      	movs	r1, #0
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff fd60 	bl	80079ec <xTimerGenericCommand>
 8007f2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	603b      	str	r3, [r7, #0]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <prvSwitchTimerLists+0xc0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1b1      	bne.n	8007eb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f54:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <prvSwitchTimerLists+0xc0>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f5a:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <prvSwitchTimerLists+0xc4>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <prvSwitchTimerLists+0xc0>)
 8007f60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f62:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <prvSwitchTimerLists+0xc4>)
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	6013      	str	r3, [r2, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000ef8 	.word	0x20000ef8
 8007f74:	20000efc 	.word	0x20000efc

08007f78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f7e:	f000 f969 	bl	8008254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <prvCheckForValidListAndQueue+0x60>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d120      	bne.n	8007fcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f8a:	4814      	ldr	r0, [pc, #80]	; (8007fdc <prvCheckForValidListAndQueue+0x64>)
 8007f8c:	f7fd fcea 	bl	8005964 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f90:	4813      	ldr	r0, [pc, #76]	; (8007fe0 <prvCheckForValidListAndQueue+0x68>)
 8007f92:	f7fd fce7 	bl	8005964 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f96:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <prvCheckForValidListAndQueue+0x6c>)
 8007f98:	4a10      	ldr	r2, [pc, #64]	; (8007fdc <prvCheckForValidListAndQueue+0x64>)
 8007f9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f9c:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <prvCheckForValidListAndQueue+0x70>)
 8007f9e:	4a10      	ldr	r2, [pc, #64]	; (8007fe0 <prvCheckForValidListAndQueue+0x68>)
 8007fa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <prvCheckForValidListAndQueue+0x74>)
 8007fa8:	4a11      	ldr	r2, [pc, #68]	; (8007ff0 <prvCheckForValidListAndQueue+0x78>)
 8007faa:	2110      	movs	r1, #16
 8007fac:	200a      	movs	r0, #10
 8007fae:	f7fd fdf5 	bl	8005b9c <xQueueGenericCreateStatic>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	4a08      	ldr	r2, [pc, #32]	; (8007fd8 <prvCheckForValidListAndQueue+0x60>)
 8007fb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fb8:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <prvCheckForValidListAndQueue+0x60>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <prvCheckForValidListAndQueue+0x60>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	490b      	ldr	r1, [pc, #44]	; (8007ff4 <prvCheckForValidListAndQueue+0x7c>)
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe fc22 	bl	8006810 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fcc:	f000 f972 	bl	80082b4 <vPortExitCritical>
}
 8007fd0:	bf00      	nop
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000f00 	.word	0x20000f00
 8007fdc:	20000ed0 	.word	0x20000ed0
 8007fe0:	20000ee4 	.word	0x20000ee4
 8007fe4:	20000ef8 	.word	0x20000ef8
 8007fe8:	20000efc 	.word	0x20000efc
 8007fec:	20000fac 	.word	0x20000fac
 8007ff0:	20000f0c 	.word	0x20000f0c
 8007ff4:	0800987c 	.word	0x0800987c

08007ff8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3b04      	subs	r3, #4
 8008008:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3b04      	subs	r3, #4
 8008016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f023 0201 	bic.w	r2, r3, #1
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3b04      	subs	r3, #4
 8008026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008028:	4a0c      	ldr	r2, [pc, #48]	; (800805c <pxPortInitialiseStack+0x64>)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3b14      	subs	r3, #20
 8008032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3b04      	subs	r3, #4
 800803e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f06f 0202 	mvn.w	r2, #2
 8008046:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3b20      	subs	r3, #32
 800804c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800804e:	68fb      	ldr	r3, [r7, #12]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	08008061 	.word	0x08008061

08008060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800806a:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <prvTaskExitError+0x54>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008072:	d00a      	beq.n	800808a <prvTaskExitError+0x2a>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	60fb      	str	r3, [r7, #12]
}
 8008086:	bf00      	nop
 8008088:	e7fe      	b.n	8008088 <prvTaskExitError+0x28>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	60bb      	str	r3, [r7, #8]
}
 800809c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800809e:	bf00      	nop
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0fc      	beq.n	80080a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	2000000c 	.word	0x2000000c
	...

080080c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <pxCurrentTCBConst2>)
 80080c2:	6819      	ldr	r1, [r3, #0]
 80080c4:	6808      	ldr	r0, [r1, #0]
 80080c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ca:	f380 8809 	msr	PSP, r0
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f04f 0000 	mov.w	r0, #0
 80080d6:	f380 8811 	msr	BASEPRI, r0
 80080da:	4770      	bx	lr
 80080dc:	f3af 8000 	nop.w

080080e0 <pxCurrentTCBConst2>:
 80080e0:	200009d0 	.word	0x200009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop

080080e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080e8:	4808      	ldr	r0, [pc, #32]	; (800810c <prvPortStartFirstTask+0x24>)
 80080ea:	6800      	ldr	r0, [r0, #0]
 80080ec:	6800      	ldr	r0, [r0, #0]
 80080ee:	f380 8808 	msr	MSP, r0
 80080f2:	f04f 0000 	mov.w	r0, #0
 80080f6:	f380 8814 	msr	CONTROL, r0
 80080fa:	b662      	cpsie	i
 80080fc:	b661      	cpsie	f
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	df00      	svc	0
 8008108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800810a:	bf00      	nop
 800810c:	e000ed08 	.word	0xe000ed08

08008110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008116:	4b46      	ldr	r3, [pc, #280]	; (8008230 <xPortStartScheduler+0x120>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a46      	ldr	r2, [pc, #280]	; (8008234 <xPortStartScheduler+0x124>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d10a      	bne.n	8008136 <xPortStartScheduler+0x26>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	613b      	str	r3, [r7, #16]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008136:	4b3e      	ldr	r3, [pc, #248]	; (8008230 <xPortStartScheduler+0x120>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a3f      	ldr	r2, [pc, #252]	; (8008238 <xPortStartScheduler+0x128>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d10a      	bne.n	8008156 <xPortStartScheduler+0x46>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008156:	4b39      	ldr	r3, [pc, #228]	; (800823c <xPortStartScheduler+0x12c>)
 8008158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	22ff      	movs	r2, #255	; 0xff
 8008166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008178:	b2da      	uxtb	r2, r3
 800817a:	4b31      	ldr	r3, [pc, #196]	; (8008240 <xPortStartScheduler+0x130>)
 800817c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800817e:	4b31      	ldr	r3, [pc, #196]	; (8008244 <xPortStartScheduler+0x134>)
 8008180:	2207      	movs	r2, #7
 8008182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008184:	e009      	b.n	800819a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008186:	4b2f      	ldr	r3, [pc, #188]	; (8008244 <xPortStartScheduler+0x134>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3b01      	subs	r3, #1
 800818c:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <xPortStartScheduler+0x134>)
 800818e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	b2db      	uxtb	r3, r3
 8008198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b80      	cmp	r3, #128	; 0x80
 80081a4:	d0ef      	beq.n	8008186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081a6:	4b27      	ldr	r3, [pc, #156]	; (8008244 <xPortStartScheduler+0x134>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f1c3 0307 	rsb	r3, r3, #7
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d00a      	beq.n	80081c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	60bb      	str	r3, [r7, #8]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081c8:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <xPortStartScheduler+0x134>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <xPortStartScheduler+0x134>)
 80081d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081d2:	4b1c      	ldr	r3, [pc, #112]	; (8008244 <xPortStartScheduler+0x134>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081da:	4a1a      	ldr	r2, [pc, #104]	; (8008244 <xPortStartScheduler+0x134>)
 80081dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081e6:	4b18      	ldr	r3, [pc, #96]	; (8008248 <xPortStartScheduler+0x138>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a17      	ldr	r2, [pc, #92]	; (8008248 <xPortStartScheduler+0x138>)
 80081ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081f2:	4b15      	ldr	r3, [pc, #84]	; (8008248 <xPortStartScheduler+0x138>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a14      	ldr	r2, [pc, #80]	; (8008248 <xPortStartScheduler+0x138>)
 80081f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081fe:	f000 f8dd 	bl	80083bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008202:	4b12      	ldr	r3, [pc, #72]	; (800824c <xPortStartScheduler+0x13c>)
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008208:	f000 f8fc 	bl	8008404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800820c:	4b10      	ldr	r3, [pc, #64]	; (8008250 <xPortStartScheduler+0x140>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a0f      	ldr	r2, [pc, #60]	; (8008250 <xPortStartScheduler+0x140>)
 8008212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008218:	f7ff ff66 	bl	80080e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800821c:	f7fe ff3a 	bl	8007094 <vTaskSwitchContext>
	prvTaskExitError();
 8008220:	f7ff ff1e 	bl	8008060 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	e000ed00 	.word	0xe000ed00
 8008234:	410fc271 	.word	0x410fc271
 8008238:	410fc270 	.word	0x410fc270
 800823c:	e000e400 	.word	0xe000e400
 8008240:	20000ffc 	.word	0x20000ffc
 8008244:	20001000 	.word	0x20001000
 8008248:	e000ed20 	.word	0xe000ed20
 800824c:	2000000c 	.word	0x2000000c
 8008250:	e000ef34 	.word	0xe000ef34

08008254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	607b      	str	r3, [r7, #4]
}
 800826c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800826e:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <vPortEnterCritical+0x58>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3301      	adds	r3, #1
 8008274:	4a0d      	ldr	r2, [pc, #52]	; (80082ac <vPortEnterCritical+0x58>)
 8008276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008278:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <vPortEnterCritical+0x58>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d10f      	bne.n	80082a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008280:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <vPortEnterCritical+0x5c>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	603b      	str	r3, [r7, #0]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <vPortEnterCritical+0x4a>
	}
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	2000000c 	.word	0x2000000c
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082ba:	4b12      	ldr	r3, [pc, #72]	; (8008304 <vPortExitCritical+0x50>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10a      	bne.n	80082d8 <vPortExitCritical+0x24>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	607b      	str	r3, [r7, #4]
}
 80082d4:	bf00      	nop
 80082d6:	e7fe      	b.n	80082d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082d8:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <vPortExitCritical+0x50>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3b01      	subs	r3, #1
 80082de:	4a09      	ldr	r2, [pc, #36]	; (8008304 <vPortExitCritical+0x50>)
 80082e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082e2:	4b08      	ldr	r3, [pc, #32]	; (8008304 <vPortExitCritical+0x50>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <vPortExitCritical+0x42>
 80082ea:	2300      	movs	r3, #0
 80082ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	f383 8811 	msr	BASEPRI, r3
}
 80082f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	2000000c 	.word	0x2000000c
	...

08008310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008310:	f3ef 8009 	mrs	r0, PSP
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	4b15      	ldr	r3, [pc, #84]	; (8008370 <pxCurrentTCBConst>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	f01e 0f10 	tst.w	lr, #16
 8008320:	bf08      	it	eq
 8008322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	6010      	str	r0, [r2, #0]
 800832c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008334:	f380 8811 	msr	BASEPRI, r0
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f7fe fea8 	bl	8007094 <vTaskSwitchContext>
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	f380 8811 	msr	BASEPRI, r0
 800834c:	bc09      	pop	{r0, r3}
 800834e:	6819      	ldr	r1, [r3, #0]
 8008350:	6808      	ldr	r0, [r1, #0]
 8008352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008356:	f01e 0f10 	tst.w	lr, #16
 800835a:	bf08      	it	eq
 800835c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008360:	f380 8809 	msr	PSP, r0
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	f3af 8000 	nop.w

08008370 <pxCurrentTCBConst>:
 8008370:	200009d0 	.word	0x200009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop

08008378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	607b      	str	r3, [r7, #4]
}
 8008390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008392:	f7fe fdc5 	bl	8006f20 <xTaskIncrementTick>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800839c:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <xPortSysTickHandler+0x40>)
 800839e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	2300      	movs	r3, #0
 80083a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f383 8811 	msr	BASEPRI, r3
}
 80083ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083c0:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <vPortSetupTimerInterrupt+0x34>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083c6:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <vPortSetupTimerInterrupt+0x38>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <vPortSetupTimerInterrupt+0x3c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <vPortSetupTimerInterrupt+0x40>)
 80083d2:	fba2 2303 	umull	r2, r3, r2, r3
 80083d6:	099b      	lsrs	r3, r3, #6
 80083d8:	4a09      	ldr	r2, [pc, #36]	; (8008400 <vPortSetupTimerInterrupt+0x44>)
 80083da:	3b01      	subs	r3, #1
 80083dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083de:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <vPortSetupTimerInterrupt+0x34>)
 80083e0:	2207      	movs	r2, #7
 80083e2:	601a      	str	r2, [r3, #0]
}
 80083e4:	bf00      	nop
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	e000e010 	.word	0xe000e010
 80083f4:	e000e018 	.word	0xe000e018
 80083f8:	20000000 	.word	0x20000000
 80083fc:	10624dd3 	.word	0x10624dd3
 8008400:	e000e014 	.word	0xe000e014

08008404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008414 <vPortEnableVFP+0x10>
 8008408:	6801      	ldr	r1, [r0, #0]
 800840a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800840e:	6001      	str	r1, [r0, #0]
 8008410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008412:	bf00      	nop
 8008414:	e000ed88 	.word	0xe000ed88

08008418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800841e:	f3ef 8305 	mrs	r3, IPSR
 8008422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b0f      	cmp	r3, #15
 8008428:	d914      	bls.n	8008454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800842a:	4a17      	ldr	r2, [pc, #92]	; (8008488 <vPortValidateInterruptPriority+0x70>)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008434:	4b15      	ldr	r3, [pc, #84]	; (800848c <vPortValidateInterruptPriority+0x74>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	7afa      	ldrb	r2, [r7, #11]
 800843a:	429a      	cmp	r2, r3
 800843c:	d20a      	bcs.n	8008454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	607b      	str	r3, [r7, #4]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008454:	4b0e      	ldr	r3, [pc, #56]	; (8008490 <vPortValidateInterruptPriority+0x78>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800845c:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <vPortValidateInterruptPriority+0x7c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d90a      	bls.n	800847a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	603b      	str	r3, [r7, #0]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <vPortValidateInterruptPriority+0x60>
	}
 800847a:	bf00      	nop
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	e000e3f0 	.word	0xe000e3f0
 800848c:	20000ffc 	.word	0x20000ffc
 8008490:	e000ed0c 	.word	0xe000ed0c
 8008494:	20001000 	.word	0x20001000

08008498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	; 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084a4:	f7fe fc6e 	bl	8006d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084a8:	4b5b      	ldr	r3, [pc, #364]	; (8008618 <pvPortMalloc+0x180>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084b0:	f000 f920 	bl	80086f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084b4:	4b59      	ldr	r3, [pc, #356]	; (800861c <pvPortMalloc+0x184>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 8093 	bne.w	80085e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d01d      	beq.n	8008504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084c8:	2208      	movs	r2, #8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4413      	add	r3, r2
 80084ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d014      	beq.n	8008504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f023 0307 	bic.w	r3, r3, #7
 80084e0:	3308      	adds	r3, #8
 80084e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <pvPortMalloc+0x6c>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	617b      	str	r3, [r7, #20]
}
 8008500:	bf00      	nop
 8008502:	e7fe      	b.n	8008502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d06e      	beq.n	80085e8 <pvPortMalloc+0x150>
 800850a:	4b45      	ldr	r3, [pc, #276]	; (8008620 <pvPortMalloc+0x188>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	429a      	cmp	r2, r3
 8008512:	d869      	bhi.n	80085e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008514:	4b43      	ldr	r3, [pc, #268]	; (8008624 <pvPortMalloc+0x18c>)
 8008516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008518:	4b42      	ldr	r3, [pc, #264]	; (8008624 <pvPortMalloc+0x18c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800851e:	e004      	b.n	800852a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d903      	bls.n	800853c <pvPortMalloc+0xa4>
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1f1      	bne.n	8008520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800853c:	4b36      	ldr	r3, [pc, #216]	; (8008618 <pvPortMalloc+0x180>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008542:	429a      	cmp	r2, r3
 8008544:	d050      	beq.n	80085e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2208      	movs	r2, #8
 800854c:	4413      	add	r3, r2
 800854e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	1ad2      	subs	r2, r2, r3
 8008560:	2308      	movs	r3, #8
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	429a      	cmp	r2, r3
 8008566:	d91f      	bls.n	80085a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <pvPortMalloc+0xf8>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	613b      	str	r3, [r7, #16]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	1ad2      	subs	r2, r2, r3
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085a2:	69b8      	ldr	r0, [r7, #24]
 80085a4:	f000 f908 	bl	80087b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085a8:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <pvPortMalloc+0x188>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	4a1b      	ldr	r2, [pc, #108]	; (8008620 <pvPortMalloc+0x188>)
 80085b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085b6:	4b1a      	ldr	r3, [pc, #104]	; (8008620 <pvPortMalloc+0x188>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	4b1b      	ldr	r3, [pc, #108]	; (8008628 <pvPortMalloc+0x190>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d203      	bcs.n	80085ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085c2:	4b17      	ldr	r3, [pc, #92]	; (8008620 <pvPortMalloc+0x188>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a18      	ldr	r2, [pc, #96]	; (8008628 <pvPortMalloc+0x190>)
 80085c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	4b13      	ldr	r3, [pc, #76]	; (800861c <pvPortMalloc+0x184>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <pvPortMalloc+0x194>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3301      	adds	r3, #1
 80085e4:	4a11      	ldr	r2, [pc, #68]	; (800862c <pvPortMalloc+0x194>)
 80085e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085e8:	f7fe fbda 	bl	8006da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <pvPortMalloc+0x174>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	60fb      	str	r3, [r7, #12]
}
 8008608:	bf00      	nop
 800860a:	e7fe      	b.n	800860a <pvPortMalloc+0x172>
	return pvReturn;
 800860c:	69fb      	ldr	r3, [r7, #28]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3728      	adds	r7, #40	; 0x28
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20004c0c 	.word	0x20004c0c
 800861c:	20004c20 	.word	0x20004c20
 8008620:	20004c10 	.word	0x20004c10
 8008624:	20004c04 	.word	0x20004c04
 8008628:	20004c14 	.word	0x20004c14
 800862c:	20004c18 	.word	0x20004c18

08008630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d04d      	beq.n	80086de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008642:	2308      	movs	r3, #8
 8008644:	425b      	negs	r3, r3
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4413      	add	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	4b24      	ldr	r3, [pc, #144]	; (80086e8 <vPortFree+0xb8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4013      	ands	r3, r2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <vPortFree+0x44>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	60fb      	str	r3, [r7, #12]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <vPortFree+0x62>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	60bb      	str	r3, [r7, #8]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <vPortFree+0xb8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01e      	beq.n	80086de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d11a      	bne.n	80086de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <vPortFree+0xb8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	43db      	mvns	r3, r3
 80086b2:	401a      	ands	r2, r3
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086b8:	f7fe fb64 	bl	8006d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <vPortFree+0xbc>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4413      	add	r3, r2
 80086c6:	4a09      	ldr	r2, [pc, #36]	; (80086ec <vPortFree+0xbc>)
 80086c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086ca:	6938      	ldr	r0, [r7, #16]
 80086cc:	f000 f874 	bl	80087b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <vPortFree+0xc0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	4a06      	ldr	r2, [pc, #24]	; (80086f0 <vPortFree+0xc0>)
 80086d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086da:	f7fe fb61 	bl	8006da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086de:	bf00      	nop
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20004c20 	.word	0x20004c20
 80086ec:	20004c10 	.word	0x20004c10
 80086f0:	20004c1c 	.word	0x20004c1c

080086f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008700:	4b27      	ldr	r3, [pc, #156]	; (80087a0 <prvHeapInit+0xac>)
 8008702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00c      	beq.n	8008728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3307      	adds	r3, #7
 8008712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0307 	bic.w	r3, r3, #7
 800871a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	4a1f      	ldr	r2, [pc, #124]	; (80087a0 <prvHeapInit+0xac>)
 8008724:	4413      	add	r3, r2
 8008726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800872c:	4a1d      	ldr	r2, [pc, #116]	; (80087a4 <prvHeapInit+0xb0>)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008732:	4b1c      	ldr	r3, [pc, #112]	; (80087a4 <prvHeapInit+0xb0>)
 8008734:	2200      	movs	r2, #0
 8008736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4413      	add	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008740:	2208      	movs	r2, #8
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0307 	bic.w	r3, r3, #7
 800874e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <prvHeapInit+0xb4>)
 8008754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008756:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <prvHeapInit+0xb4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800875e:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <prvHeapInit+0xb4>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <prvHeapInit+0xb4>)
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	4a0a      	ldr	r2, [pc, #40]	; (80087ac <prvHeapInit+0xb8>)
 8008782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	4a09      	ldr	r2, [pc, #36]	; (80087b0 <prvHeapInit+0xbc>)
 800878a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800878c:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <prvHeapInit+0xc0>)
 800878e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008792:	601a      	str	r2, [r3, #0]
}
 8008794:	bf00      	nop
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	20001004 	.word	0x20001004
 80087a4:	20004c04 	.word	0x20004c04
 80087a8:	20004c0c 	.word	0x20004c0c
 80087ac:	20004c14 	.word	0x20004c14
 80087b0:	20004c10 	.word	0x20004c10
 80087b4:	20004c20 	.word	0x20004c20

080087b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087c0:	4b28      	ldr	r3, [pc, #160]	; (8008864 <prvInsertBlockIntoFreeList+0xac>)
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	e002      	b.n	80087cc <prvInsertBlockIntoFreeList+0x14>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d8f7      	bhi.n	80087c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4413      	add	r3, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d108      	bne.n	80087fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	441a      	add	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d118      	bne.n	8008840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <prvInsertBlockIntoFreeList+0xb0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d00d      	beq.n	8008836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	441a      	add	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e008      	b.n	8008848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008836:	4b0c      	ldr	r3, [pc, #48]	; (8008868 <prvInsertBlockIntoFreeList+0xb0>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e003      	b.n	8008848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d002      	beq.n	8008856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008856:	bf00      	nop
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	20004c04 	.word	0x20004c04
 8008868:	20004c0c 	.word	0x20004c0c

0800886c <std>:
 800886c:	2300      	movs	r3, #0
 800886e:	b510      	push	{r4, lr}
 8008870:	4604      	mov	r4, r0
 8008872:	e9c0 3300 	strd	r3, r3, [r0]
 8008876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800887a:	6083      	str	r3, [r0, #8]
 800887c:	8181      	strh	r1, [r0, #12]
 800887e:	6643      	str	r3, [r0, #100]	; 0x64
 8008880:	81c2      	strh	r2, [r0, #14]
 8008882:	6183      	str	r3, [r0, #24]
 8008884:	4619      	mov	r1, r3
 8008886:	2208      	movs	r2, #8
 8008888:	305c      	adds	r0, #92	; 0x5c
 800888a:	f000 f906 	bl	8008a9a <memset>
 800888e:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <std+0x58>)
 8008890:	6263      	str	r3, [r4, #36]	; 0x24
 8008892:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <std+0x5c>)
 8008894:	62a3      	str	r3, [r4, #40]	; 0x28
 8008896:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <std+0x60>)
 8008898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800889a:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <std+0x64>)
 800889c:	6323      	str	r3, [r4, #48]	; 0x30
 800889e:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <std+0x68>)
 80088a0:	6224      	str	r4, [r4, #32]
 80088a2:	429c      	cmp	r4, r3
 80088a4:	d006      	beq.n	80088b4 <std+0x48>
 80088a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80088aa:	4294      	cmp	r4, r2
 80088ac:	d002      	beq.n	80088b4 <std+0x48>
 80088ae:	33d0      	adds	r3, #208	; 0xd0
 80088b0:	429c      	cmp	r4, r3
 80088b2:	d105      	bne.n	80088c0 <std+0x54>
 80088b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088bc:	f000 b9bc 	b.w	8008c38 <__retarget_lock_init_recursive>
 80088c0:	bd10      	pop	{r4, pc}
 80088c2:	bf00      	nop
 80088c4:	08008a15 	.word	0x08008a15
 80088c8:	08008a37 	.word	0x08008a37
 80088cc:	08008a6f 	.word	0x08008a6f
 80088d0:	08008a93 	.word	0x08008a93
 80088d4:	20004c24 	.word	0x20004c24

080088d8 <stdio_exit_handler>:
 80088d8:	4a02      	ldr	r2, [pc, #8]	; (80088e4 <stdio_exit_handler+0xc>)
 80088da:	4903      	ldr	r1, [pc, #12]	; (80088e8 <stdio_exit_handler+0x10>)
 80088dc:	4803      	ldr	r0, [pc, #12]	; (80088ec <stdio_exit_handler+0x14>)
 80088de:	f000 b869 	b.w	80089b4 <_fwalk_sglue>
 80088e2:	bf00      	nop
 80088e4:	20000010 	.word	0x20000010
 80088e8:	08009501 	.word	0x08009501
 80088ec:	2000001c 	.word	0x2000001c

080088f0 <cleanup_stdio>:
 80088f0:	6841      	ldr	r1, [r0, #4]
 80088f2:	4b0c      	ldr	r3, [pc, #48]	; (8008924 <cleanup_stdio+0x34>)
 80088f4:	4299      	cmp	r1, r3
 80088f6:	b510      	push	{r4, lr}
 80088f8:	4604      	mov	r4, r0
 80088fa:	d001      	beq.n	8008900 <cleanup_stdio+0x10>
 80088fc:	f000 fe00 	bl	8009500 <_fflush_r>
 8008900:	68a1      	ldr	r1, [r4, #8]
 8008902:	4b09      	ldr	r3, [pc, #36]	; (8008928 <cleanup_stdio+0x38>)
 8008904:	4299      	cmp	r1, r3
 8008906:	d002      	beq.n	800890e <cleanup_stdio+0x1e>
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fdf9 	bl	8009500 <_fflush_r>
 800890e:	68e1      	ldr	r1, [r4, #12]
 8008910:	4b06      	ldr	r3, [pc, #24]	; (800892c <cleanup_stdio+0x3c>)
 8008912:	4299      	cmp	r1, r3
 8008914:	d004      	beq.n	8008920 <cleanup_stdio+0x30>
 8008916:	4620      	mov	r0, r4
 8008918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800891c:	f000 bdf0 	b.w	8009500 <_fflush_r>
 8008920:	bd10      	pop	{r4, pc}
 8008922:	bf00      	nop
 8008924:	20004c24 	.word	0x20004c24
 8008928:	20004c8c 	.word	0x20004c8c
 800892c:	20004cf4 	.word	0x20004cf4

08008930 <global_stdio_init.part.0>:
 8008930:	b510      	push	{r4, lr}
 8008932:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <global_stdio_init.part.0+0x30>)
 8008934:	4c0b      	ldr	r4, [pc, #44]	; (8008964 <global_stdio_init.part.0+0x34>)
 8008936:	4a0c      	ldr	r2, [pc, #48]	; (8008968 <global_stdio_init.part.0+0x38>)
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	4620      	mov	r0, r4
 800893c:	2200      	movs	r2, #0
 800893e:	2104      	movs	r1, #4
 8008940:	f7ff ff94 	bl	800886c <std>
 8008944:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008948:	2201      	movs	r2, #1
 800894a:	2109      	movs	r1, #9
 800894c:	f7ff ff8e 	bl	800886c <std>
 8008950:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008954:	2202      	movs	r2, #2
 8008956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800895a:	2112      	movs	r1, #18
 800895c:	f7ff bf86 	b.w	800886c <std>
 8008960:	20004d5c 	.word	0x20004d5c
 8008964:	20004c24 	.word	0x20004c24
 8008968:	080088d9 	.word	0x080088d9

0800896c <__sfp_lock_acquire>:
 800896c:	4801      	ldr	r0, [pc, #4]	; (8008974 <__sfp_lock_acquire+0x8>)
 800896e:	f000 b964 	b.w	8008c3a <__retarget_lock_acquire_recursive>
 8008972:	bf00      	nop
 8008974:	20004d65 	.word	0x20004d65

08008978 <__sfp_lock_release>:
 8008978:	4801      	ldr	r0, [pc, #4]	; (8008980 <__sfp_lock_release+0x8>)
 800897a:	f000 b95f 	b.w	8008c3c <__retarget_lock_release_recursive>
 800897e:	bf00      	nop
 8008980:	20004d65 	.word	0x20004d65

08008984 <__sinit>:
 8008984:	b510      	push	{r4, lr}
 8008986:	4604      	mov	r4, r0
 8008988:	f7ff fff0 	bl	800896c <__sfp_lock_acquire>
 800898c:	6a23      	ldr	r3, [r4, #32]
 800898e:	b11b      	cbz	r3, 8008998 <__sinit+0x14>
 8008990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008994:	f7ff bff0 	b.w	8008978 <__sfp_lock_release>
 8008998:	4b04      	ldr	r3, [pc, #16]	; (80089ac <__sinit+0x28>)
 800899a:	6223      	str	r3, [r4, #32]
 800899c:	4b04      	ldr	r3, [pc, #16]	; (80089b0 <__sinit+0x2c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1f5      	bne.n	8008990 <__sinit+0xc>
 80089a4:	f7ff ffc4 	bl	8008930 <global_stdio_init.part.0>
 80089a8:	e7f2      	b.n	8008990 <__sinit+0xc>
 80089aa:	bf00      	nop
 80089ac:	080088f1 	.word	0x080088f1
 80089b0:	20004d5c 	.word	0x20004d5c

080089b4 <_fwalk_sglue>:
 80089b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b8:	4607      	mov	r7, r0
 80089ba:	4688      	mov	r8, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	2600      	movs	r6, #0
 80089c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089c4:	f1b9 0901 	subs.w	r9, r9, #1
 80089c8:	d505      	bpl.n	80089d6 <_fwalk_sglue+0x22>
 80089ca:	6824      	ldr	r4, [r4, #0]
 80089cc:	2c00      	cmp	r4, #0
 80089ce:	d1f7      	bne.n	80089c0 <_fwalk_sglue+0xc>
 80089d0:	4630      	mov	r0, r6
 80089d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089d6:	89ab      	ldrh	r3, [r5, #12]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d907      	bls.n	80089ec <_fwalk_sglue+0x38>
 80089dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089e0:	3301      	adds	r3, #1
 80089e2:	d003      	beq.n	80089ec <_fwalk_sglue+0x38>
 80089e4:	4629      	mov	r1, r5
 80089e6:	4638      	mov	r0, r7
 80089e8:	47c0      	blx	r8
 80089ea:	4306      	orrs	r6, r0
 80089ec:	3568      	adds	r5, #104	; 0x68
 80089ee:	e7e9      	b.n	80089c4 <_fwalk_sglue+0x10>

080089f0 <iprintf>:
 80089f0:	b40f      	push	{r0, r1, r2, r3}
 80089f2:	b507      	push	{r0, r1, r2, lr}
 80089f4:	4906      	ldr	r1, [pc, #24]	; (8008a10 <iprintf+0x20>)
 80089f6:	ab04      	add	r3, sp, #16
 80089f8:	6808      	ldr	r0, [r1, #0]
 80089fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fe:	6881      	ldr	r1, [r0, #8]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	f000 fa4d 	bl	8008ea0 <_vfiprintf_r>
 8008a06:	b003      	add	sp, #12
 8008a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a0c:	b004      	add	sp, #16
 8008a0e:	4770      	bx	lr
 8008a10:	20000068 	.word	0x20000068

08008a14 <__sread>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	460c      	mov	r4, r1
 8008a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1c:	f000 f8be 	bl	8008b9c <_read_r>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	bfab      	itete	ge
 8008a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a26:	89a3      	ldrhlt	r3, [r4, #12]
 8008a28:	181b      	addge	r3, r3, r0
 8008a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a2e:	bfac      	ite	ge
 8008a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a32:	81a3      	strhlt	r3, [r4, #12]
 8008a34:	bd10      	pop	{r4, pc}

08008a36 <__swrite>:
 8008a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	898b      	ldrh	r3, [r1, #12]
 8008a3e:	05db      	lsls	r3, r3, #23
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	4616      	mov	r6, r2
 8008a46:	d505      	bpl.n	8008a54 <__swrite+0x1e>
 8008a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f000 f892 	bl	8008b78 <_lseek_r>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	4632      	mov	r2, r6
 8008a62:	463b      	mov	r3, r7
 8008a64:	4628      	mov	r0, r5
 8008a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6a:	f000 b8a9 	b.w	8008bc0 <_write_r>

08008a6e <__sseek>:
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	460c      	mov	r4, r1
 8008a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a76:	f000 f87f 	bl	8008b78 <_lseek_r>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	bf15      	itete	ne
 8008a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a8a:	81a3      	strheq	r3, [r4, #12]
 8008a8c:	bf18      	it	ne
 8008a8e:	81a3      	strhne	r3, [r4, #12]
 8008a90:	bd10      	pop	{r4, pc}

08008a92 <__sclose>:
 8008a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a96:	f000 b809 	b.w	8008aac <_close_r>

08008a9a <memset>:
 8008a9a:	4402      	add	r2, r0
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d100      	bne.n	8008aa4 <memset+0xa>
 8008aa2:	4770      	bx	lr
 8008aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa8:	e7f9      	b.n	8008a9e <memset+0x4>
	...

08008aac <_close_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4d06      	ldr	r5, [pc, #24]	; (8008ac8 <_close_r+0x1c>)
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	602b      	str	r3, [r5, #0]
 8008ab8:	f7f9 f9a1 	bl	8001dfe <_close>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_close_r+0x1a>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_close_r+0x1a>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	20004d60 	.word	0x20004d60

08008acc <_reclaim_reent>:
 8008acc:	4b29      	ldr	r3, [pc, #164]	; (8008b74 <_reclaim_reent+0xa8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4283      	cmp	r3, r0
 8008ad2:	b570      	push	{r4, r5, r6, lr}
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	d04b      	beq.n	8008b70 <_reclaim_reent+0xa4>
 8008ad8:	69c3      	ldr	r3, [r0, #28]
 8008ada:	b143      	cbz	r3, 8008aee <_reclaim_reent+0x22>
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d144      	bne.n	8008b6c <_reclaim_reent+0xa0>
 8008ae2:	69e3      	ldr	r3, [r4, #28]
 8008ae4:	6819      	ldr	r1, [r3, #0]
 8008ae6:	b111      	cbz	r1, 8008aee <_reclaim_reent+0x22>
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 f8b7 	bl	8008c5c <_free_r>
 8008aee:	6961      	ldr	r1, [r4, #20]
 8008af0:	b111      	cbz	r1, 8008af8 <_reclaim_reent+0x2c>
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 f8b2 	bl	8008c5c <_free_r>
 8008af8:	69e1      	ldr	r1, [r4, #28]
 8008afa:	b111      	cbz	r1, 8008b02 <_reclaim_reent+0x36>
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 f8ad 	bl	8008c5c <_free_r>
 8008b02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008b04:	b111      	cbz	r1, 8008b0c <_reclaim_reent+0x40>
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f8a8 	bl	8008c5c <_free_r>
 8008b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0e:	b111      	cbz	r1, 8008b16 <_reclaim_reent+0x4a>
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 f8a3 	bl	8008c5c <_free_r>
 8008b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b18:	b111      	cbz	r1, 8008b20 <_reclaim_reent+0x54>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 f89e 	bl	8008c5c <_free_r>
 8008b20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b22:	b111      	cbz	r1, 8008b2a <_reclaim_reent+0x5e>
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f899 	bl	8008c5c <_free_r>
 8008b2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008b2c:	b111      	cbz	r1, 8008b34 <_reclaim_reent+0x68>
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f894 	bl	8008c5c <_free_r>
 8008b34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008b36:	b111      	cbz	r1, 8008b3e <_reclaim_reent+0x72>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 f88f 	bl	8008c5c <_free_r>
 8008b3e:	6a23      	ldr	r3, [r4, #32]
 8008b40:	b1b3      	cbz	r3, 8008b70 <_reclaim_reent+0xa4>
 8008b42:	4620      	mov	r0, r4
 8008b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b48:	4718      	bx	r3
 8008b4a:	5949      	ldr	r1, [r1, r5]
 8008b4c:	b941      	cbnz	r1, 8008b60 <_reclaim_reent+0x94>
 8008b4e:	3504      	adds	r5, #4
 8008b50:	69e3      	ldr	r3, [r4, #28]
 8008b52:	2d80      	cmp	r5, #128	; 0x80
 8008b54:	68d9      	ldr	r1, [r3, #12]
 8008b56:	d1f8      	bne.n	8008b4a <_reclaim_reent+0x7e>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 f87f 	bl	8008c5c <_free_r>
 8008b5e:	e7c0      	b.n	8008ae2 <_reclaim_reent+0x16>
 8008b60:	680e      	ldr	r6, [r1, #0]
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 f87a 	bl	8008c5c <_free_r>
 8008b68:	4631      	mov	r1, r6
 8008b6a:	e7ef      	b.n	8008b4c <_reclaim_reent+0x80>
 8008b6c:	2500      	movs	r5, #0
 8008b6e:	e7ef      	b.n	8008b50 <_reclaim_reent+0x84>
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	bf00      	nop
 8008b74:	20000068 	.word	0x20000068

08008b78 <_lseek_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4d07      	ldr	r5, [pc, #28]	; (8008b98 <_lseek_r+0x20>)
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	4608      	mov	r0, r1
 8008b80:	4611      	mov	r1, r2
 8008b82:	2200      	movs	r2, #0
 8008b84:	602a      	str	r2, [r5, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	f7f9 f960 	bl	8001e4c <_lseek>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	d102      	bne.n	8008b96 <_lseek_r+0x1e>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	b103      	cbz	r3, 8008b96 <_lseek_r+0x1e>
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	20004d60 	.word	0x20004d60

08008b9c <_read_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4d07      	ldr	r5, [pc, #28]	; (8008bbc <_read_r+0x20>)
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	4608      	mov	r0, r1
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	602a      	str	r2, [r5, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	f7f9 f8ee 	bl	8001d8c <_read>
 8008bb0:	1c43      	adds	r3, r0, #1
 8008bb2:	d102      	bne.n	8008bba <_read_r+0x1e>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	b103      	cbz	r3, 8008bba <_read_r+0x1e>
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	20004d60 	.word	0x20004d60

08008bc0 <_write_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4d07      	ldr	r5, [pc, #28]	; (8008be0 <_write_r+0x20>)
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	4608      	mov	r0, r1
 8008bc8:	4611      	mov	r1, r2
 8008bca:	2200      	movs	r2, #0
 8008bcc:	602a      	str	r2, [r5, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f7f9 f8f9 	bl	8001dc6 <_write>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d102      	bne.n	8008bde <_write_r+0x1e>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	b103      	cbz	r3, 8008bde <_write_r+0x1e>
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	20004d60 	.word	0x20004d60

08008be4 <__errno>:
 8008be4:	4b01      	ldr	r3, [pc, #4]	; (8008bec <__errno+0x8>)
 8008be6:	6818      	ldr	r0, [r3, #0]
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	20000068 	.word	0x20000068

08008bf0 <__libc_init_array>:
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	4d0d      	ldr	r5, [pc, #52]	; (8008c28 <__libc_init_array+0x38>)
 8008bf4:	4c0d      	ldr	r4, [pc, #52]	; (8008c2c <__libc_init_array+0x3c>)
 8008bf6:	1b64      	subs	r4, r4, r5
 8008bf8:	10a4      	asrs	r4, r4, #2
 8008bfa:	2600      	movs	r6, #0
 8008bfc:	42a6      	cmp	r6, r4
 8008bfe:	d109      	bne.n	8008c14 <__libc_init_array+0x24>
 8008c00:	4d0b      	ldr	r5, [pc, #44]	; (8008c30 <__libc_init_array+0x40>)
 8008c02:	4c0c      	ldr	r4, [pc, #48]	; (8008c34 <__libc_init_array+0x44>)
 8008c04:	f000 fdce 	bl	80097a4 <_init>
 8008c08:	1b64      	subs	r4, r4, r5
 8008c0a:	10a4      	asrs	r4, r4, #2
 8008c0c:	2600      	movs	r6, #0
 8008c0e:	42a6      	cmp	r6, r4
 8008c10:	d105      	bne.n	8008c1e <__libc_init_array+0x2e>
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c18:	4798      	blx	r3
 8008c1a:	3601      	adds	r6, #1
 8008c1c:	e7ee      	b.n	8008bfc <__libc_init_array+0xc>
 8008c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c22:	4798      	blx	r3
 8008c24:	3601      	adds	r6, #1
 8008c26:	e7f2      	b.n	8008c0e <__libc_init_array+0x1e>
 8008c28:	080099e8 	.word	0x080099e8
 8008c2c:	080099e8 	.word	0x080099e8
 8008c30:	080099e8 	.word	0x080099e8
 8008c34:	080099ec 	.word	0x080099ec

08008c38 <__retarget_lock_init_recursive>:
 8008c38:	4770      	bx	lr

08008c3a <__retarget_lock_acquire_recursive>:
 8008c3a:	4770      	bx	lr

08008c3c <__retarget_lock_release_recursive>:
 8008c3c:	4770      	bx	lr

08008c3e <memcpy>:
 8008c3e:	440a      	add	r2, r1
 8008c40:	4291      	cmp	r1, r2
 8008c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c46:	d100      	bne.n	8008c4a <memcpy+0xc>
 8008c48:	4770      	bx	lr
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c54:	4291      	cmp	r1, r2
 8008c56:	d1f9      	bne.n	8008c4c <memcpy+0xe>
 8008c58:	bd10      	pop	{r4, pc}
	...

08008c5c <_free_r>:
 8008c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	d044      	beq.n	8008cec <_free_r+0x90>
 8008c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c66:	9001      	str	r0, [sp, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c6e:	bfb8      	it	lt
 8008c70:	18e4      	addlt	r4, r4, r3
 8008c72:	f000 f8df 	bl	8008e34 <__malloc_lock>
 8008c76:	4a1e      	ldr	r2, [pc, #120]	; (8008cf0 <_free_r+0x94>)
 8008c78:	9801      	ldr	r0, [sp, #4]
 8008c7a:	6813      	ldr	r3, [r2, #0]
 8008c7c:	b933      	cbnz	r3, 8008c8c <_free_r+0x30>
 8008c7e:	6063      	str	r3, [r4, #4]
 8008c80:	6014      	str	r4, [r2, #0]
 8008c82:	b003      	add	sp, #12
 8008c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c88:	f000 b8da 	b.w	8008e40 <__malloc_unlock>
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	d908      	bls.n	8008ca2 <_free_r+0x46>
 8008c90:	6825      	ldr	r5, [r4, #0]
 8008c92:	1961      	adds	r1, r4, r5
 8008c94:	428b      	cmp	r3, r1
 8008c96:	bf01      	itttt	eq
 8008c98:	6819      	ldreq	r1, [r3, #0]
 8008c9a:	685b      	ldreq	r3, [r3, #4]
 8008c9c:	1949      	addeq	r1, r1, r5
 8008c9e:	6021      	streq	r1, [r4, #0]
 8008ca0:	e7ed      	b.n	8008c7e <_free_r+0x22>
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	b10b      	cbz	r3, 8008cac <_free_r+0x50>
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	d9fa      	bls.n	8008ca2 <_free_r+0x46>
 8008cac:	6811      	ldr	r1, [r2, #0]
 8008cae:	1855      	adds	r5, r2, r1
 8008cb0:	42a5      	cmp	r5, r4
 8008cb2:	d10b      	bne.n	8008ccc <_free_r+0x70>
 8008cb4:	6824      	ldr	r4, [r4, #0]
 8008cb6:	4421      	add	r1, r4
 8008cb8:	1854      	adds	r4, r2, r1
 8008cba:	42a3      	cmp	r3, r4
 8008cbc:	6011      	str	r1, [r2, #0]
 8008cbe:	d1e0      	bne.n	8008c82 <_free_r+0x26>
 8008cc0:	681c      	ldr	r4, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	6053      	str	r3, [r2, #4]
 8008cc6:	440c      	add	r4, r1
 8008cc8:	6014      	str	r4, [r2, #0]
 8008cca:	e7da      	b.n	8008c82 <_free_r+0x26>
 8008ccc:	d902      	bls.n	8008cd4 <_free_r+0x78>
 8008cce:	230c      	movs	r3, #12
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	e7d6      	b.n	8008c82 <_free_r+0x26>
 8008cd4:	6825      	ldr	r5, [r4, #0]
 8008cd6:	1961      	adds	r1, r4, r5
 8008cd8:	428b      	cmp	r3, r1
 8008cda:	bf04      	itt	eq
 8008cdc:	6819      	ldreq	r1, [r3, #0]
 8008cde:	685b      	ldreq	r3, [r3, #4]
 8008ce0:	6063      	str	r3, [r4, #4]
 8008ce2:	bf04      	itt	eq
 8008ce4:	1949      	addeq	r1, r1, r5
 8008ce6:	6021      	streq	r1, [r4, #0]
 8008ce8:	6054      	str	r4, [r2, #4]
 8008cea:	e7ca      	b.n	8008c82 <_free_r+0x26>
 8008cec:	b003      	add	sp, #12
 8008cee:	bd30      	pop	{r4, r5, pc}
 8008cf0:	20004d68 	.word	0x20004d68

08008cf4 <sbrk_aligned>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	4e0e      	ldr	r6, [pc, #56]	; (8008d30 <sbrk_aligned+0x3c>)
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	6831      	ldr	r1, [r6, #0]
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	b911      	cbnz	r1, 8008d06 <sbrk_aligned+0x12>
 8008d00:	f000 fcbc 	bl	800967c <_sbrk_r>
 8008d04:	6030      	str	r0, [r6, #0]
 8008d06:	4621      	mov	r1, r4
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f000 fcb7 	bl	800967c <_sbrk_r>
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	d00a      	beq.n	8008d28 <sbrk_aligned+0x34>
 8008d12:	1cc4      	adds	r4, r0, #3
 8008d14:	f024 0403 	bic.w	r4, r4, #3
 8008d18:	42a0      	cmp	r0, r4
 8008d1a:	d007      	beq.n	8008d2c <sbrk_aligned+0x38>
 8008d1c:	1a21      	subs	r1, r4, r0
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f000 fcac 	bl	800967c <_sbrk_r>
 8008d24:	3001      	adds	r0, #1
 8008d26:	d101      	bne.n	8008d2c <sbrk_aligned+0x38>
 8008d28:	f04f 34ff 	mov.w	r4, #4294967295
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	bd70      	pop	{r4, r5, r6, pc}
 8008d30:	20004d6c 	.word	0x20004d6c

08008d34 <_malloc_r>:
 8008d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d38:	1ccd      	adds	r5, r1, #3
 8008d3a:	f025 0503 	bic.w	r5, r5, #3
 8008d3e:	3508      	adds	r5, #8
 8008d40:	2d0c      	cmp	r5, #12
 8008d42:	bf38      	it	cc
 8008d44:	250c      	movcc	r5, #12
 8008d46:	2d00      	cmp	r5, #0
 8008d48:	4607      	mov	r7, r0
 8008d4a:	db01      	blt.n	8008d50 <_malloc_r+0x1c>
 8008d4c:	42a9      	cmp	r1, r5
 8008d4e:	d905      	bls.n	8008d5c <_malloc_r+0x28>
 8008d50:	230c      	movs	r3, #12
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	2600      	movs	r6, #0
 8008d56:	4630      	mov	r0, r6
 8008d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e30 <_malloc_r+0xfc>
 8008d60:	f000 f868 	bl	8008e34 <__malloc_lock>
 8008d64:	f8d8 3000 	ldr.w	r3, [r8]
 8008d68:	461c      	mov	r4, r3
 8008d6a:	bb5c      	cbnz	r4, 8008dc4 <_malloc_r+0x90>
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4638      	mov	r0, r7
 8008d70:	f7ff ffc0 	bl	8008cf4 <sbrk_aligned>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	4604      	mov	r4, r0
 8008d78:	d155      	bne.n	8008e26 <_malloc_r+0xf2>
 8008d7a:	f8d8 4000 	ldr.w	r4, [r8]
 8008d7e:	4626      	mov	r6, r4
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	d145      	bne.n	8008e10 <_malloc_r+0xdc>
 8008d84:	2c00      	cmp	r4, #0
 8008d86:	d048      	beq.n	8008e1a <_malloc_r+0xe6>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	eb04 0903 	add.w	r9, r4, r3
 8008d92:	f000 fc73 	bl	800967c <_sbrk_r>
 8008d96:	4581      	cmp	r9, r0
 8008d98:	d13f      	bne.n	8008e1a <_malloc_r+0xe6>
 8008d9a:	6821      	ldr	r1, [r4, #0]
 8008d9c:	1a6d      	subs	r5, r5, r1
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ffa7 	bl	8008cf4 <sbrk_aligned>
 8008da6:	3001      	adds	r0, #1
 8008da8:	d037      	beq.n	8008e1a <_malloc_r+0xe6>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	442b      	add	r3, r5
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	f8d8 3000 	ldr.w	r3, [r8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d038      	beq.n	8008e2a <_malloc_r+0xf6>
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	42a2      	cmp	r2, r4
 8008dbc:	d12b      	bne.n	8008e16 <_malloc_r+0xe2>
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	e00f      	b.n	8008de4 <_malloc_r+0xb0>
 8008dc4:	6822      	ldr	r2, [r4, #0]
 8008dc6:	1b52      	subs	r2, r2, r5
 8008dc8:	d41f      	bmi.n	8008e0a <_malloc_r+0xd6>
 8008dca:	2a0b      	cmp	r2, #11
 8008dcc:	d917      	bls.n	8008dfe <_malloc_r+0xca>
 8008dce:	1961      	adds	r1, r4, r5
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	6025      	str	r5, [r4, #0]
 8008dd4:	bf18      	it	ne
 8008dd6:	6059      	strne	r1, [r3, #4]
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	bf08      	it	eq
 8008ddc:	f8c8 1000 	streq.w	r1, [r8]
 8008de0:	5162      	str	r2, [r4, r5]
 8008de2:	604b      	str	r3, [r1, #4]
 8008de4:	4638      	mov	r0, r7
 8008de6:	f104 060b 	add.w	r6, r4, #11
 8008dea:	f000 f829 	bl	8008e40 <__malloc_unlock>
 8008dee:	f026 0607 	bic.w	r6, r6, #7
 8008df2:	1d23      	adds	r3, r4, #4
 8008df4:	1af2      	subs	r2, r6, r3
 8008df6:	d0ae      	beq.n	8008d56 <_malloc_r+0x22>
 8008df8:	1b9b      	subs	r3, r3, r6
 8008dfa:	50a3      	str	r3, [r4, r2]
 8008dfc:	e7ab      	b.n	8008d56 <_malloc_r+0x22>
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	6862      	ldr	r2, [r4, #4]
 8008e02:	d1dd      	bne.n	8008dc0 <_malloc_r+0x8c>
 8008e04:	f8c8 2000 	str.w	r2, [r8]
 8008e08:	e7ec      	b.n	8008de4 <_malloc_r+0xb0>
 8008e0a:	4623      	mov	r3, r4
 8008e0c:	6864      	ldr	r4, [r4, #4]
 8008e0e:	e7ac      	b.n	8008d6a <_malloc_r+0x36>
 8008e10:	4634      	mov	r4, r6
 8008e12:	6876      	ldr	r6, [r6, #4]
 8008e14:	e7b4      	b.n	8008d80 <_malloc_r+0x4c>
 8008e16:	4613      	mov	r3, r2
 8008e18:	e7cc      	b.n	8008db4 <_malloc_r+0x80>
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	603b      	str	r3, [r7, #0]
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f000 f80e 	bl	8008e40 <__malloc_unlock>
 8008e24:	e797      	b.n	8008d56 <_malloc_r+0x22>
 8008e26:	6025      	str	r5, [r4, #0]
 8008e28:	e7dc      	b.n	8008de4 <_malloc_r+0xb0>
 8008e2a:	605b      	str	r3, [r3, #4]
 8008e2c:	deff      	udf	#255	; 0xff
 8008e2e:	bf00      	nop
 8008e30:	20004d68 	.word	0x20004d68

08008e34 <__malloc_lock>:
 8008e34:	4801      	ldr	r0, [pc, #4]	; (8008e3c <__malloc_lock+0x8>)
 8008e36:	f7ff bf00 	b.w	8008c3a <__retarget_lock_acquire_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	20004d64 	.word	0x20004d64

08008e40 <__malloc_unlock>:
 8008e40:	4801      	ldr	r0, [pc, #4]	; (8008e48 <__malloc_unlock+0x8>)
 8008e42:	f7ff befb 	b.w	8008c3c <__retarget_lock_release_recursive>
 8008e46:	bf00      	nop
 8008e48:	20004d64 	.word	0x20004d64

08008e4c <__sfputc_r>:
 8008e4c:	6893      	ldr	r3, [r2, #8]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	b410      	push	{r4}
 8008e54:	6093      	str	r3, [r2, #8]
 8008e56:	da08      	bge.n	8008e6a <__sfputc_r+0x1e>
 8008e58:	6994      	ldr	r4, [r2, #24]
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	db01      	blt.n	8008e62 <__sfputc_r+0x16>
 8008e5e:	290a      	cmp	r1, #10
 8008e60:	d103      	bne.n	8008e6a <__sfputc_r+0x1e>
 8008e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e66:	f000 bb73 	b.w	8009550 <__swbuf_r>
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	1c58      	adds	r0, r3, #1
 8008e6e:	6010      	str	r0, [r2, #0]
 8008e70:	7019      	strb	r1, [r3, #0]
 8008e72:	4608      	mov	r0, r1
 8008e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <__sfputs_r>:
 8008e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	460f      	mov	r7, r1
 8008e80:	4614      	mov	r4, r2
 8008e82:	18d5      	adds	r5, r2, r3
 8008e84:	42ac      	cmp	r4, r5
 8008e86:	d101      	bne.n	8008e8c <__sfputs_r+0x12>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	e007      	b.n	8008e9c <__sfputs_r+0x22>
 8008e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e90:	463a      	mov	r2, r7
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7ff ffda 	bl	8008e4c <__sfputc_r>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d1f3      	bne.n	8008e84 <__sfputs_r+0xa>
 8008e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ea0 <_vfiprintf_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	460d      	mov	r5, r1
 8008ea6:	b09d      	sub	sp, #116	; 0x74
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	4698      	mov	r8, r3
 8008eac:	4606      	mov	r6, r0
 8008eae:	b118      	cbz	r0, 8008eb8 <_vfiprintf_r+0x18>
 8008eb0:	6a03      	ldr	r3, [r0, #32]
 8008eb2:	b90b      	cbnz	r3, 8008eb8 <_vfiprintf_r+0x18>
 8008eb4:	f7ff fd66 	bl	8008984 <__sinit>
 8008eb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eba:	07d9      	lsls	r1, r3, #31
 8008ebc:	d405      	bmi.n	8008eca <_vfiprintf_r+0x2a>
 8008ebe:	89ab      	ldrh	r3, [r5, #12]
 8008ec0:	059a      	lsls	r2, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_vfiprintf_r+0x2a>
 8008ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec6:	f7ff feb8 	bl	8008c3a <__retarget_lock_acquire_recursive>
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	071b      	lsls	r3, r3, #28
 8008ece:	d501      	bpl.n	8008ed4 <_vfiprintf_r+0x34>
 8008ed0:	692b      	ldr	r3, [r5, #16]
 8008ed2:	b99b      	cbnz	r3, 8008efc <_vfiprintf_r+0x5c>
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f000 fb78 	bl	80095cc <__swsetup_r>
 8008edc:	b170      	cbz	r0, 8008efc <_vfiprintf_r+0x5c>
 8008ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ee0:	07dc      	lsls	r4, r3, #31
 8008ee2:	d504      	bpl.n	8008eee <_vfiprintf_r+0x4e>
 8008ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee8:	b01d      	add	sp, #116	; 0x74
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	89ab      	ldrh	r3, [r5, #12]
 8008ef0:	0598      	lsls	r0, r3, #22
 8008ef2:	d4f7      	bmi.n	8008ee4 <_vfiprintf_r+0x44>
 8008ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ef6:	f7ff fea1 	bl	8008c3c <__retarget_lock_release_recursive>
 8008efa:	e7f3      	b.n	8008ee4 <_vfiprintf_r+0x44>
 8008efc:	2300      	movs	r3, #0
 8008efe:	9309      	str	r3, [sp, #36]	; 0x24
 8008f00:	2320      	movs	r3, #32
 8008f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f06:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f0a:	2330      	movs	r3, #48	; 0x30
 8008f0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090c0 <_vfiprintf_r+0x220>
 8008f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f14:	f04f 0901 	mov.w	r9, #1
 8008f18:	4623      	mov	r3, r4
 8008f1a:	469a      	mov	sl, r3
 8008f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f20:	b10a      	cbz	r2, 8008f26 <_vfiprintf_r+0x86>
 8008f22:	2a25      	cmp	r2, #37	; 0x25
 8008f24:	d1f9      	bne.n	8008f1a <_vfiprintf_r+0x7a>
 8008f26:	ebba 0b04 	subs.w	fp, sl, r4
 8008f2a:	d00b      	beq.n	8008f44 <_vfiprintf_r+0xa4>
 8008f2c:	465b      	mov	r3, fp
 8008f2e:	4622      	mov	r2, r4
 8008f30:	4629      	mov	r1, r5
 8008f32:	4630      	mov	r0, r6
 8008f34:	f7ff ffa1 	bl	8008e7a <__sfputs_r>
 8008f38:	3001      	adds	r0, #1
 8008f3a:	f000 80a9 	beq.w	8009090 <_vfiprintf_r+0x1f0>
 8008f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f40:	445a      	add	r2, fp
 8008f42:	9209      	str	r2, [sp, #36]	; 0x24
 8008f44:	f89a 3000 	ldrb.w	r3, [sl]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 80a1 	beq.w	8009090 <_vfiprintf_r+0x1f0>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f04f 32ff 	mov.w	r2, #4294967295
 8008f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f58:	f10a 0a01 	add.w	sl, sl, #1
 8008f5c:	9304      	str	r3, [sp, #16]
 8008f5e:	9307      	str	r3, [sp, #28]
 8008f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f64:	931a      	str	r3, [sp, #104]	; 0x68
 8008f66:	4654      	mov	r4, sl
 8008f68:	2205      	movs	r2, #5
 8008f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6e:	4854      	ldr	r0, [pc, #336]	; (80090c0 <_vfiprintf_r+0x220>)
 8008f70:	f7f7 f936 	bl	80001e0 <memchr>
 8008f74:	9a04      	ldr	r2, [sp, #16]
 8008f76:	b9d8      	cbnz	r0, 8008fb0 <_vfiprintf_r+0x110>
 8008f78:	06d1      	lsls	r1, r2, #27
 8008f7a:	bf44      	itt	mi
 8008f7c:	2320      	movmi	r3, #32
 8008f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f82:	0713      	lsls	r3, r2, #28
 8008f84:	bf44      	itt	mi
 8008f86:	232b      	movmi	r3, #43	; 0x2b
 8008f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f90:	2b2a      	cmp	r3, #42	; 0x2a
 8008f92:	d015      	beq.n	8008fc0 <_vfiprintf_r+0x120>
 8008f94:	9a07      	ldr	r2, [sp, #28]
 8008f96:	4654      	mov	r4, sl
 8008f98:	2000      	movs	r0, #0
 8008f9a:	f04f 0c0a 	mov.w	ip, #10
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fa4:	3b30      	subs	r3, #48	; 0x30
 8008fa6:	2b09      	cmp	r3, #9
 8008fa8:	d94d      	bls.n	8009046 <_vfiprintf_r+0x1a6>
 8008faa:	b1b0      	cbz	r0, 8008fda <_vfiprintf_r+0x13a>
 8008fac:	9207      	str	r2, [sp, #28]
 8008fae:	e014      	b.n	8008fda <_vfiprintf_r+0x13a>
 8008fb0:	eba0 0308 	sub.w	r3, r0, r8
 8008fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	46a2      	mov	sl, r4
 8008fbe:	e7d2      	b.n	8008f66 <_vfiprintf_r+0xc6>
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	1d19      	adds	r1, r3, #4
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	9103      	str	r1, [sp, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	bfbb      	ittet	lt
 8008fcc:	425b      	neglt	r3, r3
 8008fce:	f042 0202 	orrlt.w	r2, r2, #2
 8008fd2:	9307      	strge	r3, [sp, #28]
 8008fd4:	9307      	strlt	r3, [sp, #28]
 8008fd6:	bfb8      	it	lt
 8008fd8:	9204      	strlt	r2, [sp, #16]
 8008fda:	7823      	ldrb	r3, [r4, #0]
 8008fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8008fde:	d10c      	bne.n	8008ffa <_vfiprintf_r+0x15a>
 8008fe0:	7863      	ldrb	r3, [r4, #1]
 8008fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe4:	d134      	bne.n	8009050 <_vfiprintf_r+0x1b0>
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	1d1a      	adds	r2, r3, #4
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	9203      	str	r2, [sp, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bfb8      	it	lt
 8008ff2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ff6:	3402      	adds	r4, #2
 8008ff8:	9305      	str	r3, [sp, #20]
 8008ffa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090d0 <_vfiprintf_r+0x230>
 8008ffe:	7821      	ldrb	r1, [r4, #0]
 8009000:	2203      	movs	r2, #3
 8009002:	4650      	mov	r0, sl
 8009004:	f7f7 f8ec 	bl	80001e0 <memchr>
 8009008:	b138      	cbz	r0, 800901a <_vfiprintf_r+0x17a>
 800900a:	9b04      	ldr	r3, [sp, #16]
 800900c:	eba0 000a 	sub.w	r0, r0, sl
 8009010:	2240      	movs	r2, #64	; 0x40
 8009012:	4082      	lsls	r2, r0
 8009014:	4313      	orrs	r3, r2
 8009016:	3401      	adds	r4, #1
 8009018:	9304      	str	r3, [sp, #16]
 800901a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901e:	4829      	ldr	r0, [pc, #164]	; (80090c4 <_vfiprintf_r+0x224>)
 8009020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009024:	2206      	movs	r2, #6
 8009026:	f7f7 f8db 	bl	80001e0 <memchr>
 800902a:	2800      	cmp	r0, #0
 800902c:	d03f      	beq.n	80090ae <_vfiprintf_r+0x20e>
 800902e:	4b26      	ldr	r3, [pc, #152]	; (80090c8 <_vfiprintf_r+0x228>)
 8009030:	bb1b      	cbnz	r3, 800907a <_vfiprintf_r+0x1da>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	3307      	adds	r3, #7
 8009036:	f023 0307 	bic.w	r3, r3, #7
 800903a:	3308      	adds	r3, #8
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009040:	443b      	add	r3, r7
 8009042:	9309      	str	r3, [sp, #36]	; 0x24
 8009044:	e768      	b.n	8008f18 <_vfiprintf_r+0x78>
 8009046:	fb0c 3202 	mla	r2, ip, r2, r3
 800904a:	460c      	mov	r4, r1
 800904c:	2001      	movs	r0, #1
 800904e:	e7a6      	b.n	8008f9e <_vfiprintf_r+0xfe>
 8009050:	2300      	movs	r3, #0
 8009052:	3401      	adds	r4, #1
 8009054:	9305      	str	r3, [sp, #20]
 8009056:	4619      	mov	r1, r3
 8009058:	f04f 0c0a 	mov.w	ip, #10
 800905c:	4620      	mov	r0, r4
 800905e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009062:	3a30      	subs	r2, #48	; 0x30
 8009064:	2a09      	cmp	r2, #9
 8009066:	d903      	bls.n	8009070 <_vfiprintf_r+0x1d0>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0c6      	beq.n	8008ffa <_vfiprintf_r+0x15a>
 800906c:	9105      	str	r1, [sp, #20]
 800906e:	e7c4      	b.n	8008ffa <_vfiprintf_r+0x15a>
 8009070:	fb0c 2101 	mla	r1, ip, r1, r2
 8009074:	4604      	mov	r4, r0
 8009076:	2301      	movs	r3, #1
 8009078:	e7f0      	b.n	800905c <_vfiprintf_r+0x1bc>
 800907a:	ab03      	add	r3, sp, #12
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	462a      	mov	r2, r5
 8009080:	4b12      	ldr	r3, [pc, #72]	; (80090cc <_vfiprintf_r+0x22c>)
 8009082:	a904      	add	r1, sp, #16
 8009084:	4630      	mov	r0, r6
 8009086:	f3af 8000 	nop.w
 800908a:	4607      	mov	r7, r0
 800908c:	1c78      	adds	r0, r7, #1
 800908e:	d1d6      	bne.n	800903e <_vfiprintf_r+0x19e>
 8009090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009092:	07d9      	lsls	r1, r3, #31
 8009094:	d405      	bmi.n	80090a2 <_vfiprintf_r+0x202>
 8009096:	89ab      	ldrh	r3, [r5, #12]
 8009098:	059a      	lsls	r2, r3, #22
 800909a:	d402      	bmi.n	80090a2 <_vfiprintf_r+0x202>
 800909c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800909e:	f7ff fdcd 	bl	8008c3c <__retarget_lock_release_recursive>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	065b      	lsls	r3, r3, #25
 80090a6:	f53f af1d 	bmi.w	8008ee4 <_vfiprintf_r+0x44>
 80090aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ac:	e71c      	b.n	8008ee8 <_vfiprintf_r+0x48>
 80090ae:	ab03      	add	r3, sp, #12
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	462a      	mov	r2, r5
 80090b4:	4b05      	ldr	r3, [pc, #20]	; (80090cc <_vfiprintf_r+0x22c>)
 80090b6:	a904      	add	r1, sp, #16
 80090b8:	4630      	mov	r0, r6
 80090ba:	f000 f879 	bl	80091b0 <_printf_i>
 80090be:	e7e4      	b.n	800908a <_vfiprintf_r+0x1ea>
 80090c0:	080099ac 	.word	0x080099ac
 80090c4:	080099b6 	.word	0x080099b6
 80090c8:	00000000 	.word	0x00000000
 80090cc:	08008e7b 	.word	0x08008e7b
 80090d0:	080099b2 	.word	0x080099b2

080090d4 <_printf_common>:
 80090d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d8:	4616      	mov	r6, r2
 80090da:	4699      	mov	r9, r3
 80090dc:	688a      	ldr	r2, [r1, #8]
 80090de:	690b      	ldr	r3, [r1, #16]
 80090e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090e4:	4293      	cmp	r3, r2
 80090e6:	bfb8      	it	lt
 80090e8:	4613      	movlt	r3, r2
 80090ea:	6033      	str	r3, [r6, #0]
 80090ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090f0:	4607      	mov	r7, r0
 80090f2:	460c      	mov	r4, r1
 80090f4:	b10a      	cbz	r2, 80090fa <_printf_common+0x26>
 80090f6:	3301      	adds	r3, #1
 80090f8:	6033      	str	r3, [r6, #0]
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	0699      	lsls	r1, r3, #26
 80090fe:	bf42      	ittt	mi
 8009100:	6833      	ldrmi	r3, [r6, #0]
 8009102:	3302      	addmi	r3, #2
 8009104:	6033      	strmi	r3, [r6, #0]
 8009106:	6825      	ldr	r5, [r4, #0]
 8009108:	f015 0506 	ands.w	r5, r5, #6
 800910c:	d106      	bne.n	800911c <_printf_common+0x48>
 800910e:	f104 0a19 	add.w	sl, r4, #25
 8009112:	68e3      	ldr	r3, [r4, #12]
 8009114:	6832      	ldr	r2, [r6, #0]
 8009116:	1a9b      	subs	r3, r3, r2
 8009118:	42ab      	cmp	r3, r5
 800911a:	dc26      	bgt.n	800916a <_printf_common+0x96>
 800911c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009120:	1e13      	subs	r3, r2, #0
 8009122:	6822      	ldr	r2, [r4, #0]
 8009124:	bf18      	it	ne
 8009126:	2301      	movne	r3, #1
 8009128:	0692      	lsls	r2, r2, #26
 800912a:	d42b      	bmi.n	8009184 <_printf_common+0xb0>
 800912c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009130:	4649      	mov	r1, r9
 8009132:	4638      	mov	r0, r7
 8009134:	47c0      	blx	r8
 8009136:	3001      	adds	r0, #1
 8009138:	d01e      	beq.n	8009178 <_printf_common+0xa4>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	6922      	ldr	r2, [r4, #16]
 800913e:	f003 0306 	and.w	r3, r3, #6
 8009142:	2b04      	cmp	r3, #4
 8009144:	bf02      	ittt	eq
 8009146:	68e5      	ldreq	r5, [r4, #12]
 8009148:	6833      	ldreq	r3, [r6, #0]
 800914a:	1aed      	subeq	r5, r5, r3
 800914c:	68a3      	ldr	r3, [r4, #8]
 800914e:	bf0c      	ite	eq
 8009150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009154:	2500      	movne	r5, #0
 8009156:	4293      	cmp	r3, r2
 8009158:	bfc4      	itt	gt
 800915a:	1a9b      	subgt	r3, r3, r2
 800915c:	18ed      	addgt	r5, r5, r3
 800915e:	2600      	movs	r6, #0
 8009160:	341a      	adds	r4, #26
 8009162:	42b5      	cmp	r5, r6
 8009164:	d11a      	bne.n	800919c <_printf_common+0xc8>
 8009166:	2000      	movs	r0, #0
 8009168:	e008      	b.n	800917c <_printf_common+0xa8>
 800916a:	2301      	movs	r3, #1
 800916c:	4652      	mov	r2, sl
 800916e:	4649      	mov	r1, r9
 8009170:	4638      	mov	r0, r7
 8009172:	47c0      	blx	r8
 8009174:	3001      	adds	r0, #1
 8009176:	d103      	bne.n	8009180 <_printf_common+0xac>
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009180:	3501      	adds	r5, #1
 8009182:	e7c6      	b.n	8009112 <_printf_common+0x3e>
 8009184:	18e1      	adds	r1, r4, r3
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	2030      	movs	r0, #48	; 0x30
 800918a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800918e:	4422      	add	r2, r4
 8009190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009198:	3302      	adds	r3, #2
 800919a:	e7c7      	b.n	800912c <_printf_common+0x58>
 800919c:	2301      	movs	r3, #1
 800919e:	4622      	mov	r2, r4
 80091a0:	4649      	mov	r1, r9
 80091a2:	4638      	mov	r0, r7
 80091a4:	47c0      	blx	r8
 80091a6:	3001      	adds	r0, #1
 80091a8:	d0e6      	beq.n	8009178 <_printf_common+0xa4>
 80091aa:	3601      	adds	r6, #1
 80091ac:	e7d9      	b.n	8009162 <_printf_common+0x8e>
	...

080091b0 <_printf_i>:
 80091b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091b4:	7e0f      	ldrb	r7, [r1, #24]
 80091b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091b8:	2f78      	cmp	r7, #120	; 0x78
 80091ba:	4691      	mov	r9, r2
 80091bc:	4680      	mov	r8, r0
 80091be:	460c      	mov	r4, r1
 80091c0:	469a      	mov	sl, r3
 80091c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091c6:	d807      	bhi.n	80091d8 <_printf_i+0x28>
 80091c8:	2f62      	cmp	r7, #98	; 0x62
 80091ca:	d80a      	bhi.n	80091e2 <_printf_i+0x32>
 80091cc:	2f00      	cmp	r7, #0
 80091ce:	f000 80d4 	beq.w	800937a <_printf_i+0x1ca>
 80091d2:	2f58      	cmp	r7, #88	; 0x58
 80091d4:	f000 80c0 	beq.w	8009358 <_printf_i+0x1a8>
 80091d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091e0:	e03a      	b.n	8009258 <_printf_i+0xa8>
 80091e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091e6:	2b15      	cmp	r3, #21
 80091e8:	d8f6      	bhi.n	80091d8 <_printf_i+0x28>
 80091ea:	a101      	add	r1, pc, #4	; (adr r1, 80091f0 <_printf_i+0x40>)
 80091ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091f0:	08009249 	.word	0x08009249
 80091f4:	0800925d 	.word	0x0800925d
 80091f8:	080091d9 	.word	0x080091d9
 80091fc:	080091d9 	.word	0x080091d9
 8009200:	080091d9 	.word	0x080091d9
 8009204:	080091d9 	.word	0x080091d9
 8009208:	0800925d 	.word	0x0800925d
 800920c:	080091d9 	.word	0x080091d9
 8009210:	080091d9 	.word	0x080091d9
 8009214:	080091d9 	.word	0x080091d9
 8009218:	080091d9 	.word	0x080091d9
 800921c:	08009361 	.word	0x08009361
 8009220:	08009289 	.word	0x08009289
 8009224:	0800931b 	.word	0x0800931b
 8009228:	080091d9 	.word	0x080091d9
 800922c:	080091d9 	.word	0x080091d9
 8009230:	08009383 	.word	0x08009383
 8009234:	080091d9 	.word	0x080091d9
 8009238:	08009289 	.word	0x08009289
 800923c:	080091d9 	.word	0x080091d9
 8009240:	080091d9 	.word	0x080091d9
 8009244:	08009323 	.word	0x08009323
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	1d1a      	adds	r2, r3, #4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	602a      	str	r2, [r5, #0]
 8009250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009258:	2301      	movs	r3, #1
 800925a:	e09f      	b.n	800939c <_printf_i+0x1ec>
 800925c:	6820      	ldr	r0, [r4, #0]
 800925e:	682b      	ldr	r3, [r5, #0]
 8009260:	0607      	lsls	r7, r0, #24
 8009262:	f103 0104 	add.w	r1, r3, #4
 8009266:	6029      	str	r1, [r5, #0]
 8009268:	d501      	bpl.n	800926e <_printf_i+0xbe>
 800926a:	681e      	ldr	r6, [r3, #0]
 800926c:	e003      	b.n	8009276 <_printf_i+0xc6>
 800926e:	0646      	lsls	r6, r0, #25
 8009270:	d5fb      	bpl.n	800926a <_printf_i+0xba>
 8009272:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009276:	2e00      	cmp	r6, #0
 8009278:	da03      	bge.n	8009282 <_printf_i+0xd2>
 800927a:	232d      	movs	r3, #45	; 0x2d
 800927c:	4276      	negs	r6, r6
 800927e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009282:	485a      	ldr	r0, [pc, #360]	; (80093ec <_printf_i+0x23c>)
 8009284:	230a      	movs	r3, #10
 8009286:	e012      	b.n	80092ae <_printf_i+0xfe>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	6820      	ldr	r0, [r4, #0]
 800928c:	1d19      	adds	r1, r3, #4
 800928e:	6029      	str	r1, [r5, #0]
 8009290:	0605      	lsls	r5, r0, #24
 8009292:	d501      	bpl.n	8009298 <_printf_i+0xe8>
 8009294:	681e      	ldr	r6, [r3, #0]
 8009296:	e002      	b.n	800929e <_printf_i+0xee>
 8009298:	0641      	lsls	r1, r0, #25
 800929a:	d5fb      	bpl.n	8009294 <_printf_i+0xe4>
 800929c:	881e      	ldrh	r6, [r3, #0]
 800929e:	4853      	ldr	r0, [pc, #332]	; (80093ec <_printf_i+0x23c>)
 80092a0:	2f6f      	cmp	r7, #111	; 0x6f
 80092a2:	bf0c      	ite	eq
 80092a4:	2308      	moveq	r3, #8
 80092a6:	230a      	movne	r3, #10
 80092a8:	2100      	movs	r1, #0
 80092aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ae:	6865      	ldr	r5, [r4, #4]
 80092b0:	60a5      	str	r5, [r4, #8]
 80092b2:	2d00      	cmp	r5, #0
 80092b4:	bfa2      	ittt	ge
 80092b6:	6821      	ldrge	r1, [r4, #0]
 80092b8:	f021 0104 	bicge.w	r1, r1, #4
 80092bc:	6021      	strge	r1, [r4, #0]
 80092be:	b90e      	cbnz	r6, 80092c4 <_printf_i+0x114>
 80092c0:	2d00      	cmp	r5, #0
 80092c2:	d04b      	beq.n	800935c <_printf_i+0x1ac>
 80092c4:	4615      	mov	r5, r2
 80092c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80092ca:	fb03 6711 	mls	r7, r3, r1, r6
 80092ce:	5dc7      	ldrb	r7, [r0, r7]
 80092d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092d4:	4637      	mov	r7, r6
 80092d6:	42bb      	cmp	r3, r7
 80092d8:	460e      	mov	r6, r1
 80092da:	d9f4      	bls.n	80092c6 <_printf_i+0x116>
 80092dc:	2b08      	cmp	r3, #8
 80092de:	d10b      	bne.n	80092f8 <_printf_i+0x148>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	07de      	lsls	r6, r3, #31
 80092e4:	d508      	bpl.n	80092f8 <_printf_i+0x148>
 80092e6:	6923      	ldr	r3, [r4, #16]
 80092e8:	6861      	ldr	r1, [r4, #4]
 80092ea:	4299      	cmp	r1, r3
 80092ec:	bfde      	ittt	le
 80092ee:	2330      	movle	r3, #48	; 0x30
 80092f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092f8:	1b52      	subs	r2, r2, r5
 80092fa:	6122      	str	r2, [r4, #16]
 80092fc:	f8cd a000 	str.w	sl, [sp]
 8009300:	464b      	mov	r3, r9
 8009302:	aa03      	add	r2, sp, #12
 8009304:	4621      	mov	r1, r4
 8009306:	4640      	mov	r0, r8
 8009308:	f7ff fee4 	bl	80090d4 <_printf_common>
 800930c:	3001      	adds	r0, #1
 800930e:	d14a      	bne.n	80093a6 <_printf_i+0x1f6>
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	b004      	add	sp, #16
 8009316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	f043 0320 	orr.w	r3, r3, #32
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	4833      	ldr	r0, [pc, #204]	; (80093f0 <_printf_i+0x240>)
 8009324:	2778      	movs	r7, #120	; 0x78
 8009326:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	6829      	ldr	r1, [r5, #0]
 800932e:	061f      	lsls	r7, r3, #24
 8009330:	f851 6b04 	ldr.w	r6, [r1], #4
 8009334:	d402      	bmi.n	800933c <_printf_i+0x18c>
 8009336:	065f      	lsls	r7, r3, #25
 8009338:	bf48      	it	mi
 800933a:	b2b6      	uxthmi	r6, r6
 800933c:	07df      	lsls	r7, r3, #31
 800933e:	bf48      	it	mi
 8009340:	f043 0320 	orrmi.w	r3, r3, #32
 8009344:	6029      	str	r1, [r5, #0]
 8009346:	bf48      	it	mi
 8009348:	6023      	strmi	r3, [r4, #0]
 800934a:	b91e      	cbnz	r6, 8009354 <_printf_i+0x1a4>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	f023 0320 	bic.w	r3, r3, #32
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	2310      	movs	r3, #16
 8009356:	e7a7      	b.n	80092a8 <_printf_i+0xf8>
 8009358:	4824      	ldr	r0, [pc, #144]	; (80093ec <_printf_i+0x23c>)
 800935a:	e7e4      	b.n	8009326 <_printf_i+0x176>
 800935c:	4615      	mov	r5, r2
 800935e:	e7bd      	b.n	80092dc <_printf_i+0x12c>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	6826      	ldr	r6, [r4, #0]
 8009364:	6961      	ldr	r1, [r4, #20]
 8009366:	1d18      	adds	r0, r3, #4
 8009368:	6028      	str	r0, [r5, #0]
 800936a:	0635      	lsls	r5, r6, #24
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	d501      	bpl.n	8009374 <_printf_i+0x1c4>
 8009370:	6019      	str	r1, [r3, #0]
 8009372:	e002      	b.n	800937a <_printf_i+0x1ca>
 8009374:	0670      	lsls	r0, r6, #25
 8009376:	d5fb      	bpl.n	8009370 <_printf_i+0x1c0>
 8009378:	8019      	strh	r1, [r3, #0]
 800937a:	2300      	movs	r3, #0
 800937c:	6123      	str	r3, [r4, #16]
 800937e:	4615      	mov	r5, r2
 8009380:	e7bc      	b.n	80092fc <_printf_i+0x14c>
 8009382:	682b      	ldr	r3, [r5, #0]
 8009384:	1d1a      	adds	r2, r3, #4
 8009386:	602a      	str	r2, [r5, #0]
 8009388:	681d      	ldr	r5, [r3, #0]
 800938a:	6862      	ldr	r2, [r4, #4]
 800938c:	2100      	movs	r1, #0
 800938e:	4628      	mov	r0, r5
 8009390:	f7f6 ff26 	bl	80001e0 <memchr>
 8009394:	b108      	cbz	r0, 800939a <_printf_i+0x1ea>
 8009396:	1b40      	subs	r0, r0, r5
 8009398:	6060      	str	r0, [r4, #4]
 800939a:	6863      	ldr	r3, [r4, #4]
 800939c:	6123      	str	r3, [r4, #16]
 800939e:	2300      	movs	r3, #0
 80093a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a4:	e7aa      	b.n	80092fc <_printf_i+0x14c>
 80093a6:	6923      	ldr	r3, [r4, #16]
 80093a8:	462a      	mov	r2, r5
 80093aa:	4649      	mov	r1, r9
 80093ac:	4640      	mov	r0, r8
 80093ae:	47d0      	blx	sl
 80093b0:	3001      	adds	r0, #1
 80093b2:	d0ad      	beq.n	8009310 <_printf_i+0x160>
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	079b      	lsls	r3, r3, #30
 80093b8:	d413      	bmi.n	80093e2 <_printf_i+0x232>
 80093ba:	68e0      	ldr	r0, [r4, #12]
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	4298      	cmp	r0, r3
 80093c0:	bfb8      	it	lt
 80093c2:	4618      	movlt	r0, r3
 80093c4:	e7a6      	b.n	8009314 <_printf_i+0x164>
 80093c6:	2301      	movs	r3, #1
 80093c8:	4632      	mov	r2, r6
 80093ca:	4649      	mov	r1, r9
 80093cc:	4640      	mov	r0, r8
 80093ce:	47d0      	blx	sl
 80093d0:	3001      	adds	r0, #1
 80093d2:	d09d      	beq.n	8009310 <_printf_i+0x160>
 80093d4:	3501      	adds	r5, #1
 80093d6:	68e3      	ldr	r3, [r4, #12]
 80093d8:	9903      	ldr	r1, [sp, #12]
 80093da:	1a5b      	subs	r3, r3, r1
 80093dc:	42ab      	cmp	r3, r5
 80093de:	dcf2      	bgt.n	80093c6 <_printf_i+0x216>
 80093e0:	e7eb      	b.n	80093ba <_printf_i+0x20a>
 80093e2:	2500      	movs	r5, #0
 80093e4:	f104 0619 	add.w	r6, r4, #25
 80093e8:	e7f5      	b.n	80093d6 <_printf_i+0x226>
 80093ea:	bf00      	nop
 80093ec:	080099bd 	.word	0x080099bd
 80093f0:	080099ce 	.word	0x080099ce

080093f4 <__sflush_r>:
 80093f4:	898a      	ldrh	r2, [r1, #12]
 80093f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fa:	4605      	mov	r5, r0
 80093fc:	0710      	lsls	r0, r2, #28
 80093fe:	460c      	mov	r4, r1
 8009400:	d458      	bmi.n	80094b4 <__sflush_r+0xc0>
 8009402:	684b      	ldr	r3, [r1, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	dc05      	bgt.n	8009414 <__sflush_r+0x20>
 8009408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800940a:	2b00      	cmp	r3, #0
 800940c:	dc02      	bgt.n	8009414 <__sflush_r+0x20>
 800940e:	2000      	movs	r0, #0
 8009410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009416:	2e00      	cmp	r6, #0
 8009418:	d0f9      	beq.n	800940e <__sflush_r+0x1a>
 800941a:	2300      	movs	r3, #0
 800941c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009420:	682f      	ldr	r7, [r5, #0]
 8009422:	6a21      	ldr	r1, [r4, #32]
 8009424:	602b      	str	r3, [r5, #0]
 8009426:	d032      	beq.n	800948e <__sflush_r+0x9a>
 8009428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	075a      	lsls	r2, r3, #29
 800942e:	d505      	bpl.n	800943c <__sflush_r+0x48>
 8009430:	6863      	ldr	r3, [r4, #4]
 8009432:	1ac0      	subs	r0, r0, r3
 8009434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009436:	b10b      	cbz	r3, 800943c <__sflush_r+0x48>
 8009438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800943a:	1ac0      	subs	r0, r0, r3
 800943c:	2300      	movs	r3, #0
 800943e:	4602      	mov	r2, r0
 8009440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009442:	6a21      	ldr	r1, [r4, #32]
 8009444:	4628      	mov	r0, r5
 8009446:	47b0      	blx	r6
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	d106      	bne.n	800945c <__sflush_r+0x68>
 800944e:	6829      	ldr	r1, [r5, #0]
 8009450:	291d      	cmp	r1, #29
 8009452:	d82b      	bhi.n	80094ac <__sflush_r+0xb8>
 8009454:	4a29      	ldr	r2, [pc, #164]	; (80094fc <__sflush_r+0x108>)
 8009456:	410a      	asrs	r2, r1
 8009458:	07d6      	lsls	r6, r2, #31
 800945a:	d427      	bmi.n	80094ac <__sflush_r+0xb8>
 800945c:	2200      	movs	r2, #0
 800945e:	6062      	str	r2, [r4, #4]
 8009460:	04d9      	lsls	r1, r3, #19
 8009462:	6922      	ldr	r2, [r4, #16]
 8009464:	6022      	str	r2, [r4, #0]
 8009466:	d504      	bpl.n	8009472 <__sflush_r+0x7e>
 8009468:	1c42      	adds	r2, r0, #1
 800946a:	d101      	bne.n	8009470 <__sflush_r+0x7c>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	b903      	cbnz	r3, 8009472 <__sflush_r+0x7e>
 8009470:	6560      	str	r0, [r4, #84]	; 0x54
 8009472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009474:	602f      	str	r7, [r5, #0]
 8009476:	2900      	cmp	r1, #0
 8009478:	d0c9      	beq.n	800940e <__sflush_r+0x1a>
 800947a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800947e:	4299      	cmp	r1, r3
 8009480:	d002      	beq.n	8009488 <__sflush_r+0x94>
 8009482:	4628      	mov	r0, r5
 8009484:	f7ff fbea 	bl	8008c5c <_free_r>
 8009488:	2000      	movs	r0, #0
 800948a:	6360      	str	r0, [r4, #52]	; 0x34
 800948c:	e7c0      	b.n	8009410 <__sflush_r+0x1c>
 800948e:	2301      	movs	r3, #1
 8009490:	4628      	mov	r0, r5
 8009492:	47b0      	blx	r6
 8009494:	1c41      	adds	r1, r0, #1
 8009496:	d1c8      	bne.n	800942a <__sflush_r+0x36>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0c5      	beq.n	800942a <__sflush_r+0x36>
 800949e:	2b1d      	cmp	r3, #29
 80094a0:	d001      	beq.n	80094a6 <__sflush_r+0xb2>
 80094a2:	2b16      	cmp	r3, #22
 80094a4:	d101      	bne.n	80094aa <__sflush_r+0xb6>
 80094a6:	602f      	str	r7, [r5, #0]
 80094a8:	e7b1      	b.n	800940e <__sflush_r+0x1a>
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b0:	81a3      	strh	r3, [r4, #12]
 80094b2:	e7ad      	b.n	8009410 <__sflush_r+0x1c>
 80094b4:	690f      	ldr	r7, [r1, #16]
 80094b6:	2f00      	cmp	r7, #0
 80094b8:	d0a9      	beq.n	800940e <__sflush_r+0x1a>
 80094ba:	0793      	lsls	r3, r2, #30
 80094bc:	680e      	ldr	r6, [r1, #0]
 80094be:	bf08      	it	eq
 80094c0:	694b      	ldreq	r3, [r1, #20]
 80094c2:	600f      	str	r7, [r1, #0]
 80094c4:	bf18      	it	ne
 80094c6:	2300      	movne	r3, #0
 80094c8:	eba6 0807 	sub.w	r8, r6, r7
 80094cc:	608b      	str	r3, [r1, #8]
 80094ce:	f1b8 0f00 	cmp.w	r8, #0
 80094d2:	dd9c      	ble.n	800940e <__sflush_r+0x1a>
 80094d4:	6a21      	ldr	r1, [r4, #32]
 80094d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094d8:	4643      	mov	r3, r8
 80094da:	463a      	mov	r2, r7
 80094dc:	4628      	mov	r0, r5
 80094de:	47b0      	blx	r6
 80094e0:	2800      	cmp	r0, #0
 80094e2:	dc06      	bgt.n	80094f2 <__sflush_r+0xfe>
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ea:	81a3      	strh	r3, [r4, #12]
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295
 80094f0:	e78e      	b.n	8009410 <__sflush_r+0x1c>
 80094f2:	4407      	add	r7, r0
 80094f4:	eba8 0800 	sub.w	r8, r8, r0
 80094f8:	e7e9      	b.n	80094ce <__sflush_r+0xda>
 80094fa:	bf00      	nop
 80094fc:	dfbffffe 	.word	0xdfbffffe

08009500 <_fflush_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	690b      	ldr	r3, [r1, #16]
 8009504:	4605      	mov	r5, r0
 8009506:	460c      	mov	r4, r1
 8009508:	b913      	cbnz	r3, 8009510 <_fflush_r+0x10>
 800950a:	2500      	movs	r5, #0
 800950c:	4628      	mov	r0, r5
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	b118      	cbz	r0, 800951a <_fflush_r+0x1a>
 8009512:	6a03      	ldr	r3, [r0, #32]
 8009514:	b90b      	cbnz	r3, 800951a <_fflush_r+0x1a>
 8009516:	f7ff fa35 	bl	8008984 <__sinit>
 800951a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0f3      	beq.n	800950a <_fflush_r+0xa>
 8009522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009524:	07d0      	lsls	r0, r2, #31
 8009526:	d404      	bmi.n	8009532 <_fflush_r+0x32>
 8009528:	0599      	lsls	r1, r3, #22
 800952a:	d402      	bmi.n	8009532 <_fflush_r+0x32>
 800952c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800952e:	f7ff fb84 	bl	8008c3a <__retarget_lock_acquire_recursive>
 8009532:	4628      	mov	r0, r5
 8009534:	4621      	mov	r1, r4
 8009536:	f7ff ff5d 	bl	80093f4 <__sflush_r>
 800953a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800953c:	07da      	lsls	r2, r3, #31
 800953e:	4605      	mov	r5, r0
 8009540:	d4e4      	bmi.n	800950c <_fflush_r+0xc>
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	059b      	lsls	r3, r3, #22
 8009546:	d4e1      	bmi.n	800950c <_fflush_r+0xc>
 8009548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800954a:	f7ff fb77 	bl	8008c3c <__retarget_lock_release_recursive>
 800954e:	e7dd      	b.n	800950c <_fflush_r+0xc>

08009550 <__swbuf_r>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	460e      	mov	r6, r1
 8009554:	4614      	mov	r4, r2
 8009556:	4605      	mov	r5, r0
 8009558:	b118      	cbz	r0, 8009562 <__swbuf_r+0x12>
 800955a:	6a03      	ldr	r3, [r0, #32]
 800955c:	b90b      	cbnz	r3, 8009562 <__swbuf_r+0x12>
 800955e:	f7ff fa11 	bl	8008984 <__sinit>
 8009562:	69a3      	ldr	r3, [r4, #24]
 8009564:	60a3      	str	r3, [r4, #8]
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	071a      	lsls	r2, r3, #28
 800956a:	d525      	bpl.n	80095b8 <__swbuf_r+0x68>
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	b31b      	cbz	r3, 80095b8 <__swbuf_r+0x68>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	6922      	ldr	r2, [r4, #16]
 8009574:	1a98      	subs	r0, r3, r2
 8009576:	6963      	ldr	r3, [r4, #20]
 8009578:	b2f6      	uxtb	r6, r6
 800957a:	4283      	cmp	r3, r0
 800957c:	4637      	mov	r7, r6
 800957e:	dc04      	bgt.n	800958a <__swbuf_r+0x3a>
 8009580:	4621      	mov	r1, r4
 8009582:	4628      	mov	r0, r5
 8009584:	f7ff ffbc 	bl	8009500 <_fflush_r>
 8009588:	b9e0      	cbnz	r0, 80095c4 <__swbuf_r+0x74>
 800958a:	68a3      	ldr	r3, [r4, #8]
 800958c:	3b01      	subs	r3, #1
 800958e:	60a3      	str	r3, [r4, #8]
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	6022      	str	r2, [r4, #0]
 8009596:	701e      	strb	r6, [r3, #0]
 8009598:	6962      	ldr	r2, [r4, #20]
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	429a      	cmp	r2, r3
 800959e:	d004      	beq.n	80095aa <__swbuf_r+0x5a>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	07db      	lsls	r3, r3, #31
 80095a4:	d506      	bpl.n	80095b4 <__swbuf_r+0x64>
 80095a6:	2e0a      	cmp	r6, #10
 80095a8:	d104      	bne.n	80095b4 <__swbuf_r+0x64>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4628      	mov	r0, r5
 80095ae:	f7ff ffa7 	bl	8009500 <_fflush_r>
 80095b2:	b938      	cbnz	r0, 80095c4 <__swbuf_r+0x74>
 80095b4:	4638      	mov	r0, r7
 80095b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b8:	4621      	mov	r1, r4
 80095ba:	4628      	mov	r0, r5
 80095bc:	f000 f806 	bl	80095cc <__swsetup_r>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d0d5      	beq.n	8009570 <__swbuf_r+0x20>
 80095c4:	f04f 37ff 	mov.w	r7, #4294967295
 80095c8:	e7f4      	b.n	80095b4 <__swbuf_r+0x64>
	...

080095cc <__swsetup_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4b2a      	ldr	r3, [pc, #168]	; (8009678 <__swsetup_r+0xac>)
 80095d0:	4605      	mov	r5, r0
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	460c      	mov	r4, r1
 80095d6:	b118      	cbz	r0, 80095e0 <__swsetup_r+0x14>
 80095d8:	6a03      	ldr	r3, [r0, #32]
 80095da:	b90b      	cbnz	r3, 80095e0 <__swsetup_r+0x14>
 80095dc:	f7ff f9d2 	bl	8008984 <__sinit>
 80095e0:	89a3      	ldrh	r3, [r4, #12]
 80095e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095e6:	0718      	lsls	r0, r3, #28
 80095e8:	d422      	bmi.n	8009630 <__swsetup_r+0x64>
 80095ea:	06d9      	lsls	r1, r3, #27
 80095ec:	d407      	bmi.n	80095fe <__swsetup_r+0x32>
 80095ee:	2309      	movs	r3, #9
 80095f0:	602b      	str	r3, [r5, #0]
 80095f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095f6:	81a3      	strh	r3, [r4, #12]
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	e034      	b.n	8009668 <__swsetup_r+0x9c>
 80095fe:	0758      	lsls	r0, r3, #29
 8009600:	d512      	bpl.n	8009628 <__swsetup_r+0x5c>
 8009602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009604:	b141      	cbz	r1, 8009618 <__swsetup_r+0x4c>
 8009606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800960a:	4299      	cmp	r1, r3
 800960c:	d002      	beq.n	8009614 <__swsetup_r+0x48>
 800960e:	4628      	mov	r0, r5
 8009610:	f7ff fb24 	bl	8008c5c <_free_r>
 8009614:	2300      	movs	r3, #0
 8009616:	6363      	str	r3, [r4, #52]	; 0x34
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	2300      	movs	r3, #0
 8009622:	6063      	str	r3, [r4, #4]
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	f043 0308 	orr.w	r3, r3, #8
 800962e:	81a3      	strh	r3, [r4, #12]
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	b94b      	cbnz	r3, 8009648 <__swsetup_r+0x7c>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800963a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800963e:	d003      	beq.n	8009648 <__swsetup_r+0x7c>
 8009640:	4621      	mov	r1, r4
 8009642:	4628      	mov	r0, r5
 8009644:	f000 f850 	bl	80096e8 <__smakebuf_r>
 8009648:	89a0      	ldrh	r0, [r4, #12]
 800964a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800964e:	f010 0301 	ands.w	r3, r0, #1
 8009652:	d00a      	beq.n	800966a <__swsetup_r+0x9e>
 8009654:	2300      	movs	r3, #0
 8009656:	60a3      	str	r3, [r4, #8]
 8009658:	6963      	ldr	r3, [r4, #20]
 800965a:	425b      	negs	r3, r3
 800965c:	61a3      	str	r3, [r4, #24]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	b943      	cbnz	r3, 8009674 <__swsetup_r+0xa8>
 8009662:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009666:	d1c4      	bne.n	80095f2 <__swsetup_r+0x26>
 8009668:	bd38      	pop	{r3, r4, r5, pc}
 800966a:	0781      	lsls	r1, r0, #30
 800966c:	bf58      	it	pl
 800966e:	6963      	ldrpl	r3, [r4, #20]
 8009670:	60a3      	str	r3, [r4, #8]
 8009672:	e7f4      	b.n	800965e <__swsetup_r+0x92>
 8009674:	2000      	movs	r0, #0
 8009676:	e7f7      	b.n	8009668 <__swsetup_r+0x9c>
 8009678:	20000068 	.word	0x20000068

0800967c <_sbrk_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d06      	ldr	r5, [pc, #24]	; (8009698 <_sbrk_r+0x1c>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	f7f8 fbee 	bl	8001e68 <_sbrk>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_sbrk_r+0x1a>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_sbrk_r+0x1a>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	20004d60 	.word	0x20004d60

0800969c <__swhatbuf_r>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	460c      	mov	r4, r1
 80096a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a4:	2900      	cmp	r1, #0
 80096a6:	b096      	sub	sp, #88	; 0x58
 80096a8:	4615      	mov	r5, r2
 80096aa:	461e      	mov	r6, r3
 80096ac:	da0d      	bge.n	80096ca <__swhatbuf_r+0x2e>
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096b4:	f04f 0100 	mov.w	r1, #0
 80096b8:	bf0c      	ite	eq
 80096ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096be:	2340      	movne	r3, #64	; 0x40
 80096c0:	2000      	movs	r0, #0
 80096c2:	6031      	str	r1, [r6, #0]
 80096c4:	602b      	str	r3, [r5, #0]
 80096c6:	b016      	add	sp, #88	; 0x58
 80096c8:	bd70      	pop	{r4, r5, r6, pc}
 80096ca:	466a      	mov	r2, sp
 80096cc:	f000 f848 	bl	8009760 <_fstat_r>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	dbec      	blt.n	80096ae <__swhatbuf_r+0x12>
 80096d4:	9901      	ldr	r1, [sp, #4]
 80096d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096de:	4259      	negs	r1, r3
 80096e0:	4159      	adcs	r1, r3
 80096e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096e6:	e7eb      	b.n	80096c0 <__swhatbuf_r+0x24>

080096e8 <__smakebuf_r>:
 80096e8:	898b      	ldrh	r3, [r1, #12]
 80096ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096ec:	079d      	lsls	r5, r3, #30
 80096ee:	4606      	mov	r6, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	d507      	bpl.n	8009704 <__smakebuf_r+0x1c>
 80096f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	6123      	str	r3, [r4, #16]
 80096fc:	2301      	movs	r3, #1
 80096fe:	6163      	str	r3, [r4, #20]
 8009700:	b002      	add	sp, #8
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	ab01      	add	r3, sp, #4
 8009706:	466a      	mov	r2, sp
 8009708:	f7ff ffc8 	bl	800969c <__swhatbuf_r>
 800970c:	9900      	ldr	r1, [sp, #0]
 800970e:	4605      	mov	r5, r0
 8009710:	4630      	mov	r0, r6
 8009712:	f7ff fb0f 	bl	8008d34 <_malloc_r>
 8009716:	b948      	cbnz	r0, 800972c <__smakebuf_r+0x44>
 8009718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971c:	059a      	lsls	r2, r3, #22
 800971e:	d4ef      	bmi.n	8009700 <__smakebuf_r+0x18>
 8009720:	f023 0303 	bic.w	r3, r3, #3
 8009724:	f043 0302 	orr.w	r3, r3, #2
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	e7e3      	b.n	80096f4 <__smakebuf_r+0xc>
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	6020      	str	r0, [r4, #0]
 8009730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	9b00      	ldr	r3, [sp, #0]
 8009738:	6163      	str	r3, [r4, #20]
 800973a:	9b01      	ldr	r3, [sp, #4]
 800973c:	6120      	str	r0, [r4, #16]
 800973e:	b15b      	cbz	r3, 8009758 <__smakebuf_r+0x70>
 8009740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009744:	4630      	mov	r0, r6
 8009746:	f000 f81d 	bl	8009784 <_isatty_r>
 800974a:	b128      	cbz	r0, 8009758 <__smakebuf_r+0x70>
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	f043 0301 	orr.w	r3, r3, #1
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	431d      	orrs	r5, r3
 800975c:	81a5      	strh	r5, [r4, #12]
 800975e:	e7cf      	b.n	8009700 <__smakebuf_r+0x18>

08009760 <_fstat_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d07      	ldr	r5, [pc, #28]	; (8009780 <_fstat_r+0x20>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	4611      	mov	r1, r2
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	f7f8 fb52 	bl	8001e16 <_fstat>
 8009772:	1c43      	adds	r3, r0, #1
 8009774:	d102      	bne.n	800977c <_fstat_r+0x1c>
 8009776:	682b      	ldr	r3, [r5, #0]
 8009778:	b103      	cbz	r3, 800977c <_fstat_r+0x1c>
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	bd38      	pop	{r3, r4, r5, pc}
 800977e:	bf00      	nop
 8009780:	20004d60 	.word	0x20004d60

08009784 <_isatty_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	4d06      	ldr	r5, [pc, #24]	; (80097a0 <_isatty_r+0x1c>)
 8009788:	2300      	movs	r3, #0
 800978a:	4604      	mov	r4, r0
 800978c:	4608      	mov	r0, r1
 800978e:	602b      	str	r3, [r5, #0]
 8009790:	f7f8 fb51 	bl	8001e36 <_isatty>
 8009794:	1c43      	adds	r3, r0, #1
 8009796:	d102      	bne.n	800979e <_isatty_r+0x1a>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	b103      	cbz	r3, 800979e <_isatty_r+0x1a>
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	20004d60 	.word	0x20004d60

080097a4 <_init>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr

080097b0 <_fini>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr
