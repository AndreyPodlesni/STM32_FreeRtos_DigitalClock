
FreeRtos_SPI__2DigitsDisplay_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000763c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007900  08007900  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007900  08007900  00017900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007908  08007908  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cac  2000006c  0800797c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d18  0800797c  00024d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8db  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004136  00000000  00000000  0003b9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d0  00000000  00000000  0003faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001261  00000000  00000000  000412c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ab12  00000000  00000000  00042521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c834  00000000  00000000  0005d033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c7af  00000000  00000000  00079867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a48  00000000  00000000  00116018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0011ca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077c4 	.word	0x080077c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080077c4 	.word	0x080077c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <FourDigitsetSegments>:
    // Display the second digit
    WriteDigit(2, secondDigit);
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
}

void FourDigitsetSegments(uint8_t number) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
        0b00000111, // 7
        0b01111111, // 8
        0b01101111  // 9
    };

    uint8_t segments = segmentMap[number];
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a32      	ldr	r2, [pc, #200]	; (8000654 <FourDigitsetSegments+0xd8>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	75fb      	strb	r3, [r7, #23]

    GPIO_PinState FourDigitsPinA_State = (segments & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	75bb      	strb	r3, [r7, #22]
    GPIO_PinState FourDigitsPinB_State = (segments & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	105b      	asrs	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	757b      	strb	r3, [r7, #21]
    GPIO_PinState FourDigitsPinC_State = (segments & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	109b      	asrs	r3, r3, #2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	753b      	strb	r3, [r7, #20]
    GPIO_PinState FourDigitsPinD_State = (segments & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ae:	7dfb      	ldrb	r3, [r7, #23]
 80005b0:	10db      	asrs	r3, r3, #3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	74fb      	strb	r3, [r7, #19]
    GPIO_PinState FourDigitsPinE_State = (segments & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	111b      	asrs	r3, r3, #4
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	74bb      	strb	r3, [r7, #18]
    GPIO_PinState FourDigitsPinF_State = (segments & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	115b      	asrs	r3, r3, #5
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	747b      	strb	r3, [r7, #17]
    GPIO_PinState FourDigitsPinG_State = (segments & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005d2:	7dfb      	ldrb	r3, [r7, #23]
 80005d4:	119b      	asrs	r3, r3, #6
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	743b      	strb	r3, [r7, #16]
    GPIO_PinState FourDigitsPinDP_State = (segments & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005de:	7dfb      	ldrb	r3, [r7, #23]
 80005e0:	09db      	lsrs	r3, r3, #7
 80005e2:	73fb      	strb	r3, [r7, #15]

    // Corresponding HAL_GPIO_WritePin calls
    HAL_GPIO_WritePin(FourDigitA_GPIO_Port, FourDigitA_Pin, FourDigitsPinA_State);
 80005e4:	7dbb      	ldrb	r3, [r7, #22]
 80005e6:	461a      	mov	r2, r3
 80005e8:	2104      	movs	r1, #4
 80005ea:	481b      	ldr	r0, [pc, #108]	; (8000658 <FourDigitsetSegments+0xdc>)
 80005ec:	f001 fbda 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitB_GPIO_Port, FourDigitB_Pin, FourDigitsPinB_State);
 80005f0:	7d7b      	ldrb	r3, [r7, #21]
 80005f2:	461a      	mov	r2, r3
 80005f4:	2102      	movs	r1, #2
 80005f6:	4818      	ldr	r0, [pc, #96]	; (8000658 <FourDigitsetSegments+0xdc>)
 80005f8:	f001 fbd4 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitC_GPIO_Port, FourDigitC_Pin, FourDigitsPinC_State);
 80005fc:	7d3b      	ldrb	r3, [r7, #20]
 80005fe:	461a      	mov	r2, r3
 8000600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000604:	4814      	ldr	r0, [pc, #80]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000606:	f001 fbcd 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD_GPIO_Port, FourDigitD_Pin, FourDigitsPinD_State);
 800060a:	7cfb      	ldrb	r3, [r7, #19]
 800060c:	461a      	mov	r2, r3
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000614:	f001 fbc6 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitE_GPIO_Port, FourDigitE_Pin, FourDigitsPinE_State);
 8000618:	7cbb      	ldrb	r3, [r7, #18]
 800061a:	461a      	mov	r2, r3
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000622:	f001 fbbf 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitF_GPIO_Port, FourDigitF_Pin, FourDigitsPinF_State);
 8000626:	7c7b      	ldrb	r3, [r7, #17]
 8000628:	461a      	mov	r2, r3
 800062a:	2110      	movs	r1, #16
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <FourDigitsetSegments+0xe0>)
 800062e:	f001 fbb9 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitG_GPIO_Port, FourDigitG_Pin, FourDigitsPinG_State);
 8000632:	7c3b      	ldrb	r3, [r7, #16]
 8000634:	461a      	mov	r2, r3
 8000636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <FourDigitsetSegments+0xe4>)
 800063c:	f001 fbb2 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, FourDigitsPinDP_State);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	461a      	mov	r2, r3
 8000644:	2110      	movs	r1, #16
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000648:	f001 fbac 	bl	8001da4 <HAL_GPIO_WritePin>

}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08007834 	.word	0x08007834
 8000658:	40020400 	.word	0x40020400
 800065c:	40020800 	.word	0x40020800
 8000660:	40020000 	.word	0x40020000

08000664 <FourDigitsSetCathode>:

void FourDigitsSetCathode(uint8_t Digit)
{	//Problem Here
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState FourDigitsCathodeD1_Pin_State = (Digit == 1)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b01      	cmp	r3, #1
 8000672:	bf14      	ite	ne
 8000674:	2301      	movne	r3, #1
 8000676:	2300      	moveq	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState FourDigitsCathodeD2_Pin_State = (Digit == 2)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b02      	cmp	r3, #2
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState FourDigitsCathodeD3_Pin_State = (Digit == 3)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b03      	cmp	r3, #3
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	737b      	strb	r3, [r7, #13]
	GPIO_PinState FourDigitsCathodeD4_Pin_State = (Digit == 4)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf14      	ite	ne
 800069e:	2301      	movne	r3, #1
 80006a0:	2300      	moveq	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	733b      	strb	r3, [r7, #12]



    HAL_GPIO_WritePin(FourDigitD1_GPIO_Port, FourDigitD1_Pin, FourDigitsCathodeD1_Pin_State);
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	461a      	mov	r2, r3
 80006aa:	2120      	movs	r1, #32
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <FourDigitsSetCathode+0x80>)
 80006ae:	f001 fb79 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD2_GPIO_Port, FourDigitD2_Pin, FourDigitsCathodeD2_Pin_State);
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	461a      	mov	r2, r3
 80006b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <FourDigitsSetCathode+0x84>)
 80006bc:	f001 fb72 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD3_GPIO_Port, FourDigitD3_Pin, FourDigitsCathodeD3_Pin_State);
 80006c0:	7b7b      	ldrb	r3, [r7, #13]
 80006c2:	461a      	mov	r2, r3
 80006c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <FourDigitsSetCathode+0x84>)
 80006ca:	f001 fb6b 	bl	8001da4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD4_GPIO_Port, FourDigitD4_Pin, FourDigitsCathodeD4_Pin_State);
 80006ce:	7b3b      	ldrb	r3, [r7, #12]
 80006d0:	461a      	mov	r2, r3
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <FourDigitsSetCathode+0x84>)
 80006d6:	f001 fb65 	bl	8001da4 <HAL_GPIO_WritePin>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020000 	.word	0x40020000

080006ec <FourDigitsWrite>:
void FourDigitsWrite(uint8_t Digit,uint8_t number)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	FourDigitsetSegments(number);
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff3c 	bl	800057c <FourDigitsetSegments>
	FourDigitsSetCathode(Digit);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffac 	bl	8000664 <FourDigitsSetCathode>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <FourDigitsWriteNumber>:

void FourDigitsWriteNumber(uint16_t number)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
    // Ensure the number is within the range of two digits (0-99)
    if (number > 9999) {
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	f242 720f 	movw	r2, #9999	; 0x270f
 8000724:	4293      	cmp	r3, r2
 8000726:	d855      	bhi.n	80007d4 <FourDigitsWriteNumber+0xc0>
        return; // Or handle the error as needed
    }



    uint16_t fourthDigit = number / 1000;      // Extract the first digit
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <FourDigitsWriteNumber+0xc8>)
 800072c:	fba2 2303 	umull	r2, r3, r2, r3
 8000730:	099b      	lsrs	r3, r3, #6
 8000732:	81fb      	strh	r3, [r7, #14]
    uint16_t thirdDigit = (number / 100) % 10; // Extract the second digit
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <FourDigitsWriteNumber+0xcc>)
 8000738:	fba2 2303 	umull	r2, r3, r2, r3
 800073c:	095b      	lsrs	r3, r3, #5
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <FourDigitsWriteNumber+0xd0>)
 8000742:	fba3 1302 	umull	r1, r3, r3, r2
 8000746:	08d9      	lsrs	r1, r3, #3
 8000748:	460b      	mov	r3, r1
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	440b      	add	r3, r1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	81bb      	strh	r3, [r7, #12]
    uint16_t secondDigit = (number / 10) % 10;   // Extract the third digit
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <FourDigitsWriteNumber+0xd0>)
 8000758:	fba2 2303 	umull	r2, r3, r2, r3
 800075c:	08db      	lsrs	r3, r3, #3
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <FourDigitsWriteNumber+0xd0>)
 8000762:	fba3 1302 	umull	r1, r3, r3, r2
 8000766:	08d9      	lsrs	r1, r3, #3
 8000768:	460b      	mov	r3, r1
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	817b      	strh	r3, [r7, #10]
    uint16_t firstDigit = number % 10;        // Extract the fourth digit
 8000774:	88fa      	ldrh	r2, [r7, #6]
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <FourDigitsWriteNumber+0xd0>)
 8000778:	fba3 1302 	umull	r1, r3, r3, r2
 800077c:	08d9      	lsrs	r1, r3, #3
 800077e:	460b      	mov	r3, r1
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	440b      	add	r3, r1
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	813b      	strh	r3, [r7, #8]




    // Display the first digit
    FourDigitsWrite(1, firstDigit);
 800078a:	893b      	ldrh	r3, [r7, #8]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4619      	mov	r1, r3
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ffab 	bl	80006ec <FourDigitsWrite>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 8000796:	2005      	movs	r0, #5
 8000798:	f003 fbd8 	bl	8003f4c <osDelay>

    // Display the second digit
    FourDigitsWrite(2, secondDigit);
 800079c:	897b      	ldrh	r3, [r7, #10]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	2002      	movs	r0, #2
 80007a4:	f7ff ffa2 	bl	80006ec <FourDigitsWrite>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 80007a8:	2005      	movs	r0, #5
 80007aa:	f003 fbcf 	bl	8003f4c <osDelay>


    FourDigitsWrite(3, thirdDigit);
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	2003      	movs	r0, #3
 80007b6:	f7ff ff99 	bl	80006ec <FourDigitsWrite>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 80007ba:	2005      	movs	r0, #5
 80007bc:	f003 fbc6 	bl	8003f4c <osDelay>

    FourDigitsWrite(4, fourthDigit);
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4619      	mov	r1, r3
 80007c6:	2004      	movs	r0, #4
 80007c8:	f7ff ff90 	bl	80006ec <FourDigitsWrite>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 80007cc:	2005      	movs	r0, #5
 80007ce:	f003 fbbd 	bl	8003f4c <osDelay>
 80007d2:	e000      	b.n	80007d6 <FourDigitsWriteNumber+0xc2>
        return; // Or handle the error as needed
 80007d4:	bf00      	nop
}
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	10624dd3 	.word	0x10624dd3
 80007e0:	51eb851f 	.word	0x51eb851f
 80007e4:	cccccccd 	.word	0xcccccccd

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_DMA_Init+0x3c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <MX_DMA_Init+0x3c>)
 80007f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_DMA_Init+0x3c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2105      	movs	r1, #5
 800080e:	200e      	movs	r0, #14
 8000810:	f000 fdaa 	bl	8001368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000814:	200e      	movs	r0, #14
 8000816:	f000 fdc3 	bl	80013a0 <HAL_NVIC_EnableIRQ>

}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadSpi */
  ReadSpiHandle = osThreadNew(Read_spi, NULL, &ReadSpi_attributes);
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <MX_FREERTOS_Init+0x38>)
 800082e:	2100      	movs	r1, #0
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_FREERTOS_Init+0x3c>)
 8000832:	f003 faf9 	bl	8003e28 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <MX_FREERTOS_Init+0x40>)
 800083a:	6013      	str	r3, [r2, #0]

  /* creation of TwoDigitsWrite */
  TwoDigitsWriteHandle = osThreadNew(TwoDigitsWriteTask, NULL, &TwoDigitsWrite_attributes);
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <MX_FREERTOS_Init+0x44>)
 800083e:	2100      	movs	r1, #0
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <MX_FREERTOS_Init+0x48>)
 8000842:	f003 faf1 	bl	8003e28 <osThreadNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <MX_FREERTOS_Init+0x4c>)
 800084a:	6013      	str	r3, [r2, #0]

  /* creation of FourDigitWrite */
  FourDigitWriteHandle = osThreadNew(FourDigitWriteTask, NULL, &FourDigitWrite_attributes);
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <MX_FREERTOS_Init+0x50>)
 800084e:	2100      	movs	r1, #0
 8000850:	480a      	ldr	r0, [pc, #40]	; (800087c <MX_FREERTOS_Init+0x54>)
 8000852:	f003 fae9 	bl	8003e28 <osThreadNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a09      	ldr	r2, [pc, #36]	; (8000880 <MX_FREERTOS_Init+0x58>)
 800085a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08007840 	.word	0x08007840
 8000864:	08000885 	.word	0x08000885
 8000868:	2000008c 	.word	0x2000008c
 800086c:	08007864 	.word	0x08007864
 8000870:	080008d9 	.word	0x080008d9
 8000874:	20000090 	.word	0x20000090
 8000878:	08007888 	.word	0x08007888
 800087c:	080008e9 	.word	0x080008e9
 8000880:	20000094 	.word	0x20000094

08000884 <Read_spi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_spi */
void Read_spi(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_spi */
	uint16_t reading[1];
	 HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)reading, sizeof(reading));
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2202      	movs	r2, #2
 8000892:	4619      	mov	r1, r3
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <Read_spi+0x48>)
 8000896:	f001 fff3 	bl	8002880 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  //printf("reading values is: %d\n\r",reading[0]);
  	  for(number = 0 ; number<10000;++number)
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <Read_spi+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
 80008a0:	e00d      	b.n	80008be <Read_spi+0x3a>
  	  {
  		printf("reading values is: %d\n\r",reading[0]);
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	4619      	mov	r1, r3
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <Read_spi+0x50>)
 80008a8:	f006 f8b2 	bl	8006a10 <iprintf>
  	    osDelay(20);
 80008ac:	2014      	movs	r0, #20
 80008ae:	f003 fb4d 	bl	8003f4c <osDelay>
  	  for(number = 0 ; number<10000;++number)
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <Read_spi+0x4c>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <Read_spi+0x4c>)
 80008bc:	801a      	strh	r2, [r3, #0]
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <Read_spi+0x4c>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d9eb      	bls.n	80008a2 <Read_spi+0x1e>
 80008ca:	e7e6      	b.n	800089a <Read_spi+0x16>
 80008cc:	20000098 	.word	0x20000098
 80008d0:	20000088 	.word	0x20000088
 80008d4:	08007804 	.word	0x08007804

080008d8 <TwoDigitsWriteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TwoDigitsWriteTask */
void TwoDigitsWriteTask(void *argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]


//	  SetDP(GPIO_PIN_SET);
//	  osDelay(pdMS_TO_TICKS(2000));
//	  SetDP(GPIO_PIN_RESET);
	  osDelay(pdMS_TO_TICKS(20));
 80008e0:	2014      	movs	r0, #20
 80008e2:	f003 fb33 	bl	8003f4c <osDelay>
 80008e6:	e7fb      	b.n	80008e0 <TwoDigitsWriteTask+0x8>

080008e8 <FourDigitWriteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FourDigitWriteTask */
void FourDigitWriteTask(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FourDigitWriteTask */
  /* Infinite loop */
  for(;;)
  {
	  FourDigitsWriteNumber(number);
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <FourDigitWriteTask+0x14>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff0d 	bl	8000714 <FourDigitsWriteNumber>
 80008fa:	e7f9      	b.n	80008f0 <FourDigitWriteTask+0x8>
 80008fc:	20000088 	.word	0x20000088

08000900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <MX_GPIO_Init+0x128>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a42      	ldr	r2, [pc, #264]	; (8000a28 <MX_GPIO_Init+0x128>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <MX_GPIO_Init+0x128>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <MX_GPIO_Init+0x128>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a3b      	ldr	r2, [pc, #236]	; (8000a28 <MX_GPIO_Init+0x128>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b39      	ldr	r3, [pc, #228]	; (8000a28 <MX_GPIO_Init+0x128>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <MX_GPIO_Init+0x128>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <MX_GPIO_Init+0x128>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <MX_GPIO_Init+0x128>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <MX_GPIO_Init+0x128>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <MX_GPIO_Init+0x128>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <MX_GPIO_Init+0x128>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 8000986:	2200      	movs	r2, #0
 8000988:	f241 4117 	movw	r1, #5143	; 0x1417
 800098c:	4827      	ldr	r0, [pc, #156]	; (8000a2c <MX_GPIO_Init+0x12c>)
 800098e:	f001 fa09 	bl	8001da4 <HAL_GPIO_WritePin>
                          |Cathode_1_Pin|Cathode_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|LD2_Pin
 8000992:	2200      	movs	r2, #0
 8000994:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8000998:	4825      	ldr	r0, [pc, #148]	; (8000a30 <MX_GPIO_Init+0x130>)
 800099a:	f001 fa03 	bl	8001da4 <HAL_GPIO_WritePin>
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 800099e:	2200      	movs	r2, #0
 80009a0:	f24e 0137 	movw	r1, #57399	; 0xe037
 80009a4:	4823      	ldr	r0, [pc, #140]	; (8000a34 <MX_GPIO_Init+0x134>)
 80009a6:	f001 f9fd 	bl	8001da4 <HAL_GPIO_WritePin>
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	481a      	ldr	r0, [pc, #104]	; (8000a2c <MX_GPIO_Init+0x12c>)
 80009c2:	f001 f86b 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 80009c6:	f241 4317 	movw	r3, #5143	; 0x1417
 80009ca:	617b      	str	r3, [r7, #20]
                          |Cathode_1_Pin|Cathode_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4813      	ldr	r0, [pc, #76]	; (8000a2c <MX_GPIO_Init+0x12c>)
 80009e0:	f001 f85c 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|LD2_Pin
 80009e4:	f240 73b3 	movw	r3, #1971	; 0x7b3
 80009e8:	617b      	str	r3, [r7, #20]
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_GPIO_Init+0x130>)
 80009fe:	f001 f84d 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 8000a02:	f24e 0337 	movw	r3, #57399	; 0xe037
 8000a06:	617b      	str	r3, [r7, #20]
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_GPIO_Init+0x134>)
 8000a1c:	f001 f83e 	bl	8001a9c <HAL_GPIO_Init>

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fb9a 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f810 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f7ff ff5c 	bl	8000900 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a48:	f7ff fece 	bl	80007e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a4c:	f000 faf6 	bl	800103c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000a50:	f000 f88a 	bl	8000b68 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a54:	f003 f99e 	bl	8003d94 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a58:	f7ff fee6 	bl	8000828 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a5c:	f003 f9be 	bl	8003ddc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <main+0x28>
	...

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	; 0x50
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0320 	add.w	r3, r7, #32
 8000a6e:	2230      	movs	r2, #48	; 0x30
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f006 f821 	bl	8006aba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <SystemClock_Config+0xcc>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <SystemClock_Config+0xcc>)
 8000a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <SystemClock_Config+0xd0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <SystemClock_Config+0xd0>)
 8000aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000adc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 f974 	bl	8001dd8 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000af6:	f000 f831 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2302      	movs	r3, #2
 8000b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2102      	movs	r1, #2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 fbd6 	bl	80022c8 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b22:	f000 f81b 	bl	8000b5c <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3750      	adds	r7, #80	; 0x50
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d101      	bne.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b4a:	f000 fb35 	bl	80011b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40000400 	.word	0x40000400

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <MX_SPI2_Init+0x64>)
 8000b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000bb0:	220a      	movs	r2, #10
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_SPI2_Init+0x60>)
 8000bb6:	f001 fdd9 	bl	800276c <HAL_SPI_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8000bc0:	f7ff ffcc 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000098 	.word	0x20000098
 8000bcc:	40003800 	.word	0x40003800

08000bd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a40      	ldr	r2, [pc, #256]	; (8000cf0 <HAL_SPI_MspInit+0x120>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d17a      	bne.n	8000ce8 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <HAL_SPI_MspInit+0x124>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a3e      	ldr	r2, [pc, #248]	; (8000cf4 <HAL_SPI_MspInit+0x124>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <HAL_SPI_MspInit+0x124>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <HAL_SPI_MspInit+0x124>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a37      	ldr	r2, [pc, #220]	; (8000cf4 <HAL_SPI_MspInit+0x124>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <HAL_SPI_MspInit+0x124>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <HAL_SPI_MspInit+0x124>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a30      	ldr	r2, [pc, #192]	; (8000cf4 <HAL_SPI_MspInit+0x124>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <HAL_SPI_MspInit+0x124>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c46:	2308      	movs	r3, #8
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c56:	2305      	movs	r3, #5
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <HAL_SPI_MspInit+0x128>)
 8000c62:	f000 ff1b 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c78:	2305      	movs	r3, #5
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	481e      	ldr	r0, [pc, #120]	; (8000cfc <HAL_SPI_MspInit+0x12c>)
 8000c84:	f000 ff0a 	bl	8001a9c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <HAL_SPI_MspInit+0x134>)
 8000c8c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cae:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000cce:	f000 fb75 	bl	80013bc <HAL_DMA_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8000cd8:	f7ff ff40 	bl	8000b5c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000ce0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ce2:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_SPI_MspInit+0x130>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40003800 	.word	0x40003800
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	200000f0 	.word	0x200000f0
 8000d04:	40026058 	.word	0x40026058

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_MspInit+0x54>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <HAL_MspInit+0x54>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x54>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_MspInit+0x54>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_MspInit+0x54>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_MspInit+0x54>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	210f      	movs	r1, #15
 8000d4a:	f06f 0001 	mvn.w	r0, #1
 8000d4e:	f000 fb0b 	bl	8001368 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <HAL_InitTick+0xe4>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a32      	ldr	r2, [pc, #200]	; (8000e44 <HAL_InitTick+0xe4>)
 8000d7a:	f043 0302 	orr.w	r3, r3, #2
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <HAL_InitTick+0xe4>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d8c:	f107 0210 	add.w	r2, r7, #16
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fcb6 	bl	8002708 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d103      	bne.n	8000dae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000da6:	f001 fc87 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8000daa:	6378      	str	r0, [r7, #52]	; 0x34
 8000dac:	e004      	b.n	8000db8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dae:	f001 fc83 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8000db2:	4603      	mov	r3, r0
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dba:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <HAL_InitTick+0xe8>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	0c9b      	lsrs	r3, r3, #18
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_InitTick+0xec>)
 8000dc8:	4a21      	ldr	r2, [pc, #132]	; (8000e50 <HAL_InitTick+0xf0>)
 8000dca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_InitTick+0xec>)
 8000dce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000dd4:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <HAL_InitTick+0xec>)
 8000dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_InitTick+0xec>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_InitTick+0xec>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_InitTick+0xec>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000dec:	4817      	ldr	r0, [pc, #92]	; (8000e4c <HAL_InitTick+0xec>)
 8000dee:	f002 f94b 	bl	8003088 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000df8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d11b      	bne.n	8000e38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000e00:	4812      	ldr	r0, [pc, #72]	; (8000e4c <HAL_InitTick+0xec>)
 8000e02:	f002 f99b 	bl	800313c <HAL_TIM_Base_Start_IT>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d111      	bne.n	8000e38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e14:	201d      	movs	r0, #29
 8000e16:	f000 fac3 	bl	80013a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d808      	bhi.n	8000e32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	201d      	movs	r0, #29
 8000e26:	f000 fa9f 	bl	8001368 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_InitTick+0xf4>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e002      	b.n	8000e38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3738      	adds	r7, #56	; 0x38
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	20000150 	.word	0x20000150
 8000e50:	40000400 	.word	0x40000400
 8000e54:	20000004 	.word	0x20000004

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <DMA1_Stream3_IRQHandler+0x10>)
 8000e8a:	f000 fb9d 	bl	80015c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000f0 	.word	0x200000f0

08000e98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <TIM3_IRQHandler+0x10>)
 8000e9e:	f002 f9af 	bl	8003200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000150 	.word	0x20000150

08000eac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00a      	b.n	8000ed4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ebe:	f3af 8000 	nop.w
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf0      	blt.n	8000ebe <_read+0x12>
  }

  return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	e009      	b.n	8000f0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f889 	bl	8001018 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbf1      	blt.n	8000ef8 <_write+0x12>
  }
  return len;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_close>:

int _close(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f46:	605a      	str	r2, [r3, #4]
  return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_isatty>:

int _isatty(int file)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <_sbrk+0x5c>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <_sbrk+0x60>)
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x64>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <_sbrk+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d207      	bcs.n	8000fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb8:	f005 fe24 	bl	8006c04 <__errno>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <_sbrk+0x64>)
 8000fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20020000 	.word	0x20020000
 8000fe8:	00000400 	.word	0x00000400
 8000fec:	20000198 	.word	0x20000198
 8000ff0:	20004d18 	.word	0x20004d18

08000ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__io_putchar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	230a      	movs	r3, #10
 8001024:	2201      	movs	r2, #1
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <__io_putchar+0x20>)
 8001028:	f002 fafb 	bl	8003622 <HAL_UART_Transmit>
	return ch;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000019c 	.word	0x2000019c

0800103c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_USART2_UART_Init+0x50>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001074:	f002 fa88 	bl	8003588 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107e:	f7ff fd6d 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000019c 	.word	0x2000019c
 800108c:	40004400 	.word	0x40004400

08001090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_UART_MspInit+0x84>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d12b      	bne.n	800110a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ea:	230c      	movs	r3, #12
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010fa:	2307      	movs	r3, #7
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_UART_MspInit+0x8c>)
 8001106:	f000 fcc9 	bl	8001a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40004400 	.word	0x40004400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopFillZerobss+0x26>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114a:	f7ff ff53 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f005 fd5f 	bl	8006c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fc71 	bl	8000a38 <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001164:	08007910 	.word	0x08007910
  ldr r2, =_sbss
 8001168:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800116c:	20004d18 	.word	0x20004d18

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f8d8 	bl	8001352 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f7ff fddc 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fdae 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	200001e0 	.word	0x200001e0

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200001e0 	.word	0x200001e0

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ff4c 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137a:	f7ff ff61 	bl	8001240 <__NVIC_GetPriorityGrouping>
 800137e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	6978      	ldr	r0, [r7, #20]
 8001386:	f7ff ffb1 	bl	80012ec <NVIC_EncodePriority>
 800138a:	4602      	mov	r2, r0
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff80 	bl	8001298 <__NVIC_SetPriority>
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff54 	bl	800125c <__NVIC_EnableIRQ>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ff0a 	bl	80011e0 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e099      	b.n	800150c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f8:	e00f      	b.n	800141a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013fa:	f7ff fef1 	bl	80011e0 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b05      	cmp	r3, #5
 8001406:	d908      	bls.n	800141a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2220      	movs	r2, #32
 800140c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e078      	b.n	800150c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e8      	bne.n	80013fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	4b38      	ldr	r3, [pc, #224]	; (8001514 <HAL_DMA_Init+0x158>)
 8001434:	4013      	ands	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001446:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	2b04      	cmp	r3, #4
 8001472:	d107      	bne.n	8001484 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4313      	orrs	r3, r2
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4313      	orrs	r3, r2
 8001482:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f023 0307 	bic.w	r3, r3, #7
 800149a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d117      	bne.n	80014de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00e      	beq.n	80014de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fa6f 	bl	80019a4 <DMA_CheckFifoParam>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2240      	movs	r2, #64	; 0x40
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014da:	2301      	movs	r3, #1
 80014dc:	e016      	b.n	800150c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 fa26 	bl	8001938 <DMA_CalcBaseAndBitshift>
 80014ec:	4603      	mov	r3, r0
 80014ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f4:	223f      	movs	r2, #63	; 0x3f
 80014f6:	409a      	lsls	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	f010803f 	.word	0xf010803f

08001518 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_DMA_Start_IT+0x26>
 800153a:	2302      	movs	r3, #2
 800153c:	e040      	b.n	80015c0 <HAL_DMA_Start_IT+0xa8>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b01      	cmp	r3, #1
 8001550:	d12f      	bne.n	80015b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2202      	movs	r2, #2
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f9b8 	bl	80018dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	223f      	movs	r2, #63	; 0x3f
 8001572:	409a      	lsls	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0216 	orr.w	r2, r2, #22
 8001586:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0208 	orr.w	r2, r2, #8
 800159e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e005      	b.n	80015be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ba:	2302      	movs	r3, #2
 80015bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015be:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015d4:	4b8e      	ldr	r3, [pc, #568]	; (8001810 <HAL_DMA_IRQHandler+0x248>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a8e      	ldr	r2, [pc, #568]	; (8001814 <HAL_DMA_IRQHandler+0x24c>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0a9b      	lsrs	r3, r3, #10
 80015e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	2208      	movs	r2, #8
 80015f4:	409a      	lsls	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01a      	beq.n	8001634 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0204 	bic.w	r2, r2, #4
 800161a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2208      	movs	r2, #8
 8001622:	409a      	lsls	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	2201      	movs	r2, #1
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d012      	beq.n	800166a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2201      	movs	r2, #1
 8001658:	409a      	lsls	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	f043 0202 	orr.w	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2204      	movs	r2, #4
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d012      	beq.n	80016a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	2204      	movs	r2, #4
 800168e:	409a      	lsls	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	f043 0204 	orr.w	r2, r3, #4
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	2210      	movs	r2, #16
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d043      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d03c      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c2:	2210      	movs	r2, #16
 80016c4:	409a      	lsls	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d018      	beq.n	800170a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d108      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d024      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	4798      	blx	r3
 80016f6:	e01f      	b.n	8001738 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01b      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
 8001708:	e016      	b.n	8001738 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0208 	bic.w	r2, r2, #8
 8001726:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	2220      	movs	r2, #32
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 808f 	beq.w	8001868 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8087 	beq.w	8001868 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2220      	movs	r2, #32
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b05      	cmp	r3, #5
 8001770:	d136      	bne.n	80017e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0216 	bic.w	r2, r2, #22
 8001780:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001790:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d103      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x1da>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0208 	bic.w	r2, r2, #8
 80017b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	223f      	movs	r2, #63	; 0x3f
 80017b8:	409a      	lsls	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d07e      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
        }
        return;
 80017de:	e079      	b.n	80018d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d01d      	beq.n	800182a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10d      	bne.n	8001818 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	2b00      	cmp	r3, #0
 8001802:	d031      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
 800180c:	e02c      	b.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
 800180e:	bf00      	nop
 8001810:	20000000 	.word	0x20000000
 8001814:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181c:	2b00      	cmp	r3, #0
 800181e:	d023      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
 8001828:	e01e      	b.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10f      	bne.n	8001858 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0210 	bic.w	r2, r2, #16
 8001846:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	2b00      	cmp	r3, #0
 800186e:	d032      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d022      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2205      	movs	r2, #5
 8001880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3301      	adds	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	429a      	cmp	r2, r3
 800189e:	d307      	bcc.n	80018b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f2      	bne.n	8001894 <HAL_DMA_IRQHandler+0x2cc>
 80018ae:	e000      	b.n	80018b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
 80018d2:	e000      	b.n	80018d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018d4:	bf00      	nop
    }
  }
}
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b40      	cmp	r3, #64	; 0x40
 8001908:	d108      	bne.n	800191c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800191a:	e007      	b.n	800192c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	3b10      	subs	r3, #16
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <DMA_CalcBaseAndBitshift+0x64>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <DMA_CalcBaseAndBitshift+0x68>)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d909      	bls.n	800197a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800196e:	f023 0303 	bic.w	r3, r3, #3
 8001972:	1d1a      	adds	r2, r3, #4
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	659a      	str	r2, [r3, #88]	; 0x58
 8001978:	e007      	b.n	800198a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001982:	f023 0303 	bic.w	r3, r3, #3
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	aaaaaaab 	.word	0xaaaaaaab
 80019a0:	080078c4 	.word	0x080078c4

080019a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d11f      	bne.n	80019fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d856      	bhi.n	8001a72 <DMA_CheckFifoParam+0xce>
 80019c4:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <DMA_CheckFifoParam+0x28>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	080019dd 	.word	0x080019dd
 80019d0:	080019ef 	.word	0x080019ef
 80019d4:	080019dd 	.word	0x080019dd
 80019d8:	08001a73 	.word	0x08001a73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d046      	beq.n	8001a76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ec:	e043      	b.n	8001a76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019f6:	d140      	bne.n	8001a7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019fc:	e03d      	b.n	8001a7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a06:	d121      	bne.n	8001a4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d837      	bhi.n	8001a7e <DMA_CheckFifoParam+0xda>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <DMA_CheckFifoParam+0x70>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a25 	.word	0x08001a25
 8001a18:	08001a2b 	.word	0x08001a2b
 8001a1c:	08001a25 	.word	0x08001a25
 8001a20:	08001a3d 	.word	0x08001a3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
      break;
 8001a28:	e030      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d025      	beq.n	8001a82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a3a:	e022      	b.n	8001a82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a44:	d11f      	bne.n	8001a86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a4a:	e01c      	b.n	8001a86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d903      	bls.n	8001a5a <DMA_CheckFifoParam+0xb6>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d003      	beq.n	8001a60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a58:	e018      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a5e:	e015      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00e      	beq.n	8001a8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a70:	e00b      	b.n	8001a8a <DMA_CheckFifoParam+0xe6>
      break;
 8001a72:	bf00      	nop
 8001a74:	e00a      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a76:	bf00      	nop
 8001a78:	e008      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e006      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a7e:	bf00      	nop
 8001a80:	e004      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a82:	bf00      	nop
 8001a84:	e002      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a86:	bf00      	nop
 8001a88:	e000      	b.n	8001a8c <DMA_CheckFifoParam+0xe8>
      break;
 8001a8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e159      	b.n	8001d6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8148 	bne.w	8001d66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d005      	beq.n	8001aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d130      	bne.n	8001b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d017      	beq.n	8001b8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d123      	bne.n	8001be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80a2 	beq.w	8001d66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_GPIO_Init+0x2e8>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a56      	ldr	r2, [pc, #344]	; (8001d84 <HAL_GPIO_Init+0x2e8>)
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_GPIO_Init+0x2e8>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c3e:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x2ec>)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a49      	ldr	r2, [pc, #292]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x202>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a48      	ldr	r2, [pc, #288]	; (8001d90 <HAL_GPIO_Init+0x2f4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x1fe>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a47      	ldr	r2, [pc, #284]	; (8001d94 <HAL_GPIO_Init+0x2f8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x1fa>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a46      	ldr	r2, [pc, #280]	; (8001d98 <HAL_GPIO_Init+0x2fc>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x1f6>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a45      	ldr	r2, [pc, #276]	; (8001d9c <HAL_GPIO_Init+0x300>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x1f2>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c8e:	2307      	movs	r3, #7
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb0:	4935      	ldr	r1, [pc, #212]	; (8001d88 <HAL_GPIO_Init+0x2ec>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce2:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d0c:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d36:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d60:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	f67f aea2 	bls.w	8001ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e267      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d075      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d00c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b85      	ldr	r3, [pc, #532]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d112      	bne.n	8001e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0e:	4b82      	ldr	r3, [pc, #520]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	4b7e      	ldr	r3, [pc, #504]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d05b      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x108>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d157      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e242      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x74>
 8001e3e:	4b76      	ldr	r3, [pc, #472]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a75      	ldr	r2, [pc, #468]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xb0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x98>
 8001e56:	4b70      	ldr	r3, [pc, #448]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6f      	ldr	r2, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6c      	ldr	r2, [pc, #432]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xb0>
 8001e70:	4b69      	ldr	r3, [pc, #420]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a68      	ldr	r2, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a65      	ldr	r2, [pc, #404]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff f9a6 	bl	80011e0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff f9a2 	bl	80011e0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e207      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b5b      	ldr	r3, [pc, #364]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xc0>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f992 	bl	80011e0 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f98e 	bl	80011e0 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1f3      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b51      	ldr	r3, [pc, #324]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xe8>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d063      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eee:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f06:	4b44      	ldr	r3, [pc, #272]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x152>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e1c7      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4937      	ldr	r1, [pc, #220]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	e03a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_RCC_OscConfig+0x244>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7ff f947 	bl	80011e0 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f56:	f7ff f943 	bl	80011e0 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1a8      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b28      	ldr	r3, [pc, #160]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4925      	ldr	r1, [pc, #148]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_OscConfig+0x244>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f926 	bl	80011e0 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f98:	f7ff f922 	bl	80011e0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e187      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d036      	beq.n	8002030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d016      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_RCC_OscConfig+0x248>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff f906 	bl	80011e0 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7ff f902 	bl	80011e0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e167      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x200>
 8001ff6:	e01b      	b.n	8002030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_OscConfig+0x248>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff f8ef 	bl	80011e0 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	e00e      	b.n	8002024 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002006:	f7ff f8eb 	bl	80011e0 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d907      	bls.n	8002024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e150      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
 8002018:	40023800 	.word	0x40023800
 800201c:	42470000 	.word	0x42470000
 8002020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ea      	bne.n	8002006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8097 	beq.w	800216c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b7d      	ldr	r3, [pc, #500]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a7c      	ldr	r2, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b7a      	ldr	r3, [pc, #488]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b77      	ldr	r3, [pc, #476]	; (800224c <HAL_RCC_OscConfig+0x474>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b74      	ldr	r3, [pc, #464]	; (800224c <HAL_RCC_OscConfig+0x474>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a73      	ldr	r2, [pc, #460]	; (800224c <HAL_RCC_OscConfig+0x474>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7ff f8ab 	bl	80011e0 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7ff f8a7 	bl	80011e0 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e10c      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x474>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x2ea>
 80020b4:	4b64      	ldr	r3, [pc, #400]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b8:	4a63      	ldr	r2, [pc, #396]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6713      	str	r3, [r2, #112]	; 0x70
 80020c0:	e01c      	b.n	80020fc <HAL_RCC_OscConfig+0x324>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x30c>
 80020ca:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a5e      	ldr	r2, [pc, #376]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	4b5c      	ldr	r3, [pc, #368]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	4a5b      	ldr	r2, [pc, #364]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0x324>
 80020e4:	4b58      	ldr	r3, [pc, #352]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a57      	ldr	r2, [pc, #348]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
 80020f0:	4b55      	ldr	r3, [pc, #340]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	4a54      	ldr	r2, [pc, #336]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f023 0304 	bic.w	r3, r3, #4
 80020fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7ff f86c 	bl	80011e0 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7ff f868 	bl	80011e0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0cb      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	4b49      	ldr	r3, [pc, #292]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0ee      	beq.n	800210c <HAL_RCC_OscConfig+0x334>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7ff f856 	bl	80011e0 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7ff f852 	bl	80011e0 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0b5      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214e:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ee      	bne.n	8002138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800215a:	7dfb      	ldrb	r3, [r7, #23]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a1 	beq.w	80022b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002176:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	d05c      	beq.n	800223c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d141      	bne.n	800220e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCC_OscConfig+0x478>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff f826 	bl	80011e0 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002198:	f7ff f822 	bl	80011e0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e087      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	019b      	lsls	r3, r3, #6
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	085b      	lsrs	r3, r3, #1
 80021ce:	3b01      	subs	r3, #1
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	061b      	lsls	r3, r3, #24
 80021da:	491b      	ldr	r1, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x478>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe fffb 	bl	80011e0 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ee:	f7fe fff7 	bl	80011e0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e05c      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x416>
 800220c:	e054      	b.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x478>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe ffe4 	bl	80011e0 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221c:	f7fe ffe0 	bl	80011e0 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e045      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x444>
 800223a:	e03d      	b.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e038      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
 8002248:	40023800 	.word	0x40023800
 800224c:	40007000 	.word	0x40007000
 8002250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x4ec>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d028      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d121      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d11a      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800228a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800228c:	4293      	cmp	r3, r2
 800228e:	d111      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	3b01      	subs	r3, #1
 800229e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0cc      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d90c      	bls.n	8002304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b65      	ldr	r3, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d044      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	2b03      	cmp	r3, #3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e067      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4934      	ldr	r1, [pc, #208]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b8:	f7fe ff12 	bl	80011e0 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7fe ff0e 	bl	80011e0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e04f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d20c      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f821 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fc76 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00
 8002484:	40023800 	.word	0x40023800
 8002488:	080078ac 	.word	0x080078ac
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002498:	b094      	sub	sp, #80	; 0x50
 800249a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	647b      	str	r3, [r7, #68]	; 0x44
 80024a0:	2300      	movs	r3, #0
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024a4:	2300      	movs	r3, #0
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ac:	4b79      	ldr	r3, [pc, #484]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d00d      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x40>
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	f200 80e1 	bhi.w	8002680 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x34>
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x3a>
 80024c6:	e0db      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024c8:	4b73      	ldr	r3, [pc, #460]	; (8002698 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024cc:	e0db      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ce:	4b73      	ldr	r3, [pc, #460]	; (800269c <HAL_RCC_GetSysClockFreq+0x208>)
 80024d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024d2:	e0d8      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d4:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	2200      	movs	r2, #0
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
 80024fe:	2300      	movs	r3, #0
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
 8002502:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002506:	4622      	mov	r2, r4
 8002508:	462b      	mov	r3, r5
 800250a:	f04f 0000 	mov.w	r0, #0
 800250e:	f04f 0100 	mov.w	r1, #0
 8002512:	0159      	lsls	r1, r3, #5
 8002514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002518:	0150      	lsls	r0, r2, #5
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4621      	mov	r1, r4
 8002520:	1a51      	subs	r1, r2, r1
 8002522:	6139      	str	r1, [r7, #16]
 8002524:	4629      	mov	r1, r5
 8002526:	eb63 0301 	sbc.w	r3, r3, r1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002538:	4659      	mov	r1, fp
 800253a:	018b      	lsls	r3, r1, #6
 800253c:	4651      	mov	r1, sl
 800253e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002542:	4651      	mov	r1, sl
 8002544:	018a      	lsls	r2, r1, #6
 8002546:	4651      	mov	r1, sl
 8002548:	ebb2 0801 	subs.w	r8, r2, r1
 800254c:	4659      	mov	r1, fp
 800254e:	eb63 0901 	sbc.w	r9, r3, r1
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800255e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002566:	4690      	mov	r8, r2
 8002568:	4699      	mov	r9, r3
 800256a:	4623      	mov	r3, r4
 800256c:	eb18 0303 	adds.w	r3, r8, r3
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	462b      	mov	r3, r5
 8002574:	eb49 0303 	adc.w	r3, r9, r3
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002586:	4629      	mov	r1, r5
 8002588:	024b      	lsls	r3, r1, #9
 800258a:	4621      	mov	r1, r4
 800258c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002590:	4621      	mov	r1, r4
 8002592:	024a      	lsls	r2, r1, #9
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259a:	2200      	movs	r2, #0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
 800259e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025a4:	f7fd fe6c 	bl	8000280 <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4613      	mov	r3, r2
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b0:	e058      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	2200      	movs	r2, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	4611      	mov	r1, r2
 80025be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025cc:	4642      	mov	r2, r8
 80025ce:	464b      	mov	r3, r9
 80025d0:	f04f 0000 	mov.w	r0, #0
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	0159      	lsls	r1, r3, #5
 80025da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025de:	0150      	lsls	r0, r2, #5
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4641      	mov	r1, r8
 80025e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ea:	4649      	mov	r1, r9
 80025ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002600:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002604:	ebb2 040a 	subs.w	r4, r2, sl
 8002608:	eb63 050b 	sbc.w	r5, r3, fp
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	00eb      	lsls	r3, r5, #3
 8002616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800261a:	00e2      	lsls	r2, r4, #3
 800261c:	4614      	mov	r4, r2
 800261e:	461d      	mov	r5, r3
 8002620:	4643      	mov	r3, r8
 8002622:	18e3      	adds	r3, r4, r3
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	464b      	mov	r3, r9
 8002628:	eb45 0303 	adc.w	r3, r5, r3
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800263a:	4629      	mov	r1, r5
 800263c:	028b      	lsls	r3, r1, #10
 800263e:	4621      	mov	r1, r4
 8002640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002644:	4621      	mov	r1, r4
 8002646:	028a      	lsls	r2, r1, #10
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264e:	2200      	movs	r2, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	61fa      	str	r2, [r7, #28]
 8002654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002658:	f7fd fe12 	bl	8000280 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4613      	mov	r3, r2
 8002662:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	3301      	adds	r3, #1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800267e:	e002      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetSysClockFreq+0x204>)
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002688:	4618      	mov	r0, r3
 800268a:	3750      	adds	r7, #80	; 0x50
 800268c:	46bd      	mov	sp, r7
 800268e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	00f42400 	.word	0x00f42400
 800269c:	007a1200 	.word	0x007a1200

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000000 	.word	0x20000000

080026b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026bc:	f7ff fff0 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0a9b      	lsrs	r3, r3, #10
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4903      	ldr	r1, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	080078bc 	.word	0x080078bc

080026e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026e4:	f7ff ffdc 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0b5b      	lsrs	r3, r3, #13
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800
 8002704:	080078bc 	.word	0x080078bc

08002708 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	220f      	movs	r2, #15
 8002716:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_RCC_GetClockConfig+0x60>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0207 	and.w	r2, r3, #7
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40023c00 	.word	0x40023c00

0800276c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07b      	b.n	8002876 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278e:	d009      	beq.n	80027a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
 8002796:	e005      	b.n	80027a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fa06 	bl	8000bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	ea42 0103 	orr.w	r1, r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	f003 0104 	and.w	r1, r3, #4
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	f003 0210 	and.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d110      	bne.n	80028bc <HAL_SPI_Receive_DMA+0x3c>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028a2:	d10b      	bne.n	80028bc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2204      	movs	r2, #4
 80028a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f8ac 	bl	8002a10 <HAL_SPI_TransmitReceive_DMA>
 80028b8:	4603      	mov	r3, r0
 80028ba:	e09f      	b.n	80029fc <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_SPI_Receive_DMA+0x4a>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e098      	b.n	80029fc <HAL_SPI_Receive_DMA+0x17c>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d002      	beq.n	80028e4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80028de:	2302      	movs	r3, #2
 80028e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028e2:	e086      	b.n	80029f2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_SPI_Receive_DMA+0x70>
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028f4:	e07d      	b.n	80029f2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2204      	movs	r2, #4
 80028fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002936:	d10f      	bne.n	8002958 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002946:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002956:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295c:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <HAL_SPI_Receive_DMA+0x184>)
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <HAL_SPI_Receive_DMA+0x188>)
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	4a27      	ldr	r2, [pc, #156]	; (8002a0c <HAL_SPI_Receive_DMA+0x18c>)
 800296e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	2200      	movs	r2, #0
 8002976:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	330c      	adds	r3, #12
 8002982:	4619      	mov	r1, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002990:	f7fe fdc2 	bl	8001518 <HAL_DMA_Start_IT>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80029b2:	e01e      	b.n	80029f2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d007      	beq.n	80029d2 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0220 	orr.w	r2, r2, #32
 80029e0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	08002db1 	.word	0x08002db1
 8002a08:	08002c79 	.word	0x08002c79
 8002a0c:	08002de9 	.word	0x08002de9

08002a10 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e0e3      	b.n	8002bf8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a3e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002a46:	7dbb      	ldrb	r3, [r7, #22]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d00d      	beq.n	8002a68 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a52:	d106      	bne.n	8002a62 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002a5c:	7dbb      	ldrb	r3, [r7, #22]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d002      	beq.n	8002a68 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
 8002a64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a66:	e0c2      	b.n	8002bee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a7e:	e0b6      	b.n	8002bee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d003      	beq.n	8002a94 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2205      	movs	r2, #5
 8002a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d108      	bne.n	8002ae8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	4a49      	ldr	r2, [pc, #292]	; (8002c00 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	4a48      	ldr	r2, [pc, #288]	; (8002c04 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ae6:	e007      	b.n	8002af8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aec:	4a46      	ldr	r2, [pc, #280]	; (8002c08 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af4:	4a45      	ldr	r2, [pc, #276]	; (8002c0c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afc:	4a44      	ldr	r2, [pc, #272]	; (8002c10 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002afe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	2200      	movs	r2, #0
 8002b06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	4619      	mov	r1, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002b20:	f7fe fcfa 	bl	8001518 <HAL_DMA_Start_IT>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002b42:	e054      	b.n	8002bee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	2200      	movs	r2, #0
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	2200      	movs	r2, #0
 8002b6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	2200      	movs	r2, #0
 8002b72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b8c:	f7fe fcc4 	bl	8001518 <HAL_DMA_Start_IT>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f043 0210 	orr.w	r2, r3, #16
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002bae:	e01e      	b.n	8002bee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d007      	beq.n	8002bce <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bcc:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0202 	orr.w	r2, r2, #2
 8002bec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	08002db1 	.word	0x08002db1
 8002c04:	08002c79 	.word	0x08002c79
 8002c08:	08002dcd 	.word	0x08002dcd
 8002c0c:	08002d21 	.word	0x08002d21
 8002c10:	08002de9 	.word	0x08002de9

08002c14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c86:	f7fe faab 	bl	80011e0 <HAL_GetTick>
 8002c8a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9a:	d03b      	beq.n	8002d14 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0220 	bic.w	r2, r2, #32
 8002caa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <SPI_DMAReceiveCplt+0x58>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cbc:	d108      	bne.n	8002cd0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0203 	bic.w	r2, r2, #3
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	e007      	b.n	8002ce0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	2164      	movs	r1, #100	; 0x64
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f927 	bl	8002f38 <SPI_EndRxTransaction>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ffa9 	bl	8002c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d12:	e002      	b.n	8002d1a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff ff7d 	bl	8002c14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d2e:	f7fe fa57 	bl	80011e0 <HAL_GetTick>
 8002d32:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d42:	d02f      	beq.n	8002da4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0220 	bic.w	r2, r2, #32
 8002d52:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	2164      	movs	r1, #100	; 0x64
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f953 	bl	8003004 <SPI_EndRxTxTransaction>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0203 	bic.w	r2, r2, #3
 8002d7e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff ff61 	bl	8002c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002da2:	e002      	b.n	8002daa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff ff3f 	bl	8002c28 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff ff3c 	bl	8002c3c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff ff38 	bl	8002c50 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0203 	bic.w	r2, r2, #3
 8002e04:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff ff22 	bl	8002c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e38:	f7fe f9d2 	bl	80011e0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e48:	f7fe f9ca 	bl	80011e0 <HAL_GetTick>
 8002e4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	015b      	lsls	r3, r3, #5
 8002e54:	0d1b      	lsrs	r3, r3, #20
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	fb02 f303 	mul.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e5e:	e054      	b.n	8002f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d050      	beq.n	8002f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e68:	f7fe f9ba 	bl	80011e0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d902      	bls.n	8002e7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d13d      	bne.n	8002efa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e96:	d111      	bne.n	8002ebc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea0:	d004      	beq.n	8002eac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d107      	bne.n	8002ebc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec4:	d10f      	bne.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e017      	b.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d19b      	bne.n	8002e60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000000 	.word	0x20000000

08002f38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f4c:	d111      	bne.n	8002f72 <SPI_EndRxTransaction+0x3a>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f56:	d004      	beq.n	8002f62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f60:	d107      	bne.n	8002f72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7a:	d12a      	bne.n	8002fd2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f84:	d012      	beq.n	8002fac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff ff49 	bl	8002e28 <SPI_WaitFlagStateUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02d      	beq.n	8002ff8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e026      	b.n	8002ffa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f7ff ff36 	bl	8002e28 <SPI_WaitFlagStateUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01a      	beq.n	8002ff8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e013      	b.n	8002ffa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2101      	movs	r1, #1
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f7ff ff23 	bl	8002e28 <SPI_WaitFlagStateUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e000      	b.n	8002ffa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <SPI_EndRxTxTransaction+0x7c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <SPI_EndRxTxTransaction+0x80>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0d5b      	lsrs	r3, r3, #21
 800301c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800302e:	d112      	bne.n	8003056 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff fef4 	bl	8002e28 <SPI_WaitFlagStateUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e00f      	b.n	8003076 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3b01      	subs	r3, #1
 8003060:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b80      	cmp	r3, #128	; 0x80
 800306e:	d0f2      	beq.n	8003056 <SPI_EndRxTxTransaction+0x52>
 8003070:	e000      	b.n	8003074 <SPI_EndRxTxTransaction+0x70>
        break;
 8003072:	bf00      	nop
  }

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000000 	.word	0x20000000
 8003084:	165e9f81 	.word	0x165e9f81

08003088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e041      	b.n	800311e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f839 	bl	8003126 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3304      	adds	r3, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	4610      	mov	r0, r2
 80030c8:	f000 f9ca 	bl	8003460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d001      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e044      	b.n	80031de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <HAL_TIM_Base_Start_IT+0xb0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d018      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317e:	d013      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1a      	ldr	r2, [pc, #104]	; (80031f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x6c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x6c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a16      	ldr	r2, [pc, #88]	; (80031fc <HAL_TIM_Base_Start_IT+0xc0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d010      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ca:	e007      	b.n	80031dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800
 80031f8:	40000c00 	.word	0x40000c00
 80031fc:	40014000 	.word	0x40014000

08003200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0202 	mvn.w	r2, #2
 800322c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f8ee 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8e0 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f8f1 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0204 	mvn.w	r2, #4
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8c4 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8b6 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8c7 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d122      	bne.n	8003304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d11b      	bne.n	8003304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0208 	mvn.w	r2, #8
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2204      	movs	r2, #4
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f89a 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f88c 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f89d 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b10      	cmp	r3, #16
 8003310:	d122      	bne.n	8003358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b10      	cmp	r3, #16
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0210 	mvn.w	r2, #16
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2208      	movs	r2, #8
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f870 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f862 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f873 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d10e      	bne.n	8003384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d107      	bne.n	8003384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0201 	mvn.w	r2, #1
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fbda 	bl	8000b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b80      	cmp	r3, #128	; 0x80
 8003390:	d10e      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b80      	cmp	r3, #128	; 0x80
 800339e:	d107      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f8e2 	bl	8003574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d10e      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d107      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f838 	bl	800344c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0220 	mvn.w	r2, #32
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8ac 	bl	8003560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a34      	ldr	r2, [pc, #208]	; (8003544 <TIM_Base_SetConfig+0xe4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00f      	beq.n	8003498 <TIM_Base_SetConfig+0x38>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d00b      	beq.n	8003498 <TIM_Base_SetConfig+0x38>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a31      	ldr	r2, [pc, #196]	; (8003548 <TIM_Base_SetConfig+0xe8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d007      	beq.n	8003498 <TIM_Base_SetConfig+0x38>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a30      	ldr	r2, [pc, #192]	; (800354c <TIM_Base_SetConfig+0xec>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d003      	beq.n	8003498 <TIM_Base_SetConfig+0x38>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a2f      	ldr	r2, [pc, #188]	; (8003550 <TIM_Base_SetConfig+0xf0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d108      	bne.n	80034aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a25      	ldr	r2, [pc, #148]	; (8003544 <TIM_Base_SetConfig+0xe4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01b      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d017      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <TIM_Base_SetConfig+0xe8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a21      	ldr	r2, [pc, #132]	; (800354c <TIM_Base_SetConfig+0xec>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00f      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a20      	ldr	r2, [pc, #128]	; (8003550 <TIM_Base_SetConfig+0xf0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00b      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <TIM_Base_SetConfig+0xf4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <TIM_Base_SetConfig+0xf8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <TIM_Base_SetConfig+0xfc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d108      	bne.n	80034fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <TIM_Base_SetConfig+0xe4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d103      	bne.n	8003530 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	615a      	str	r2, [r3, #20]
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800

08003560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e03f      	b.n	800361a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fd6e 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f929 	bl	8003824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b08a      	sub	sp, #40	; 0x28
 8003626:	af02      	add	r7, sp, #8
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	d17c      	bne.n	800373c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_Transmit+0x2c>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e075      	b.n	800373e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_UART_Transmit+0x3e>
 800365c:	2302      	movs	r3, #2
 800365e:	e06e      	b.n	800373e <HAL_UART_Transmit+0x11c>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2221      	movs	r2, #33	; 0x21
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003676:	f7fd fdb3 	bl	80011e0 <HAL_GetTick>
 800367a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	88fa      	ldrh	r2, [r7, #6]
 8003686:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003690:	d108      	bne.n	80036a4 <HAL_UART_Transmit+0x82>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e003      	b.n	80036ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036b4:	e02a      	b.n	800370c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2200      	movs	r2, #0
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f840 	bl	8003746 <UART_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e036      	b.n	800373e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	3302      	adds	r3, #2
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	e007      	b.n	80036fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3301      	adds	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1cf      	bne.n	80036b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	2140      	movs	r1, #64	; 0x40
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f810 	bl	8003746 <UART_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e006      	b.n	800373e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b090      	sub	sp, #64	; 0x40
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003756:	e050      	b.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d04c      	beq.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0x30>
 8003766:	f7fd fd3b 	bl	80011e0 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003772:	429a      	cmp	r2, r3
 8003774:	d241      	bcs.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003796:	637a      	str	r2, [r7, #52]	; 0x34
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800379c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3314      	adds	r3, #20
 80037b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3314      	adds	r3, #20
 80037c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ca:	623a      	str	r2, [r7, #32]
 80037cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	69f9      	ldr	r1, [r7, #28]
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e5      	bne.n	80037aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e00f      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4013      	ands	r3, r2
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	429a      	cmp	r2, r3
 8003808:	bf0c      	ite	eq
 800380a:	2301      	moveq	r3, #1
 800380c:	2300      	movne	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	429a      	cmp	r2, r3
 8003816:	d09f      	beq.n	8003758 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3740      	adds	r7, #64	; 0x40
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003828:	b0c0      	sub	sp, #256	; 0x100
 800382a:	af00      	add	r7, sp, #0
 800382c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003840:	68d9      	ldr	r1, [r3, #12]
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	ea40 0301 	orr.w	r3, r0, r1
 800384c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	431a      	orrs	r2, r3
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	431a      	orrs	r2, r3
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800387c:	f021 010c 	bic.w	r1, r1, #12
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800388a:	430b      	orrs	r3, r1
 800388c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800388e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389e:	6999      	ldr	r1, [r3, #24]
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	ea40 0301 	orr.w	r3, r0, r1
 80038aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b8f      	ldr	r3, [pc, #572]	; (8003af0 <UART_SetConfig+0x2cc>)
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d005      	beq.n	80038c4 <UART_SetConfig+0xa0>
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b8d      	ldr	r3, [pc, #564]	; (8003af4 <UART_SetConfig+0x2d0>)
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d104      	bne.n	80038ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038c4:	f7fe ff0c 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 80038c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038cc:	e003      	b.n	80038d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ce:	f7fe fef3 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 80038d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e0:	f040 810c 	bne.w	8003afc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038f6:	4622      	mov	r2, r4
 80038f8:	462b      	mov	r3, r5
 80038fa:	1891      	adds	r1, r2, r2
 80038fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80038fe:	415b      	adcs	r3, r3
 8003900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003902:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003906:	4621      	mov	r1, r4
 8003908:	eb12 0801 	adds.w	r8, r2, r1
 800390c:	4629      	mov	r1, r5
 800390e:	eb43 0901 	adc.w	r9, r3, r1
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800391e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003926:	4690      	mov	r8, r2
 8003928:	4699      	mov	r9, r3
 800392a:	4623      	mov	r3, r4
 800392c:	eb18 0303 	adds.w	r3, r8, r3
 8003930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003934:	462b      	mov	r3, r5
 8003936:	eb49 0303 	adc.w	r3, r9, r3
 800393a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800394a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800394e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003952:	460b      	mov	r3, r1
 8003954:	18db      	adds	r3, r3, r3
 8003956:	653b      	str	r3, [r7, #80]	; 0x50
 8003958:	4613      	mov	r3, r2
 800395a:	eb42 0303 	adc.w	r3, r2, r3
 800395e:	657b      	str	r3, [r7, #84]	; 0x54
 8003960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003964:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003968:	f7fc fc8a 	bl	8000280 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4b61      	ldr	r3, [pc, #388]	; (8003af8 <UART_SetConfig+0x2d4>)
 8003972:	fba3 2302 	umull	r2, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	011c      	lsls	r4, r3, #4
 800397a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397e:	2200      	movs	r2, #0
 8003980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003984:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003988:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800398c:	4642      	mov	r2, r8
 800398e:	464b      	mov	r3, r9
 8003990:	1891      	adds	r1, r2, r2
 8003992:	64b9      	str	r1, [r7, #72]	; 0x48
 8003994:	415b      	adcs	r3, r3
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003998:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800399c:	4641      	mov	r1, r8
 800399e:	eb12 0a01 	adds.w	sl, r2, r1
 80039a2:	4649      	mov	r1, r9
 80039a4:	eb43 0b01 	adc.w	fp, r3, r1
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039bc:	4692      	mov	sl, r2
 80039be:	469b      	mov	fp, r3
 80039c0:	4643      	mov	r3, r8
 80039c2:	eb1a 0303 	adds.w	r3, sl, r3
 80039c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ca:	464b      	mov	r3, r9
 80039cc:	eb4b 0303 	adc.w	r3, fp, r3
 80039d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039e8:	460b      	mov	r3, r1
 80039ea:	18db      	adds	r3, r3, r3
 80039ec:	643b      	str	r3, [r7, #64]	; 0x40
 80039ee:	4613      	mov	r3, r2
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	647b      	str	r3, [r7, #68]	; 0x44
 80039f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039fe:	f7fc fc3f 	bl	8000280 <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <UART_SetConfig+0x2d4>)
 8003a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	2264      	movs	r2, #100	; 0x64
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	1acb      	subs	r3, r1, r3
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a1e:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <UART_SetConfig+0x2d4>)
 8003a20:	fba3 2302 	umull	r2, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a2c:	441c      	add	r4, r3
 8003a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a40:	4642      	mov	r2, r8
 8003a42:	464b      	mov	r3, r9
 8003a44:	1891      	adds	r1, r2, r2
 8003a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a48:	415b      	adcs	r3, r3
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a50:	4641      	mov	r1, r8
 8003a52:	1851      	adds	r1, r2, r1
 8003a54:	6339      	str	r1, [r7, #48]	; 0x30
 8003a56:	4649      	mov	r1, r9
 8003a58:	414b      	adcs	r3, r1
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a68:	4659      	mov	r1, fp
 8003a6a:	00cb      	lsls	r3, r1, #3
 8003a6c:	4651      	mov	r1, sl
 8003a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a72:	4651      	mov	r1, sl
 8003a74:	00ca      	lsls	r2, r1, #3
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a84:	464b      	mov	r3, r9
 8003a86:	460a      	mov	r2, r1
 8003a88:	eb42 0303 	adc.w	r3, r2, r3
 8003a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003aa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	18db      	adds	r3, r3, r3
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aaa:	4613      	mov	r3, r2
 8003aac:	eb42 0303 	adc.w	r3, r2, r3
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ab6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003aba:	f7fc fbe1 	bl	8000280 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <UART_SetConfig+0x2d4>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	; 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	3332      	adds	r3, #50	; 0x32
 8003ad6:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <UART_SetConfig+0x2d4>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f003 0207 	and.w	r2, r3, #7
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4422      	add	r2, r4
 8003aea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aec:	e106      	b.n	8003cfc <UART_SetConfig+0x4d8>
 8003aee:	bf00      	nop
 8003af0:	40011000 	.word	0x40011000
 8003af4:	40011400 	.word	0x40011400
 8003af8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b0e:	4642      	mov	r2, r8
 8003b10:	464b      	mov	r3, r9
 8003b12:	1891      	adds	r1, r2, r2
 8003b14:	6239      	str	r1, [r7, #32]
 8003b16:	415b      	adcs	r3, r3
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b1e:	4641      	mov	r1, r8
 8003b20:	1854      	adds	r4, r2, r1
 8003b22:	4649      	mov	r1, r9
 8003b24:	eb43 0501 	adc.w	r5, r3, r1
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	00eb      	lsls	r3, r5, #3
 8003b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b36:	00e2      	lsls	r2, r4, #3
 8003b38:	4614      	mov	r4, r2
 8003b3a:	461d      	mov	r5, r3
 8003b3c:	4643      	mov	r3, r8
 8003b3e:	18e3      	adds	r3, r4, r3
 8003b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b44:	464b      	mov	r3, r9
 8003b46:	eb45 0303 	adc.w	r3, r5, r3
 8003b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	008b      	lsls	r3, r1, #2
 8003b6e:	4621      	mov	r1, r4
 8003b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b74:	4621      	mov	r1, r4
 8003b76:	008a      	lsls	r2, r1, #2
 8003b78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b7c:	f7fc fb80 	bl	8000280 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b60      	ldr	r3, [pc, #384]	; (8003d08 <UART_SetConfig+0x4e4>)
 8003b86:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	011c      	lsls	r4, r3, #4
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	1891      	adds	r1, r2, r2
 8003ba6:	61b9      	str	r1, [r7, #24]
 8003ba8:	415b      	adcs	r3, r3
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	1851      	adds	r1, r2, r1
 8003bb4:	6139      	str	r1, [r7, #16]
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	414b      	adcs	r3, r1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bc8:	4659      	mov	r1, fp
 8003bca:	00cb      	lsls	r3, r1, #3
 8003bcc:	4651      	mov	r1, sl
 8003bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bd2:	4651      	mov	r1, sl
 8003bd4:	00ca      	lsls	r2, r1, #3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4642      	mov	r2, r8
 8003bde:	189b      	adds	r3, r3, r2
 8003be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003be4:	464b      	mov	r3, r9
 8003be6:	460a      	mov	r2, r1
 8003be8:	eb42 0303 	adc.w	r3, r2, r3
 8003bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c08:	4649      	mov	r1, r9
 8003c0a:	008b      	lsls	r3, r1, #2
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c12:	4641      	mov	r1, r8
 8003c14:	008a      	lsls	r2, r1, #2
 8003c16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c1a:	f7fc fb31 	bl	8000280 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <UART_SetConfig+0x4e4>)
 8003c26:	fba3 2301 	umull	r2, r3, r3, r1
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2264      	movs	r2, #100	; 0x64
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	1acb      	subs	r3, r1, r3
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	3332      	adds	r3, #50	; 0x32
 8003c38:	4a33      	ldr	r2, [pc, #204]	; (8003d08 <UART_SetConfig+0x4e4>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c44:	441c      	add	r4, r3
 8003c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	673b      	str	r3, [r7, #112]	; 0x70
 8003c4e:	677a      	str	r2, [r7, #116]	; 0x74
 8003c50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c64:	4641      	mov	r1, r8
 8003c66:	1851      	adds	r1, r2, r1
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	00cb      	lsls	r3, r1, #3
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c86:	4651      	mov	r1, sl
 8003c88:	00ca      	lsls	r2, r1, #3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4642      	mov	r2, r8
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c96:	464b      	mov	r3, r9
 8003c98:	460a      	mov	r2, r1
 8003c9a:	eb42 0303 	adc.w	r3, r2, r3
 8003c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8003caa:	667a      	str	r2, [r7, #100]	; 0x64
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cb8:	4649      	mov	r1, r9
 8003cba:	008b      	lsls	r3, r1, #2
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	008a      	lsls	r2, r1, #2
 8003cc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cca:	f7fc fad9 	bl	8000280 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <UART_SetConfig+0x4e4>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <UART_SetConfig+0x4e4>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	f003 020f 	and.w	r2, r3, #15
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4422      	add	r2, r4
 8003cfa:	609a      	str	r2, [r3, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d02:	46bd      	mov	sp, r7
 8003d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d08:	51eb851f 	.word	0x51eb851f

08003d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	6039      	str	r1, [r7, #0]
 8003d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	db0a      	blt.n	8003d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	490c      	ldr	r1, [pc, #48]	; (8003d58 <__NVIC_SetPriority+0x4c>)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	0112      	lsls	r2, r2, #4
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d34:	e00a      	b.n	8003d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4908      	ldr	r1, [pc, #32]	; (8003d5c <__NVIC_SetPriority+0x50>)
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	3b04      	subs	r3, #4
 8003d44:	0112      	lsls	r2, r2, #4
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	440b      	add	r3, r1
 8003d4a:	761a      	strb	r2, [r3, #24]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	e000e100 	.word	0xe000e100
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <SysTick_Handler+0x1c>)
 8003d66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003d68:	f001 fd28 	bl	80057bc <xTaskGetSchedulerState>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d001      	beq.n	8003d76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003d72:	f002 fb11 	bl	8006398 <xPortSysTickHandler>
  }
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000e010 	.word	0xe000e010

08003d80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d84:	2100      	movs	r1, #0
 8003d86:	f06f 0004 	mvn.w	r0, #4
 8003d8a:	f7ff ffbf 	bl	8003d0c <__NVIC_SetPriority>
#endif
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d9a:	f3ef 8305 	mrs	r3, IPSR
 8003d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003da0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003da6:	f06f 0305 	mvn.w	r3, #5
 8003daa:	607b      	str	r3, [r7, #4]
 8003dac:	e00c      	b.n	8003dc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <osKernelInitialize+0x44>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <osKernelInitialize+0x44>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	e002      	b.n	8003dc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003dc8:	687b      	ldr	r3, [r7, #4]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	200001e4 	.word	0x200001e4

08003ddc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de2:	f3ef 8305 	mrs	r3, IPSR
 8003de6:	603b      	str	r3, [r7, #0]
  return(result);
 8003de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003dee:	f06f 0305 	mvn.w	r3, #5
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	e010      	b.n	8003e18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <osKernelStart+0x48>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d109      	bne.n	8003e12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003dfe:	f7ff ffbf 	bl	8003d80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <osKernelStart+0x48>)
 8003e04:	2202      	movs	r2, #2
 8003e06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e08:	f001 f87c 	bl	8004f04 <vTaskStartScheduler>
      stat = osOK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	607b      	str	r3, [r7, #4]
 8003e10:	e002      	b.n	8003e18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e12:	f04f 33ff 	mov.w	r3, #4294967295
 8003e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e18:	687b      	ldr	r3, [r7, #4]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200001e4 	.word	0x200001e4

08003e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08e      	sub	sp, #56	; 0x38
 8003e2c:	af04      	add	r7, sp, #16
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e38:	f3ef 8305 	mrs	r3, IPSR
 8003e3c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d17e      	bne.n	8003f42 <osThreadNew+0x11a>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d07b      	beq.n	8003f42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e4e:	2318      	movs	r3, #24
 8003e50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d045      	beq.n	8003eee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <osThreadNew+0x48>
        name = attr->name;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <osThreadNew+0x6e>
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b38      	cmp	r3, #56	; 0x38
 8003e88:	d805      	bhi.n	8003e96 <osThreadNew+0x6e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <osThreadNew+0x72>
        return (NULL);
 8003e96:	2300      	movs	r3, #0
 8003e98:	e054      	b.n	8003f44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00e      	beq.n	8003ed0 <osThreadNew+0xa8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2ba7      	cmp	r3, #167	; 0xa7
 8003eb8:	d90a      	bls.n	8003ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d006      	beq.n	8003ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <osThreadNew+0xa8>
        mem = 1;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e010      	b.n	8003ef2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10c      	bne.n	8003ef2 <osThreadNew+0xca>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <osThreadNew+0xca>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d104      	bne.n	8003ef2 <osThreadNew+0xca>
          mem = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e001      	b.n	8003ef2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d110      	bne.n	8003f1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f00:	9202      	str	r2, [sp, #8]
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6a3a      	ldr	r2, [r7, #32]
 8003f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fe0c 	bl	8004b2c <xTaskCreateStatic>
 8003f14:	4603      	mov	r3, r0
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	e013      	b.n	8003f42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d110      	bne.n	8003f42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	f107 0310 	add.w	r3, r7, #16
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fe57 	bl	8004be6 <xTaskCreate>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d001      	beq.n	8003f42 <osThreadNew+0x11a>
            hTask = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f42:	693b      	ldr	r3, [r7, #16]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3728      	adds	r7, #40	; 0x28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f54:	f3ef 8305 	mrs	r3, IPSR
 8003f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <osDelay+0x1c>
    stat = osErrorISR;
 8003f60:	f06f 0305 	mvn.w	r3, #5
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	e007      	b.n	8003f78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 ff92 	bl	8004e9c <vTaskDelay>
    }
  }

  return (stat);
 8003f78:	68fb      	ldr	r3, [r7, #12]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <vApplicationGetIdleTaskMemory+0x30>)
 8003f9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2280      	movs	r2, #128	; 0x80
 8003fa0:	601a      	str	r2, [r3, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	200001e8 	.word	0x200001e8
 8003fb4:	20000290 	.word	0x20000290

08003fb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003fc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4a06      	ldr	r2, [pc, #24]	; (8003fe8 <vApplicationGetTimerTaskMemory+0x30>)
 8003fce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd6:	601a      	str	r2, [r3, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	20000490 	.word	0x20000490
 8003fe8:	20000538 	.word	0x20000538

08003fec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f103 0208 	add.w	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f04f 32ff 	mov.w	r2, #4294967295
 8004004:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f103 0208 	add.w	r2, r3, #8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f103 0208 	add.w	r2, r3, #8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	601a      	str	r2, [r3, #0]
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d103      	bne.n	80040ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e00c      	b.n	80040c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3308      	adds	r3, #8
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e002      	b.n	80040bc <vListInsert+0x2e>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d2f6      	bcs.n	80040b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	601a      	str	r2, [r3, #0]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6892      	ldr	r2, [r2, #8]
 8004116:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6852      	ldr	r2, [r2, #4]
 8004120:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d103      	bne.n	8004134 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1e5a      	subs	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800417a:	bf00      	nop
 800417c:	e7fe      	b.n	800417c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800417e:	f002 f879 	bl	8006274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	68f9      	ldr	r1, [r7, #12]
 800418c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	441a      	add	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	3b01      	subs	r3, #1
 80041b0:	68f9      	ldr	r1, [r7, #12]
 80041b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	441a      	add	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	22ff      	movs	r2, #255	; 0xff
 80041c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d114      	bne.n	80041fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01a      	beq.n	8004212 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3310      	adds	r3, #16
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 f929 	bl	8005438 <xTaskRemoveFromEventList>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <xQueueGenericReset+0xcc>)
 80041ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	e009      	b.n	8004212 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3310      	adds	r3, #16
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fef2 	bl	8003fec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3324      	adds	r3, #36	; 0x24
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff feed 	bl	8003fec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004212:	f002 f85f 	bl	80062d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004216:	2301      	movs	r3, #1
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004266:	bf00      	nop
 8004268:	e7fe      	b.n	8004268 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <xQueueGenericCreateStatic+0x52>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <xQueueGenericCreateStatic+0x56>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <xQueueGenericCreateStatic+0x58>
 800427a:	2300      	movs	r3, #0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	623b      	str	r3, [r7, #32]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <xQueueGenericCreateStatic+0x7e>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <xQueueGenericCreateStatic+0x82>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <xQueueGenericCreateStatic+0x84>
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	61fb      	str	r3, [r7, #28]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042c2:	2350      	movs	r3, #80	; 0x50
 80042c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b50      	cmp	r3, #80	; 0x50
 80042ca:	d00a      	beq.n	80042e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	61bb      	str	r3, [r7, #24]
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f805 	bl	8004314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800430c:	4618      	mov	r0, r3
 800430e:	3730      	adds	r7, #48	; 0x30
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e002      	b.n	8004336 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004342:	2101      	movs	r1, #1
 8004344:	69b8      	ldr	r0, [r7, #24]
 8004346:	f7ff ff05 	bl	8004154 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800436a:	2300      	movs	r3, #0
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <xQueueGenericSend+0x32>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d103      	bne.n	800439c <xQueueGenericSend+0x40>
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <xQueueGenericSend+0x44>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <xQueueGenericSend+0x46>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <xQueueGenericSend+0x60>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d103      	bne.n	80043ca <xQueueGenericSend+0x6e>
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <xQueueGenericSend+0x72>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <xQueueGenericSend+0x74>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xQueueGenericSend+0x8e>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	623b      	str	r3, [r7, #32]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ea:	f001 f9e7 	bl	80057bc <xTaskGetSchedulerState>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <xQueueGenericSend+0x9e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <xQueueGenericSend+0xa2>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <xQueueGenericSend+0xa4>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xQueueGenericSend+0xbe>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	61fb      	str	r3, [r7, #28]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800441a:	f001 ff2b 	bl	8006274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <xQueueGenericSend+0xd4>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d129      	bne.n	8004484 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004436:	f000 fa0b 	bl	8004850 <prvCopyDataToQueue>
 800443a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d010      	beq.n	8004466 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	3324      	adds	r3, #36	; 0x24
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fff5 	bl	8005438 <xTaskRemoveFromEventList>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004454:	4b3f      	ldr	r3, [pc, #252]	; (8004554 <xQueueGenericSend+0x1f8>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	e00a      	b.n	800447c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800446c:	4b39      	ldr	r3, [pc, #228]	; (8004554 <xQueueGenericSend+0x1f8>)
 800446e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800447c:	f001 ff2a 	bl	80062d4 <vPortExitCritical>
				return pdPASS;
 8004480:	2301      	movs	r3, #1
 8004482:	e063      	b.n	800454c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800448a:	f001 ff23 	bl	80062d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800448e:	2300      	movs	r3, #0
 8004490:	e05c      	b.n	800454c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	4618      	mov	r0, r3
 800449e:	f001 f82f 	bl	8005500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044a6:	f001 ff15 	bl	80062d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044aa:	f000 fd9b 	bl	8004fe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ae:	f001 fee1 	bl	8006274 <vPortEnterCritical>
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044b8:	b25b      	sxtb	r3, r3
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d103      	bne.n	80044c8 <xQueueGenericSend+0x16c>
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ce:	b25b      	sxtb	r3, r3
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d103      	bne.n	80044de <xQueueGenericSend+0x182>
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044de:	f001 fef9 	bl	80062d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044e2:	1d3a      	adds	r2, r7, #4
 80044e4:	f107 0314 	add.w	r3, r7, #20
 80044e8:	4611      	mov	r1, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 f81e 	bl	800552c <xTaskCheckForTimeOut>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d124      	bne.n	8004540 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044f8:	f000 faa2 	bl	8004a40 <prvIsQueueFull>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d018      	beq.n	8004534 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	3310      	adds	r3, #16
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 ff44 	bl	8005398 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004512:	f000 fa2d 	bl	8004970 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004516:	f000 fd73 	bl	8005000 <xTaskResumeAll>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	f47f af7c 	bne.w	800441a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <xQueueGenericSend+0x1f8>)
 8004524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	e772      	b.n	800441a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004536:	f000 fa1b 	bl	8004970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800453a:	f000 fd61 	bl	8005000 <xTaskResumeAll>
 800453e:	e76c      	b.n	800441a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004542:	f000 fa15 	bl	8004970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004546:	f000 fd5b 	bl	8005000 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800454a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800454c:	4618      	mov	r0, r3
 800454e:	3738      	adds	r7, #56	; 0x38
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b090      	sub	sp, #64	; 0x40
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <xQueueGenericSendFromISR+0x3c>
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <xQueueGenericSendFromISR+0x40>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <xQueueGenericSendFromISR+0x42>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d103      	bne.n	80045c2 <xQueueGenericSendFromISR+0x6a>
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <xQueueGenericSendFromISR+0x6e>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <xQueueGenericSendFromISR+0x70>
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	623b      	str	r3, [r7, #32]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045e2:	f001 ff29 	bl	8006438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045e6:	f3ef 8211 	mrs	r2, BASEPRI
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	61fa      	str	r2, [r7, #28]
 80045fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004600:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <xQueueGenericSendFromISR+0xbc>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d12f      	bne.n	8004674 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800461a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800462a:	f000 f911 	bl	8004850 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800462e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d112      	bne.n	800465e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d016      	beq.n	800466e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	3324      	adds	r3, #36	; 0x24
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fef7 	bl	8005438 <xTaskRemoveFromEventList>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00e      	beq.n	800466e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e007      	b.n	800466e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800465e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004662:	3301      	adds	r3, #1
 8004664:	b2db      	uxtb	r3, r3
 8004666:	b25a      	sxtb	r2, r3
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800466e:	2301      	movs	r3, #1
 8004670:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004672:	e001      	b.n	8004678 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004674:	2300      	movs	r3, #0
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004682:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004686:	4618      	mov	r0, r3
 8004688:	3740      	adds	r7, #64	; 0x40
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800469c:	2300      	movs	r3, #0
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <xQueueReceive+0x30>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	623b      	str	r3, [r7, #32]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <xQueueReceive+0x3e>
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <xQueueReceive+0x42>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <xQueueReceive+0x44>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xQueueReceive+0x5e>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	61fb      	str	r3, [r7, #28]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046ee:	f001 f865 	bl	80057bc <xTaskGetSchedulerState>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <xQueueReceive+0x6e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <xQueueReceive+0x72>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <xQueueReceive+0x74>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <xQueueReceive+0x8e>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	61bb      	str	r3, [r7, #24]
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800471e:	f001 fda9 	bl	8006274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01f      	beq.n	800476e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004732:	f000 f8f7 	bl	8004924 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	1e5a      	subs	r2, r3, #1
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00f      	beq.n	8004766 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	3310      	adds	r3, #16
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fe74 	bl	8005438 <xTaskRemoveFromEventList>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004756:	4b3d      	ldr	r3, [pc, #244]	; (800484c <xQueueReceive+0x1bc>)
 8004758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004766:	f001 fdb5 	bl	80062d4 <vPortExitCritical>
				return pdPASS;
 800476a:	2301      	movs	r3, #1
 800476c:	e069      	b.n	8004842 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004774:	f001 fdae 	bl	80062d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004778:	2300      	movs	r3, #0
 800477a:	e062      	b.n	8004842 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004782:	f107 0310 	add.w	r3, r7, #16
 8004786:	4618      	mov	r0, r3
 8004788:	f000 feba 	bl	8005500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004790:	f001 fda0 	bl	80062d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004794:	f000 fc26 	bl	8004fe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004798:	f001 fd6c 	bl	8006274 <vPortEnterCritical>
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a2:	b25b      	sxtb	r3, r3
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d103      	bne.n	80047b2 <xQueueReceive+0x122>
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b8:	b25b      	sxtb	r3, r3
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d103      	bne.n	80047c8 <xQueueReceive+0x138>
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c8:	f001 fd84 	bl	80062d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047cc:	1d3a      	adds	r2, r7, #4
 80047ce:	f107 0310 	add.w	r3, r7, #16
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fea9 	bl	800552c <xTaskCheckForTimeOut>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d123      	bne.n	8004828 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e2:	f000 f917 	bl	8004a14 <prvIsQueueEmpty>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d017      	beq.n	800481c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	3324      	adds	r3, #36	; 0x24
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4611      	mov	r1, r2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fdcf 	bl	8005398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047fc:	f000 f8b8 	bl	8004970 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004800:	f000 fbfe 	bl	8005000 <xTaskResumeAll>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d189      	bne.n	800471e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800480a:	4b10      	ldr	r3, [pc, #64]	; (800484c <xQueueReceive+0x1bc>)
 800480c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	e780      	b.n	800471e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800481c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481e:	f000 f8a7 	bl	8004970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004822:	f000 fbed 	bl	8005000 <xTaskResumeAll>
 8004826:	e77a      	b.n	800471e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800482a:	f000 f8a1 	bl	8004970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800482e:	f000 fbe7 	bl	8005000 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004834:	f000 f8ee 	bl	8004a14 <prvIsQueueEmpty>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f43f af6f 	beq.w	800471e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004842:	4618      	mov	r0, r3
 8004844:	3730      	adds	r7, #48	; 0x30
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	e000ed04 	.word	0xe000ed04

08004850 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d14d      	bne.n	8004912 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 ffbc 	bl	80057f8 <xTaskPriorityDisinherit>
 8004880:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	e043      	b.n	8004912 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d119      	bne.n	80048c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6858      	ldr	r0, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	461a      	mov	r2, r3
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	f002 f9df 	bl	8006c5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	441a      	add	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d32b      	bcc.n	8004912 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	e026      	b.n	8004912 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68d8      	ldr	r0, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	461a      	mov	r2, r3
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	f002 f9c5 	bl	8006c5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	425b      	negs	r3, r3
 80048de:	441a      	add	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d207      	bcs.n	8004900 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	425b      	negs	r3, r3
 80048fa:	441a      	add	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d105      	bne.n	8004912 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	3b01      	subs	r3, #1
 8004910:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800491a:	697b      	ldr	r3, [r7, #20]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	441a      	add	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d303      	bcc.n	8004958 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68d9      	ldr	r1, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	461a      	mov	r2, r3
 8004962:	6838      	ldr	r0, [r7, #0]
 8004964:	f002 f97b 	bl	8006c5e <memcpy>
	}
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004978:	f001 fc7c 	bl	8006274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004982:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004984:	e011      	b.n	80049aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d012      	beq.n	80049b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3324      	adds	r3, #36	; 0x24
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fd50 	bl	8005438 <xTaskRemoveFromEventList>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800499e:	f000 fe27 	bl	80055f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dce9      	bgt.n	8004986 <prvUnlockQueue+0x16>
 80049b2:	e000      	b.n	80049b6 <prvUnlockQueue+0x46>
					break;
 80049b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	22ff      	movs	r2, #255	; 0xff
 80049ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049be:	f001 fc89 	bl	80062d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049c2:	f001 fc57 	bl	8006274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ce:	e011      	b.n	80049f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d012      	beq.n	80049fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3310      	adds	r3, #16
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fd2b 	bl	8005438 <xTaskRemoveFromEventList>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049e8:	f000 fe02 	bl	80055f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049ec:	7bbb      	ldrb	r3, [r7, #14]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dce9      	bgt.n	80049d0 <prvUnlockQueue+0x60>
 80049fc:	e000      	b.n	8004a00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	22ff      	movs	r2, #255	; 0xff
 8004a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a08:	f001 fc64 	bl	80062d4 <vPortExitCritical>
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a1c:	f001 fc2a 	bl	8006274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e001      	b.n	8004a32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a32:	f001 fc4f 	bl	80062d4 <vPortExitCritical>

	return xReturn;
 8004a36:	68fb      	ldr	r3, [r7, #12]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a48:	f001 fc14 	bl	8006274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d102      	bne.n	8004a5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e001      	b.n	8004a62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a62:	f001 fc37 	bl	80062d4 <vPortExitCritical>

	return xReturn;
 8004a66:	68fb      	ldr	r3, [r7, #12]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e014      	b.n	8004aaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a80:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <vQueueAddToRegistry+0x50>)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a8c:	490c      	ldr	r1, [pc, #48]	; (8004ac0 <vQueueAddToRegistry+0x50>)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <vQueueAddToRegistry+0x50>)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004aa2:	e006      	b.n	8004ab2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b07      	cmp	r3, #7
 8004aae:	d9e7      	bls.n	8004a80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000938 	.word	0x20000938

08004ac4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ad4:	f001 fbce 	bl	8006274 <vPortEnterCritical>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ade:	b25b      	sxtb	r3, r3
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d103      	bne.n	8004aee <vQueueWaitForMessageRestricted+0x2a>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af4:	b25b      	sxtb	r3, r3
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d103      	bne.n	8004b04 <vQueueWaitForMessageRestricted+0x40>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b04:	f001 fbe6 	bl	80062d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3324      	adds	r3, #36	; 0x24
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fc61 	bl	80053e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b1e:	6978      	ldr	r0, [r7, #20]
 8004b20:	f7ff ff26 	bl	8004970 <prvUnlockQueue>
	}
 8004b24:	bf00      	nop
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af04      	add	r7, sp, #16
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	623b      	str	r3, [r7, #32]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	61fb      	str	r3, [r7, #28]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b72:	23a8      	movs	r3, #168	; 0xa8
 8004b74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2ba8      	cmp	r3, #168	; 0xa8
 8004b7a:	d00a      	beq.n	8004b92 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	61bb      	str	r3, [r7, #24]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01e      	beq.n	8004bd8 <xTaskCreateStatic+0xac>
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	9302      	str	r3, [sp, #8]
 8004bba:	f107 0314 	add.w	r3, r7, #20
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f850 	bl	8004c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bd2:	f000 f8f3 	bl	8004dbc <prvAddNewTaskToReadyList>
 8004bd6:	e001      	b.n	8004bdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bdc:	697b      	ldr	r3, [r7, #20]
	}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3728      	adds	r7, #40	; 0x28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b08c      	sub	sp, #48	; 0x30
 8004bea:	af04      	add	r7, sp, #16
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fc5c 	bl	80064b8 <pvPortMalloc>
 8004c00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c08:	20a8      	movs	r0, #168	; 0xa8
 8004c0a:	f001 fc55 	bl	80064b8 <pvPortMalloc>
 8004c0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c1c:	e005      	b.n	8004c2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f001 fd16 	bl	8006650 <vPortFree>
 8004c24:	e001      	b.n	8004c2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d017      	beq.n	8004c60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c38:	88fa      	ldrh	r2, [r7, #6]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9303      	str	r3, [sp, #12]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	9302      	str	r3, [sp, #8]
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f80e 	bl	8004c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c54:	69f8      	ldr	r0, [r7, #28]
 8004c56:	f000 f8b1 	bl	8004dbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	e002      	b.n	8004c66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c60:	f04f 33ff 	mov.w	r3, #4294967295
 8004c64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c66:	69bb      	ldr	r3, [r7, #24]
	}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	461a      	mov	r2, r3
 8004c88:	21a5      	movs	r1, #165	; 0xa5
 8004c8a:	f001 ff16 	bl	8006aba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f023 0307 	bic.w	r3, r3, #7
 8004ca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	617b      	str	r3, [r7, #20]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01f      	beq.n	8004d0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	e012      	b.n	8004cfa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	7819      	ldrb	r1, [r3, #0]
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3334      	adds	r3, #52	; 0x34
 8004ce4:	460a      	mov	r2, r1
 8004ce6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b0f      	cmp	r3, #15
 8004cfe:	d9e9      	bls.n	8004cd4 <prvInitialiseNewTask+0x64>
 8004d00:	e000      	b.n	8004d04 <prvInitialiseNewTask+0x94>
			{
				break;
 8004d02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d0c:	e003      	b.n	8004d16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	2b37      	cmp	r3, #55	; 0x37
 8004d1a:	d901      	bls.n	8004d20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d1c:	2337      	movs	r3, #55	; 0x37
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	2200      	movs	r2, #0
 8004d30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	3304      	adds	r3, #4
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff f978 	bl	800402c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	3318      	adds	r3, #24
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff f973 	bl	800402c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	3354      	adds	r3, #84	; 0x54
 8004d70:	224c      	movs	r2, #76	; 0x4c
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 fea0 	bl	8006aba <memset>
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	4a0c      	ldr	r2, [pc, #48]	; (8004db0 <prvInitialiseNewTask+0x140>)
 8004d7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <prvInitialiseNewTask+0x144>)
 8004d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <prvInitialiseNewTask+0x148>)
 8004d8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	69b8      	ldr	r0, [r7, #24]
 8004d92:	f001 f941 	bl	8006018 <pxPortInitialiseStack>
 8004d96:	4602      	mov	r2, r0
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004da8:	bf00      	nop
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20004bcc 	.word	0x20004bcc
 8004db4:	20004c34 	.word	0x20004c34
 8004db8:	20004c9c 	.word	0x20004c9c

08004dbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dc4:	f001 fa56 	bl	8006274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <prvAddNewTaskToReadyList+0xc4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	4a2c      	ldr	r2, [pc, #176]	; (8004e80 <prvAddNewTaskToReadyList+0xc4>)
 8004dd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004de0:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <prvAddNewTaskToReadyList+0xc4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d110      	bne.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004de8:	f000 fc26 	bl	8005638 <prvInitialiseTaskLists>
 8004dec:	e00d      	b.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dee:	4b26      	ldr	r3, [pc, #152]	; (8004e88 <prvAddNewTaskToReadyList+0xcc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004df6:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d802      	bhi.n	8004e0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <prvAddNewTaskToReadyList+0xd0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <prvAddNewTaskToReadyList+0xd0>)
 8004e12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e14:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <prvAddNewTaskToReadyList+0xd0>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <prvAddNewTaskToReadyList+0xd4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d903      	bls.n	8004e30 <prvAddNewTaskToReadyList+0x74>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	4a18      	ldr	r2, [pc, #96]	; (8004e90 <prvAddNewTaskToReadyList+0xd4>)
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <prvAddNewTaskToReadyList+0xd8>)
 8004e3e:	441a      	add	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7ff f8fd 	bl	8004046 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e4c:	f001 fa42 	bl	80062d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <prvAddNewTaskToReadyList+0xcc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00e      	beq.n	8004e76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <prvAddNewTaskToReadyList+0xc8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d207      	bcs.n	8004e76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvAddNewTaskToReadyList+0xdc>)
 8004e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000e4c 	.word	0x20000e4c
 8004e84:	20000978 	.word	0x20000978
 8004e88:	20000e58 	.word	0x20000e58
 8004e8c:	20000e68 	.word	0x20000e68
 8004e90:	20000e54 	.word	0x20000e54
 8004e94:	2000097c 	.word	0x2000097c
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d017      	beq.n	8004ede <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <vTaskDelay+0x60>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <vTaskDelay+0x30>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60bb      	str	r3, [r7, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ecc:	f000 f88a 	bl	8004fe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fcfe 	bl	80058d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ed8:	f000 f892 	bl	8005000 <xTaskResumeAll>
 8004edc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <vTaskDelay+0x64>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000e74 	.word	0x20000e74
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	; 0x28
 8004f08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f12:	463a      	mov	r2, r7
 8004f14:	1d39      	adds	r1, r7, #4
 8004f16:	f107 0308 	add.w	r3, r7, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff f832 	bl	8003f84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	9202      	str	r2, [sp, #8]
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	460a      	mov	r2, r1
 8004f32:	4924      	ldr	r1, [pc, #144]	; (8004fc4 <vTaskStartScheduler+0xc0>)
 8004f34:	4824      	ldr	r0, [pc, #144]	; (8004fc8 <vTaskStartScheduler+0xc4>)
 8004f36:	f7ff fdf9 	bl	8004b2c <xTaskCreateStatic>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <vTaskStartScheduler+0xc8>)
 8004f3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f40:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <vTaskStartScheduler+0xc8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e001      	b.n	8004f52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d102      	bne.n	8004f5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f58:	f000 fd10 	bl	800597c <xTimerCreateTimerTask>
 8004f5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d11b      	bne.n	8004f9c <vTaskStartScheduler+0x98>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	613b      	str	r3, [r7, #16]
}
 8004f76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f78:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <vTaskStartScheduler+0xcc>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3354      	adds	r3, #84	; 0x54
 8004f7e:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <vTaskStartScheduler+0xd0>)
 8004f80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <vTaskStartScheduler+0xd4>)
 8004f84:	f04f 32ff 	mov.w	r2, #4294967295
 8004f88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f8a:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <vTaskStartScheduler+0xd8>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f90:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <vTaskStartScheduler+0xdc>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f96:	f001 f8cb 	bl	8006130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f9a:	e00e      	b.n	8004fba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d10a      	bne.n	8004fba <vTaskStartScheduler+0xb6>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	60fb      	str	r3, [r7, #12]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <vTaskStartScheduler+0xb4>
}
 8004fba:	bf00      	nop
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	0800781c 	.word	0x0800781c
 8004fc8:	08005609 	.word	0x08005609
 8004fcc:	20000e70 	.word	0x20000e70
 8004fd0:	20000978 	.word	0x20000978
 8004fd4:	20000068 	.word	0x20000068
 8004fd8:	20000e6c 	.word	0x20000e6c
 8004fdc:	20000e58 	.word	0x20000e58
 8004fe0:	20000e50 	.word	0x20000e50

08004fe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <vTaskSuspendAll+0x18>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3301      	adds	r3, #1
 8004fee:	4a03      	ldr	r2, [pc, #12]	; (8004ffc <vTaskSuspendAll+0x18>)
 8004ff0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ff2:	bf00      	nop
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20000e74 	.word	0x20000e74

08005000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800500e:	4b42      	ldr	r3, [pc, #264]	; (8005118 <xTaskResumeAll+0x118>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <xTaskResumeAll+0x2c>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	603b      	str	r3, [r7, #0]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800502c:	f001 f922 	bl	8006274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005030:	4b39      	ldr	r3, [pc, #228]	; (8005118 <xTaskResumeAll+0x118>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3b01      	subs	r3, #1
 8005036:	4a38      	ldr	r2, [pc, #224]	; (8005118 <xTaskResumeAll+0x118>)
 8005038:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800503a:	4b37      	ldr	r3, [pc, #220]	; (8005118 <xTaskResumeAll+0x118>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d162      	bne.n	8005108 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005042:	4b36      	ldr	r3, [pc, #216]	; (800511c <xTaskResumeAll+0x11c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d05e      	beq.n	8005108 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800504a:	e02f      	b.n	80050ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800504c:	4b34      	ldr	r3, [pc, #208]	; (8005120 <xTaskResumeAll+0x120>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3318      	adds	r3, #24
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff f851 	bl	8004100 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3304      	adds	r3, #4
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff f84c 	bl	8004100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506c:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <xTaskResumeAll+0x124>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d903      	bls.n	800507c <xTaskResumeAll+0x7c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	4a2a      	ldr	r2, [pc, #168]	; (8005124 <xTaskResumeAll+0x124>)
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4a27      	ldr	r2, [pc, #156]	; (8005128 <xTaskResumeAll+0x128>)
 800508a:	441a      	add	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f7fe ffd7 	bl	8004046 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4b23      	ldr	r3, [pc, #140]	; (800512c <xTaskResumeAll+0x12c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d302      	bcc.n	80050ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050a6:	4b22      	ldr	r3, [pc, #136]	; (8005130 <xTaskResumeAll+0x130>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050ac:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <xTaskResumeAll+0x120>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1cb      	bne.n	800504c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050ba:	f000 fb5f 	bl	800577c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050be:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <xTaskResumeAll+0x134>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d010      	beq.n	80050ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050ca:	f000 f847 	bl	800515c <xTaskIncrementTick>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050d4:	4b16      	ldr	r3, [pc, #88]	; (8005130 <xTaskResumeAll+0x130>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3b01      	subs	r3, #1
 80050de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f1      	bne.n	80050ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80050e6:	4b13      	ldr	r3, [pc, #76]	; (8005134 <xTaskResumeAll+0x134>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050ec:	4b10      	ldr	r3, [pc, #64]	; (8005130 <xTaskResumeAll+0x130>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <xTaskResumeAll+0x138>)
 80050fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005108:	f001 f8e4 	bl	80062d4 <vPortExitCritical>

	return xAlreadyYielded;
 800510c:	68bb      	ldr	r3, [r7, #8]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000e74 	.word	0x20000e74
 800511c:	20000e4c 	.word	0x20000e4c
 8005120:	20000e0c 	.word	0x20000e0c
 8005124:	20000e54 	.word	0x20000e54
 8005128:	2000097c 	.word	0x2000097c
 800512c:	20000978 	.word	0x20000978
 8005130:	20000e60 	.word	0x20000e60
 8005134:	20000e5c 	.word	0x20000e5c
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <xTaskGetTickCount+0x1c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005148:	687b      	ldr	r3, [r7, #4]
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20000e50 	.word	0x20000e50

0800515c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005166:	4b4f      	ldr	r3, [pc, #316]	; (80052a4 <xTaskIncrementTick+0x148>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 808f 	bne.w	800528e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005170:	4b4d      	ldr	r3, [pc, #308]	; (80052a8 <xTaskIncrementTick+0x14c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005178:	4a4b      	ldr	r2, [pc, #300]	; (80052a8 <xTaskIncrementTick+0x14c>)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d120      	bne.n	80051c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005184:	4b49      	ldr	r3, [pc, #292]	; (80052ac <xTaskIncrementTick+0x150>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	603b      	str	r3, [r7, #0]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <xTaskIncrementTick+0x46>
 80051a4:	4b41      	ldr	r3, [pc, #260]	; (80052ac <xTaskIncrementTick+0x150>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <xTaskIncrementTick+0x154>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3f      	ldr	r2, [pc, #252]	; (80052ac <xTaskIncrementTick+0x150>)
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	4a3f      	ldr	r2, [pc, #252]	; (80052b0 <xTaskIncrementTick+0x154>)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	4b3e      	ldr	r3, [pc, #248]	; (80052b4 <xTaskIncrementTick+0x158>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	4a3d      	ldr	r2, [pc, #244]	; (80052b4 <xTaskIncrementTick+0x158>)
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	f000 fadb 	bl	800577c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051c6:	4b3c      	ldr	r3, [pc, #240]	; (80052b8 <xTaskIncrementTick+0x15c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d349      	bcc.n	8005264 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <xTaskIncrementTick+0x150>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d104      	bne.n	80051e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051da:	4b37      	ldr	r3, [pc, #220]	; (80052b8 <xTaskIncrementTick+0x15c>)
 80051dc:	f04f 32ff 	mov.w	r2, #4294967295
 80051e0:	601a      	str	r2, [r3, #0]
					break;
 80051e2:	e03f      	b.n	8005264 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e4:	4b31      	ldr	r3, [pc, #196]	; (80052ac <xTaskIncrementTick+0x150>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d203      	bcs.n	8005204 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051fc:	4a2e      	ldr	r2, [pc, #184]	; (80052b8 <xTaskIncrementTick+0x15c>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005202:	e02f      	b.n	8005264 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe ff79 	bl	8004100 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	3318      	adds	r3, #24
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe ff70 	bl	8004100 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4b25      	ldr	r3, [pc, #148]	; (80052bc <xTaskIncrementTick+0x160>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d903      	bls.n	8005234 <xTaskIncrementTick+0xd8>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <xTaskIncrementTick+0x160>)
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4a1f      	ldr	r2, [pc, #124]	; (80052c0 <xTaskIncrementTick+0x164>)
 8005242:	441a      	add	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f7fe fefb 	bl	8004046 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <xTaskIncrementTick+0x168>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	429a      	cmp	r2, r3
 800525c:	d3b8      	bcc.n	80051d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800525e:	2301      	movs	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005262:	e7b5      	b.n	80051d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005264:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <xTaskIncrementTick+0x168>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	4915      	ldr	r1, [pc, #84]	; (80052c0 <xTaskIncrementTick+0x164>)
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d901      	bls.n	8005280 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005280:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <xTaskIncrementTick+0x16c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	e004      	b.n	8005298 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <xTaskIncrementTick+0x170>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3301      	adds	r3, #1
 8005294:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <xTaskIncrementTick+0x170>)
 8005296:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005298:	697b      	ldr	r3, [r7, #20]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000e74 	.word	0x20000e74
 80052a8:	20000e50 	.word	0x20000e50
 80052ac:	20000e04 	.word	0x20000e04
 80052b0:	20000e08 	.word	0x20000e08
 80052b4:	20000e64 	.word	0x20000e64
 80052b8:	20000e6c 	.word	0x20000e6c
 80052bc:	20000e54 	.word	0x20000e54
 80052c0:	2000097c 	.word	0x2000097c
 80052c4:	20000978 	.word	0x20000978
 80052c8:	20000e60 	.word	0x20000e60
 80052cc:	20000e5c 	.word	0x20000e5c

080052d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052d6:	4b2a      	ldr	r3, [pc, #168]	; (8005380 <vTaskSwitchContext+0xb0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052de:	4b29      	ldr	r3, [pc, #164]	; (8005384 <vTaskSwitchContext+0xb4>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052e4:	e046      	b.n	8005374 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80052e6:	4b27      	ldr	r3, [pc, #156]	; (8005384 <vTaskSwitchContext+0xb4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ec:	4b26      	ldr	r3, [pc, #152]	; (8005388 <vTaskSwitchContext+0xb8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e010      	b.n	8005316 <vTaskSwitchContext+0x46>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <vTaskSwitchContext+0x40>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	607b      	str	r3, [r7, #4]
}
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <vTaskSwitchContext+0x3e>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3b01      	subs	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	491d      	ldr	r1, [pc, #116]	; (800538c <vTaskSwitchContext+0xbc>)
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0e4      	beq.n	80052f4 <vTaskSwitchContext+0x24>
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4a15      	ldr	r2, [pc, #84]	; (800538c <vTaskSwitchContext+0xbc>)
 8005336:	4413      	add	r3, r2
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	3308      	adds	r3, #8
 800534c:	429a      	cmp	r2, r3
 800534e:	d104      	bne.n	800535a <vTaskSwitchContext+0x8a>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4a0b      	ldr	r2, [pc, #44]	; (8005390 <vTaskSwitchContext+0xc0>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4a08      	ldr	r2, [pc, #32]	; (8005388 <vTaskSwitchContext+0xb8>)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <vTaskSwitchContext+0xc0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3354      	adds	r3, #84	; 0x54
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <vTaskSwitchContext+0xc4>)
 8005372:	6013      	str	r3, [r2, #0]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000e74 	.word	0x20000e74
 8005384:	20000e60 	.word	0x20000e60
 8005388:	20000e54 	.word	0x20000e54
 800538c:	2000097c 	.word	0x2000097c
 8005390:	20000978 	.word	0x20000978
 8005394:	20000068 	.word	0x20000068

08005398 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	60fb      	str	r3, [r7, #12]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053be:	4b07      	ldr	r3, [pc, #28]	; (80053dc <vTaskPlaceOnEventList+0x44>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3318      	adds	r3, #24
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fe fe61 	bl	800408e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053cc:	2101      	movs	r1, #1
 80053ce:	6838      	ldr	r0, [r7, #0]
 80053d0:	f000 fa80 	bl	80058d4 <prvAddCurrentTaskToDelayedList>
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000978 	.word	0x20000978

080053e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	617b      	str	r3, [r7, #20]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <vTaskPlaceOnEventListRestricted+0x54>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3318      	adds	r3, #24
 800540e:	4619      	mov	r1, r3
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7fe fe18 	bl	8004046 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	68b8      	ldr	r0, [r7, #8]
 8005426:	f000 fa55 	bl	80058d4 <prvAddCurrentTaskToDelayedList>
	}
 800542a:	bf00      	nop
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000978 	.word	0x20000978

08005438 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	60fb      	str	r3, [r7, #12]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3318      	adds	r3, #24
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe fe49 	bl	8004100 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546e:	4b1e      	ldr	r3, [pc, #120]	; (80054e8 <xTaskRemoveFromEventList+0xb0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d11d      	bne.n	80054b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	3304      	adds	r3, #4
 800547a:	4618      	mov	r0, r3
 800547c:	f7fe fe40 	bl	8004100 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005484:	4b19      	ldr	r3, [pc, #100]	; (80054ec <xTaskRemoveFromEventList+0xb4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d903      	bls.n	8005494 <xTaskRemoveFromEventList+0x5c>
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	4a16      	ldr	r2, [pc, #88]	; (80054ec <xTaskRemoveFromEventList+0xb4>)
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <xTaskRemoveFromEventList+0xb8>)
 80054a2:	441a      	add	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f7fe fdcb 	bl	8004046 <vListInsertEnd>
 80054b0:	e005      	b.n	80054be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3318      	adds	r3, #24
 80054b6:	4619      	mov	r1, r3
 80054b8:	480e      	ldr	r0, [pc, #56]	; (80054f4 <xTaskRemoveFromEventList+0xbc>)
 80054ba:	f7fe fdc4 	bl	8004046 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <xTaskRemoveFromEventList+0xc0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d905      	bls.n	80054d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <xTaskRemoveFromEventList+0xc4>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e001      	b.n	80054dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054dc:	697b      	ldr	r3, [r7, #20]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000e74 	.word	0x20000e74
 80054ec:	20000e54 	.word	0x20000e54
 80054f0:	2000097c 	.word	0x2000097c
 80054f4:	20000e0c 	.word	0x20000e0c
 80054f8:	20000978 	.word	0x20000978
 80054fc:	20000e60 	.word	0x20000e60

08005500 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <vTaskInternalSetTimeOutState+0x24>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <vTaskInternalSetTimeOutState+0x28>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	605a      	str	r2, [r3, #4]
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	20000e64 	.word	0x20000e64
 8005528:	20000e50 	.word	0x20000e50

0800552c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	613b      	str	r3, [r7, #16]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	60fb      	str	r3, [r7, #12]
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800556e:	f000 fe81 	bl	8006274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005572:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <xTaskCheckForTimeOut+0xbc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558a:	d102      	bne.n	8005592 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	e023      	b.n	80055da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <xTaskCheckForTimeOut+0xc0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d007      	beq.n	80055ae <xTaskCheckForTimeOut+0x82>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	e015      	b.n	80055da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d20b      	bcs.n	80055d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	1ad2      	subs	r2, r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff ff9b 	bl	8005500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	e004      	b.n	80055da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055d6:	2301      	movs	r3, #1
 80055d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055da:	f000 fe7b 	bl	80062d4 <vPortExitCritical>

	return xReturn;
 80055de:	69fb      	ldr	r3, [r7, #28]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000e50 	.word	0x20000e50
 80055ec:	20000e64 	.word	0x20000e64

080055f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055f4:	4b03      	ldr	r3, [pc, #12]	; (8005604 <vTaskMissedYield+0x14>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	20000e60 	.word	0x20000e60

08005608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005610:	f000 f852 	bl	80056b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005614:	4b06      	ldr	r3, [pc, #24]	; (8005630 <prvIdleTask+0x28>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d9f9      	bls.n	8005610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <prvIdleTask+0x2c>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800562c:	e7f0      	b.n	8005610 <prvIdleTask+0x8>
 800562e:	bf00      	nop
 8005630:	2000097c 	.word	0x2000097c
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	e00c      	b.n	800565e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4a12      	ldr	r2, [pc, #72]	; (8005698 <prvInitialiseTaskLists+0x60>)
 8005650:	4413      	add	r3, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fcca 	bl	8003fec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3301      	adds	r3, #1
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b37      	cmp	r3, #55	; 0x37
 8005662:	d9ef      	bls.n	8005644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005664:	480d      	ldr	r0, [pc, #52]	; (800569c <prvInitialiseTaskLists+0x64>)
 8005666:	f7fe fcc1 	bl	8003fec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800566a:	480d      	ldr	r0, [pc, #52]	; (80056a0 <prvInitialiseTaskLists+0x68>)
 800566c:	f7fe fcbe 	bl	8003fec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005670:	480c      	ldr	r0, [pc, #48]	; (80056a4 <prvInitialiseTaskLists+0x6c>)
 8005672:	f7fe fcbb 	bl	8003fec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005676:	480c      	ldr	r0, [pc, #48]	; (80056a8 <prvInitialiseTaskLists+0x70>)
 8005678:	f7fe fcb8 	bl	8003fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800567c:	480b      	ldr	r0, [pc, #44]	; (80056ac <prvInitialiseTaskLists+0x74>)
 800567e:	f7fe fcb5 	bl	8003fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <prvInitialiseTaskLists+0x78>)
 8005684:	4a05      	ldr	r2, [pc, #20]	; (800569c <prvInitialiseTaskLists+0x64>)
 8005686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <prvInitialiseTaskLists+0x7c>)
 800568a:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <prvInitialiseTaskLists+0x68>)
 800568c:	601a      	str	r2, [r3, #0]
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	2000097c 	.word	0x2000097c
 800569c:	20000ddc 	.word	0x20000ddc
 80056a0:	20000df0 	.word	0x20000df0
 80056a4:	20000e0c 	.word	0x20000e0c
 80056a8:	20000e20 	.word	0x20000e20
 80056ac:	20000e38 	.word	0x20000e38
 80056b0:	20000e04 	.word	0x20000e04
 80056b4:	20000e08 	.word	0x20000e08

080056b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056be:	e019      	b.n	80056f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056c0:	f000 fdd8 	bl	8006274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c4:	4b10      	ldr	r3, [pc, #64]	; (8005708 <prvCheckTasksWaitingTermination+0x50>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fe fd15 	bl	8004100 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <prvCheckTasksWaitingTermination+0x54>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3b01      	subs	r3, #1
 80056dc:	4a0b      	ldr	r2, [pc, #44]	; (800570c <prvCheckTasksWaitingTermination+0x54>)
 80056de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <prvCheckTasksWaitingTermination+0x58>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	4a0a      	ldr	r2, [pc, #40]	; (8005710 <prvCheckTasksWaitingTermination+0x58>)
 80056e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056ea:	f000 fdf3 	bl	80062d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f810 	bl	8005714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <prvCheckTasksWaitingTermination+0x58>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e1      	bne.n	80056c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000e20 	.word	0x20000e20
 800570c:	20000e4c 	.word	0x20000e4c
 8005710:	20000e34 	.word	0x20000e34

08005714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3354      	adds	r3, #84	; 0x54
 8005720:	4618      	mov	r0, r3
 8005722:	f001 f9e3 	bl	8006aec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800572c:	2b00      	cmp	r3, #0
 800572e:	d108      	bne.n	8005742 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	4618      	mov	r0, r3
 8005736:	f000 ff8b 	bl	8006650 <vPortFree>
				vPortFree( pxTCB );
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 ff88 	bl	8006650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005740:	e018      	b.n	8005774 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005748:	2b01      	cmp	r3, #1
 800574a:	d103      	bne.n	8005754 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 ff7f 	bl	8006650 <vPortFree>
	}
 8005752:	e00f      	b.n	8005774 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800575a:	2b02      	cmp	r3, #2
 800575c:	d00a      	beq.n	8005774 <prvDeleteTCB+0x60>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	60fb      	str	r3, [r7, #12]
}
 8005770:	bf00      	nop
 8005772:	e7fe      	b.n	8005772 <prvDeleteTCB+0x5e>
	}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005782:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <prvResetNextTaskUnblockTime+0x38>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <prvResetNextTaskUnblockTime+0x3c>)
 800578e:	f04f 32ff 	mov.w	r2, #4294967295
 8005792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005794:	e008      	b.n	80057a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <prvResetNextTaskUnblockTime+0x38>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <prvResetNextTaskUnblockTime+0x3c>)
 80057a6:	6013      	str	r3, [r2, #0]
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	20000e04 	.word	0x20000e04
 80057b8:	20000e6c 	.word	0x20000e6c

080057bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <xTaskGetSchedulerState+0x34>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057ca:	2301      	movs	r3, #1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	e008      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d0:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <xTaskGetSchedulerState+0x38>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057d8:	2302      	movs	r3, #2
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e001      	b.n	80057e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057de:	2300      	movs	r3, #0
 80057e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057e2:	687b      	ldr	r3, [r7, #4]
	}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000e58 	.word	0x20000e58
 80057f4:	20000e74 	.word	0x20000e74

080057f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d056      	beq.n	80058bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800580e:	4b2e      	ldr	r3, [pc, #184]	; (80058c8 <xTaskPriorityDisinherit+0xd0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	429a      	cmp	r2, r3
 8005816:	d00a      	beq.n	800582e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	60fb      	str	r3, [r7, #12]
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	60bb      	str	r3, [r7, #8]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005850:	1e5a      	subs	r2, r3, #1
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585e:	429a      	cmp	r2, r3
 8005860:	d02c      	beq.n	80058bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005866:	2b00      	cmp	r3, #0
 8005868:	d128      	bne.n	80058bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	3304      	adds	r3, #4
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe fc46 	bl	8004100 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <xTaskPriorityDisinherit+0xd4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d903      	bls.n	800589c <xTaskPriorityDisinherit+0xa4>
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	4a0c      	ldr	r2, [pc, #48]	; (80058cc <xTaskPriorityDisinherit+0xd4>)
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <xTaskPriorityDisinherit+0xd8>)
 80058aa:	441a      	add	r2, r3
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7fe fbc7 	bl	8004046 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058bc:	697b      	ldr	r3, [r7, #20]
	}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000978 	.word	0x20000978
 80058cc:	20000e54 	.word	0x20000e54
 80058d0:	2000097c 	.word	0x2000097c

080058d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058de:	4b21      	ldr	r3, [pc, #132]	; (8005964 <prvAddCurrentTaskToDelayedList+0x90>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058e4:	4b20      	ldr	r3, [pc, #128]	; (8005968 <prvAddCurrentTaskToDelayedList+0x94>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fc08 	bl	8004100 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d10a      	bne.n	800590e <prvAddCurrentTaskToDelayedList+0x3a>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <prvAddCurrentTaskToDelayedList+0x94>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4819      	ldr	r0, [pc, #100]	; (800596c <prvAddCurrentTaskToDelayedList+0x98>)
 8005908:	f7fe fb9d 	bl	8004046 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800590c:	e026      	b.n	800595c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <prvAddCurrentTaskToDelayedList+0x94>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	429a      	cmp	r2, r3
 8005924:	d209      	bcs.n	800593a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <prvAddCurrentTaskToDelayedList+0x94>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f7fe fbab 	bl	800408e <vListInsert>
}
 8005938:	e010      	b.n	800595c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800593a:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <prvAddCurrentTaskToDelayedList+0x94>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f7fe fba1 	bl	800408e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	d202      	bcs.n	800595c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005956:	4a08      	ldr	r2, [pc, #32]	; (8005978 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6013      	str	r3, [r2, #0]
}
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000e50 	.word	0x20000e50
 8005968:	20000978 	.word	0x20000978
 800596c:	20000e38 	.word	0x20000e38
 8005970:	20000e08 	.word	0x20000e08
 8005974:	20000e04 	.word	0x20000e04
 8005978:	20000e6c 	.word	0x20000e6c

0800597c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	; 0x28
 8005980:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005986:	f000 fb07 	bl	8005f98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800598a:	4b1c      	ldr	r3, [pc, #112]	; (80059fc <xTimerCreateTimerTask+0x80>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d021      	beq.n	80059d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800599a:	1d3a      	adds	r2, r7, #4
 800599c:	f107 0108 	add.w	r1, r7, #8
 80059a0:	f107 030c 	add.w	r3, r7, #12
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fe fb07 	bl	8003fb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	9202      	str	r2, [sp, #8]
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	2302      	movs	r3, #2
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	2300      	movs	r3, #0
 80059ba:	460a      	mov	r2, r1
 80059bc:	4910      	ldr	r1, [pc, #64]	; (8005a00 <xTimerCreateTimerTask+0x84>)
 80059be:	4811      	ldr	r0, [pc, #68]	; (8005a04 <xTimerCreateTimerTask+0x88>)
 80059c0:	f7ff f8b4 	bl	8004b2c <xTaskCreateStatic>
 80059c4:	4603      	mov	r3, r0
 80059c6:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <xTimerCreateTimerTask+0x8c>)
 80059c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <xTimerCreateTimerTask+0x8c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059d2:	2301      	movs	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	613b      	str	r3, [r7, #16]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80059f2:	697b      	ldr	r3, [r7, #20]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20000ea8 	.word	0x20000ea8
 8005a00:	08007824 	.word	0x08007824
 8005a04:	08005b41 	.word	0x08005b41
 8005a08:	20000eac 	.word	0x20000eac

08005a0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	; 0x28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	623b      	str	r3, [r7, #32]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <xTimerGenericCommand+0x98>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d02a      	beq.n	8005a98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	dc18      	bgt.n	8005a86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a54:	f7ff feb2 	bl	80057bc <xTaskGetSchedulerState>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d109      	bne.n	8005a72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a5e:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <xTimerGenericCommand+0x98>)
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	f107 0110 	add.w	r1, r7, #16
 8005a66:	2300      	movs	r3, #0
 8005a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6a:	f7fe fc77 	bl	800435c <xQueueGenericSend>
 8005a6e:	6278      	str	r0, [r7, #36]	; 0x24
 8005a70:	e012      	b.n	8005a98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a72:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <xTimerGenericCommand+0x98>)
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	f107 0110 	add.w	r1, r7, #16
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f7fe fc6d 	bl	800435c <xQueueGenericSend>
 8005a82:	6278      	str	r0, [r7, #36]	; 0x24
 8005a84:	e008      	b.n	8005a98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a86:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <xTimerGenericCommand+0x98>)
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	f107 0110 	add.w	r1, r7, #16
 8005a8e:	2300      	movs	r3, #0
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	f7fe fd61 	bl	8004558 <xQueueGenericSendFromISR>
 8005a96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3728      	adds	r7, #40	; 0x28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000ea8 	.word	0x20000ea8

08005aa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab2:	4b22      	ldr	r3, [pc, #136]	; (8005b3c <prvProcessExpiredTimer+0x94>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe fb1d 	bl	8004100 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d022      	beq.n	8005b1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	18d1      	adds	r1, r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	6978      	ldr	r0, [r7, #20]
 8005ae2:	f000 f8d1 	bl	8005c88 <prvInsertTimerInActiveList>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01f      	beq.n	8005b2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005aec:	2300      	movs	r3, #0
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2300      	movs	r3, #0
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	2100      	movs	r1, #0
 8005af6:	6978      	ldr	r0, [r7, #20]
 8005af8:	f7ff ff88 	bl	8005a0c <xTimerGenericCommand>
 8005afc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d113      	bne.n	8005b2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	60fb      	str	r3, [r7, #12]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	6978      	ldr	r0, [r7, #20]
 8005b32:	4798      	blx	r3
}
 8005b34:	bf00      	nop
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000ea0 	.word	0x20000ea0

08005b40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b48:	f107 0308 	add.w	r3, r7, #8
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 f857 	bl	8005c00 <prvGetNextExpireTime>
 8005b52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4619      	mov	r1, r3
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f803 	bl	8005b64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b5e:	f000 f8d5 	bl	8005d0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b62:	e7f1      	b.n	8005b48 <prvTimerTask+0x8>

08005b64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b6e:	f7ff fa39 	bl	8004fe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b72:	f107 0308 	add.w	r3, r7, #8
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f866 	bl	8005c48 <prvSampleTimeNow>
 8005b7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d130      	bne.n	8005be6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <prvProcessTimerOrBlockTask+0x3c>
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d806      	bhi.n	8005ba0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b92:	f7ff fa35 	bl	8005000 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff85 	bl	8005aa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b9e:	e024      	b.n	8005bea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <prvProcessTimerOrBlockTask+0x90>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <prvProcessTimerOrBlockTask+0x50>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <prvProcessTimerOrBlockTask+0x52>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <prvProcessTimerOrBlockTask+0x94>)
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f7fe ff7d 	bl	8004ac4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bca:	f7ff fa19 	bl	8005000 <xTaskResumeAll>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <prvProcessTimerOrBlockTask+0x98>)
 8005bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	f3bf 8f6f 	isb	sy
}
 8005be4:	e001      	b.n	8005bea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005be6:	f7ff fa0b 	bl	8005000 <xTaskResumeAll>
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000ea4 	.word	0x20000ea4
 8005bf8:	20000ea8 	.word	0x20000ea8
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c08:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <prvGetNextExpireTime+0x44>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <prvGetNextExpireTime+0x16>
 8005c12:	2201      	movs	r2, #1
 8005c14:	e000      	b.n	8005c18 <prvGetNextExpireTime+0x18>
 8005c16:	2200      	movs	r2, #0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d105      	bne.n	8005c30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <prvGetNextExpireTime+0x44>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e001      	b.n	8005c34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000ea0 	.word	0x20000ea0

08005c48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c50:	f7ff fa74 	bl	800513c <xTaskGetTickCount>
 8005c54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <prvSampleTimeNow+0x3c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d205      	bcs.n	8005c6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c60:	f000 f936 	bl	8005ed0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c72:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <prvSampleTimeNow+0x3c>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c78:	68fb      	ldr	r3, [r7, #12]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000eb0 	.word	0x20000eb0

08005c88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d812      	bhi.n	8005cd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	1ad2      	subs	r2, r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d302      	bcc.n	8005cc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e01b      	b.n	8005cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cc2:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <prvInsertTimerInActiveList+0x7c>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f7fe f9de 	bl	800408e <vListInsert>
 8005cd2:	e012      	b.n	8005cfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d206      	bcs.n	8005cea <prvInsertTimerInActiveList+0x62>
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d302      	bcc.n	8005cea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e007      	b.n	8005cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cea:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <prvInsertTimerInActiveList+0x80>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f7fe f9ca 	bl	800408e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cfa:	697b      	ldr	r3, [r7, #20]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000ea4 	.word	0x20000ea4
 8005d08:	20000ea0 	.word	0x20000ea0

08005d0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	; 0x38
 8005d10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d12:	e0ca      	b.n	8005eaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da18      	bge.n	8005d4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10a      	bne.n	8005d3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	61fb      	str	r3, [r7, #28]
}
 8005d38:	bf00      	nop
 8005d3a:	e7fe      	b.n	8005d3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d42:	6850      	ldr	r0, [r2, #4]
 8005d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d46:	6892      	ldr	r2, [r2, #8]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f2c0 80ab 	blt.w	8005eaa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	3304      	adds	r3, #4
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fe f9cb 	bl	8004100 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff ff6b 	bl	8005c48 <prvSampleTimeNow>
 8005d72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	f200 8096 	bhi.w	8005ea8 <prvProcessReceivedCommands+0x19c>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <prvProcessReceivedCommands+0x78>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005dad 	.word	0x08005dad
 8005d90:	08005e21 	.word	0x08005e21
 8005d94:	08005e35 	.word	0x08005e35
 8005d98:	08005e7f 	.word	0x08005e7f
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005dad 	.word	0x08005dad
 8005da4:	08005e21 	.word	0x08005e21
 8005da8:	08005e35 	.word	0x08005e35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	18d1      	adds	r1, r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dcc:	f7ff ff5c 	bl	8005c88 <prvInsertTimerInActiveList>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d069      	beq.n	8005eaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ddc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d05e      	beq.n	8005eaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	441a      	add	r2, r3
 8005df4:	2300      	movs	r3, #0
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dfe:	f7ff fe05 	bl	8005a0c <xTimerGenericCommand>
 8005e02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d14f      	bne.n	8005eaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	61bb      	str	r3, [r7, #24]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005e32:	e03a      	b.n	8005eaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	617b      	str	r3, [r7, #20]
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	18d1      	adds	r1, r2, r3
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e78:	f7ff ff06 	bl	8005c88 <prvInsertTimerInActiveList>
					break;
 8005e7c:	e015      	b.n	8005eaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e8e:	f000 fbdf 	bl	8006650 <vPortFree>
 8005e92:	e00a      	b.n	8005eaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ea6:	e000      	b.n	8005eaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005ea8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eaa:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <prvProcessReceivedCommands+0x1c0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1d39      	adds	r1, r7, #4
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fbec 	bl	8004690 <xQueueReceive>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f47f af2a 	bne.w	8005d14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	3730      	adds	r7, #48	; 0x30
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000ea8 	.word	0x20000ea8

08005ed0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ed6:	e048      	b.n	8005f6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ed8:	4b2d      	ldr	r3, [pc, #180]	; (8005f90 <prvSwitchTimerLists+0xc0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee2:	4b2b      	ldr	r3, [pc, #172]	; (8005f90 <prvSwitchTimerLists+0xc0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe f905 	bl	8004100 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02e      	beq.n	8005f6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d90e      	bls.n	8005f3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f2a:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <prvSwitchTimerLists+0xc0>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7fe f8aa 	bl	800408e <vListInsert>
 8005f3a:	e016      	b.n	8005f6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	2100      	movs	r1, #0
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff fd60 	bl	8005a0c <xTimerGenericCommand>
 8005f4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	603b      	str	r3, [r7, #0]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f6a:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <prvSwitchTimerLists+0xc0>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1b1      	bne.n	8005ed8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <prvSwitchTimerLists+0xc0>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f7a:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <prvSwitchTimerLists+0xc0>)
 8005f80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f82:	4a04      	ldr	r2, [pc, #16]	; (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	6013      	str	r3, [r2, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000ea0 	.word	0x20000ea0
 8005f94:	20000ea4 	.word	0x20000ea4

08005f98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f9e:	f000 f969 	bl	8006274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fa2:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <prvCheckForValidListAndQueue+0x60>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d120      	bne.n	8005fec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005faa:	4814      	ldr	r0, [pc, #80]	; (8005ffc <prvCheckForValidListAndQueue+0x64>)
 8005fac:	f7fe f81e 	bl	8003fec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fb0:	4813      	ldr	r0, [pc, #76]	; (8006000 <prvCheckForValidListAndQueue+0x68>)
 8005fb2:	f7fe f81b 	bl	8003fec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <prvCheckForValidListAndQueue+0x6c>)
 8005fb8:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <prvCheckForValidListAndQueue+0x64>)
 8005fba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005fbc:	4b12      	ldr	r3, [pc, #72]	; (8006008 <prvCheckForValidListAndQueue+0x70>)
 8005fbe:	4a10      	ldr	r2, [pc, #64]	; (8006000 <prvCheckForValidListAndQueue+0x68>)
 8005fc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	4b11      	ldr	r3, [pc, #68]	; (800600c <prvCheckForValidListAndQueue+0x74>)
 8005fc8:	4a11      	ldr	r2, [pc, #68]	; (8006010 <prvCheckForValidListAndQueue+0x78>)
 8005fca:	2110      	movs	r1, #16
 8005fcc:	200a      	movs	r0, #10
 8005fce:	f7fe f929 	bl	8004224 <xQueueGenericCreateStatic>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <prvCheckForValidListAndQueue+0x60>)
 8005fd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005fd8:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <prvCheckForValidListAndQueue+0x60>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fe0:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <prvCheckForValidListAndQueue+0x60>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	490b      	ldr	r1, [pc, #44]	; (8006014 <prvCheckForValidListAndQueue+0x7c>)
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fd42 	bl	8004a70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fec:	f000 f972 	bl	80062d4 <vPortExitCritical>
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000ea8 	.word	0x20000ea8
 8005ffc:	20000e78 	.word	0x20000e78
 8006000:	20000e8c 	.word	0x20000e8c
 8006004:	20000ea0 	.word	0x20000ea0
 8006008:	20000ea4 	.word	0x20000ea4
 800600c:	20000f54 	.word	0x20000f54
 8006010:	20000eb4 	.word	0x20000eb4
 8006014:	0800782c 	.word	0x0800782c

08006018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3b04      	subs	r3, #4
 8006028:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3b04      	subs	r3, #4
 8006036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3b04      	subs	r3, #4
 8006046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006048:	4a0c      	ldr	r2, [pc, #48]	; (800607c <pxPortInitialiseStack+0x64>)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3b14      	subs	r3, #20
 8006052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3b04      	subs	r3, #4
 800605e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f06f 0202 	mvn.w	r2, #2
 8006066:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3b20      	subs	r3, #32
 800606c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800606e:	68fb      	ldr	r3, [r7, #12]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	08006081 	.word	0x08006081

08006080 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800608a:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <prvTaskExitError+0x54>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d00a      	beq.n	80060aa <prvTaskExitError+0x2a>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60fb      	str	r3, [r7, #12]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <prvTaskExitError+0x28>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	60bb      	str	r3, [r7, #8]
}
 80060bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060be:	bf00      	nop
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0fc      	beq.n	80060c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	2000000c 	.word	0x2000000c
	...

080060e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <pxCurrentTCBConst2>)
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	f380 8809 	msr	PSP, r0
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f380 8811 	msr	BASEPRI, r0
 80060fa:	4770      	bx	lr
 80060fc:	f3af 8000 	nop.w

08006100 <pxCurrentTCBConst2>:
 8006100:	20000978 	.word	0x20000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006108:	4808      	ldr	r0, [pc, #32]	; (800612c <prvPortStartFirstTask+0x24>)
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	6800      	ldr	r0, [r0, #0]
 800610e:	f380 8808 	msr	MSP, r0
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8814 	msr	CONTROL, r0
 800611a:	b662      	cpsie	i
 800611c:	b661      	cpsie	f
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	df00      	svc	0
 8006128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800612a:	bf00      	nop
 800612c:	e000ed08 	.word	0xe000ed08

08006130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006136:	4b46      	ldr	r3, [pc, #280]	; (8006250 <xPortStartScheduler+0x120>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a46      	ldr	r2, [pc, #280]	; (8006254 <xPortStartScheduler+0x124>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10a      	bne.n	8006156 <xPortStartScheduler+0x26>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	613b      	str	r3, [r7, #16]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006156:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <xPortStartScheduler+0x120>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a3f      	ldr	r2, [pc, #252]	; (8006258 <xPortStartScheduler+0x128>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d10a      	bne.n	8006176 <xPortStartScheduler+0x46>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	60fb      	str	r3, [r7, #12]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006176:	4b39      	ldr	r3, [pc, #228]	; (800625c <xPortStartScheduler+0x12c>)
 8006178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	22ff      	movs	r2, #255	; 0xff
 8006186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006198:	b2da      	uxtb	r2, r3
 800619a:	4b31      	ldr	r3, [pc, #196]	; (8006260 <xPortStartScheduler+0x130>)
 800619c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800619e:	4b31      	ldr	r3, [pc, #196]	; (8006264 <xPortStartScheduler+0x134>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061a4:	e009      	b.n	80061ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80061a6:	4b2f      	ldr	r3, [pc, #188]	; (8006264 <xPortStartScheduler+0x134>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	4a2d      	ldr	r2, [pc, #180]	; (8006264 <xPortStartScheduler+0x134>)
 80061ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c2:	2b80      	cmp	r3, #128	; 0x80
 80061c4:	d0ef      	beq.n	80061a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061c6:	4b27      	ldr	r3, [pc, #156]	; (8006264 <xPortStartScheduler+0x134>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1c3 0307 	rsb	r3, r3, #7
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d00a      	beq.n	80061e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	60bb      	str	r3, [r7, #8]
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <xPortStartScheduler+0x134>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	021b      	lsls	r3, r3, #8
 80061ee:	4a1d      	ldr	r2, [pc, #116]	; (8006264 <xPortStartScheduler+0x134>)
 80061f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061f2:	4b1c      	ldr	r3, [pc, #112]	; (8006264 <xPortStartScheduler+0x134>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061fa:	4a1a      	ldr	r2, [pc, #104]	; (8006264 <xPortStartScheduler+0x134>)
 80061fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006206:	4b18      	ldr	r3, [pc, #96]	; (8006268 <xPortStartScheduler+0x138>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a17      	ldr	r2, [pc, #92]	; (8006268 <xPortStartScheduler+0x138>)
 800620c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006212:	4b15      	ldr	r3, [pc, #84]	; (8006268 <xPortStartScheduler+0x138>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a14      	ldr	r2, [pc, #80]	; (8006268 <xPortStartScheduler+0x138>)
 8006218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800621c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800621e:	f000 f8dd 	bl	80063dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <xPortStartScheduler+0x13c>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006228:	f000 f8fc 	bl	8006424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800622c:	4b10      	ldr	r3, [pc, #64]	; (8006270 <xPortStartScheduler+0x140>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0f      	ldr	r2, [pc, #60]	; (8006270 <xPortStartScheduler+0x140>)
 8006232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006238:	f7ff ff66 	bl	8006108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800623c:	f7ff f848 	bl	80052d0 <vTaskSwitchContext>
	prvTaskExitError();
 8006240:	f7ff ff1e 	bl	8006080 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	e000ed00 	.word	0xe000ed00
 8006254:	410fc271 	.word	0x410fc271
 8006258:	410fc270 	.word	0x410fc270
 800625c:	e000e400 	.word	0xe000e400
 8006260:	20000fa4 	.word	0x20000fa4
 8006264:	20000fa8 	.word	0x20000fa8
 8006268:	e000ed20 	.word	0xe000ed20
 800626c:	2000000c 	.word	0x2000000c
 8006270:	e000ef34 	.word	0xe000ef34

08006274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	607b      	str	r3, [r7, #4]
}
 800628c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800628e:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <vPortEnterCritical+0x58>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3301      	adds	r3, #1
 8006294:	4a0d      	ldr	r2, [pc, #52]	; (80062cc <vPortEnterCritical+0x58>)
 8006296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006298:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <vPortEnterCritical+0x58>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d10f      	bne.n	80062c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <vPortEnterCritical+0x5c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	603b      	str	r3, [r7, #0]
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <vPortEnterCritical+0x4a>
	}
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	2000000c 	.word	0x2000000c
 80062d0:	e000ed04 	.word	0xe000ed04

080062d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <vPortExitCritical+0x50>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <vPortExitCritical+0x24>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	607b      	str	r3, [r7, #4]
}
 80062f4:	bf00      	nop
 80062f6:	e7fe      	b.n	80062f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <vPortExitCritical+0x50>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	4a09      	ldr	r2, [pc, #36]	; (8006324 <vPortExitCritical+0x50>)
 8006300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <vPortExitCritical+0x50>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <vPortExitCritical+0x42>
 800630a:	2300      	movs	r3, #0
 800630c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	f383 8811 	msr	BASEPRI, r3
}
 8006314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	2000000c 	.word	0x2000000c
	...

08006330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006330:	f3ef 8009 	mrs	r0, PSP
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4b15      	ldr	r3, [pc, #84]	; (8006390 <pxCurrentTCBConst>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	f01e 0f10 	tst.w	lr, #16
 8006340:	bf08      	it	eq
 8006342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	6010      	str	r0, [r2, #0]
 800634c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006354:	f380 8811 	msr	BASEPRI, r0
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f7fe ffb6 	bl	80052d0 <vTaskSwitchContext>
 8006364:	f04f 0000 	mov.w	r0, #0
 8006368:	f380 8811 	msr	BASEPRI, r0
 800636c:	bc09      	pop	{r0, r3}
 800636e:	6819      	ldr	r1, [r3, #0]
 8006370:	6808      	ldr	r0, [r1, #0]
 8006372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006376:	f01e 0f10 	tst.w	lr, #16
 800637a:	bf08      	it	eq
 800637c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006380:	f380 8809 	msr	PSP, r0
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	f3af 8000 	nop.w

08006390 <pxCurrentTCBConst>:
 8006390:	20000978 	.word	0x20000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop

08006398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	607b      	str	r3, [r7, #4]
}
 80063b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063b2:	f7fe fed3 	bl	800515c <xTaskIncrementTick>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063bc:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <xPortSysTickHandler+0x40>)
 80063be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	2300      	movs	r3, #0
 80063c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f383 8811 	msr	BASEPRI, r3
}
 80063ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <vPortSetupTimerInterrupt+0x34>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <vPortSetupTimerInterrupt+0x38>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <vPortSetupTimerInterrupt+0x3c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a0a      	ldr	r2, [pc, #40]	; (800641c <vPortSetupTimerInterrupt+0x40>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	099b      	lsrs	r3, r3, #6
 80063f8:	4a09      	ldr	r2, [pc, #36]	; (8006420 <vPortSetupTimerInterrupt+0x44>)
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063fe:	4b04      	ldr	r3, [pc, #16]	; (8006410 <vPortSetupTimerInterrupt+0x34>)
 8006400:	2207      	movs	r2, #7
 8006402:	601a      	str	r2, [r3, #0]
}
 8006404:	bf00      	nop
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	e000e010 	.word	0xe000e010
 8006414:	e000e018 	.word	0xe000e018
 8006418:	20000000 	.word	0x20000000
 800641c:	10624dd3 	.word	0x10624dd3
 8006420:	e000e014 	.word	0xe000e014

08006424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006434 <vPortEnableVFP+0x10>
 8006428:	6801      	ldr	r1, [r0, #0]
 800642a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800642e:	6001      	str	r1, [r0, #0]
 8006430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006432:	bf00      	nop
 8006434:	e000ed88 	.word	0xe000ed88

08006438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800643e:	f3ef 8305 	mrs	r3, IPSR
 8006442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b0f      	cmp	r3, #15
 8006448:	d914      	bls.n	8006474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800644a:	4a17      	ldr	r2, [pc, #92]	; (80064a8 <vPortValidateInterruptPriority+0x70>)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006454:	4b15      	ldr	r3, [pc, #84]	; (80064ac <vPortValidateInterruptPriority+0x74>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	7afa      	ldrb	r2, [r7, #11]
 800645a:	429a      	cmp	r2, r3
 800645c:	d20a      	bcs.n	8006474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	607b      	str	r3, [r7, #4]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006474:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <vPortValidateInterruptPriority+0x78>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <vPortValidateInterruptPriority+0x7c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d90a      	bls.n	800649a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	603b      	str	r3, [r7, #0]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <vPortValidateInterruptPriority+0x60>
	}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	e000e3f0 	.word	0xe000e3f0
 80064ac:	20000fa4 	.word	0x20000fa4
 80064b0:	e000ed0c 	.word	0xe000ed0c
 80064b4:	20000fa8 	.word	0x20000fa8

080064b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	; 0x28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064c4:	f7fe fd8e 	bl	8004fe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064c8:	4b5b      	ldr	r3, [pc, #364]	; (8006638 <pvPortMalloc+0x180>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064d0:	f000 f920 	bl	8006714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064d4:	4b59      	ldr	r3, [pc, #356]	; (800663c <pvPortMalloc+0x184>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 8093 	bne.w	8006608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01d      	beq.n	8006524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80064e8:	2208      	movs	r2, #8
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4413      	add	r3, r2
 80064ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d014      	beq.n	8006524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f023 0307 	bic.w	r3, r3, #7
 8006500:	3308      	adds	r3, #8
 8006502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <pvPortMalloc+0x6c>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	617b      	str	r3, [r7, #20]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06e      	beq.n	8006608 <pvPortMalloc+0x150>
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <pvPortMalloc+0x188>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d869      	bhi.n	8006608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006534:	4b43      	ldr	r3, [pc, #268]	; (8006644 <pvPortMalloc+0x18c>)
 8006536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006538:	4b42      	ldr	r3, [pc, #264]	; (8006644 <pvPortMalloc+0x18c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800653e:	e004      	b.n	800654a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d903      	bls.n	800655c <pvPortMalloc+0xa4>
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f1      	bne.n	8006540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800655c:	4b36      	ldr	r3, [pc, #216]	; (8006638 <pvPortMalloc+0x180>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006562:	429a      	cmp	r2, r3
 8006564:	d050      	beq.n	8006608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2208      	movs	r2, #8
 800656c:	4413      	add	r3, r2
 800656e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	2308      	movs	r3, #8
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	429a      	cmp	r2, r3
 8006586:	d91f      	bls.n	80065c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <pvPortMalloc+0xf8>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	613b      	str	r3, [r7, #16]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065c2:	69b8      	ldr	r0, [r7, #24]
 80065c4:	f000 f908 	bl	80067d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065c8:	4b1d      	ldr	r3, [pc, #116]	; (8006640 <pvPortMalloc+0x188>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <pvPortMalloc+0x188>)
 80065d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065d6:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <pvPortMalloc+0x188>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <pvPortMalloc+0x190>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d203      	bcs.n	80065ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065e2:	4b17      	ldr	r3, [pc, #92]	; (8006640 <pvPortMalloc+0x188>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a18      	ldr	r2, [pc, #96]	; (8006648 <pvPortMalloc+0x190>)
 80065e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	4b13      	ldr	r3, [pc, #76]	; (800663c <pvPortMalloc+0x184>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065fe:	4b13      	ldr	r3, [pc, #76]	; (800664c <pvPortMalloc+0x194>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a11      	ldr	r2, [pc, #68]	; (800664c <pvPortMalloc+0x194>)
 8006606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006608:	f7fe fcfa 	bl	8005000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <pvPortMalloc+0x174>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	60fb      	str	r3, [r7, #12]
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <pvPortMalloc+0x172>
	return pvReturn;
 800662c:	69fb      	ldr	r3, [r7, #28]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20004bb4 	.word	0x20004bb4
 800663c:	20004bc8 	.word	0x20004bc8
 8006640:	20004bb8 	.word	0x20004bb8
 8006644:	20004bac 	.word	0x20004bac
 8006648:	20004bbc 	.word	0x20004bbc
 800664c:	20004bc0 	.word	0x20004bc0

08006650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d04d      	beq.n	80066fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006662:	2308      	movs	r3, #8
 8006664:	425b      	negs	r3, r3
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	4b24      	ldr	r3, [pc, #144]	; (8006708 <vPortFree+0xb8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4013      	ands	r3, r2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <vPortFree+0x44>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60fb      	str	r3, [r7, #12]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <vPortFree+0x62>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	60bb      	str	r3, [r7, #8]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <vPortFree+0xb8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01e      	beq.n	80066fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d11a      	bne.n	80066fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <vPortFree+0xb8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	43db      	mvns	r3, r3
 80066d2:	401a      	ands	r2, r3
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066d8:	f7fe fc84 	bl	8004fe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <vPortFree+0xbc>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4413      	add	r3, r2
 80066e6:	4a09      	ldr	r2, [pc, #36]	; (800670c <vPortFree+0xbc>)
 80066e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066ea:	6938      	ldr	r0, [r7, #16]
 80066ec:	f000 f874 	bl	80067d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066f0:	4b07      	ldr	r3, [pc, #28]	; (8006710 <vPortFree+0xc0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3301      	adds	r3, #1
 80066f6:	4a06      	ldr	r2, [pc, #24]	; (8006710 <vPortFree+0xc0>)
 80066f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066fa:	f7fe fc81 	bl	8005000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20004bc8 	.word	0x20004bc8
 800670c:	20004bb8 	.word	0x20004bb8
 8006710:	20004bc4 	.word	0x20004bc4

08006714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800671a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800671e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006720:	4b27      	ldr	r3, [pc, #156]	; (80067c0 <prvHeapInit+0xac>)
 8006722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00c      	beq.n	8006748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3307      	adds	r3, #7
 8006732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0307 	bic.w	r3, r3, #7
 800673a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <prvHeapInit+0xac>)
 8006744:	4413      	add	r3, r2
 8006746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800674c:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <prvHeapInit+0xb0>)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006752:	4b1c      	ldr	r3, [pc, #112]	; (80067c4 <prvHeapInit+0xb0>)
 8006754:	2200      	movs	r2, #0
 8006756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	4413      	add	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006760:	2208      	movs	r2, #8
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0307 	bic.w	r3, r3, #7
 800676e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <prvHeapInit+0xb4>)
 8006774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <prvHeapInit+0xb4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2200      	movs	r2, #0
 800677c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800677e:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <prvHeapInit+0xb4>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006794:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <prvHeapInit+0xb4>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <prvHeapInit+0xb8>)
 80067a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <prvHeapInit+0xbc>)
 80067aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <prvHeapInit+0xc0>)
 80067ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067b2:	601a      	str	r2, [r3, #0]
}
 80067b4:	bf00      	nop
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	20000fac 	.word	0x20000fac
 80067c4:	20004bac 	.word	0x20004bac
 80067c8:	20004bb4 	.word	0x20004bb4
 80067cc:	20004bbc 	.word	0x20004bbc
 80067d0:	20004bb8 	.word	0x20004bb8
 80067d4:	20004bc8 	.word	0x20004bc8

080067d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067e0:	4b28      	ldr	r3, [pc, #160]	; (8006884 <prvInsertBlockIntoFreeList+0xac>)
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e002      	b.n	80067ec <prvInsertBlockIntoFreeList+0x14>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d8f7      	bhi.n	80067e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	4413      	add	r3, r2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	429a      	cmp	r2, r3
 8006806:	d108      	bne.n	800681a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	441a      	add	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d118      	bne.n	8006860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <prvInsertBlockIntoFreeList+0xb0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d00d      	beq.n	8006856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	441a      	add	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e008      	b.n	8006868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <prvInsertBlockIntoFreeList+0xb0>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e003      	b.n	8006868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	429a      	cmp	r2, r3
 800686e:	d002      	beq.n	8006876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006876:	bf00      	nop
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20004bac 	.word	0x20004bac
 8006888:	20004bb4 	.word	0x20004bb4

0800688c <std>:
 800688c:	2300      	movs	r3, #0
 800688e:	b510      	push	{r4, lr}
 8006890:	4604      	mov	r4, r0
 8006892:	e9c0 3300 	strd	r3, r3, [r0]
 8006896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800689a:	6083      	str	r3, [r0, #8]
 800689c:	8181      	strh	r1, [r0, #12]
 800689e:	6643      	str	r3, [r0, #100]	; 0x64
 80068a0:	81c2      	strh	r2, [r0, #14]
 80068a2:	6183      	str	r3, [r0, #24]
 80068a4:	4619      	mov	r1, r3
 80068a6:	2208      	movs	r2, #8
 80068a8:	305c      	adds	r0, #92	; 0x5c
 80068aa:	f000 f906 	bl	8006aba <memset>
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <std+0x58>)
 80068b0:	6263      	str	r3, [r4, #36]	; 0x24
 80068b2:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <std+0x5c>)
 80068b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <std+0x60>)
 80068b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068ba:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <std+0x64>)
 80068bc:	6323      	str	r3, [r4, #48]	; 0x30
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <std+0x68>)
 80068c0:	6224      	str	r4, [r4, #32]
 80068c2:	429c      	cmp	r4, r3
 80068c4:	d006      	beq.n	80068d4 <std+0x48>
 80068c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80068ca:	4294      	cmp	r4, r2
 80068cc:	d002      	beq.n	80068d4 <std+0x48>
 80068ce:	33d0      	adds	r3, #208	; 0xd0
 80068d0:	429c      	cmp	r4, r3
 80068d2:	d105      	bne.n	80068e0 <std+0x54>
 80068d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	f000 b9bc 	b.w	8006c58 <__retarget_lock_init_recursive>
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	bf00      	nop
 80068e4:	08006a35 	.word	0x08006a35
 80068e8:	08006a57 	.word	0x08006a57
 80068ec:	08006a8f 	.word	0x08006a8f
 80068f0:	08006ab3 	.word	0x08006ab3
 80068f4:	20004bcc 	.word	0x20004bcc

080068f8 <stdio_exit_handler>:
 80068f8:	4a02      	ldr	r2, [pc, #8]	; (8006904 <stdio_exit_handler+0xc>)
 80068fa:	4903      	ldr	r1, [pc, #12]	; (8006908 <stdio_exit_handler+0x10>)
 80068fc:	4803      	ldr	r0, [pc, #12]	; (800690c <stdio_exit_handler+0x14>)
 80068fe:	f000 b869 	b.w	80069d4 <_fwalk_sglue>
 8006902:	bf00      	nop
 8006904:	20000010 	.word	0x20000010
 8006908:	08007521 	.word	0x08007521
 800690c:	2000001c 	.word	0x2000001c

08006910 <cleanup_stdio>:
 8006910:	6841      	ldr	r1, [r0, #4]
 8006912:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <cleanup_stdio+0x34>)
 8006914:	4299      	cmp	r1, r3
 8006916:	b510      	push	{r4, lr}
 8006918:	4604      	mov	r4, r0
 800691a:	d001      	beq.n	8006920 <cleanup_stdio+0x10>
 800691c:	f000 fe00 	bl	8007520 <_fflush_r>
 8006920:	68a1      	ldr	r1, [r4, #8]
 8006922:	4b09      	ldr	r3, [pc, #36]	; (8006948 <cleanup_stdio+0x38>)
 8006924:	4299      	cmp	r1, r3
 8006926:	d002      	beq.n	800692e <cleanup_stdio+0x1e>
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fdf9 	bl	8007520 <_fflush_r>
 800692e:	68e1      	ldr	r1, [r4, #12]
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <cleanup_stdio+0x3c>)
 8006932:	4299      	cmp	r1, r3
 8006934:	d004      	beq.n	8006940 <cleanup_stdio+0x30>
 8006936:	4620      	mov	r0, r4
 8006938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800693c:	f000 bdf0 	b.w	8007520 <_fflush_r>
 8006940:	bd10      	pop	{r4, pc}
 8006942:	bf00      	nop
 8006944:	20004bcc 	.word	0x20004bcc
 8006948:	20004c34 	.word	0x20004c34
 800694c:	20004c9c 	.word	0x20004c9c

08006950 <global_stdio_init.part.0>:
 8006950:	b510      	push	{r4, lr}
 8006952:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <global_stdio_init.part.0+0x30>)
 8006954:	4c0b      	ldr	r4, [pc, #44]	; (8006984 <global_stdio_init.part.0+0x34>)
 8006956:	4a0c      	ldr	r2, [pc, #48]	; (8006988 <global_stdio_init.part.0+0x38>)
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	4620      	mov	r0, r4
 800695c:	2200      	movs	r2, #0
 800695e:	2104      	movs	r1, #4
 8006960:	f7ff ff94 	bl	800688c <std>
 8006964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006968:	2201      	movs	r2, #1
 800696a:	2109      	movs	r1, #9
 800696c:	f7ff ff8e 	bl	800688c <std>
 8006970:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006974:	2202      	movs	r2, #2
 8006976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800697a:	2112      	movs	r1, #18
 800697c:	f7ff bf86 	b.w	800688c <std>
 8006980:	20004d04 	.word	0x20004d04
 8006984:	20004bcc 	.word	0x20004bcc
 8006988:	080068f9 	.word	0x080068f9

0800698c <__sfp_lock_acquire>:
 800698c:	4801      	ldr	r0, [pc, #4]	; (8006994 <__sfp_lock_acquire+0x8>)
 800698e:	f000 b964 	b.w	8006c5a <__retarget_lock_acquire_recursive>
 8006992:	bf00      	nop
 8006994:	20004d0d 	.word	0x20004d0d

08006998 <__sfp_lock_release>:
 8006998:	4801      	ldr	r0, [pc, #4]	; (80069a0 <__sfp_lock_release+0x8>)
 800699a:	f000 b95f 	b.w	8006c5c <__retarget_lock_release_recursive>
 800699e:	bf00      	nop
 80069a0:	20004d0d 	.word	0x20004d0d

080069a4 <__sinit>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4604      	mov	r4, r0
 80069a8:	f7ff fff0 	bl	800698c <__sfp_lock_acquire>
 80069ac:	6a23      	ldr	r3, [r4, #32]
 80069ae:	b11b      	cbz	r3, 80069b8 <__sinit+0x14>
 80069b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b4:	f7ff bff0 	b.w	8006998 <__sfp_lock_release>
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <__sinit+0x28>)
 80069ba:	6223      	str	r3, [r4, #32]
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <__sinit+0x2c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1f5      	bne.n	80069b0 <__sinit+0xc>
 80069c4:	f7ff ffc4 	bl	8006950 <global_stdio_init.part.0>
 80069c8:	e7f2      	b.n	80069b0 <__sinit+0xc>
 80069ca:	bf00      	nop
 80069cc:	08006911 	.word	0x08006911
 80069d0:	20004d04 	.word	0x20004d04

080069d4 <_fwalk_sglue>:
 80069d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	4607      	mov	r7, r0
 80069da:	4688      	mov	r8, r1
 80069dc:	4614      	mov	r4, r2
 80069de:	2600      	movs	r6, #0
 80069e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e4:	f1b9 0901 	subs.w	r9, r9, #1
 80069e8:	d505      	bpl.n	80069f6 <_fwalk_sglue+0x22>
 80069ea:	6824      	ldr	r4, [r4, #0]
 80069ec:	2c00      	cmp	r4, #0
 80069ee:	d1f7      	bne.n	80069e0 <_fwalk_sglue+0xc>
 80069f0:	4630      	mov	r0, r6
 80069f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f6:	89ab      	ldrh	r3, [r5, #12]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d907      	bls.n	8006a0c <_fwalk_sglue+0x38>
 80069fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a00:	3301      	adds	r3, #1
 8006a02:	d003      	beq.n	8006a0c <_fwalk_sglue+0x38>
 8006a04:	4629      	mov	r1, r5
 8006a06:	4638      	mov	r0, r7
 8006a08:	47c0      	blx	r8
 8006a0a:	4306      	orrs	r6, r0
 8006a0c:	3568      	adds	r5, #104	; 0x68
 8006a0e:	e7e9      	b.n	80069e4 <_fwalk_sglue+0x10>

08006a10 <iprintf>:
 8006a10:	b40f      	push	{r0, r1, r2, r3}
 8006a12:	b507      	push	{r0, r1, r2, lr}
 8006a14:	4906      	ldr	r1, [pc, #24]	; (8006a30 <iprintf+0x20>)
 8006a16:	ab04      	add	r3, sp, #16
 8006a18:	6808      	ldr	r0, [r1, #0]
 8006a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1e:	6881      	ldr	r1, [r0, #8]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	f000 fa4d 	bl	8006ec0 <_vfiprintf_r>
 8006a26:	b003      	add	sp, #12
 8006a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a2c:	b004      	add	sp, #16
 8006a2e:	4770      	bx	lr
 8006a30:	20000068 	.word	0x20000068

08006a34 <__sread>:
 8006a34:	b510      	push	{r4, lr}
 8006a36:	460c      	mov	r4, r1
 8006a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3c:	f000 f8be 	bl	8006bbc <_read_r>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	bfab      	itete	ge
 8006a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a46:	89a3      	ldrhlt	r3, [r4, #12]
 8006a48:	181b      	addge	r3, r3, r0
 8006a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a4e:	bfac      	ite	ge
 8006a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a52:	81a3      	strhlt	r3, [r4, #12]
 8006a54:	bd10      	pop	{r4, pc}

08006a56 <__swrite>:
 8006a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5a:	461f      	mov	r7, r3
 8006a5c:	898b      	ldrh	r3, [r1, #12]
 8006a5e:	05db      	lsls	r3, r3, #23
 8006a60:	4605      	mov	r5, r0
 8006a62:	460c      	mov	r4, r1
 8006a64:	4616      	mov	r6, r2
 8006a66:	d505      	bpl.n	8006a74 <__swrite+0x1e>
 8006a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f000 f892 	bl	8006b98 <_lseek_r>
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	4632      	mov	r2, r6
 8006a82:	463b      	mov	r3, r7
 8006a84:	4628      	mov	r0, r5
 8006a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8a:	f000 b8a9 	b.w	8006be0 <_write_r>

08006a8e <__sseek>:
 8006a8e:	b510      	push	{r4, lr}
 8006a90:	460c      	mov	r4, r1
 8006a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a96:	f000 f87f 	bl	8006b98 <_lseek_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	bf15      	itete	ne
 8006aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aaa:	81a3      	strheq	r3, [r4, #12]
 8006aac:	bf18      	it	ne
 8006aae:	81a3      	strhne	r3, [r4, #12]
 8006ab0:	bd10      	pop	{r4, pc}

08006ab2 <__sclose>:
 8006ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab6:	f000 b809 	b.w	8006acc <_close_r>

08006aba <memset>:
 8006aba:	4402      	add	r2, r0
 8006abc:	4603      	mov	r3, r0
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d100      	bne.n	8006ac4 <memset+0xa>
 8006ac2:	4770      	bx	lr
 8006ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac8:	e7f9      	b.n	8006abe <memset+0x4>
	...

08006acc <_close_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d06      	ldr	r5, [pc, #24]	; (8006ae8 <_close_r+0x1c>)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fa fa21 	bl	8000f1e <_close>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_close_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_close_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20004d08 	.word	0x20004d08

08006aec <_reclaim_reent>:
 8006aec:	4b29      	ldr	r3, [pc, #164]	; (8006b94 <_reclaim_reent+0xa8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4283      	cmp	r3, r0
 8006af2:	b570      	push	{r4, r5, r6, lr}
 8006af4:	4604      	mov	r4, r0
 8006af6:	d04b      	beq.n	8006b90 <_reclaim_reent+0xa4>
 8006af8:	69c3      	ldr	r3, [r0, #28]
 8006afa:	b143      	cbz	r3, 8006b0e <_reclaim_reent+0x22>
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d144      	bne.n	8006b8c <_reclaim_reent+0xa0>
 8006b02:	69e3      	ldr	r3, [r4, #28]
 8006b04:	6819      	ldr	r1, [r3, #0]
 8006b06:	b111      	cbz	r1, 8006b0e <_reclaim_reent+0x22>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 f8b7 	bl	8006c7c <_free_r>
 8006b0e:	6961      	ldr	r1, [r4, #20]
 8006b10:	b111      	cbz	r1, 8006b18 <_reclaim_reent+0x2c>
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 f8b2 	bl	8006c7c <_free_r>
 8006b18:	69e1      	ldr	r1, [r4, #28]
 8006b1a:	b111      	cbz	r1, 8006b22 <_reclaim_reent+0x36>
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 f8ad 	bl	8006c7c <_free_r>
 8006b22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006b24:	b111      	cbz	r1, 8006b2c <_reclaim_reent+0x40>
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 f8a8 	bl	8006c7c <_free_r>
 8006b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b2e:	b111      	cbz	r1, 8006b36 <_reclaim_reent+0x4a>
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 f8a3 	bl	8006c7c <_free_r>
 8006b36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b38:	b111      	cbz	r1, 8006b40 <_reclaim_reent+0x54>
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 f89e 	bl	8006c7c <_free_r>
 8006b40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b42:	b111      	cbz	r1, 8006b4a <_reclaim_reent+0x5e>
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 f899 	bl	8006c7c <_free_r>
 8006b4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006b4c:	b111      	cbz	r1, 8006b54 <_reclaim_reent+0x68>
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f000 f894 	bl	8006c7c <_free_r>
 8006b54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006b56:	b111      	cbz	r1, 8006b5e <_reclaim_reent+0x72>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 f88f 	bl	8006c7c <_free_r>
 8006b5e:	6a23      	ldr	r3, [r4, #32]
 8006b60:	b1b3      	cbz	r3, 8006b90 <_reclaim_reent+0xa4>
 8006b62:	4620      	mov	r0, r4
 8006b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b68:	4718      	bx	r3
 8006b6a:	5949      	ldr	r1, [r1, r5]
 8006b6c:	b941      	cbnz	r1, 8006b80 <_reclaim_reent+0x94>
 8006b6e:	3504      	adds	r5, #4
 8006b70:	69e3      	ldr	r3, [r4, #28]
 8006b72:	2d80      	cmp	r5, #128	; 0x80
 8006b74:	68d9      	ldr	r1, [r3, #12]
 8006b76:	d1f8      	bne.n	8006b6a <_reclaim_reent+0x7e>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 f87f 	bl	8006c7c <_free_r>
 8006b7e:	e7c0      	b.n	8006b02 <_reclaim_reent+0x16>
 8006b80:	680e      	ldr	r6, [r1, #0]
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 f87a 	bl	8006c7c <_free_r>
 8006b88:	4631      	mov	r1, r6
 8006b8a:	e7ef      	b.n	8006b6c <_reclaim_reent+0x80>
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	e7ef      	b.n	8006b70 <_reclaim_reent+0x84>
 8006b90:	bd70      	pop	{r4, r5, r6, pc}
 8006b92:	bf00      	nop
 8006b94:	20000068 	.word	0x20000068

08006b98 <_lseek_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4d07      	ldr	r5, [pc, #28]	; (8006bb8 <_lseek_r+0x20>)
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	4608      	mov	r0, r1
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	602a      	str	r2, [r5, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f7fa f9e0 	bl	8000f6c <_lseek>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_lseek_r+0x1e>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_lseek_r+0x1e>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	20004d08 	.word	0x20004d08

08006bbc <_read_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d07      	ldr	r5, [pc, #28]	; (8006bdc <_read_r+0x20>)
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	4608      	mov	r0, r1
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	602a      	str	r2, [r5, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f7fa f96e 	bl	8000eac <_read>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d102      	bne.n	8006bda <_read_r+0x1e>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	b103      	cbz	r3, 8006bda <_read_r+0x1e>
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	20004d08 	.word	0x20004d08

08006be0 <_write_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d07      	ldr	r5, [pc, #28]	; (8006c00 <_write_r+0x20>)
 8006be4:	4604      	mov	r4, r0
 8006be6:	4608      	mov	r0, r1
 8006be8:	4611      	mov	r1, r2
 8006bea:	2200      	movs	r2, #0
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f7fa f979 	bl	8000ee6 <_write>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_write_r+0x1e>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_write_r+0x1e>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	20004d08 	.word	0x20004d08

08006c04 <__errno>:
 8006c04:	4b01      	ldr	r3, [pc, #4]	; (8006c0c <__errno+0x8>)
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20000068 	.word	0x20000068

08006c10 <__libc_init_array>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4d0d      	ldr	r5, [pc, #52]	; (8006c48 <__libc_init_array+0x38>)
 8006c14:	4c0d      	ldr	r4, [pc, #52]	; (8006c4c <__libc_init_array+0x3c>)
 8006c16:	1b64      	subs	r4, r4, r5
 8006c18:	10a4      	asrs	r4, r4, #2
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d109      	bne.n	8006c34 <__libc_init_array+0x24>
 8006c20:	4d0b      	ldr	r5, [pc, #44]	; (8006c50 <__libc_init_array+0x40>)
 8006c22:	4c0c      	ldr	r4, [pc, #48]	; (8006c54 <__libc_init_array+0x44>)
 8006c24:	f000 fdce 	bl	80077c4 <_init>
 8006c28:	1b64      	subs	r4, r4, r5
 8006c2a:	10a4      	asrs	r4, r4, #2
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	42a6      	cmp	r6, r4
 8006c30:	d105      	bne.n	8006c3e <__libc_init_array+0x2e>
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c38:	4798      	blx	r3
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7ee      	b.n	8006c1c <__libc_init_array+0xc>
 8006c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c42:	4798      	blx	r3
 8006c44:	3601      	adds	r6, #1
 8006c46:	e7f2      	b.n	8006c2e <__libc_init_array+0x1e>
 8006c48:	08007908 	.word	0x08007908
 8006c4c:	08007908 	.word	0x08007908
 8006c50:	08007908 	.word	0x08007908
 8006c54:	0800790c 	.word	0x0800790c

08006c58 <__retarget_lock_init_recursive>:
 8006c58:	4770      	bx	lr

08006c5a <__retarget_lock_acquire_recursive>:
 8006c5a:	4770      	bx	lr

08006c5c <__retarget_lock_release_recursive>:
 8006c5c:	4770      	bx	lr

08006c5e <memcpy>:
 8006c5e:	440a      	add	r2, r1
 8006c60:	4291      	cmp	r1, r2
 8006c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c66:	d100      	bne.n	8006c6a <memcpy+0xc>
 8006c68:	4770      	bx	lr
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c74:	4291      	cmp	r1, r2
 8006c76:	d1f9      	bne.n	8006c6c <memcpy+0xe>
 8006c78:	bd10      	pop	{r4, pc}
	...

08006c7c <_free_r>:
 8006c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c7e:	2900      	cmp	r1, #0
 8006c80:	d044      	beq.n	8006d0c <_free_r+0x90>
 8006c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c86:	9001      	str	r0, [sp, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c8e:	bfb8      	it	lt
 8006c90:	18e4      	addlt	r4, r4, r3
 8006c92:	f000 f8df 	bl	8006e54 <__malloc_lock>
 8006c96:	4a1e      	ldr	r2, [pc, #120]	; (8006d10 <_free_r+0x94>)
 8006c98:	9801      	ldr	r0, [sp, #4]
 8006c9a:	6813      	ldr	r3, [r2, #0]
 8006c9c:	b933      	cbnz	r3, 8006cac <_free_r+0x30>
 8006c9e:	6063      	str	r3, [r4, #4]
 8006ca0:	6014      	str	r4, [r2, #0]
 8006ca2:	b003      	add	sp, #12
 8006ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ca8:	f000 b8da 	b.w	8006e60 <__malloc_unlock>
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d908      	bls.n	8006cc2 <_free_r+0x46>
 8006cb0:	6825      	ldr	r5, [r4, #0]
 8006cb2:	1961      	adds	r1, r4, r5
 8006cb4:	428b      	cmp	r3, r1
 8006cb6:	bf01      	itttt	eq
 8006cb8:	6819      	ldreq	r1, [r3, #0]
 8006cba:	685b      	ldreq	r3, [r3, #4]
 8006cbc:	1949      	addeq	r1, r1, r5
 8006cbe:	6021      	streq	r1, [r4, #0]
 8006cc0:	e7ed      	b.n	8006c9e <_free_r+0x22>
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	b10b      	cbz	r3, 8006ccc <_free_r+0x50>
 8006cc8:	42a3      	cmp	r3, r4
 8006cca:	d9fa      	bls.n	8006cc2 <_free_r+0x46>
 8006ccc:	6811      	ldr	r1, [r2, #0]
 8006cce:	1855      	adds	r5, r2, r1
 8006cd0:	42a5      	cmp	r5, r4
 8006cd2:	d10b      	bne.n	8006cec <_free_r+0x70>
 8006cd4:	6824      	ldr	r4, [r4, #0]
 8006cd6:	4421      	add	r1, r4
 8006cd8:	1854      	adds	r4, r2, r1
 8006cda:	42a3      	cmp	r3, r4
 8006cdc:	6011      	str	r1, [r2, #0]
 8006cde:	d1e0      	bne.n	8006ca2 <_free_r+0x26>
 8006ce0:	681c      	ldr	r4, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	6053      	str	r3, [r2, #4]
 8006ce6:	440c      	add	r4, r1
 8006ce8:	6014      	str	r4, [r2, #0]
 8006cea:	e7da      	b.n	8006ca2 <_free_r+0x26>
 8006cec:	d902      	bls.n	8006cf4 <_free_r+0x78>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	6003      	str	r3, [r0, #0]
 8006cf2:	e7d6      	b.n	8006ca2 <_free_r+0x26>
 8006cf4:	6825      	ldr	r5, [r4, #0]
 8006cf6:	1961      	adds	r1, r4, r5
 8006cf8:	428b      	cmp	r3, r1
 8006cfa:	bf04      	itt	eq
 8006cfc:	6819      	ldreq	r1, [r3, #0]
 8006cfe:	685b      	ldreq	r3, [r3, #4]
 8006d00:	6063      	str	r3, [r4, #4]
 8006d02:	bf04      	itt	eq
 8006d04:	1949      	addeq	r1, r1, r5
 8006d06:	6021      	streq	r1, [r4, #0]
 8006d08:	6054      	str	r4, [r2, #4]
 8006d0a:	e7ca      	b.n	8006ca2 <_free_r+0x26>
 8006d0c:	b003      	add	sp, #12
 8006d0e:	bd30      	pop	{r4, r5, pc}
 8006d10:	20004d10 	.word	0x20004d10

08006d14 <sbrk_aligned>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	4e0e      	ldr	r6, [pc, #56]	; (8006d50 <sbrk_aligned+0x3c>)
 8006d18:	460c      	mov	r4, r1
 8006d1a:	6831      	ldr	r1, [r6, #0]
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	b911      	cbnz	r1, 8006d26 <sbrk_aligned+0x12>
 8006d20:	f000 fcbc 	bl	800769c <_sbrk_r>
 8006d24:	6030      	str	r0, [r6, #0]
 8006d26:	4621      	mov	r1, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 fcb7 	bl	800769c <_sbrk_r>
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	d00a      	beq.n	8006d48 <sbrk_aligned+0x34>
 8006d32:	1cc4      	adds	r4, r0, #3
 8006d34:	f024 0403 	bic.w	r4, r4, #3
 8006d38:	42a0      	cmp	r0, r4
 8006d3a:	d007      	beq.n	8006d4c <sbrk_aligned+0x38>
 8006d3c:	1a21      	subs	r1, r4, r0
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 fcac 	bl	800769c <_sbrk_r>
 8006d44:	3001      	adds	r0, #1
 8006d46:	d101      	bne.n	8006d4c <sbrk_aligned+0x38>
 8006d48:	f04f 34ff 	mov.w	r4, #4294967295
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
 8006d50:	20004d14 	.word	0x20004d14

08006d54 <_malloc_r>:
 8006d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d58:	1ccd      	adds	r5, r1, #3
 8006d5a:	f025 0503 	bic.w	r5, r5, #3
 8006d5e:	3508      	adds	r5, #8
 8006d60:	2d0c      	cmp	r5, #12
 8006d62:	bf38      	it	cc
 8006d64:	250c      	movcc	r5, #12
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	4607      	mov	r7, r0
 8006d6a:	db01      	blt.n	8006d70 <_malloc_r+0x1c>
 8006d6c:	42a9      	cmp	r1, r5
 8006d6e:	d905      	bls.n	8006d7c <_malloc_r+0x28>
 8006d70:	230c      	movs	r3, #12
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	2600      	movs	r6, #0
 8006d76:	4630      	mov	r0, r6
 8006d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e50 <_malloc_r+0xfc>
 8006d80:	f000 f868 	bl	8006e54 <__malloc_lock>
 8006d84:	f8d8 3000 	ldr.w	r3, [r8]
 8006d88:	461c      	mov	r4, r3
 8006d8a:	bb5c      	cbnz	r4, 8006de4 <_malloc_r+0x90>
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f7ff ffc0 	bl	8006d14 <sbrk_aligned>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	4604      	mov	r4, r0
 8006d98:	d155      	bne.n	8006e46 <_malloc_r+0xf2>
 8006d9a:	f8d8 4000 	ldr.w	r4, [r8]
 8006d9e:	4626      	mov	r6, r4
 8006da0:	2e00      	cmp	r6, #0
 8006da2:	d145      	bne.n	8006e30 <_malloc_r+0xdc>
 8006da4:	2c00      	cmp	r4, #0
 8006da6:	d048      	beq.n	8006e3a <_malloc_r+0xe6>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	4631      	mov	r1, r6
 8006dac:	4638      	mov	r0, r7
 8006dae:	eb04 0903 	add.w	r9, r4, r3
 8006db2:	f000 fc73 	bl	800769c <_sbrk_r>
 8006db6:	4581      	cmp	r9, r0
 8006db8:	d13f      	bne.n	8006e3a <_malloc_r+0xe6>
 8006dba:	6821      	ldr	r1, [r4, #0]
 8006dbc:	1a6d      	subs	r5, r5, r1
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff ffa7 	bl	8006d14 <sbrk_aligned>
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d037      	beq.n	8006e3a <_malloc_r+0xe6>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	442b      	add	r3, r5
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d038      	beq.n	8006e4a <_malloc_r+0xf6>
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	42a2      	cmp	r2, r4
 8006ddc:	d12b      	bne.n	8006e36 <_malloc_r+0xe2>
 8006dde:	2200      	movs	r2, #0
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	e00f      	b.n	8006e04 <_malloc_r+0xb0>
 8006de4:	6822      	ldr	r2, [r4, #0]
 8006de6:	1b52      	subs	r2, r2, r5
 8006de8:	d41f      	bmi.n	8006e2a <_malloc_r+0xd6>
 8006dea:	2a0b      	cmp	r2, #11
 8006dec:	d917      	bls.n	8006e1e <_malloc_r+0xca>
 8006dee:	1961      	adds	r1, r4, r5
 8006df0:	42a3      	cmp	r3, r4
 8006df2:	6025      	str	r5, [r4, #0]
 8006df4:	bf18      	it	ne
 8006df6:	6059      	strne	r1, [r3, #4]
 8006df8:	6863      	ldr	r3, [r4, #4]
 8006dfa:	bf08      	it	eq
 8006dfc:	f8c8 1000 	streq.w	r1, [r8]
 8006e00:	5162      	str	r2, [r4, r5]
 8006e02:	604b      	str	r3, [r1, #4]
 8006e04:	4638      	mov	r0, r7
 8006e06:	f104 060b 	add.w	r6, r4, #11
 8006e0a:	f000 f829 	bl	8006e60 <__malloc_unlock>
 8006e0e:	f026 0607 	bic.w	r6, r6, #7
 8006e12:	1d23      	adds	r3, r4, #4
 8006e14:	1af2      	subs	r2, r6, r3
 8006e16:	d0ae      	beq.n	8006d76 <_malloc_r+0x22>
 8006e18:	1b9b      	subs	r3, r3, r6
 8006e1a:	50a3      	str	r3, [r4, r2]
 8006e1c:	e7ab      	b.n	8006d76 <_malloc_r+0x22>
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	6862      	ldr	r2, [r4, #4]
 8006e22:	d1dd      	bne.n	8006de0 <_malloc_r+0x8c>
 8006e24:	f8c8 2000 	str.w	r2, [r8]
 8006e28:	e7ec      	b.n	8006e04 <_malloc_r+0xb0>
 8006e2a:	4623      	mov	r3, r4
 8006e2c:	6864      	ldr	r4, [r4, #4]
 8006e2e:	e7ac      	b.n	8006d8a <_malloc_r+0x36>
 8006e30:	4634      	mov	r4, r6
 8006e32:	6876      	ldr	r6, [r6, #4]
 8006e34:	e7b4      	b.n	8006da0 <_malloc_r+0x4c>
 8006e36:	4613      	mov	r3, r2
 8006e38:	e7cc      	b.n	8006dd4 <_malloc_r+0x80>
 8006e3a:	230c      	movs	r3, #12
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	4638      	mov	r0, r7
 8006e40:	f000 f80e 	bl	8006e60 <__malloc_unlock>
 8006e44:	e797      	b.n	8006d76 <_malloc_r+0x22>
 8006e46:	6025      	str	r5, [r4, #0]
 8006e48:	e7dc      	b.n	8006e04 <_malloc_r+0xb0>
 8006e4a:	605b      	str	r3, [r3, #4]
 8006e4c:	deff      	udf	#255	; 0xff
 8006e4e:	bf00      	nop
 8006e50:	20004d10 	.word	0x20004d10

08006e54 <__malloc_lock>:
 8006e54:	4801      	ldr	r0, [pc, #4]	; (8006e5c <__malloc_lock+0x8>)
 8006e56:	f7ff bf00 	b.w	8006c5a <__retarget_lock_acquire_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	20004d0c 	.word	0x20004d0c

08006e60 <__malloc_unlock>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__malloc_unlock+0x8>)
 8006e62:	f7ff befb 	b.w	8006c5c <__retarget_lock_release_recursive>
 8006e66:	bf00      	nop
 8006e68:	20004d0c 	.word	0x20004d0c

08006e6c <__sfputc_r>:
 8006e6c:	6893      	ldr	r3, [r2, #8]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	b410      	push	{r4}
 8006e74:	6093      	str	r3, [r2, #8]
 8006e76:	da08      	bge.n	8006e8a <__sfputc_r+0x1e>
 8006e78:	6994      	ldr	r4, [r2, #24]
 8006e7a:	42a3      	cmp	r3, r4
 8006e7c:	db01      	blt.n	8006e82 <__sfputc_r+0x16>
 8006e7e:	290a      	cmp	r1, #10
 8006e80:	d103      	bne.n	8006e8a <__sfputc_r+0x1e>
 8006e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e86:	f000 bb73 	b.w	8007570 <__swbuf_r>
 8006e8a:	6813      	ldr	r3, [r2, #0]
 8006e8c:	1c58      	adds	r0, r3, #1
 8006e8e:	6010      	str	r0, [r2, #0]
 8006e90:	7019      	strb	r1, [r3, #0]
 8006e92:	4608      	mov	r0, r1
 8006e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <__sfputs_r>:
 8006e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	460f      	mov	r7, r1
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	18d5      	adds	r5, r2, r3
 8006ea4:	42ac      	cmp	r4, r5
 8006ea6:	d101      	bne.n	8006eac <__sfputs_r+0x12>
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	e007      	b.n	8006ebc <__sfputs_r+0x22>
 8006eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb0:	463a      	mov	r2, r7
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ffda 	bl	8006e6c <__sfputc_r>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d1f3      	bne.n	8006ea4 <__sfputs_r+0xa>
 8006ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ec0 <_vfiprintf_r>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	460d      	mov	r5, r1
 8006ec6:	b09d      	sub	sp, #116	; 0x74
 8006ec8:	4614      	mov	r4, r2
 8006eca:	4698      	mov	r8, r3
 8006ecc:	4606      	mov	r6, r0
 8006ece:	b118      	cbz	r0, 8006ed8 <_vfiprintf_r+0x18>
 8006ed0:	6a03      	ldr	r3, [r0, #32]
 8006ed2:	b90b      	cbnz	r3, 8006ed8 <_vfiprintf_r+0x18>
 8006ed4:	f7ff fd66 	bl	80069a4 <__sinit>
 8006ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eda:	07d9      	lsls	r1, r3, #31
 8006edc:	d405      	bmi.n	8006eea <_vfiprintf_r+0x2a>
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	059a      	lsls	r2, r3, #22
 8006ee2:	d402      	bmi.n	8006eea <_vfiprintf_r+0x2a>
 8006ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ee6:	f7ff feb8 	bl	8006c5a <__retarget_lock_acquire_recursive>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	071b      	lsls	r3, r3, #28
 8006eee:	d501      	bpl.n	8006ef4 <_vfiprintf_r+0x34>
 8006ef0:	692b      	ldr	r3, [r5, #16]
 8006ef2:	b99b      	cbnz	r3, 8006f1c <_vfiprintf_r+0x5c>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 fb78 	bl	80075ec <__swsetup_r>
 8006efc:	b170      	cbz	r0, 8006f1c <_vfiprintf_r+0x5c>
 8006efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f00:	07dc      	lsls	r4, r3, #31
 8006f02:	d504      	bpl.n	8006f0e <_vfiprintf_r+0x4e>
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	b01d      	add	sp, #116	; 0x74
 8006f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	89ab      	ldrh	r3, [r5, #12]
 8006f10:	0598      	lsls	r0, r3, #22
 8006f12:	d4f7      	bmi.n	8006f04 <_vfiprintf_r+0x44>
 8006f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f16:	f7ff fea1 	bl	8006c5c <__retarget_lock_release_recursive>
 8006f1a:	e7f3      	b.n	8006f04 <_vfiprintf_r+0x44>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f20:	2320      	movs	r3, #32
 8006f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f2a:	2330      	movs	r3, #48	; 0x30
 8006f2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80070e0 <_vfiprintf_r+0x220>
 8006f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f34:	f04f 0901 	mov.w	r9, #1
 8006f38:	4623      	mov	r3, r4
 8006f3a:	469a      	mov	sl, r3
 8006f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f40:	b10a      	cbz	r2, 8006f46 <_vfiprintf_r+0x86>
 8006f42:	2a25      	cmp	r2, #37	; 0x25
 8006f44:	d1f9      	bne.n	8006f3a <_vfiprintf_r+0x7a>
 8006f46:	ebba 0b04 	subs.w	fp, sl, r4
 8006f4a:	d00b      	beq.n	8006f64 <_vfiprintf_r+0xa4>
 8006f4c:	465b      	mov	r3, fp
 8006f4e:	4622      	mov	r2, r4
 8006f50:	4629      	mov	r1, r5
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7ff ffa1 	bl	8006e9a <__sfputs_r>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f000 80a9 	beq.w	80070b0 <_vfiprintf_r+0x1f0>
 8006f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f60:	445a      	add	r2, fp
 8006f62:	9209      	str	r2, [sp, #36]	; 0x24
 8006f64:	f89a 3000 	ldrb.w	r3, [sl]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80a1 	beq.w	80070b0 <_vfiprintf_r+0x1f0>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f78:	f10a 0a01 	add.w	sl, sl, #1
 8006f7c:	9304      	str	r3, [sp, #16]
 8006f7e:	9307      	str	r3, [sp, #28]
 8006f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f84:	931a      	str	r3, [sp, #104]	; 0x68
 8006f86:	4654      	mov	r4, sl
 8006f88:	2205      	movs	r2, #5
 8006f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8e:	4854      	ldr	r0, [pc, #336]	; (80070e0 <_vfiprintf_r+0x220>)
 8006f90:	f7f9 f926 	bl	80001e0 <memchr>
 8006f94:	9a04      	ldr	r2, [sp, #16]
 8006f96:	b9d8      	cbnz	r0, 8006fd0 <_vfiprintf_r+0x110>
 8006f98:	06d1      	lsls	r1, r2, #27
 8006f9a:	bf44      	itt	mi
 8006f9c:	2320      	movmi	r3, #32
 8006f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa2:	0713      	lsls	r3, r2, #28
 8006fa4:	bf44      	itt	mi
 8006fa6:	232b      	movmi	r3, #43	; 0x2b
 8006fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fac:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb2:	d015      	beq.n	8006fe0 <_vfiprintf_r+0x120>
 8006fb4:	9a07      	ldr	r2, [sp, #28]
 8006fb6:	4654      	mov	r4, sl
 8006fb8:	2000      	movs	r0, #0
 8006fba:	f04f 0c0a 	mov.w	ip, #10
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fc4:	3b30      	subs	r3, #48	; 0x30
 8006fc6:	2b09      	cmp	r3, #9
 8006fc8:	d94d      	bls.n	8007066 <_vfiprintf_r+0x1a6>
 8006fca:	b1b0      	cbz	r0, 8006ffa <_vfiprintf_r+0x13a>
 8006fcc:	9207      	str	r2, [sp, #28]
 8006fce:	e014      	b.n	8006ffa <_vfiprintf_r+0x13a>
 8006fd0:	eba0 0308 	sub.w	r3, r0, r8
 8006fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	9304      	str	r3, [sp, #16]
 8006fdc:	46a2      	mov	sl, r4
 8006fde:	e7d2      	b.n	8006f86 <_vfiprintf_r+0xc6>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	1d19      	adds	r1, r3, #4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	9103      	str	r1, [sp, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bfbb      	ittet	lt
 8006fec:	425b      	neglt	r3, r3
 8006fee:	f042 0202 	orrlt.w	r2, r2, #2
 8006ff2:	9307      	strge	r3, [sp, #28]
 8006ff4:	9307      	strlt	r3, [sp, #28]
 8006ff6:	bfb8      	it	lt
 8006ff8:	9204      	strlt	r2, [sp, #16]
 8006ffa:	7823      	ldrb	r3, [r4, #0]
 8006ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ffe:	d10c      	bne.n	800701a <_vfiprintf_r+0x15a>
 8007000:	7863      	ldrb	r3, [r4, #1]
 8007002:	2b2a      	cmp	r3, #42	; 0x2a
 8007004:	d134      	bne.n	8007070 <_vfiprintf_r+0x1b0>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	1d1a      	adds	r2, r3, #4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	9203      	str	r2, [sp, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	bfb8      	it	lt
 8007012:	f04f 33ff 	movlt.w	r3, #4294967295
 8007016:	3402      	adds	r4, #2
 8007018:	9305      	str	r3, [sp, #20]
 800701a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80070f0 <_vfiprintf_r+0x230>
 800701e:	7821      	ldrb	r1, [r4, #0]
 8007020:	2203      	movs	r2, #3
 8007022:	4650      	mov	r0, sl
 8007024:	f7f9 f8dc 	bl	80001e0 <memchr>
 8007028:	b138      	cbz	r0, 800703a <_vfiprintf_r+0x17a>
 800702a:	9b04      	ldr	r3, [sp, #16]
 800702c:	eba0 000a 	sub.w	r0, r0, sl
 8007030:	2240      	movs	r2, #64	; 0x40
 8007032:	4082      	lsls	r2, r0
 8007034:	4313      	orrs	r3, r2
 8007036:	3401      	adds	r4, #1
 8007038:	9304      	str	r3, [sp, #16]
 800703a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703e:	4829      	ldr	r0, [pc, #164]	; (80070e4 <_vfiprintf_r+0x224>)
 8007040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007044:	2206      	movs	r2, #6
 8007046:	f7f9 f8cb 	bl	80001e0 <memchr>
 800704a:	2800      	cmp	r0, #0
 800704c:	d03f      	beq.n	80070ce <_vfiprintf_r+0x20e>
 800704e:	4b26      	ldr	r3, [pc, #152]	; (80070e8 <_vfiprintf_r+0x228>)
 8007050:	bb1b      	cbnz	r3, 800709a <_vfiprintf_r+0x1da>
 8007052:	9b03      	ldr	r3, [sp, #12]
 8007054:	3307      	adds	r3, #7
 8007056:	f023 0307 	bic.w	r3, r3, #7
 800705a:	3308      	adds	r3, #8
 800705c:	9303      	str	r3, [sp, #12]
 800705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007060:	443b      	add	r3, r7
 8007062:	9309      	str	r3, [sp, #36]	; 0x24
 8007064:	e768      	b.n	8006f38 <_vfiprintf_r+0x78>
 8007066:	fb0c 3202 	mla	r2, ip, r2, r3
 800706a:	460c      	mov	r4, r1
 800706c:	2001      	movs	r0, #1
 800706e:	e7a6      	b.n	8006fbe <_vfiprintf_r+0xfe>
 8007070:	2300      	movs	r3, #0
 8007072:	3401      	adds	r4, #1
 8007074:	9305      	str	r3, [sp, #20]
 8007076:	4619      	mov	r1, r3
 8007078:	f04f 0c0a 	mov.w	ip, #10
 800707c:	4620      	mov	r0, r4
 800707e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007082:	3a30      	subs	r2, #48	; 0x30
 8007084:	2a09      	cmp	r2, #9
 8007086:	d903      	bls.n	8007090 <_vfiprintf_r+0x1d0>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0c6      	beq.n	800701a <_vfiprintf_r+0x15a>
 800708c:	9105      	str	r1, [sp, #20]
 800708e:	e7c4      	b.n	800701a <_vfiprintf_r+0x15a>
 8007090:	fb0c 2101 	mla	r1, ip, r1, r2
 8007094:	4604      	mov	r4, r0
 8007096:	2301      	movs	r3, #1
 8007098:	e7f0      	b.n	800707c <_vfiprintf_r+0x1bc>
 800709a:	ab03      	add	r3, sp, #12
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	462a      	mov	r2, r5
 80070a0:	4b12      	ldr	r3, [pc, #72]	; (80070ec <_vfiprintf_r+0x22c>)
 80070a2:	a904      	add	r1, sp, #16
 80070a4:	4630      	mov	r0, r6
 80070a6:	f3af 8000 	nop.w
 80070aa:	4607      	mov	r7, r0
 80070ac:	1c78      	adds	r0, r7, #1
 80070ae:	d1d6      	bne.n	800705e <_vfiprintf_r+0x19e>
 80070b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070b2:	07d9      	lsls	r1, r3, #31
 80070b4:	d405      	bmi.n	80070c2 <_vfiprintf_r+0x202>
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	059a      	lsls	r2, r3, #22
 80070ba:	d402      	bmi.n	80070c2 <_vfiprintf_r+0x202>
 80070bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070be:	f7ff fdcd 	bl	8006c5c <__retarget_lock_release_recursive>
 80070c2:	89ab      	ldrh	r3, [r5, #12]
 80070c4:	065b      	lsls	r3, r3, #25
 80070c6:	f53f af1d 	bmi.w	8006f04 <_vfiprintf_r+0x44>
 80070ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070cc:	e71c      	b.n	8006f08 <_vfiprintf_r+0x48>
 80070ce:	ab03      	add	r3, sp, #12
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	462a      	mov	r2, r5
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <_vfiprintf_r+0x22c>)
 80070d6:	a904      	add	r1, sp, #16
 80070d8:	4630      	mov	r0, r6
 80070da:	f000 f879 	bl	80071d0 <_printf_i>
 80070de:	e7e4      	b.n	80070aa <_vfiprintf_r+0x1ea>
 80070e0:	080078cc 	.word	0x080078cc
 80070e4:	080078d6 	.word	0x080078d6
 80070e8:	00000000 	.word	0x00000000
 80070ec:	08006e9b 	.word	0x08006e9b
 80070f0:	080078d2 	.word	0x080078d2

080070f4 <_printf_common>:
 80070f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f8:	4616      	mov	r6, r2
 80070fa:	4699      	mov	r9, r3
 80070fc:	688a      	ldr	r2, [r1, #8]
 80070fe:	690b      	ldr	r3, [r1, #16]
 8007100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007104:	4293      	cmp	r3, r2
 8007106:	bfb8      	it	lt
 8007108:	4613      	movlt	r3, r2
 800710a:	6033      	str	r3, [r6, #0]
 800710c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007110:	4607      	mov	r7, r0
 8007112:	460c      	mov	r4, r1
 8007114:	b10a      	cbz	r2, 800711a <_printf_common+0x26>
 8007116:	3301      	adds	r3, #1
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	0699      	lsls	r1, r3, #26
 800711e:	bf42      	ittt	mi
 8007120:	6833      	ldrmi	r3, [r6, #0]
 8007122:	3302      	addmi	r3, #2
 8007124:	6033      	strmi	r3, [r6, #0]
 8007126:	6825      	ldr	r5, [r4, #0]
 8007128:	f015 0506 	ands.w	r5, r5, #6
 800712c:	d106      	bne.n	800713c <_printf_common+0x48>
 800712e:	f104 0a19 	add.w	sl, r4, #25
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	6832      	ldr	r2, [r6, #0]
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	42ab      	cmp	r3, r5
 800713a:	dc26      	bgt.n	800718a <_printf_common+0x96>
 800713c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007140:	1e13      	subs	r3, r2, #0
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	bf18      	it	ne
 8007146:	2301      	movne	r3, #1
 8007148:	0692      	lsls	r2, r2, #26
 800714a:	d42b      	bmi.n	80071a4 <_printf_common+0xb0>
 800714c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007150:	4649      	mov	r1, r9
 8007152:	4638      	mov	r0, r7
 8007154:	47c0      	blx	r8
 8007156:	3001      	adds	r0, #1
 8007158:	d01e      	beq.n	8007198 <_printf_common+0xa4>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	6922      	ldr	r2, [r4, #16]
 800715e:	f003 0306 	and.w	r3, r3, #6
 8007162:	2b04      	cmp	r3, #4
 8007164:	bf02      	ittt	eq
 8007166:	68e5      	ldreq	r5, [r4, #12]
 8007168:	6833      	ldreq	r3, [r6, #0]
 800716a:	1aed      	subeq	r5, r5, r3
 800716c:	68a3      	ldr	r3, [r4, #8]
 800716e:	bf0c      	ite	eq
 8007170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007174:	2500      	movne	r5, #0
 8007176:	4293      	cmp	r3, r2
 8007178:	bfc4      	itt	gt
 800717a:	1a9b      	subgt	r3, r3, r2
 800717c:	18ed      	addgt	r5, r5, r3
 800717e:	2600      	movs	r6, #0
 8007180:	341a      	adds	r4, #26
 8007182:	42b5      	cmp	r5, r6
 8007184:	d11a      	bne.n	80071bc <_printf_common+0xc8>
 8007186:	2000      	movs	r0, #0
 8007188:	e008      	b.n	800719c <_printf_common+0xa8>
 800718a:	2301      	movs	r3, #1
 800718c:	4652      	mov	r2, sl
 800718e:	4649      	mov	r1, r9
 8007190:	4638      	mov	r0, r7
 8007192:	47c0      	blx	r8
 8007194:	3001      	adds	r0, #1
 8007196:	d103      	bne.n	80071a0 <_printf_common+0xac>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a0:	3501      	adds	r5, #1
 80071a2:	e7c6      	b.n	8007132 <_printf_common+0x3e>
 80071a4:	18e1      	adds	r1, r4, r3
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	2030      	movs	r0, #48	; 0x30
 80071aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ae:	4422      	add	r2, r4
 80071b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071b8:	3302      	adds	r3, #2
 80071ba:	e7c7      	b.n	800714c <_printf_common+0x58>
 80071bc:	2301      	movs	r3, #1
 80071be:	4622      	mov	r2, r4
 80071c0:	4649      	mov	r1, r9
 80071c2:	4638      	mov	r0, r7
 80071c4:	47c0      	blx	r8
 80071c6:	3001      	adds	r0, #1
 80071c8:	d0e6      	beq.n	8007198 <_printf_common+0xa4>
 80071ca:	3601      	adds	r6, #1
 80071cc:	e7d9      	b.n	8007182 <_printf_common+0x8e>
	...

080071d0 <_printf_i>:
 80071d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	7e0f      	ldrb	r7, [r1, #24]
 80071d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071d8:	2f78      	cmp	r7, #120	; 0x78
 80071da:	4691      	mov	r9, r2
 80071dc:	4680      	mov	r8, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	469a      	mov	sl, r3
 80071e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071e6:	d807      	bhi.n	80071f8 <_printf_i+0x28>
 80071e8:	2f62      	cmp	r7, #98	; 0x62
 80071ea:	d80a      	bhi.n	8007202 <_printf_i+0x32>
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	f000 80d4 	beq.w	800739a <_printf_i+0x1ca>
 80071f2:	2f58      	cmp	r7, #88	; 0x58
 80071f4:	f000 80c0 	beq.w	8007378 <_printf_i+0x1a8>
 80071f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007200:	e03a      	b.n	8007278 <_printf_i+0xa8>
 8007202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007206:	2b15      	cmp	r3, #21
 8007208:	d8f6      	bhi.n	80071f8 <_printf_i+0x28>
 800720a:	a101      	add	r1, pc, #4	; (adr r1, 8007210 <_printf_i+0x40>)
 800720c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007210:	08007269 	.word	0x08007269
 8007214:	0800727d 	.word	0x0800727d
 8007218:	080071f9 	.word	0x080071f9
 800721c:	080071f9 	.word	0x080071f9
 8007220:	080071f9 	.word	0x080071f9
 8007224:	080071f9 	.word	0x080071f9
 8007228:	0800727d 	.word	0x0800727d
 800722c:	080071f9 	.word	0x080071f9
 8007230:	080071f9 	.word	0x080071f9
 8007234:	080071f9 	.word	0x080071f9
 8007238:	080071f9 	.word	0x080071f9
 800723c:	08007381 	.word	0x08007381
 8007240:	080072a9 	.word	0x080072a9
 8007244:	0800733b 	.word	0x0800733b
 8007248:	080071f9 	.word	0x080071f9
 800724c:	080071f9 	.word	0x080071f9
 8007250:	080073a3 	.word	0x080073a3
 8007254:	080071f9 	.word	0x080071f9
 8007258:	080072a9 	.word	0x080072a9
 800725c:	080071f9 	.word	0x080071f9
 8007260:	080071f9 	.word	0x080071f9
 8007264:	08007343 	.word	0x08007343
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	1d1a      	adds	r2, r3, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	602a      	str	r2, [r5, #0]
 8007270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007278:	2301      	movs	r3, #1
 800727a:	e09f      	b.n	80073bc <_printf_i+0x1ec>
 800727c:	6820      	ldr	r0, [r4, #0]
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	0607      	lsls	r7, r0, #24
 8007282:	f103 0104 	add.w	r1, r3, #4
 8007286:	6029      	str	r1, [r5, #0]
 8007288:	d501      	bpl.n	800728e <_printf_i+0xbe>
 800728a:	681e      	ldr	r6, [r3, #0]
 800728c:	e003      	b.n	8007296 <_printf_i+0xc6>
 800728e:	0646      	lsls	r6, r0, #25
 8007290:	d5fb      	bpl.n	800728a <_printf_i+0xba>
 8007292:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007296:	2e00      	cmp	r6, #0
 8007298:	da03      	bge.n	80072a2 <_printf_i+0xd2>
 800729a:	232d      	movs	r3, #45	; 0x2d
 800729c:	4276      	negs	r6, r6
 800729e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a2:	485a      	ldr	r0, [pc, #360]	; (800740c <_printf_i+0x23c>)
 80072a4:	230a      	movs	r3, #10
 80072a6:	e012      	b.n	80072ce <_printf_i+0xfe>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	6820      	ldr	r0, [r4, #0]
 80072ac:	1d19      	adds	r1, r3, #4
 80072ae:	6029      	str	r1, [r5, #0]
 80072b0:	0605      	lsls	r5, r0, #24
 80072b2:	d501      	bpl.n	80072b8 <_printf_i+0xe8>
 80072b4:	681e      	ldr	r6, [r3, #0]
 80072b6:	e002      	b.n	80072be <_printf_i+0xee>
 80072b8:	0641      	lsls	r1, r0, #25
 80072ba:	d5fb      	bpl.n	80072b4 <_printf_i+0xe4>
 80072bc:	881e      	ldrh	r6, [r3, #0]
 80072be:	4853      	ldr	r0, [pc, #332]	; (800740c <_printf_i+0x23c>)
 80072c0:	2f6f      	cmp	r7, #111	; 0x6f
 80072c2:	bf0c      	ite	eq
 80072c4:	2308      	moveq	r3, #8
 80072c6:	230a      	movne	r3, #10
 80072c8:	2100      	movs	r1, #0
 80072ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ce:	6865      	ldr	r5, [r4, #4]
 80072d0:	60a5      	str	r5, [r4, #8]
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	bfa2      	ittt	ge
 80072d6:	6821      	ldrge	r1, [r4, #0]
 80072d8:	f021 0104 	bicge.w	r1, r1, #4
 80072dc:	6021      	strge	r1, [r4, #0]
 80072de:	b90e      	cbnz	r6, 80072e4 <_printf_i+0x114>
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	d04b      	beq.n	800737c <_printf_i+0x1ac>
 80072e4:	4615      	mov	r5, r2
 80072e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80072ea:	fb03 6711 	mls	r7, r3, r1, r6
 80072ee:	5dc7      	ldrb	r7, [r0, r7]
 80072f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072f4:	4637      	mov	r7, r6
 80072f6:	42bb      	cmp	r3, r7
 80072f8:	460e      	mov	r6, r1
 80072fa:	d9f4      	bls.n	80072e6 <_printf_i+0x116>
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d10b      	bne.n	8007318 <_printf_i+0x148>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	07de      	lsls	r6, r3, #31
 8007304:	d508      	bpl.n	8007318 <_printf_i+0x148>
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	6861      	ldr	r1, [r4, #4]
 800730a:	4299      	cmp	r1, r3
 800730c:	bfde      	ittt	le
 800730e:	2330      	movle	r3, #48	; 0x30
 8007310:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007314:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007318:	1b52      	subs	r2, r2, r5
 800731a:	6122      	str	r2, [r4, #16]
 800731c:	f8cd a000 	str.w	sl, [sp]
 8007320:	464b      	mov	r3, r9
 8007322:	aa03      	add	r2, sp, #12
 8007324:	4621      	mov	r1, r4
 8007326:	4640      	mov	r0, r8
 8007328:	f7ff fee4 	bl	80070f4 <_printf_common>
 800732c:	3001      	adds	r0, #1
 800732e:	d14a      	bne.n	80073c6 <_printf_i+0x1f6>
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	b004      	add	sp, #16
 8007336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	f043 0320 	orr.w	r3, r3, #32
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	4833      	ldr	r0, [pc, #204]	; (8007410 <_printf_i+0x240>)
 8007344:	2778      	movs	r7, #120	; 0x78
 8007346:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	6829      	ldr	r1, [r5, #0]
 800734e:	061f      	lsls	r7, r3, #24
 8007350:	f851 6b04 	ldr.w	r6, [r1], #4
 8007354:	d402      	bmi.n	800735c <_printf_i+0x18c>
 8007356:	065f      	lsls	r7, r3, #25
 8007358:	bf48      	it	mi
 800735a:	b2b6      	uxthmi	r6, r6
 800735c:	07df      	lsls	r7, r3, #31
 800735e:	bf48      	it	mi
 8007360:	f043 0320 	orrmi.w	r3, r3, #32
 8007364:	6029      	str	r1, [r5, #0]
 8007366:	bf48      	it	mi
 8007368:	6023      	strmi	r3, [r4, #0]
 800736a:	b91e      	cbnz	r6, 8007374 <_printf_i+0x1a4>
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	f023 0320 	bic.w	r3, r3, #32
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	2310      	movs	r3, #16
 8007376:	e7a7      	b.n	80072c8 <_printf_i+0xf8>
 8007378:	4824      	ldr	r0, [pc, #144]	; (800740c <_printf_i+0x23c>)
 800737a:	e7e4      	b.n	8007346 <_printf_i+0x176>
 800737c:	4615      	mov	r5, r2
 800737e:	e7bd      	b.n	80072fc <_printf_i+0x12c>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	6826      	ldr	r6, [r4, #0]
 8007384:	6961      	ldr	r1, [r4, #20]
 8007386:	1d18      	adds	r0, r3, #4
 8007388:	6028      	str	r0, [r5, #0]
 800738a:	0635      	lsls	r5, r6, #24
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	d501      	bpl.n	8007394 <_printf_i+0x1c4>
 8007390:	6019      	str	r1, [r3, #0]
 8007392:	e002      	b.n	800739a <_printf_i+0x1ca>
 8007394:	0670      	lsls	r0, r6, #25
 8007396:	d5fb      	bpl.n	8007390 <_printf_i+0x1c0>
 8007398:	8019      	strh	r1, [r3, #0]
 800739a:	2300      	movs	r3, #0
 800739c:	6123      	str	r3, [r4, #16]
 800739e:	4615      	mov	r5, r2
 80073a0:	e7bc      	b.n	800731c <_printf_i+0x14c>
 80073a2:	682b      	ldr	r3, [r5, #0]
 80073a4:	1d1a      	adds	r2, r3, #4
 80073a6:	602a      	str	r2, [r5, #0]
 80073a8:	681d      	ldr	r5, [r3, #0]
 80073aa:	6862      	ldr	r2, [r4, #4]
 80073ac:	2100      	movs	r1, #0
 80073ae:	4628      	mov	r0, r5
 80073b0:	f7f8 ff16 	bl	80001e0 <memchr>
 80073b4:	b108      	cbz	r0, 80073ba <_printf_i+0x1ea>
 80073b6:	1b40      	subs	r0, r0, r5
 80073b8:	6060      	str	r0, [r4, #4]
 80073ba:	6863      	ldr	r3, [r4, #4]
 80073bc:	6123      	str	r3, [r4, #16]
 80073be:	2300      	movs	r3, #0
 80073c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c4:	e7aa      	b.n	800731c <_printf_i+0x14c>
 80073c6:	6923      	ldr	r3, [r4, #16]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4649      	mov	r1, r9
 80073cc:	4640      	mov	r0, r8
 80073ce:	47d0      	blx	sl
 80073d0:	3001      	adds	r0, #1
 80073d2:	d0ad      	beq.n	8007330 <_printf_i+0x160>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	079b      	lsls	r3, r3, #30
 80073d8:	d413      	bmi.n	8007402 <_printf_i+0x232>
 80073da:	68e0      	ldr	r0, [r4, #12]
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	4298      	cmp	r0, r3
 80073e0:	bfb8      	it	lt
 80073e2:	4618      	movlt	r0, r3
 80073e4:	e7a6      	b.n	8007334 <_printf_i+0x164>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4632      	mov	r2, r6
 80073ea:	4649      	mov	r1, r9
 80073ec:	4640      	mov	r0, r8
 80073ee:	47d0      	blx	sl
 80073f0:	3001      	adds	r0, #1
 80073f2:	d09d      	beq.n	8007330 <_printf_i+0x160>
 80073f4:	3501      	adds	r5, #1
 80073f6:	68e3      	ldr	r3, [r4, #12]
 80073f8:	9903      	ldr	r1, [sp, #12]
 80073fa:	1a5b      	subs	r3, r3, r1
 80073fc:	42ab      	cmp	r3, r5
 80073fe:	dcf2      	bgt.n	80073e6 <_printf_i+0x216>
 8007400:	e7eb      	b.n	80073da <_printf_i+0x20a>
 8007402:	2500      	movs	r5, #0
 8007404:	f104 0619 	add.w	r6, r4, #25
 8007408:	e7f5      	b.n	80073f6 <_printf_i+0x226>
 800740a:	bf00      	nop
 800740c:	080078dd 	.word	0x080078dd
 8007410:	080078ee 	.word	0x080078ee

08007414 <__sflush_r>:
 8007414:	898a      	ldrh	r2, [r1, #12]
 8007416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741a:	4605      	mov	r5, r0
 800741c:	0710      	lsls	r0, r2, #28
 800741e:	460c      	mov	r4, r1
 8007420:	d458      	bmi.n	80074d4 <__sflush_r+0xc0>
 8007422:	684b      	ldr	r3, [r1, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	dc05      	bgt.n	8007434 <__sflush_r+0x20>
 8007428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	dc02      	bgt.n	8007434 <__sflush_r+0x20>
 800742e:	2000      	movs	r0, #0
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007436:	2e00      	cmp	r6, #0
 8007438:	d0f9      	beq.n	800742e <__sflush_r+0x1a>
 800743a:	2300      	movs	r3, #0
 800743c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007440:	682f      	ldr	r7, [r5, #0]
 8007442:	6a21      	ldr	r1, [r4, #32]
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	d032      	beq.n	80074ae <__sflush_r+0x9a>
 8007448:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	075a      	lsls	r2, r3, #29
 800744e:	d505      	bpl.n	800745c <__sflush_r+0x48>
 8007450:	6863      	ldr	r3, [r4, #4]
 8007452:	1ac0      	subs	r0, r0, r3
 8007454:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007456:	b10b      	cbz	r3, 800745c <__sflush_r+0x48>
 8007458:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800745a:	1ac0      	subs	r0, r0, r3
 800745c:	2300      	movs	r3, #0
 800745e:	4602      	mov	r2, r0
 8007460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007462:	6a21      	ldr	r1, [r4, #32]
 8007464:	4628      	mov	r0, r5
 8007466:	47b0      	blx	r6
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	d106      	bne.n	800747c <__sflush_r+0x68>
 800746e:	6829      	ldr	r1, [r5, #0]
 8007470:	291d      	cmp	r1, #29
 8007472:	d82b      	bhi.n	80074cc <__sflush_r+0xb8>
 8007474:	4a29      	ldr	r2, [pc, #164]	; (800751c <__sflush_r+0x108>)
 8007476:	410a      	asrs	r2, r1
 8007478:	07d6      	lsls	r6, r2, #31
 800747a:	d427      	bmi.n	80074cc <__sflush_r+0xb8>
 800747c:	2200      	movs	r2, #0
 800747e:	6062      	str	r2, [r4, #4]
 8007480:	04d9      	lsls	r1, r3, #19
 8007482:	6922      	ldr	r2, [r4, #16]
 8007484:	6022      	str	r2, [r4, #0]
 8007486:	d504      	bpl.n	8007492 <__sflush_r+0x7e>
 8007488:	1c42      	adds	r2, r0, #1
 800748a:	d101      	bne.n	8007490 <__sflush_r+0x7c>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	b903      	cbnz	r3, 8007492 <__sflush_r+0x7e>
 8007490:	6560      	str	r0, [r4, #84]	; 0x54
 8007492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007494:	602f      	str	r7, [r5, #0]
 8007496:	2900      	cmp	r1, #0
 8007498:	d0c9      	beq.n	800742e <__sflush_r+0x1a>
 800749a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749e:	4299      	cmp	r1, r3
 80074a0:	d002      	beq.n	80074a8 <__sflush_r+0x94>
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7ff fbea 	bl	8006c7c <_free_r>
 80074a8:	2000      	movs	r0, #0
 80074aa:	6360      	str	r0, [r4, #52]	; 0x34
 80074ac:	e7c0      	b.n	8007430 <__sflush_r+0x1c>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b0      	blx	r6
 80074b4:	1c41      	adds	r1, r0, #1
 80074b6:	d1c8      	bne.n	800744a <__sflush_r+0x36>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0c5      	beq.n	800744a <__sflush_r+0x36>
 80074be:	2b1d      	cmp	r3, #29
 80074c0:	d001      	beq.n	80074c6 <__sflush_r+0xb2>
 80074c2:	2b16      	cmp	r3, #22
 80074c4:	d101      	bne.n	80074ca <__sflush_r+0xb6>
 80074c6:	602f      	str	r7, [r5, #0]
 80074c8:	e7b1      	b.n	800742e <__sflush_r+0x1a>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	e7ad      	b.n	8007430 <__sflush_r+0x1c>
 80074d4:	690f      	ldr	r7, [r1, #16]
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	d0a9      	beq.n	800742e <__sflush_r+0x1a>
 80074da:	0793      	lsls	r3, r2, #30
 80074dc:	680e      	ldr	r6, [r1, #0]
 80074de:	bf08      	it	eq
 80074e0:	694b      	ldreq	r3, [r1, #20]
 80074e2:	600f      	str	r7, [r1, #0]
 80074e4:	bf18      	it	ne
 80074e6:	2300      	movne	r3, #0
 80074e8:	eba6 0807 	sub.w	r8, r6, r7
 80074ec:	608b      	str	r3, [r1, #8]
 80074ee:	f1b8 0f00 	cmp.w	r8, #0
 80074f2:	dd9c      	ble.n	800742e <__sflush_r+0x1a>
 80074f4:	6a21      	ldr	r1, [r4, #32]
 80074f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074f8:	4643      	mov	r3, r8
 80074fa:	463a      	mov	r2, r7
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b0      	blx	r6
 8007500:	2800      	cmp	r0, #0
 8007502:	dc06      	bgt.n	8007512 <__sflush_r+0xfe>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	f04f 30ff 	mov.w	r0, #4294967295
 8007510:	e78e      	b.n	8007430 <__sflush_r+0x1c>
 8007512:	4407      	add	r7, r0
 8007514:	eba8 0800 	sub.w	r8, r8, r0
 8007518:	e7e9      	b.n	80074ee <__sflush_r+0xda>
 800751a:	bf00      	nop
 800751c:	dfbffffe 	.word	0xdfbffffe

08007520 <_fflush_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	690b      	ldr	r3, [r1, #16]
 8007524:	4605      	mov	r5, r0
 8007526:	460c      	mov	r4, r1
 8007528:	b913      	cbnz	r3, 8007530 <_fflush_r+0x10>
 800752a:	2500      	movs	r5, #0
 800752c:	4628      	mov	r0, r5
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	b118      	cbz	r0, 800753a <_fflush_r+0x1a>
 8007532:	6a03      	ldr	r3, [r0, #32]
 8007534:	b90b      	cbnz	r3, 800753a <_fflush_r+0x1a>
 8007536:	f7ff fa35 	bl	80069a4 <__sinit>
 800753a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f3      	beq.n	800752a <_fflush_r+0xa>
 8007542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007544:	07d0      	lsls	r0, r2, #31
 8007546:	d404      	bmi.n	8007552 <_fflush_r+0x32>
 8007548:	0599      	lsls	r1, r3, #22
 800754a:	d402      	bmi.n	8007552 <_fflush_r+0x32>
 800754c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754e:	f7ff fb84 	bl	8006c5a <__retarget_lock_acquire_recursive>
 8007552:	4628      	mov	r0, r5
 8007554:	4621      	mov	r1, r4
 8007556:	f7ff ff5d 	bl	8007414 <__sflush_r>
 800755a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800755c:	07da      	lsls	r2, r3, #31
 800755e:	4605      	mov	r5, r0
 8007560:	d4e4      	bmi.n	800752c <_fflush_r+0xc>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	059b      	lsls	r3, r3, #22
 8007566:	d4e1      	bmi.n	800752c <_fflush_r+0xc>
 8007568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756a:	f7ff fb77 	bl	8006c5c <__retarget_lock_release_recursive>
 800756e:	e7dd      	b.n	800752c <_fflush_r+0xc>

08007570 <__swbuf_r>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	460e      	mov	r6, r1
 8007574:	4614      	mov	r4, r2
 8007576:	4605      	mov	r5, r0
 8007578:	b118      	cbz	r0, 8007582 <__swbuf_r+0x12>
 800757a:	6a03      	ldr	r3, [r0, #32]
 800757c:	b90b      	cbnz	r3, 8007582 <__swbuf_r+0x12>
 800757e:	f7ff fa11 	bl	80069a4 <__sinit>
 8007582:	69a3      	ldr	r3, [r4, #24]
 8007584:	60a3      	str	r3, [r4, #8]
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	071a      	lsls	r2, r3, #28
 800758a:	d525      	bpl.n	80075d8 <__swbuf_r+0x68>
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	b31b      	cbz	r3, 80075d8 <__swbuf_r+0x68>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	6922      	ldr	r2, [r4, #16]
 8007594:	1a98      	subs	r0, r3, r2
 8007596:	6963      	ldr	r3, [r4, #20]
 8007598:	b2f6      	uxtb	r6, r6
 800759a:	4283      	cmp	r3, r0
 800759c:	4637      	mov	r7, r6
 800759e:	dc04      	bgt.n	80075aa <__swbuf_r+0x3a>
 80075a0:	4621      	mov	r1, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	f7ff ffbc 	bl	8007520 <_fflush_r>
 80075a8:	b9e0      	cbnz	r0, 80075e4 <__swbuf_r+0x74>
 80075aa:	68a3      	ldr	r3, [r4, #8]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	60a3      	str	r3, [r4, #8]
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	6022      	str	r2, [r4, #0]
 80075b6:	701e      	strb	r6, [r3, #0]
 80075b8:	6962      	ldr	r2, [r4, #20]
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	429a      	cmp	r2, r3
 80075be:	d004      	beq.n	80075ca <__swbuf_r+0x5a>
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	07db      	lsls	r3, r3, #31
 80075c4:	d506      	bpl.n	80075d4 <__swbuf_r+0x64>
 80075c6:	2e0a      	cmp	r6, #10
 80075c8:	d104      	bne.n	80075d4 <__swbuf_r+0x64>
 80075ca:	4621      	mov	r1, r4
 80075cc:	4628      	mov	r0, r5
 80075ce:	f7ff ffa7 	bl	8007520 <_fflush_r>
 80075d2:	b938      	cbnz	r0, 80075e4 <__swbuf_r+0x74>
 80075d4:	4638      	mov	r0, r7
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d8:	4621      	mov	r1, r4
 80075da:	4628      	mov	r0, r5
 80075dc:	f000 f806 	bl	80075ec <__swsetup_r>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d0d5      	beq.n	8007590 <__swbuf_r+0x20>
 80075e4:	f04f 37ff 	mov.w	r7, #4294967295
 80075e8:	e7f4      	b.n	80075d4 <__swbuf_r+0x64>
	...

080075ec <__swsetup_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4b2a      	ldr	r3, [pc, #168]	; (8007698 <__swsetup_r+0xac>)
 80075f0:	4605      	mov	r5, r0
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	460c      	mov	r4, r1
 80075f6:	b118      	cbz	r0, 8007600 <__swsetup_r+0x14>
 80075f8:	6a03      	ldr	r3, [r0, #32]
 80075fa:	b90b      	cbnz	r3, 8007600 <__swsetup_r+0x14>
 80075fc:	f7ff f9d2 	bl	80069a4 <__sinit>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007606:	0718      	lsls	r0, r3, #28
 8007608:	d422      	bmi.n	8007650 <__swsetup_r+0x64>
 800760a:	06d9      	lsls	r1, r3, #27
 800760c:	d407      	bmi.n	800761e <__swsetup_r+0x32>
 800760e:	2309      	movs	r3, #9
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	e034      	b.n	8007688 <__swsetup_r+0x9c>
 800761e:	0758      	lsls	r0, r3, #29
 8007620:	d512      	bpl.n	8007648 <__swsetup_r+0x5c>
 8007622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007624:	b141      	cbz	r1, 8007638 <__swsetup_r+0x4c>
 8007626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800762a:	4299      	cmp	r1, r3
 800762c:	d002      	beq.n	8007634 <__swsetup_r+0x48>
 800762e:	4628      	mov	r0, r5
 8007630:	f7ff fb24 	bl	8006c7c <_free_r>
 8007634:	2300      	movs	r3, #0
 8007636:	6363      	str	r3, [r4, #52]	; 0x34
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800763e:	81a3      	strh	r3, [r4, #12]
 8007640:	2300      	movs	r3, #0
 8007642:	6063      	str	r3, [r4, #4]
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	f043 0308 	orr.w	r3, r3, #8
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	b94b      	cbnz	r3, 8007668 <__swsetup_r+0x7c>
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800765a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765e:	d003      	beq.n	8007668 <__swsetup_r+0x7c>
 8007660:	4621      	mov	r1, r4
 8007662:	4628      	mov	r0, r5
 8007664:	f000 f850 	bl	8007708 <__smakebuf_r>
 8007668:	89a0      	ldrh	r0, [r4, #12]
 800766a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800766e:	f010 0301 	ands.w	r3, r0, #1
 8007672:	d00a      	beq.n	800768a <__swsetup_r+0x9e>
 8007674:	2300      	movs	r3, #0
 8007676:	60a3      	str	r3, [r4, #8]
 8007678:	6963      	ldr	r3, [r4, #20]
 800767a:	425b      	negs	r3, r3
 800767c:	61a3      	str	r3, [r4, #24]
 800767e:	6923      	ldr	r3, [r4, #16]
 8007680:	b943      	cbnz	r3, 8007694 <__swsetup_r+0xa8>
 8007682:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007686:	d1c4      	bne.n	8007612 <__swsetup_r+0x26>
 8007688:	bd38      	pop	{r3, r4, r5, pc}
 800768a:	0781      	lsls	r1, r0, #30
 800768c:	bf58      	it	pl
 800768e:	6963      	ldrpl	r3, [r4, #20]
 8007690:	60a3      	str	r3, [r4, #8]
 8007692:	e7f4      	b.n	800767e <__swsetup_r+0x92>
 8007694:	2000      	movs	r0, #0
 8007696:	e7f7      	b.n	8007688 <__swsetup_r+0x9c>
 8007698:	20000068 	.word	0x20000068

0800769c <_sbrk_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d06      	ldr	r5, [pc, #24]	; (80076b8 <_sbrk_r+0x1c>)
 80076a0:	2300      	movs	r3, #0
 80076a2:	4604      	mov	r4, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	602b      	str	r3, [r5, #0]
 80076a8:	f7f9 fc6e 	bl	8000f88 <_sbrk>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_sbrk_r+0x1a>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_sbrk_r+0x1a>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20004d08 	.word	0x20004d08

080076bc <__swhatbuf_r>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	460c      	mov	r4, r1
 80076c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c4:	2900      	cmp	r1, #0
 80076c6:	b096      	sub	sp, #88	; 0x58
 80076c8:	4615      	mov	r5, r2
 80076ca:	461e      	mov	r6, r3
 80076cc:	da0d      	bge.n	80076ea <__swhatbuf_r+0x2e>
 80076ce:	89a3      	ldrh	r3, [r4, #12]
 80076d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076d4:	f04f 0100 	mov.w	r1, #0
 80076d8:	bf0c      	ite	eq
 80076da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80076de:	2340      	movne	r3, #64	; 0x40
 80076e0:	2000      	movs	r0, #0
 80076e2:	6031      	str	r1, [r6, #0]
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	b016      	add	sp, #88	; 0x58
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	466a      	mov	r2, sp
 80076ec:	f000 f848 	bl	8007780 <_fstat_r>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	dbec      	blt.n	80076ce <__swhatbuf_r+0x12>
 80076f4:	9901      	ldr	r1, [sp, #4]
 80076f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80076fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80076fe:	4259      	negs	r1, r3
 8007700:	4159      	adcs	r1, r3
 8007702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007706:	e7eb      	b.n	80076e0 <__swhatbuf_r+0x24>

08007708 <__smakebuf_r>:
 8007708:	898b      	ldrh	r3, [r1, #12]
 800770a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800770c:	079d      	lsls	r5, r3, #30
 800770e:	4606      	mov	r6, r0
 8007710:	460c      	mov	r4, r1
 8007712:	d507      	bpl.n	8007724 <__smakebuf_r+0x1c>
 8007714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	6123      	str	r3, [r4, #16]
 800771c:	2301      	movs	r3, #1
 800771e:	6163      	str	r3, [r4, #20]
 8007720:	b002      	add	sp, #8
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	ab01      	add	r3, sp, #4
 8007726:	466a      	mov	r2, sp
 8007728:	f7ff ffc8 	bl	80076bc <__swhatbuf_r>
 800772c:	9900      	ldr	r1, [sp, #0]
 800772e:	4605      	mov	r5, r0
 8007730:	4630      	mov	r0, r6
 8007732:	f7ff fb0f 	bl	8006d54 <_malloc_r>
 8007736:	b948      	cbnz	r0, 800774c <__smakebuf_r+0x44>
 8007738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800773c:	059a      	lsls	r2, r3, #22
 800773e:	d4ef      	bmi.n	8007720 <__smakebuf_r+0x18>
 8007740:	f023 0303 	bic.w	r3, r3, #3
 8007744:	f043 0302 	orr.w	r3, r3, #2
 8007748:	81a3      	strh	r3, [r4, #12]
 800774a:	e7e3      	b.n	8007714 <__smakebuf_r+0xc>
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	6020      	str	r0, [r4, #0]
 8007750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	9b00      	ldr	r3, [sp, #0]
 8007758:	6163      	str	r3, [r4, #20]
 800775a:	9b01      	ldr	r3, [sp, #4]
 800775c:	6120      	str	r0, [r4, #16]
 800775e:	b15b      	cbz	r3, 8007778 <__smakebuf_r+0x70>
 8007760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007764:	4630      	mov	r0, r6
 8007766:	f000 f81d 	bl	80077a4 <_isatty_r>
 800776a:	b128      	cbz	r0, 8007778 <__smakebuf_r+0x70>
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	f023 0303 	bic.w	r3, r3, #3
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	81a3      	strh	r3, [r4, #12]
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	431d      	orrs	r5, r3
 800777c:	81a5      	strh	r5, [r4, #12]
 800777e:	e7cf      	b.n	8007720 <__smakebuf_r+0x18>

08007780 <_fstat_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d07      	ldr	r5, [pc, #28]	; (80077a0 <_fstat_r+0x20>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	f7f9 fbd2 	bl	8000f36 <_fstat>
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	d102      	bne.n	800779c <_fstat_r+0x1c>
 8007796:	682b      	ldr	r3, [r5, #0]
 8007798:	b103      	cbz	r3, 800779c <_fstat_r+0x1c>
 800779a:	6023      	str	r3, [r4, #0]
 800779c:	bd38      	pop	{r3, r4, r5, pc}
 800779e:	bf00      	nop
 80077a0:	20004d08 	.word	0x20004d08

080077a4 <_isatty_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4d06      	ldr	r5, [pc, #24]	; (80077c0 <_isatty_r+0x1c>)
 80077a8:	2300      	movs	r3, #0
 80077aa:	4604      	mov	r4, r0
 80077ac:	4608      	mov	r0, r1
 80077ae:	602b      	str	r3, [r5, #0]
 80077b0:	f7f9 fbd1 	bl	8000f56 <_isatty>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_isatty_r+0x1a>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	b103      	cbz	r3, 80077be <_isatty_r+0x1a>
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	20004d08 	.word	0x20004d08

080077c4 <_init>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	bf00      	nop
 80077c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ca:	bc08      	pop	{r3}
 80077cc:	469e      	mov	lr, r3
 80077ce:	4770      	bx	lr

080077d0 <_fini>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	bf00      	nop
 80077d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d6:	bc08      	pop	{r3}
 80077d8:	469e      	mov	lr, r3
 80077da:	4770      	bx	lr
