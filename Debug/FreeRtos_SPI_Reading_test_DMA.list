
FreeRtos_SPI_Reading_test_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800753c  0800753c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800753c  0800753c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007544  08007544  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800754c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca0  2000006c  080075b8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d0c  080075b8  00024d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b309  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fb5  00000000  00000000  0003b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120e  00000000  00000000  00040b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a62d  00000000  00000000  00041d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bca3  00000000  00000000  0005c33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c124  00000000  00000000  00077fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068b4  00000000  00000000  00114104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0011a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007474 	.word	0x08007474

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007474 	.word	0x08007474

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <MX_DMA_Init+0x3c>)
 800058c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2105      	movs	r1, #5
 80005a2:	200e      	movs	r0, #14
 80005a4:	f000 fd3c 	bl	8001020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80005a8:	200e      	movs	r0, #14
 80005aa:	f000 fd55 	bl	8001058 <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadSpi */
  ReadSpiHandle = osThreadNew(Read_spi, NULL, &ReadSpi_attributes);
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <MX_FREERTOS_Init+0x18>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_FREERTOS_Init+0x1c>)
 80005c6:	f003 fa8b 	bl	8003ae0 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <MX_FREERTOS_Init+0x20>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	080074c4 	.word	0x080074c4
 80005d8:	080005e1 	.word	0x080005e1
 80005dc:	20000088 	.word	0x20000088

080005e0 <Read_spi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_spi */
void Read_spi(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	uint16_t reading[1];
  /* USER CODE BEGIN Read_spi */
	 HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)reading, sizeof(reading));
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2202      	movs	r2, #2
 80005ee:	4619      	mov	r1, r3
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <Read_spi+0x2c>)
 80005f2:	f001 ffa1 	bl	8002538 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  printf("reading values is: %d\n\r",reading[0]);
 80005f6:	89bb      	ldrh	r3, [r7, #12]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <Read_spi+0x30>)
 80005fc:	f006 f860 	bl	80066c0 <iprintf>
	  //HAL_Delay(1000);
    osDelay(1000);
 8000600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000604:	f003 fafe 	bl	8003c04 <osDelay>
	  printf("reading values is: %d\n\r",reading[0]);
 8000608:	e7f5      	b.n	80005f6 <Read_spi+0x16>
 800060a:	bf00      	nop
 800060c:	2000008c 	.word	0x2000008c
 8000610:	08007494 	.word	0x08007494

08000614 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a2c      	ldr	r2, [pc, #176]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <MX_GPIO_Init+0xd0>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <MX_GPIO_Init+0xd4>)
 80006a0:	f001 f9dc 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_GPIO_Init+0xd8>)
 80006bc:	f001 f84a 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c0:	2320      	movs	r3, #32
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_GPIO_Init+0xd4>)
 80006d8:	f001 f83c 	bl	8001754 <HAL_GPIO_Init>

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020800 	.word	0x40020800

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fb9a 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f810 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f7ff ff8a 	bl	8000614 <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f7ff ff3c 	bl	800057c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000704:	f000 faf6 	bl	8000cf4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000708:	f000 f88a 	bl	8000820 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800070c:	f003 f99e 	bl	8003a4c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000710:	f7ff ff54 	bl	80005bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000714:	f003 f9be 	bl	8003a94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x28>
	...

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f006 f81d 	bl	800676a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <SystemClock_Config+0xcc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd0>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800078c:	2310      	movs	r3, #16
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000790:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000796:	2304      	movs	r3, #4
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079a:	2304      	movs	r3, #4
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f974 	bl	8001a90 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ae:	f000 f831 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fbd6 	bl	8001f80 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007da:	f000 f81b 	bl	8000814 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 fb35 	bl	8000e70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40000400 	.word	0x40000400

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_SPI2_Init+0x60>)
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_SPI2_Init+0x64>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_SPI2_Init+0x60>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_SPI2_Init+0x60>)
 8000832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000836:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_SPI2_Init+0x60>)
 800083a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800083e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_SPI2_Init+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_SPI2_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_SPI2_Init+0x60>)
 800084e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000852:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_SPI2_Init+0x60>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_SPI2_Init+0x60>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_SPI2_Init+0x60>)
 8000862:	2200      	movs	r2, #0
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_SPI2_Init+0x60>)
 8000868:	220a      	movs	r2, #10
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_SPI2_Init+0x60>)
 800086e:	f001 fdd9 	bl	8002424 <HAL_SPI_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8000878:	f7ff ffcc 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000008c 	.word	0x2000008c
 8000884:	40003800 	.word	0x40003800

08000888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a40      	ldr	r2, [pc, #256]	; (80009a8 <HAL_SPI_MspInit+0x120>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d17a      	bne.n	80009a0 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <HAL_SPI_MspInit+0x124>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a3e      	ldr	r2, [pc, #248]	; (80009ac <HAL_SPI_MspInit+0x124>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <HAL_SPI_MspInit+0x124>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b38      	ldr	r3, [pc, #224]	; (80009ac <HAL_SPI_MspInit+0x124>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a37      	ldr	r2, [pc, #220]	; (80009ac <HAL_SPI_MspInit+0x124>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <HAL_SPI_MspInit+0x124>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <HAL_SPI_MspInit+0x124>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a30      	ldr	r2, [pc, #192]	; (80009ac <HAL_SPI_MspInit+0x124>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <HAL_SPI_MspInit+0x124>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008fe:	2308      	movs	r3, #8
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4825      	ldr	r0, [pc, #148]	; (80009b0 <HAL_SPI_MspInit+0x128>)
 800091a:	f000 ff1b 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800091e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000930:	2305      	movs	r3, #5
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	481e      	ldr	r0, [pc, #120]	; (80009b4 <HAL_SPI_MspInit+0x12c>)
 800093c:	f000 ff0a 	bl	8001754 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 8000942:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <HAL_SPI_MspInit+0x134>)
 8000944:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 800095a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 8000962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000966:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 800096a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 8000972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000976:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 8000986:	f000 fb75 	bl	8001074 <HAL_DMA_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8000990:	f7ff ff40 	bl	8000814 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 8000998:	64da      	str	r2, [r3, #76]	; 0x4c
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_SPI_MspInit+0x130>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40003800 	.word	0x40003800
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020400 	.word	0x40020400
 80009b8:	200000e4 	.word	0x200000e4
 80009bc:	40026058 	.word	0x40026058

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_MspInit+0x54>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <HAL_MspInit+0x54>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x54>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_MspInit+0x54>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_MspInit+0x54>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_MspInit+0x54>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	210f      	movs	r1, #15
 8000a02:	f06f 0001 	mvn.w	r0, #1
 8000a06:	f000 fb0b 	bl	8001020 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	; 0x38
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	4b33      	ldr	r3, [pc, #204]	; (8000afc <HAL_InitTick+0xe4>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a32      	ldr	r2, [pc, #200]	; (8000afc <HAL_InitTick+0xe4>)
 8000a32:	f043 0302 	orr.w	r3, r3, #2
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b30      	ldr	r3, [pc, #192]	; (8000afc <HAL_InitTick+0xe4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a44:	f107 0210 	add.w	r2, r7, #16
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fcb6 	bl	80023c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a5e:	f001 fc87 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8000a62:	6378      	str	r0, [r7, #52]	; 0x34
 8000a64:	e004      	b.n	8000a70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a66:	f001 fc83 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a72:	4a23      	ldr	r2, [pc, #140]	; (8000b00 <HAL_InitTick+0xe8>)
 8000a74:	fba2 2303 	umull	r2, r3, r2, r3
 8000a78:	0c9b      	lsrs	r3, r3, #18
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <HAL_InitTick+0xec>)
 8000a80:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <HAL_InitTick+0xf0>)
 8000a82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <HAL_InitTick+0xec>)
 8000a86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a8a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000a8c:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <HAL_InitTick+0xec>)
 8000a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a90:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <HAL_InitTick+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <HAL_InitTick+0xec>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_InitTick+0xec>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000aa4:	4817      	ldr	r0, [pc, #92]	; (8000b04 <HAL_InitTick+0xec>)
 8000aa6:	f002 f94b 	bl	8002d40 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ab0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d11b      	bne.n	8000af0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000ab8:	4812      	ldr	r0, [pc, #72]	; (8000b04 <HAL_InitTick+0xec>)
 8000aba:	f002 f99b 	bl	8002df4 <HAL_TIM_Base_Start_IT>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d111      	bne.n	8000af0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000acc:	201d      	movs	r0, #29
 8000ace:	f000 fac3 	bl	8001058 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d808      	bhi.n	8000aea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	201d      	movs	r0, #29
 8000ade:	f000 fa9f 	bl	8001020 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_InitTick+0xf4>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	e002      	b.n	8000af0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000af0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3738      	adds	r7, #56	; 0x38
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	431bde83 	.word	0x431bde83
 8000b04:	20000144 	.word	0x20000144
 8000b08:	40000400 	.word	0x40000400
 8000b0c:	20000004 	.word	0x20000004

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <DMA1_Stream3_IRQHandler+0x10>)
 8000b42:	f000 fb9d 	bl	8001280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000e4 	.word	0x200000e4

08000b50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <TIM3_IRQHandler+0x10>)
 8000b56:	f002 f9af 	bl	8002eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000144 	.word	0x20000144

08000b64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e00a      	b.n	8000b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b76:	f3af 8000 	nop.w
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <_read+0x12>
  }

  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e009      	b.n	8000bc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f889 	bl	8000cd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbf1      	blt.n	8000bb0 <_write+0x12>
  }
  return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_close>:

int _close(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_isatty>:

int _isatty(int file)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f005 fe20 	bl	80068b4 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20020000 	.word	0x20020000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	2000018c 	.word	0x2000018c
 8000ca8:	20004d10 	.word	0x20004d10

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__io_putchar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 8000cd8:	1d39      	adds	r1, r7, #4
 8000cda:	230a      	movs	r3, #10
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <__io_putchar+0x20>)
 8000ce0:	f002 fafb 	bl	80032da <HAL_UART_Transmit>
	return ch;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000190 	.word	0x20000190

08000cf4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART2_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f002 fa88 	bl	8003240 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f7ff fd6d 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000190 	.word	0x20000190
 8000d44:	40004400 	.word	0x40004400

08000d48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_UART_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12b      	bne.n	8000dc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000da2:	230c      	movs	r3, #12
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db2:	2307      	movs	r3, #7
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_UART_MspInit+0x8c>)
 8000dbe:	f000 fcc9 	bl	8001754 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dde:	490e      	ldr	r1, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df4:	4c0b      	ldr	r4, [pc, #44]	; (8000e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e02:	f7ff ff53 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f005 fd5b 	bl	80068c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fc71 	bl	80006f0 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e1c:	0800754c 	.word	0x0800754c
  ldr r2, =_sbss
 8000e20:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e24:	20004d0c 	.word	0x20004d0c

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f8d8 	bl	800100a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f7ff fddc 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fdae 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	200001d4 	.word	0x200001d4

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200001d4 	.word	0x200001d4

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff4c 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001032:	f7ff ff61 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001036:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	6978      	ldr	r0, [r7, #20]
 800103e:	f7ff ffb1 	bl	8000fa4 <NVIC_EncodePriority>
 8001042:	4602      	mov	r2, r0
 8001044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff80 	bl	8000f50 <__NVIC_SetPriority>
}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff54 	bl	8000f14 <__NVIC_EnableIRQ>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ff0a 	bl	8000e98 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e099      	b.n	80011c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2202      	movs	r2, #2
 8001094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b0:	e00f      	b.n	80010d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010b2:	f7ff fef1 	bl	8000e98 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d908      	bls.n	80010d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2220      	movs	r2, #32
 80010c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e078      	b.n	80011c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e8      	bne.n	80010b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_DMA_Init+0x158>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4313      	orrs	r3, r2
 8001122:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	2b04      	cmp	r3, #4
 800112a:	d107      	bne.n	800113c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4313      	orrs	r3, r2
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f023 0307 	bic.w	r3, r3, #7
 8001152:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	4313      	orrs	r3, r2
 800115c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	2b04      	cmp	r3, #4
 8001164:	d117      	bne.n	8001196 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00e      	beq.n	8001196 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fa6f 	bl	800165c <DMA_CheckFifoParam>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2240      	movs	r2, #64	; 0x40
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001192:	2301      	movs	r3, #1
 8001194:	e016      	b.n	80011c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 fa26 	bl	80015f0 <DMA_CalcBaseAndBitshift>
 80011a4:	4603      	mov	r3, r0
 80011a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	223f      	movs	r2, #63	; 0x3f
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	f010803f 	.word	0xf010803f

080011d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d101      	bne.n	80011f6 <HAL_DMA_Start_IT+0x26>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e040      	b.n	8001278 <HAL_DMA_Start_IT+0xa8>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d12f      	bne.n	800126a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2202      	movs	r2, #2
 800120e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 f9b8 	bl	8001594 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001228:	223f      	movs	r2, #63	; 0x3f
 800122a:	409a      	lsls	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0216 	orr.w	r2, r2, #22
 800123e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0208 	orr.w	r2, r2, #8
 8001256:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e005      	b.n	8001276 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001272:	2302      	movs	r3, #2
 8001274:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001276:	7dfb      	ldrb	r3, [r7, #23]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800128c:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <HAL_DMA_IRQHandler+0x248>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a8e      	ldr	r2, [pc, #568]	; (80014cc <HAL_DMA_IRQHandler+0x24c>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	0a9b      	lsrs	r3, r3, #10
 8001298:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012aa:	2208      	movs	r2, #8
 80012ac:	409a      	lsls	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d01a      	beq.n	80012ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0204 	bic.w	r2, r2, #4
 80012d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d8:	2208      	movs	r2, #8
 80012da:	409a      	lsls	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e4:	f043 0201 	orr.w	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f0:	2201      	movs	r2, #1
 80012f2:	409a      	lsls	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d012      	beq.n	8001322 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00b      	beq.n	8001322 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130e:	2201      	movs	r2, #1
 8001310:	409a      	lsls	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131a:	f043 0202 	orr.w	r2, r3, #2
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001326:	2204      	movs	r2, #4
 8001328:	409a      	lsls	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d012      	beq.n	8001358 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	2204      	movs	r2, #4
 8001346:	409a      	lsls	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	f043 0204 	orr.w	r2, r3, #4
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135c:	2210      	movs	r2, #16
 800135e:	409a      	lsls	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d043      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d03c      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137a:	2210      	movs	r2, #16
 800137c:	409a      	lsls	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d018      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d108      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d024      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
 80013ae:	e01f      	b.n	80013f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01b      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	4798      	blx	r3
 80013c0:	e016      	b.n	80013f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d107      	bne.n	80013e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0208 	bic.w	r2, r2, #8
 80013de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f4:	2220      	movs	r2, #32
 80013f6:	409a      	lsls	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 808f 	beq.w	8001520 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8087 	beq.w	8001520 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	2220      	movs	r2, #32
 8001418:	409a      	lsls	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b05      	cmp	r3, #5
 8001428:	d136      	bne.n	8001498 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0216 	bic.w	r2, r2, #22
 8001438:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001448:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <HAL_DMA_IRQHandler+0x1da>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0208 	bic.w	r2, r2, #8
 8001468:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146e:	223f      	movs	r2, #63	; 0x3f
 8001470:	409a      	lsls	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148a:	2b00      	cmp	r3, #0
 800148c:	d07e      	beq.n	800158c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4798      	blx	r3
        }
        return;
 8001496:	e079      	b.n	800158c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d01d      	beq.n	80014e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10d      	bne.n	80014d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d031      	beq.n	8001520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	4798      	blx	r3
 80014c4:	e02c      	b.n	8001520 <HAL_DMA_IRQHandler+0x2a0>
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000
 80014cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d023      	beq.n	8001520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
 80014e0:	e01e      	b.n	8001520 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10f      	bne.n	8001510 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0210 	bic.w	r2, r2, #16
 80014fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	2b00      	cmp	r3, #0
 8001526:	d032      	beq.n	800158e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d022      	beq.n	800157a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2205      	movs	r2, #5
 8001538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3301      	adds	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	429a      	cmp	r2, r3
 8001556:	d307      	bcc.n	8001568 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f2      	bne.n	800154c <HAL_DMA_IRQHandler+0x2cc>
 8001566:	e000      	b.n	800156a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001568:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
 800158a:	e000      	b.n	800158e <HAL_DMA_IRQHandler+0x30e>
        return;
 800158c:	bf00      	nop
    }
  }
}
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b40      	cmp	r3, #64	; 0x40
 80015c0:	d108      	bne.n	80015d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015d2:	e007      	b.n	80015e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	60da      	str	r2, [r3, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	3b10      	subs	r3, #16
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <DMA_CalcBaseAndBitshift+0x64>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <DMA_CalcBaseAndBitshift+0x68>)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d909      	bls.n	8001632 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	1d1a      	adds	r2, r3, #4
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	659a      	str	r2, [r3, #88]	; 0x58
 8001630:	e007      	b.n	8001642 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	aaaaaaab 	.word	0xaaaaaaab
 8001658:	08007500 	.word	0x08007500

0800165c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d11f      	bne.n	80016b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d856      	bhi.n	800172a <DMA_CheckFifoParam+0xce>
 800167c:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <DMA_CheckFifoParam+0x28>)
 800167e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001682:	bf00      	nop
 8001684:	08001695 	.word	0x08001695
 8001688:	080016a7 	.word	0x080016a7
 800168c:	08001695 	.word	0x08001695
 8001690:	0800172b 	.word	0x0800172b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d046      	beq.n	800172e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a4:	e043      	b.n	800172e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ae:	d140      	bne.n	8001732 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b4:	e03d      	b.n	8001732 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016be:	d121      	bne.n	8001704 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d837      	bhi.n	8001736 <DMA_CheckFifoParam+0xda>
 80016c6:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <DMA_CheckFifoParam+0x70>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	080016e3 	.word	0x080016e3
 80016d4:	080016dd 	.word	0x080016dd
 80016d8:	080016f5 	.word	0x080016f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
      break;
 80016e0:	e030      	b.n	8001744 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d025      	beq.n	800173a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f2:	e022      	b.n	800173a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016fc:	d11f      	bne.n	800173e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001702:	e01c      	b.n	800173e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d903      	bls.n	8001712 <DMA_CheckFifoParam+0xb6>
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d003      	beq.n	8001718 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001710:	e018      	b.n	8001744 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
      break;
 8001716:	e015      	b.n	8001744 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00e      	beq.n	8001742 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
      break;
 8001728:	e00b      	b.n	8001742 <DMA_CheckFifoParam+0xe6>
      break;
 800172a:	bf00      	nop
 800172c:	e00a      	b.n	8001744 <DMA_CheckFifoParam+0xe8>
      break;
 800172e:	bf00      	nop
 8001730:	e008      	b.n	8001744 <DMA_CheckFifoParam+0xe8>
      break;
 8001732:	bf00      	nop
 8001734:	e006      	b.n	8001744 <DMA_CheckFifoParam+0xe8>
      break;
 8001736:	bf00      	nop
 8001738:	e004      	b.n	8001744 <DMA_CheckFifoParam+0xe8>
      break;
 800173a:	bf00      	nop
 800173c:	e002      	b.n	8001744 <DMA_CheckFifoParam+0xe8>
      break;   
 800173e:	bf00      	nop
 8001740:	e000      	b.n	8001744 <DMA_CheckFifoParam+0xe8>
      break;
 8001742:	bf00      	nop
    }
  } 
  
  return status; 
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e159      	b.n	8001a24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	f040 8148 	bne.w	8001a1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d005      	beq.n	80017a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d130      	bne.n	8001808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 0201 	and.w	r2, r3, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b03      	cmp	r3, #3
 8001812:	d017      	beq.n	8001844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d123      	bne.n	8001898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a2 	beq.w	8001a1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <HAL_GPIO_Init+0x2e8>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a56      	ldr	r2, [pc, #344]	; (8001a3c <HAL_GPIO_Init+0x2e8>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b54      	ldr	r3, [pc, #336]	; (8001a3c <HAL_GPIO_Init+0x2e8>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f6:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <HAL_GPIO_Init+0x2ec>)
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a49      	ldr	r2, [pc, #292]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d019      	beq.n	8001956 <HAL_GPIO_Init+0x202>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a48      	ldr	r2, [pc, #288]	; (8001a48 <HAL_GPIO_Init+0x2f4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d013      	beq.n	8001952 <HAL_GPIO_Init+0x1fe>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <HAL_GPIO_Init+0x2f8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00d      	beq.n	800194e <HAL_GPIO_Init+0x1fa>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a46      	ldr	r2, [pc, #280]	; (8001a50 <HAL_GPIO_Init+0x2fc>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d007      	beq.n	800194a <HAL_GPIO_Init+0x1f6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a45      	ldr	r2, [pc, #276]	; (8001a54 <HAL_GPIO_Init+0x300>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d101      	bne.n	8001946 <HAL_GPIO_Init+0x1f2>
 8001942:	2304      	movs	r3, #4
 8001944:	e008      	b.n	8001958 <HAL_GPIO_Init+0x204>
 8001946:	2307      	movs	r3, #7
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x204>
 800194a:	2303      	movs	r3, #3
 800194c:	e004      	b.n	8001958 <HAL_GPIO_Init+0x204>
 800194e:	2302      	movs	r3, #2
 8001950:	e002      	b.n	8001958 <HAL_GPIO_Init+0x204>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x204>
 8001956:	2300      	movs	r3, #0
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f002 0203 	and.w	r2, r2, #3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4093      	lsls	r3, r2
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001968:	4935      	ldr	r1, [pc, #212]	; (8001a40 <HAL_GPIO_Init+0x2ec>)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_GPIO_Init+0x304>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199a:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <HAL_GPIO_Init+0x304>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_GPIO_Init+0x304>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c4:	4a24      	ldr	r2, [pc, #144]	; (8001a58 <HAL_GPIO_Init+0x304>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_GPIO_Init+0x304>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ee:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <HAL_GPIO_Init+0x304>)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_GPIO_Init+0x304>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a18:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <HAL_GPIO_Init+0x304>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3301      	adds	r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b0f      	cmp	r3, #15
 8001a28:	f67f aea2 	bls.w	8001770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40013c00 	.word	0x40013c00

08001a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a78:	e003      	b.n	8001a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	041a      	lsls	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	619a      	str	r2, [r3, #24]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e267      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d075      	beq.n	8001b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aae:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aba:	4b85      	ldr	r3, [pc, #532]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d112      	bne.n	8001aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac6:	4b82      	ldr	r3, [pc, #520]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad2:	d10b      	bne.n	8001aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	4b7e      	ldr	r3, [pc, #504]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d05b      	beq.n	8001b98 <HAL_RCC_OscConfig+0x108>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d157      	bne.n	8001b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e242      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af4:	d106      	bne.n	8001b04 <HAL_RCC_OscConfig+0x74>
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e01d      	b.n	8001b40 <HAL_RCC_OscConfig+0xb0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x98>
 8001b0e:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6f      	ldr	r2, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6c      	ldr	r2, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0xb0>
 8001b28:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a68      	ldr	r2, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f9a6 	bl	8000e98 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff f9a2 	bl	8000e98 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e207      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0xc0>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff f992 	bl	8000e98 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff f98e 	bl	8000e98 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1f3      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	4b51      	ldr	r3, [pc, #324]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0xe8>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d063      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d11c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d116      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x152>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1c7      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4937      	ldr	r1, [pc, #220]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	e03a      	b.n	8001c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c00:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_RCC_OscConfig+0x244>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff f947 	bl	8000e98 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff f943 	bl	8000e98 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e1a8      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4925      	ldr	r1, [pc, #148]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e015      	b.n	8001c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_OscConfig+0x244>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f926 	bl	8000e98 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c50:	f7ff f922 	bl	8000e98 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e187      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d036      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d016      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCC_OscConfig+0x248>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7ff f906 	bl	8000e98 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c90:	f7ff f902 	bl	8000e98 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e167      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x200>
 8001cae:	e01b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_OscConfig+0x248>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f8ef 	bl	8000e98 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	e00e      	b.n	8001cdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbe:	f7ff f8eb 	bl	8000e98 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d907      	bls.n	8001cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e150      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	42470000 	.word	0x42470000
 8001cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ea      	bne.n	8001cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8097 	beq.w	8001e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	4b7d      	ldr	r3, [pc, #500]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a7c      	ldr	r2, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <HAL_RCC_OscConfig+0x474>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b74      	ldr	r3, [pc, #464]	; (8001f04 <HAL_RCC_OscConfig+0x474>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a73      	ldr	r2, [pc, #460]	; (8001f04 <HAL_RCC_OscConfig+0x474>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f8ab 	bl	8000e98 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff f8a7 	bl	8000e98 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e10c      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b6a      	ldr	r3, [pc, #424]	; (8001f04 <HAL_RCC_OscConfig+0x474>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x2ea>
 8001d6c:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a63      	ldr	r2, [pc, #396]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	e01c      	b.n	8001db4 <HAL_RCC_OscConfig+0x324>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x30c>
 8001d82:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a5e      	ldr	r2, [pc, #376]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a5b      	ldr	r2, [pc, #364]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0x324>
 8001d9c:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a57      	ldr	r2, [pc, #348]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a54      	ldr	r2, [pc, #336]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d015      	beq.n	8001de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f86c 	bl	8000e98 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc4:	f7ff f868 	bl	8000e98 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e0cb      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0ee      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x334>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff f856 	bl	8000e98 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7ff f852 	bl	8000e98 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0b5      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ee      	bne.n	8001df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	4a38      	ldr	r2, [pc, #224]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a1 	beq.w	8001f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d05c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d141      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <HAL_RCC_OscConfig+0x478>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff f826 	bl	8000e98 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e50:	f7ff f822 	bl	8000e98 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e087      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	019b      	lsls	r3, r3, #6
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	491b      	ldr	r1, [pc, #108]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_RCC_OscConfig+0x478>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7fe fffb 	bl	8000e98 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7fe fff7 	bl	8000e98 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e05c      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x416>
 8001ec4:	e054      	b.n	8001f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_OscConfig+0x478>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7fe ffe4 	bl	8000e98 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7fe ffe0 	bl	8000e98 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e045      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x444>
 8001ef2:	e03d      	b.n	8001f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e038      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000
 8001f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x4ec>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d028      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d121      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d11a      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d111      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	3b01      	subs	r3, #1
 8001f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0cc      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d90c      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0b8      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd4:	4b59      	ldr	r3, [pc, #356]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a58      	ldr	r2, [pc, #352]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a52      	ldr	r2, [pc, #328]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	494d      	ldr	r1, [pc, #308]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d044      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d119      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e07f      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d003      	beq.n	800203e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203a:	2b03      	cmp	r3, #3
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06f      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e067      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b37      	ldr	r3, [pc, #220]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4934      	ldr	r1, [pc, #208]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7fe ff12 	bl	8000e98 <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7fe ff0e 	bl	8000e98 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e04f      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d20c      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e032      	b.n	800212e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4916      	ldr	r1, [pc, #88]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	490e      	ldr	r1, [pc, #56]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002106:	f000 f821 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800210a:	4602      	mov	r2, r0
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	490a      	ldr	r1, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	5ccb      	ldrb	r3, [r1, r3]
 800211a:	fa22 f303 	lsr.w	r3, r2, r3
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fc76 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00
 800213c:	40023800 	.word	0x40023800
 8002140:	080074e8 	.word	0x080074e8
 8002144:	20000000 	.word	0x20000000
 8002148:	20000004 	.word	0x20000004

0800214c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002150:	b094      	sub	sp, #80	; 0x50
 8002152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	647b      	str	r3, [r7, #68]	; 0x44
 8002158:	2300      	movs	r3, #0
 800215a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800215c:	2300      	movs	r3, #0
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002164:	4b79      	ldr	r3, [pc, #484]	; (800234c <HAL_RCC_GetSysClockFreq+0x200>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d00d      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x40>
 8002170:	2b08      	cmp	r3, #8
 8002172:	f200 80e1 	bhi.w	8002338 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x34>
 800217a:	2b04      	cmp	r3, #4
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x3a>
 800217e:	e0db      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b73      	ldr	r3, [pc, #460]	; (8002350 <HAL_RCC_GetSysClockFreq+0x204>)
 8002182:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002184:	e0db      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002186:	4b73      	ldr	r3, [pc, #460]	; (8002354 <HAL_RCC_GetSysClockFreq+0x208>)
 8002188:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800218a:	e0d8      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800218c:	4b6f      	ldr	r3, [pc, #444]	; (800234c <HAL_RCC_GetSysClockFreq+0x200>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002196:	4b6d      	ldr	r3, [pc, #436]	; (800234c <HAL_RCC_GetSysClockFreq+0x200>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a2:	4b6a      	ldr	r3, [pc, #424]	; (800234c <HAL_RCC_GetSysClockFreq+0x200>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	2200      	movs	r2, #0
 80021aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
 80021b6:	2300      	movs	r3, #0
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021be:	4622      	mov	r2, r4
 80021c0:	462b      	mov	r3, r5
 80021c2:	f04f 0000 	mov.w	r0, #0
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	0159      	lsls	r1, r3, #5
 80021cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d0:	0150      	lsls	r0, r2, #5
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4621      	mov	r1, r4
 80021d8:	1a51      	subs	r1, r2, r1
 80021da:	6139      	str	r1, [r7, #16]
 80021dc:	4629      	mov	r1, r5
 80021de:	eb63 0301 	sbc.w	r3, r3, r1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021f0:	4659      	mov	r1, fp
 80021f2:	018b      	lsls	r3, r1, #6
 80021f4:	4651      	mov	r1, sl
 80021f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021fa:	4651      	mov	r1, sl
 80021fc:	018a      	lsls	r2, r1, #6
 80021fe:	4651      	mov	r1, sl
 8002200:	ebb2 0801 	subs.w	r8, r2, r1
 8002204:	4659      	mov	r1, fp
 8002206:	eb63 0901 	sbc.w	r9, r3, r1
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800221a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800221e:	4690      	mov	r8, r2
 8002220:	4699      	mov	r9, r3
 8002222:	4623      	mov	r3, r4
 8002224:	eb18 0303 	adds.w	r3, r8, r3
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	462b      	mov	r3, r5
 800222c:	eb49 0303 	adc.w	r3, r9, r3
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800223e:	4629      	mov	r1, r5
 8002240:	024b      	lsls	r3, r1, #9
 8002242:	4621      	mov	r1, r4
 8002244:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002248:	4621      	mov	r1, r4
 800224a:	024a      	lsls	r2, r1, #9
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002252:	2200      	movs	r2, #0
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
 8002256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002258:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800225c:	f7fe f810 	bl	8000280 <__aeabi_uldivmod>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4613      	mov	r3, r2
 8002266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002268:	e058      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_RCC_GetSysClockFreq+0x200>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	099b      	lsrs	r3, r3, #6
 8002270:	2200      	movs	r2, #0
 8002272:	4618      	mov	r0, r3
 8002274:	4611      	mov	r1, r2
 8002276:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
 8002280:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002284:	4642      	mov	r2, r8
 8002286:	464b      	mov	r3, r9
 8002288:	f04f 0000 	mov.w	r0, #0
 800228c:	f04f 0100 	mov.w	r1, #0
 8002290:	0159      	lsls	r1, r3, #5
 8002292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002296:	0150      	lsls	r0, r2, #5
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4641      	mov	r1, r8
 800229e:	ebb2 0a01 	subs.w	sl, r2, r1
 80022a2:	4649      	mov	r1, r9
 80022a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022bc:	ebb2 040a 	subs.w	r4, r2, sl
 80022c0:	eb63 050b 	sbc.w	r5, r3, fp
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	00eb      	lsls	r3, r5, #3
 80022ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d2:	00e2      	lsls	r2, r4, #3
 80022d4:	4614      	mov	r4, r2
 80022d6:	461d      	mov	r5, r3
 80022d8:	4643      	mov	r3, r8
 80022da:	18e3      	adds	r3, r4, r3
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	464b      	mov	r3, r9
 80022e0:	eb45 0303 	adc.w	r3, r5, r3
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022f2:	4629      	mov	r1, r5
 80022f4:	028b      	lsls	r3, r1, #10
 80022f6:	4621      	mov	r1, r4
 80022f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022fc:	4621      	mov	r1, r4
 80022fe:	028a      	lsls	r2, r1, #10
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002306:	2200      	movs	r2, #0
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	61fa      	str	r2, [r7, #28]
 800230c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002310:	f7fd ffb6 	bl	8000280 <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4613      	mov	r3, r2
 800231a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_GetSysClockFreq+0x200>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800232c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800232e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetSysClockFreq+0x204>)
 800233a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002340:	4618      	mov	r0, r3
 8002342:	3750      	adds	r7, #80	; 0x50
 8002344:	46bd      	mov	sp, r7
 8002346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	00f42400 	.word	0x00f42400
 8002354:	007a1200 	.word	0x007a1200

08002358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_RCC_GetHCLKFreq+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000

08002370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002374:	f7ff fff0 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0a9b      	lsrs	r3, r3, #10
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4903      	ldr	r1, [pc, #12]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	080074f8 	.word	0x080074f8

08002398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800239c:	f7ff ffdc 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0b5b      	lsrs	r3, r3, #13
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	080074f8 	.word	0x080074f8

080023c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	220f      	movs	r2, #15
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_RCC_GetClockConfig+0x60>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0207 	and.w	r2, r3, #7
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	601a      	str	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40023c00 	.word	0x40023c00

08002424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07b      	b.n	800252e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002446:	d009      	beq.n	800245c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
 800244e:	e005      	b.n	800245c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fa06 	bl	8000888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	ea42 0103 	orr.w	r1, r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	f003 0104 	and.w	r1, r3, #4
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f003 0210 	and.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d110      	bne.n	8002574 <HAL_SPI_Receive_DMA+0x3c>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800255a:	d10b      	bne.n	8002574 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2204      	movs	r2, #4
 8002560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f8ac 	bl	80026c8 <HAL_SPI_TransmitReceive_DMA>
 8002570:	4603      	mov	r3, r0
 8002572:	e09f      	b.n	80026b4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_SPI_Receive_DMA+0x4a>
 800257e:	2302      	movs	r3, #2
 8002580:	e098      	b.n	80026b4 <HAL_SPI_Receive_DMA+0x17c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d002      	beq.n	800259c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800259a:	e086      	b.n	80026aa <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_SPI_Receive_DMA+0x70>
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025ac:	e07d      	b.n	80026aa <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2204      	movs	r2, #4
 80025b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ee:	d10f      	bne.n	8002610 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800260e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <HAL_SPI_Receive_DMA+0x184>)
 8002616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_SPI_Receive_DMA+0x188>)
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_SPI_Receive_DMA+0x18c>)
 8002626:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	2200      	movs	r2, #0
 800262e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	4619      	mov	r1, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002646:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002648:	f7fe fdc2 	bl	80011d0 <HAL_DMA_Start_IT>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00c      	beq.n	800266c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f043 0210 	orr.w	r2, r3, #16
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800266a:	e01e      	b.n	80026aa <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d007      	beq.n	800268a <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	08002a69 	.word	0x08002a69
 80026c0:	08002931 	.word	0x08002931
 80026c4:	08002aa1 	.word	0x08002aa1

080026c8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e0e3      	b.n	80028b0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80026fe:	7dbb      	ldrb	r3, [r7, #22]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d00d      	beq.n	8002720 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800270a:	d106      	bne.n	800271a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_SPI_TransmitReceive_DMA+0x52>
 8002714:	7dbb      	ldrb	r3, [r7, #22]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d002      	beq.n	8002720 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800271a:	2302      	movs	r3, #2
 800271c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800271e:	e0c2      	b.n	80028a6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002736:	e0b6      	b.n	80028a6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b04      	cmp	r3, #4
 8002742:	d003      	beq.n	800274c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2205      	movs	r2, #5
 8002748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	887a      	ldrh	r2, [r7, #2]
 8002762:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	887a      	ldrh	r2, [r7, #2]
 800276e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b04      	cmp	r3, #4
 800278c:	d108      	bne.n	80027a0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a49      	ldr	r2, [pc, #292]	; (80028b8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	4a48      	ldr	r2, [pc, #288]	; (80028bc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c
 800279e:	e007      	b.n	80027b0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a4:	4a46      	ldr	r2, [pc, #280]	; (80028c0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	4a45      	ldr	r2, [pc, #276]	; (80028c4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80027ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	4a44      	ldr	r2, [pc, #272]	; (80028c8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80027b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027bc:	2200      	movs	r2, #0
 80027be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	4619      	mov	r1, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80027d8:	f7fe fcfa 	bl	80011d0 <HAL_DMA_Start_IT>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00c      	beq.n	80027fc <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80027fa:	e054      	b.n	80028a6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	2200      	movs	r2, #0
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	2200      	movs	r2, #0
 800281a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002820:	2200      	movs	r2, #0
 8002822:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002828:	2200      	movs	r2, #0
 800282a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	4619      	mov	r1, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002842:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002844:	f7fe fcc4 	bl	80011d0 <HAL_DMA_Start_IT>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00c      	beq.n	8002868 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002866:	e01e      	b.n	80028a6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d007      	beq.n	8002886 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002884:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0220 	orr.w	r2, r2, #32
 8002894:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0202 	orr.w	r2, r2, #2
 80028a4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	08002a69 	.word	0x08002a69
 80028bc:	08002931 	.word	0x08002931
 80028c0:	08002a85 	.word	0x08002a85
 80028c4:	080029d9 	.word	0x080029d9
 80028c8:	08002aa1 	.word	0x08002aa1

080028cc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800293e:	f7fe faab 	bl	8000e98 <HAL_GetTick>
 8002942:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002952:	d03b      	beq.n	80029cc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0220 	bic.w	r2, r2, #32
 8002962:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <SPI_DMAReceiveCplt+0x58>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002974:	d108      	bne.n	8002988 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0203 	bic.w	r2, r2, #3
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	e007      	b.n	8002998 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	2164      	movs	r1, #100	; 0x64
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f927 	bl	8002bf0 <SPI_EndRxTransaction>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff ffa9 	bl	800291c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80029ca:	e002      	b.n	80029d2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff ff7d 	bl	80028cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029e6:	f7fe fa57 	bl	8000e98 <HAL_GetTick>
 80029ea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fa:	d02f      	beq.n	8002a5c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0220 	bic.w	r2, r2, #32
 8002a0a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	2164      	movs	r1, #100	; 0x64
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f953 	bl	8002cbc <SPI_EndRxTxTransaction>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0203 	bic.w	r2, r2, #3
 8002a36:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff ff61 	bl	800291c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002a5a:	e002      	b.n	8002a62 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff ff3f 	bl	80028e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff ff3c 	bl	80028f4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff ff38 	bl	8002908 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0203 	bic.w	r2, r2, #3
 8002abc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	f043 0210 	orr.w	r2, r3, #16
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff ff22 	bl	800291c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002af0:	f7fe f9d2 	bl	8000e98 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	4413      	add	r3, r2
 8002afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b00:	f7fe f9ca 	bl	8000e98 <HAL_GetTick>
 8002b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b06:	4b39      	ldr	r3, [pc, #228]	; (8002bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	015b      	lsls	r3, r3, #5
 8002b0c:	0d1b      	lsrs	r3, r3, #20
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b16:	e054      	b.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d050      	beq.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b20:	f7fe f9ba 	bl	8000e98 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d902      	bls.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13d      	bne.n	8002bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b4e:	d111      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b58:	d004      	beq.n	8002b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b62:	d107      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7c:	d10f      	bne.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e017      	b.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2301      	moveq	r3, #1
 8002bd4:	2300      	movne	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d19b      	bne.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000

08002bf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c04:	d111      	bne.n	8002c2a <SPI_EndRxTransaction+0x3a>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0e:	d004      	beq.n	8002c1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d107      	bne.n	8002c2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c32:	d12a      	bne.n	8002c8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d012      	beq.n	8002c64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff ff49 	bl	8002ae0 <SPI_WaitFlagStateUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02d      	beq.n	8002cb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e026      	b.n	8002cb2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff ff36 	bl	8002ae0 <SPI_WaitFlagStateUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01a      	beq.n	8002cb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e013      	b.n	8002cb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2101      	movs	r1, #1
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff ff23 	bl	8002ae0 <SPI_WaitFlagStateUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e000      	b.n	8002cb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <SPI_EndRxTxTransaction+0x7c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <SPI_EndRxTxTransaction+0x80>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0d5b      	lsrs	r3, r3, #21
 8002cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce6:	d112      	bne.n	8002d0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7ff fef4 	bl	8002ae0 <SPI_WaitFlagStateUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e00f      	b.n	8002d2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d24:	2b80      	cmp	r3, #128	; 0x80
 8002d26:	d0f2      	beq.n	8002d0e <SPI_EndRxTxTransaction+0x52>
 8002d28:	e000      	b.n	8002d2c <SPI_EndRxTxTransaction+0x70>
        break;
 8002d2a:	bf00      	nop
  }

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	165e9f81 	.word	0x165e9f81

08002d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e041      	b.n	8002dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f839 	bl	8002dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f000 f9ca 	bl	8003118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d001      	beq.n	8002e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e044      	b.n	8002e96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d018      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x6c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e36:	d013      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x6c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00e      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x6c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a19      	ldr	r2, [pc, #100]	; (8002eac <HAL_TIM_Base_Start_IT+0xb8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d009      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x6c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d004      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x6c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d111      	bne.n	8002e84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d010      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e82:	e007      	b.n	8002e94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40010000 	.word	0x40010000
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800
 8002eb0:	40000c00 	.word	0x40000c00
 8002eb4:	40014000 	.word	0x40014000

08002eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d122      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d11b      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0202 	mvn.w	r2, #2
 8002ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8ee 	bl	80030dc <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8e0 	bl	80030c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8f1 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d122      	bne.n	8002f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d11b      	bne.n	8002f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0204 	mvn.w	r2, #4
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f8c4 	bl	80030dc <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8b6 	bl	80030c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f8c7 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0208 	mvn.w	r2, #8
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2204      	movs	r2, #4
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f89a 	bl	80030dc <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f88c 	bl	80030c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f89d 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d122      	bne.n	8003010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d11b      	bne.n	8003010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0210 	mvn.w	r2, #16
 8002fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f870 	bl	80030dc <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f862 	bl	80030c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f873 	bl	80030f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0201 	mvn.w	r2, #1
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fbda 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	2b80      	cmp	r3, #128	; 0x80
 8003048:	d10e      	bne.n	8003068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d107      	bne.n	8003068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8e2 	bl	800322c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b40      	cmp	r3, #64	; 0x40
 8003074:	d10e      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d107      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f838 	bl	8003104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0220 	mvn.w	r2, #32
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8ac 	bl	8003218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a34      	ldr	r2, [pc, #208]	; (80031fc <TIM_Base_SetConfig+0xe4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00f      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d00b      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a31      	ldr	r2, [pc, #196]	; (8003200 <TIM_Base_SetConfig+0xe8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a30      	ldr	r2, [pc, #192]	; (8003204 <TIM_Base_SetConfig+0xec>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <TIM_Base_SetConfig+0xf0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d108      	bne.n	8003162 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a25      	ldr	r2, [pc, #148]	; (80031fc <TIM_Base_SetConfig+0xe4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01b      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d017      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a22      	ldr	r2, [pc, #136]	; (8003200 <TIM_Base_SetConfig+0xe8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a21      	ldr	r2, [pc, #132]	; (8003204 <TIM_Base_SetConfig+0xec>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00f      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <TIM_Base_SetConfig+0xf0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1f      	ldr	r2, [pc, #124]	; (800320c <TIM_Base_SetConfig+0xf4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <TIM_Base_SetConfig+0xf8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <TIM_Base_SetConfig+0xfc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a08      	ldr	r2, [pc, #32]	; (80031fc <TIM_Base_SetConfig+0xe4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40014000 	.word	0x40014000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800

08003218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e03f      	b.n	80032d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fd6e 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	; 0x24
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f929 	bl	80034dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b08a      	sub	sp, #40	; 0x28
 80032de:	af02      	add	r7, sp, #8
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d17c      	bne.n	80033f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_UART_Transmit+0x2c>
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e075      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_UART_Transmit+0x3e>
 8003314:	2302      	movs	r3, #2
 8003316:	e06e      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2221      	movs	r2, #33	; 0x21
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800332e:	f7fd fdb3 	bl	8000e98 <HAL_GetTick>
 8003332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003348:	d108      	bne.n	800335c <HAL_UART_Transmit+0x82>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d104      	bne.n	800335c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	e003      	b.n	8003364 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800336c:	e02a      	b.n	80033c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f840 	bl	80033fe <UART_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e036      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800339c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3302      	adds	r3, #2
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e007      	b.n	80033b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	3301      	adds	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1cf      	bne.n	800336e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2200      	movs	r2, #0
 80033d6:	2140      	movs	r1, #64	; 0x40
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f810 	bl	80033fe <UART_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e006      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b090      	sub	sp, #64	; 0x40
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	4613      	mov	r3, r2
 800340c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800340e:	e050      	b.n	80034b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d04c      	beq.n	80034b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <UART_WaitOnFlagUntilTimeout+0x30>
 800341e:	f7fd fd3b 	bl	8000e98 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800342a:	429a      	cmp	r2, r3
 800342c:	d241      	bcs.n	80034b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800344e:	637a      	str	r2, [r7, #52]	; 0x34
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e5      	bne.n	800342e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3314      	adds	r3, #20
 8003468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	613b      	str	r3, [r7, #16]
   return(result);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3314      	adds	r3, #20
 8003480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003482:	623a      	str	r2, [r7, #32]
 8003484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	69f9      	ldr	r1, [r7, #28]
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e5      	bne.n	8003462 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e00f      	b.n	80034d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	bf0c      	ite	eq
 80034c2:	2301      	moveq	r3, #1
 80034c4:	2300      	movne	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d09f      	beq.n	8003410 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3740      	adds	r7, #64	; 0x40
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b0c0      	sub	sp, #256	; 0x100
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	68d9      	ldr	r1, [r3, #12]
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	ea40 0301 	orr.w	r3, r0, r1
 8003504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	431a      	orrs	r2, r3
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	431a      	orrs	r2, r3
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003534:	f021 010c 	bic.w	r1, r1, #12
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003542:	430b      	orrs	r3, r1
 8003544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003556:	6999      	ldr	r1, [r3, #24]
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	ea40 0301 	orr.w	r3, r0, r1
 8003562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b8f      	ldr	r3, [pc, #572]	; (80037a8 <UART_SetConfig+0x2cc>)
 800356c:	429a      	cmp	r2, r3
 800356e:	d005      	beq.n	800357c <UART_SetConfig+0xa0>
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b8d      	ldr	r3, [pc, #564]	; (80037ac <UART_SetConfig+0x2d0>)
 8003578:	429a      	cmp	r2, r3
 800357a:	d104      	bne.n	8003586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800357c:	f7fe ff0c 	bl	8002398 <HAL_RCC_GetPCLK2Freq>
 8003580:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003584:	e003      	b.n	800358e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003586:	f7fe fef3 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 800358a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003598:	f040 810c 	bne.w	80037b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800359c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a0:	2200      	movs	r2, #0
 80035a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035ae:	4622      	mov	r2, r4
 80035b0:	462b      	mov	r3, r5
 80035b2:	1891      	adds	r1, r2, r2
 80035b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80035b6:	415b      	adcs	r3, r3
 80035b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035be:	4621      	mov	r1, r4
 80035c0:	eb12 0801 	adds.w	r8, r2, r1
 80035c4:	4629      	mov	r1, r5
 80035c6:	eb43 0901 	adc.w	r9, r3, r1
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035de:	4690      	mov	r8, r2
 80035e0:	4699      	mov	r9, r3
 80035e2:	4623      	mov	r3, r4
 80035e4:	eb18 0303 	adds.w	r3, r8, r3
 80035e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035ec:	462b      	mov	r3, r5
 80035ee:	eb49 0303 	adc.w	r3, r9, r3
 80035f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003602:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800360a:	460b      	mov	r3, r1
 800360c:	18db      	adds	r3, r3, r3
 800360e:	653b      	str	r3, [r7, #80]	; 0x50
 8003610:	4613      	mov	r3, r2
 8003612:	eb42 0303 	adc.w	r3, r2, r3
 8003616:	657b      	str	r3, [r7, #84]	; 0x54
 8003618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800361c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003620:	f7fc fe2e 	bl	8000280 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4b61      	ldr	r3, [pc, #388]	; (80037b0 <UART_SetConfig+0x2d4>)
 800362a:	fba3 2302 	umull	r2, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	011c      	lsls	r4, r3, #4
 8003632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800363c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003644:	4642      	mov	r2, r8
 8003646:	464b      	mov	r3, r9
 8003648:	1891      	adds	r1, r2, r2
 800364a:	64b9      	str	r1, [r7, #72]	; 0x48
 800364c:	415b      	adcs	r3, r3
 800364e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003654:	4641      	mov	r1, r8
 8003656:	eb12 0a01 	adds.w	sl, r2, r1
 800365a:	4649      	mov	r1, r9
 800365c:	eb43 0b01 	adc.w	fp, r3, r1
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800366c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003674:	4692      	mov	sl, r2
 8003676:	469b      	mov	fp, r3
 8003678:	4643      	mov	r3, r8
 800367a:	eb1a 0303 	adds.w	r3, sl, r3
 800367e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003682:	464b      	mov	r3, r9
 8003684:	eb4b 0303 	adc.w	r3, fp, r3
 8003688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003698:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800369c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036a0:	460b      	mov	r3, r1
 80036a2:	18db      	adds	r3, r3, r3
 80036a4:	643b      	str	r3, [r7, #64]	; 0x40
 80036a6:	4613      	mov	r3, r2
 80036a8:	eb42 0303 	adc.w	r3, r2, r3
 80036ac:	647b      	str	r3, [r7, #68]	; 0x44
 80036ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036b6:	f7fc fde3 	bl	8000280 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4611      	mov	r1, r2
 80036c0:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <UART_SetConfig+0x2d4>)
 80036c2:	fba3 2301 	umull	r2, r3, r3, r1
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2264      	movs	r2, #100	; 0x64
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	1acb      	subs	r3, r1, r3
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <UART_SetConfig+0x2d4>)
 80036d8:	fba3 2302 	umull	r2, r3, r3, r2
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036e4:	441c      	add	r4, r3
 80036e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036f8:	4642      	mov	r2, r8
 80036fa:	464b      	mov	r3, r9
 80036fc:	1891      	adds	r1, r2, r2
 80036fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003700:	415b      	adcs	r3, r3
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003708:	4641      	mov	r1, r8
 800370a:	1851      	adds	r1, r2, r1
 800370c:	6339      	str	r1, [r7, #48]	; 0x30
 800370e:	4649      	mov	r1, r9
 8003710:	414b      	adcs	r3, r1
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003720:	4659      	mov	r1, fp
 8003722:	00cb      	lsls	r3, r1, #3
 8003724:	4651      	mov	r1, sl
 8003726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800372a:	4651      	mov	r1, sl
 800372c:	00ca      	lsls	r2, r1, #3
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	4603      	mov	r3, r0
 8003734:	4642      	mov	r2, r8
 8003736:	189b      	adds	r3, r3, r2
 8003738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800373c:	464b      	mov	r3, r9
 800373e:	460a      	mov	r2, r1
 8003740:	eb42 0303 	adc.w	r3, r2, r3
 8003744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003754:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800375c:	460b      	mov	r3, r1
 800375e:	18db      	adds	r3, r3, r3
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
 8003762:	4613      	mov	r3, r2
 8003764:	eb42 0303 	adc.w	r3, r2, r3
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800376e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003772:	f7fc fd85 	bl	8000280 <__aeabi_uldivmod>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <UART_SetConfig+0x2d4>)
 800377c:	fba3 1302 	umull	r1, r3, r3, r2
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	2164      	movs	r1, #100	; 0x64
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	3332      	adds	r3, #50	; 0x32
 800378e:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <UART_SetConfig+0x2d4>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	f003 0207 	and.w	r2, r3, #7
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4422      	add	r2, r4
 80037a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037a4:	e106      	b.n	80039b4 <UART_SetConfig+0x4d8>
 80037a6:	bf00      	nop
 80037a8:	40011000 	.word	0x40011000
 80037ac:	40011400 	.word	0x40011400
 80037b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037c6:	4642      	mov	r2, r8
 80037c8:	464b      	mov	r3, r9
 80037ca:	1891      	adds	r1, r2, r2
 80037cc:	6239      	str	r1, [r7, #32]
 80037ce:	415b      	adcs	r3, r3
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037d6:	4641      	mov	r1, r8
 80037d8:	1854      	adds	r4, r2, r1
 80037da:	4649      	mov	r1, r9
 80037dc:	eb43 0501 	adc.w	r5, r3, r1
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	00eb      	lsls	r3, r5, #3
 80037ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ee:	00e2      	lsls	r2, r4, #3
 80037f0:	4614      	mov	r4, r2
 80037f2:	461d      	mov	r5, r3
 80037f4:	4643      	mov	r3, r8
 80037f6:	18e3      	adds	r3, r4, r3
 80037f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037fc:	464b      	mov	r3, r9
 80037fe:	eb45 0303 	adc.w	r3, r5, r3
 8003802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003822:	4629      	mov	r1, r5
 8003824:	008b      	lsls	r3, r1, #2
 8003826:	4621      	mov	r1, r4
 8003828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800382c:	4621      	mov	r1, r4
 800382e:	008a      	lsls	r2, r1, #2
 8003830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003834:	f7fc fd24 	bl	8000280 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4b60      	ldr	r3, [pc, #384]	; (80039c0 <UART_SetConfig+0x4e4>)
 800383e:	fba3 2302 	umull	r2, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	011c      	lsls	r4, r3, #4
 8003846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800384a:	2200      	movs	r2, #0
 800384c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003858:	4642      	mov	r2, r8
 800385a:	464b      	mov	r3, r9
 800385c:	1891      	adds	r1, r2, r2
 800385e:	61b9      	str	r1, [r7, #24]
 8003860:	415b      	adcs	r3, r3
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003868:	4641      	mov	r1, r8
 800386a:	1851      	adds	r1, r2, r1
 800386c:	6139      	str	r1, [r7, #16]
 800386e:	4649      	mov	r1, r9
 8003870:	414b      	adcs	r3, r1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003880:	4659      	mov	r1, fp
 8003882:	00cb      	lsls	r3, r1, #3
 8003884:	4651      	mov	r1, sl
 8003886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800388a:	4651      	mov	r1, sl
 800388c:	00ca      	lsls	r2, r1, #3
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	4603      	mov	r3, r0
 8003894:	4642      	mov	r2, r8
 8003896:	189b      	adds	r3, r3, r2
 8003898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800389c:	464b      	mov	r3, r9
 800389e:	460a      	mov	r2, r1
 80038a0:	eb42 0303 	adc.w	r3, r2, r3
 80038a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80038b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038c0:	4649      	mov	r1, r9
 80038c2:	008b      	lsls	r3, r1, #2
 80038c4:	4641      	mov	r1, r8
 80038c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ca:	4641      	mov	r1, r8
 80038cc:	008a      	lsls	r2, r1, #2
 80038ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038d2:	f7fc fcd5 	bl	8000280 <__aeabi_uldivmod>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4611      	mov	r1, r2
 80038dc:	4b38      	ldr	r3, [pc, #224]	; (80039c0 <UART_SetConfig+0x4e4>)
 80038de:	fba3 2301 	umull	r2, r3, r3, r1
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2264      	movs	r2, #100	; 0x64
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	1acb      	subs	r3, r1, r3
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	3332      	adds	r3, #50	; 0x32
 80038f0:	4a33      	ldr	r2, [pc, #204]	; (80039c0 <UART_SetConfig+0x4e4>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fc:	441c      	add	r4, r3
 80038fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003902:	2200      	movs	r2, #0
 8003904:	673b      	str	r3, [r7, #112]	; 0x70
 8003906:	677a      	str	r2, [r7, #116]	; 0x74
 8003908:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800390c:	4642      	mov	r2, r8
 800390e:	464b      	mov	r3, r9
 8003910:	1891      	adds	r1, r2, r2
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	415b      	adcs	r3, r3
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800391c:	4641      	mov	r1, r8
 800391e:	1851      	adds	r1, r2, r1
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	4649      	mov	r1, r9
 8003924:	414b      	adcs	r3, r1
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003934:	4659      	mov	r1, fp
 8003936:	00cb      	lsls	r3, r1, #3
 8003938:	4651      	mov	r1, sl
 800393a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800393e:	4651      	mov	r1, sl
 8003940:	00ca      	lsls	r2, r1, #3
 8003942:	4610      	mov	r0, r2
 8003944:	4619      	mov	r1, r3
 8003946:	4603      	mov	r3, r0
 8003948:	4642      	mov	r2, r8
 800394a:	189b      	adds	r3, r3, r2
 800394c:	66bb      	str	r3, [r7, #104]	; 0x68
 800394e:	464b      	mov	r3, r9
 8003950:	460a      	mov	r2, r1
 8003952:	eb42 0303 	adc.w	r3, r2, r3
 8003956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	663b      	str	r3, [r7, #96]	; 0x60
 8003962:	667a      	str	r2, [r7, #100]	; 0x64
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003970:	4649      	mov	r1, r9
 8003972:	008b      	lsls	r3, r1, #2
 8003974:	4641      	mov	r1, r8
 8003976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800397a:	4641      	mov	r1, r8
 800397c:	008a      	lsls	r2, r1, #2
 800397e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003982:	f7fc fc7d 	bl	8000280 <__aeabi_uldivmod>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <UART_SetConfig+0x4e4>)
 800398c:	fba3 1302 	umull	r1, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	2164      	movs	r1, #100	; 0x64
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	3332      	adds	r3, #50	; 0x32
 800399e:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <UART_SetConfig+0x4e4>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	f003 020f 	and.w	r2, r3, #15
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4422      	add	r2, r4
 80039b2:	609a      	str	r2, [r3, #8]
}
 80039b4:	bf00      	nop
 80039b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039ba:	46bd      	mov	sp, r7
 80039bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c0:	51eb851f 	.word	0x51eb851f

080039c4 <__NVIC_SetPriority>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	; (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <SysTick_Handler+0x1c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a20:	f001 fd28 	bl	8005474 <xTaskGetSchedulerState>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a2a:	f002 fb0d 	bl	8006048 <xPortSysTickHandler>
  }
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	f06f 0004 	mvn.w	r0, #4
 8003a42:	f7ff ffbf 	bl	80039c4 <__NVIC_SetPriority>
#endif
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a52:	f3ef 8305 	mrs	r3, IPSR
 8003a56:	603b      	str	r3, [r7, #0]
  return(result);
 8003a58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a5e:	f06f 0305 	mvn.w	r3, #5
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	e00c      	b.n	8003a80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <osKernelInitialize+0x44>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <osKernelInitialize+0x44>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	e002      	b.n	8003a80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	200001d8 	.word	0x200001d8

08003a94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9a:	f3ef 8305 	mrs	r3, IPSR
 8003a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003aa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <osKernelStart+0x1a>
    stat = osErrorISR;
 8003aa6:	f06f 0305 	mvn.w	r3, #5
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	e010      	b.n	8003ad0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <osKernelStart+0x48>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d109      	bne.n	8003aca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ab6:	f7ff ffbf 	bl	8003a38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <osKernelStart+0x48>)
 8003abc:	2202      	movs	r2, #2
 8003abe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ac0:	f001 f87c 	bl	8004bbc <vTaskStartScheduler>
      stat = osOK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	e002      	b.n	8003ad0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ad0:	687b      	ldr	r3, [r7, #4]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200001d8 	.word	0x200001d8

08003ae0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af04      	add	r7, sp, #16
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003af0:	f3ef 8305 	mrs	r3, IPSR
 8003af4:	617b      	str	r3, [r7, #20]
  return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d17e      	bne.n	8003bfa <osThreadNew+0x11a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d07b      	beq.n	8003bfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b06:	2318      	movs	r3, #24
 8003b08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d045      	beq.n	8003ba6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <osThreadNew+0x48>
        name = attr->name;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <osThreadNew+0x6e>
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b38      	cmp	r3, #56	; 0x38
 8003b40:	d805      	bhi.n	8003b4e <osThreadNew+0x6e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <osThreadNew+0x72>
        return (NULL);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e054      	b.n	8003bfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00e      	beq.n	8003b88 <osThreadNew+0xa8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2ba7      	cmp	r3, #167	; 0xa7
 8003b70:	d90a      	bls.n	8003b88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <osThreadNew+0xa8>
        mem = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e010      	b.n	8003baa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10c      	bne.n	8003baa <osThreadNew+0xca>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d108      	bne.n	8003baa <osThreadNew+0xca>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <osThreadNew+0xca>
          mem = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e001      	b.n	8003baa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d110      	bne.n	8003bd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bb8:	9202      	str	r2, [sp, #8]
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fe0c 	bl	80047e4 <xTaskCreateStatic>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	e013      	b.n	8003bfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d110      	bne.n	8003bfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fe57 	bl	800489e <xTaskCreate>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d001      	beq.n	8003bfa <osThreadNew+0x11a>
            hTask = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bfa:	693b      	ldr	r3, [r7, #16]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	; 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0c:	f3ef 8305 	mrs	r3, IPSR
 8003c10:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <osDelay+0x1c>
    stat = osErrorISR;
 8003c18:	f06f 0305 	mvn.w	r3, #5
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e007      	b.n	8003c30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 ff92 	bl	8004b54 <vTaskDelay>
    }
  }

  return (stat);
 8003c30:	68fb      	ldr	r3, [r7, #12]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4a06      	ldr	r2, [pc, #24]	; (8003c6c <vApplicationGetIdleTaskMemory+0x30>)
 8003c52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	601a      	str	r2, [r3, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	200001dc 	.word	0x200001dc
 8003c6c:	20000284 	.word	0x20000284

08003c70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003c80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4a06      	ldr	r2, [pc, #24]	; (8003ca0 <vApplicationGetTimerTaskMemory+0x30>)
 8003c86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c8e:	601a      	str	r2, [r3, #0]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	20000484 	.word	0x20000484
 8003ca0:	2000052c 	.word	0x2000052c

08003ca4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f103 0208 	add.w	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f103 0208 	add.w	r2, r3, #8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f103 0208 	add.w	r2, r3, #8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	601a      	str	r2, [r3, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d103      	bne.n	8003d66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e00c      	b.n	8003d80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e002      	b.n	8003d74 <vListInsert+0x2e>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d2f6      	bcs.n	8003d6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	601a      	str	r2, [r3, #0]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6892      	ldr	r2, [r2, #8]
 8003dce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6852      	ldr	r2, [r2, #4]
 8003dd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d103      	bne.n	8003dec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1e5a      	subs	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e36:	f002 f875 	bl	8005f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	3b01      	subs	r3, #1
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	441a      	add	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	22ff      	movs	r2, #255	; 0xff
 8003e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	22ff      	movs	r2, #255	; 0xff
 8003e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d114      	bne.n	8003eb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01a      	beq.n	8003eca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3310      	adds	r3, #16
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 f929 	bl	80050f0 <xTaskRemoveFromEventList>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <xQueueGenericReset+0xcc>)
 8003ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	e009      	b.n	8003eca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3310      	adds	r3, #16
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fef2 	bl	8003ca4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3324      	adds	r3, #36	; 0x24
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff feed 	bl	8003ca4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003eca:	f002 f85b 	bl	8005f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ece:	2301      	movs	r3, #1
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08e      	sub	sp, #56	; 0x38
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <xQueueGenericCreateStatic+0x52>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <xQueueGenericCreateStatic+0x56>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueGenericCreateStatic+0x58>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	623b      	str	r3, [r7, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <xQueueGenericCreateStatic+0x7e>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <xQueueGenericCreateStatic+0x82>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <xQueueGenericCreateStatic+0x84>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	61fb      	str	r3, [r7, #28]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f7a:	2350      	movs	r3, #80	; 0x50
 8003f7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b50      	cmp	r3, #80	; 0x50
 8003f82:	d00a      	beq.n	8003f9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	61bb      	str	r3, [r7, #24]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f805 	bl	8003fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3730      	adds	r7, #48	; 0x30
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e002      	b.n	8003fee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	69b8      	ldr	r0, [r7, #24]
 8003ffe:	f7ff ff05 	bl	8003e0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08e      	sub	sp, #56	; 0x38
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004022:	2300      	movs	r3, #0
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <xQueueGenericSend+0x32>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d103      	bne.n	8004054 <xQueueGenericSend+0x40>
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <xQueueGenericSend+0x44>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <xQueueGenericSend+0x46>
 8004058:	2300      	movs	r3, #0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <xQueueGenericSend+0x60>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004070:	bf00      	nop
 8004072:	e7fe      	b.n	8004072 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d103      	bne.n	8004082 <xQueueGenericSend+0x6e>
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <xQueueGenericSend+0x72>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <xQueueGenericSend+0x74>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	623b      	str	r3, [r7, #32]
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040a2:	f001 f9e7 	bl	8005474 <xTaskGetSchedulerState>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <xQueueGenericSend+0x9e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <xQueueGenericSend+0xa2>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <xQueueGenericSend+0xa4>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	61fb      	str	r3, [r7, #28]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040d2:	f001 ff27 	bl	8005f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d302      	bcc.n	80040e8 <xQueueGenericSend+0xd4>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d129      	bne.n	800413c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ee:	f000 fa0b 	bl	8004508 <prvCopyDataToQueue>
 80040f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	3324      	adds	r3, #36	; 0x24
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fff5 	bl	80050f0 <xTaskRemoveFromEventList>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d013      	beq.n	8004134 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800410c:	4b3f      	ldr	r3, [pc, #252]	; (800420c <xQueueGenericSend+0x1f8>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	e00a      	b.n	8004134 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <xQueueGenericSend+0x1f8>)
 8004126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004134:	f001 ff26 	bl	8005f84 <vPortExitCritical>
				return pdPASS;
 8004138:	2301      	movs	r3, #1
 800413a:	e063      	b.n	8004204 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004142:	f001 ff1f 	bl	8005f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004146:	2300      	movs	r3, #0
 8004148:	e05c      	b.n	8004204 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800414a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	4618      	mov	r0, r3
 8004156:	f001 f82f 	bl	80051b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800415a:	2301      	movs	r3, #1
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800415e:	f001 ff11 	bl	8005f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004162:	f000 fd9b 	bl	8004c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004166:	f001 fedd 	bl	8005f24 <vPortEnterCritical>
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004170:	b25b      	sxtb	r3, r3
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d103      	bne.n	8004180 <xQueueGenericSend+0x16c>
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004186:	b25b      	sxtb	r3, r3
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d103      	bne.n	8004196 <xQueueGenericSend+0x182>
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004196:	f001 fef5 	bl	8005f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800419a:	1d3a      	adds	r2, r7, #4
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4611      	mov	r1, r2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 f81e 	bl	80051e4 <xTaskCheckForTimeOut>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d124      	bne.n	80041f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041b0:	f000 faa2 	bl	80046f8 <prvIsQueueFull>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d018      	beq.n	80041ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	3310      	adds	r3, #16
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 ff44 	bl	8005050 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ca:	f000 fa2d 	bl	8004628 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041ce:	f000 fd73 	bl	8004cb8 <xTaskResumeAll>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f47f af7c 	bne.w	80040d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <xQueueGenericSend+0x1f8>)
 80041dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	e772      	b.n	80040d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ee:	f000 fa1b 	bl	8004628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041f2:	f000 fd61 	bl	8004cb8 <xTaskResumeAll>
 80041f6:	e76c      	b.n	80040d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041fa:	f000 fa15 	bl	8004628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041fe:	f000 fd5b 	bl	8004cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004202:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004204:	4618      	mov	r0, r3
 8004206:	3738      	adds	r7, #56	; 0x38
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b090      	sub	sp, #64	; 0x40
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <xQueueGenericSendFromISR+0x3c>
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <xQueueGenericSendFromISR+0x40>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <xQueueGenericSendFromISR+0x42>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d103      	bne.n	800427a <xQueueGenericSendFromISR+0x6a>
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <xQueueGenericSendFromISR+0x6e>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <xQueueGenericSendFromISR+0x70>
 800427e:	2300      	movs	r3, #0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	623b      	str	r3, [r7, #32]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800429a:	f001 ff25 	bl	80060e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800429e:	f3ef 8211 	mrs	r2, BASEPRI
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	61fa      	str	r2, [r7, #28]
 80042b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <xQueueGenericSendFromISR+0xbc>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d12f      	bne.n	800432c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042e2:	f000 f911 	bl	8004508 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d112      	bne.n	8004316 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d016      	beq.n	8004326 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	3324      	adds	r3, #36	; 0x24
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fef7 	bl	80050f0 <xTaskRemoveFromEventList>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00e      	beq.n	8004326 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e007      	b.n	8004326 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800431a:	3301      	adds	r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	b25a      	sxtb	r2, r3
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004326:	2301      	movs	r3, #1
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800432a:	e001      	b.n	8004330 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800432c:	2300      	movs	r3, #0
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800433a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800433c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800433e:	4618      	mov	r0, r3
 8004340:	3740      	adds	r7, #64	; 0x40
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004354:	2300      	movs	r3, #0
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <xQueueReceive+0x30>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	623b      	str	r3, [r7, #32]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d103      	bne.n	8004386 <xQueueReceive+0x3e>
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <xQueueReceive+0x42>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <xQueueReceive+0x44>
 800438a:	2300      	movs	r3, #0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <xQueueReceive+0x5e>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	61fb      	str	r3, [r7, #28]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043a6:	f001 f865 	bl	8005474 <xTaskGetSchedulerState>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <xQueueReceive+0x6e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <xQueueReceive+0x72>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <xQueueReceive+0x74>
 80043ba:	2300      	movs	r3, #0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <xQueueReceive+0x8e>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	61bb      	str	r3, [r7, #24]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043d6:	f001 fda5 	bl	8005f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01f      	beq.n	8004426 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ea:	f000 f8f7 	bl	80045dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	1e5a      	subs	r2, r3, #1
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00f      	beq.n	800441e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	3310      	adds	r3, #16
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fe74 	bl	80050f0 <xTaskRemoveFromEventList>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800440e:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <xQueueReceive+0x1bc>)
 8004410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800441e:	f001 fdb1 	bl	8005f84 <vPortExitCritical>
				return pdPASS;
 8004422:	2301      	movs	r3, #1
 8004424:	e069      	b.n	80044fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d103      	bne.n	8004434 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800442c:	f001 fdaa 	bl	8005f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004430:	2300      	movs	r3, #0
 8004432:	e062      	b.n	80044fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800443a:	f107 0310 	add.w	r3, r7, #16
 800443e:	4618      	mov	r0, r3
 8004440:	f000 feba 	bl	80051b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004448:	f001 fd9c 	bl	8005f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800444c:	f000 fc26 	bl	8004c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004450:	f001 fd68 	bl	8005f24 <vPortEnterCritical>
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800445a:	b25b      	sxtb	r3, r3
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d103      	bne.n	800446a <xQueueReceive+0x122>
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004470:	b25b      	sxtb	r3, r3
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d103      	bne.n	8004480 <xQueueReceive+0x138>
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004480:	f001 fd80 	bl	8005f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004484:	1d3a      	adds	r2, r7, #4
 8004486:	f107 0310 	add.w	r3, r7, #16
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fea9 	bl	80051e4 <xTaskCheckForTimeOut>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d123      	bne.n	80044e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800449a:	f000 f917 	bl	80046cc <prvIsQueueEmpty>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d017      	beq.n	80044d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	3324      	adds	r3, #36	; 0x24
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fdcf 	bl	8005050 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044b4:	f000 f8b8 	bl	8004628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044b8:	f000 fbfe 	bl	8004cb8 <xTaskResumeAll>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d189      	bne.n	80043d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <xQueueReceive+0x1bc>)
 80044c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	e780      	b.n	80043d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d6:	f000 f8a7 	bl	8004628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044da:	f000 fbed 	bl	8004cb8 <xTaskResumeAll>
 80044de:	e77a      	b.n	80043d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e2:	f000 f8a1 	bl	8004628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044e6:	f000 fbe7 	bl	8004cb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ec:	f000 f8ee 	bl	80046cc <prvIsQueueEmpty>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f43f af6f 	beq.w	80043d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3730      	adds	r7, #48	; 0x30
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	e000ed04 	.word	0xe000ed04

08004508 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10d      	bne.n	8004542 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d14d      	bne.n	80045ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 ffbc 	bl	80054b0 <xTaskPriorityDisinherit>
 8004538:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	e043      	b.n	80045ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d119      	bne.n	800457c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6858      	ldr	r0, [r3, #4]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	461a      	mov	r2, r3
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	f002 f9db 	bl	800690e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	441a      	add	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	429a      	cmp	r2, r3
 8004570:	d32b      	bcc.n	80045ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	e026      	b.n	80045ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68d8      	ldr	r0, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	461a      	mov	r2, r3
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	f002 f9c1 	bl	800690e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	425b      	negs	r3, r3
 8004596:	441a      	add	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d207      	bcs.n	80045b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	425b      	negs	r3, r3
 80045b2:	441a      	add	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d105      	bne.n	80045ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045d2:	697b      	ldr	r3, [r7, #20]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d018      	beq.n	8004620 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	441a      	add	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	d303      	bcc.n	8004610 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68d9      	ldr	r1, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	461a      	mov	r2, r3
 800461a:	6838      	ldr	r0, [r7, #0]
 800461c:	f002 f977 	bl	800690e <memcpy>
	}
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004630:	f001 fc78 	bl	8005f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800463a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800463c:	e011      	b.n	8004662 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d012      	beq.n	800466c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3324      	adds	r3, #36	; 0x24
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fd50 	bl	80050f0 <xTaskRemoveFromEventList>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004656:	f000 fe27 	bl	80052a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	3b01      	subs	r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	dce9      	bgt.n	800463e <prvUnlockQueue+0x16>
 800466a:	e000      	b.n	800466e <prvUnlockQueue+0x46>
					break;
 800466c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	22ff      	movs	r2, #255	; 0xff
 8004672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004676:	f001 fc85 	bl	8005f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800467a:	f001 fc53 	bl	8005f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004684:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004686:	e011      	b.n	80046ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d012      	beq.n	80046b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3310      	adds	r3, #16
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fd2b 	bl	80050f0 <xTaskRemoveFromEventList>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046a0:	f000 fe02 	bl	80052a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046a4:	7bbb      	ldrb	r3, [r7, #14]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	dce9      	bgt.n	8004688 <prvUnlockQueue+0x60>
 80046b4:	e000      	b.n	80046b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	22ff      	movs	r2, #255	; 0xff
 80046bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046c0:	f001 fc60 	bl	8005f84 <vPortExitCritical>
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046d4:	f001 fc26 	bl	8005f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e001      	b.n	80046ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046ea:	f001 fc4b 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 80046ee:	68fb      	ldr	r3, [r7, #12]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004700:	f001 fc10 	bl	8005f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	429a      	cmp	r2, r3
 800470e:	d102      	bne.n	8004716 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004710:	2301      	movs	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e001      	b.n	800471a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800471a:	f001 fc33 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 800471e:	68fb      	ldr	r3, [r7, #12]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e014      	b.n	8004762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004738:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <vQueueAddToRegistry+0x50>)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004744:	490c      	ldr	r1, [pc, #48]	; (8004778 <vQueueAddToRegistry+0x50>)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800474e:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <vQueueAddToRegistry+0x50>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800475a:	e006      	b.n	800476a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b07      	cmp	r3, #7
 8004766:	d9e7      	bls.n	8004738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	2000092c 	.word	0x2000092c

0800477c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800478c:	f001 fbca 	bl	8005f24 <vPortEnterCritical>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004796:	b25b      	sxtb	r3, r3
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d103      	bne.n	80047a6 <vQueueWaitForMessageRestricted+0x2a>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ac:	b25b      	sxtb	r3, r3
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d103      	bne.n	80047bc <vQueueWaitForMessageRestricted+0x40>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047bc:	f001 fbe2 	bl	8005f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	3324      	adds	r3, #36	; 0x24
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fc61 	bl	8005098 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047d6:	6978      	ldr	r0, [r7, #20]
 80047d8:	f7ff ff26 	bl	8004628 <prvUnlockQueue>
	}
 80047dc:	bf00      	nop
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08e      	sub	sp, #56	; 0x38
 80047e8:	af04      	add	r7, sp, #16
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <xTaskCreateStatic+0x2a>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	623b      	str	r3, [r7, #32]
}
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <xTaskCreateStatic+0x46>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	61fb      	str	r3, [r7, #28]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800482a:	23a8      	movs	r3, #168	; 0xa8
 800482c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2ba8      	cmp	r3, #168	; 0xa8
 8004832:	d00a      	beq.n	800484a <xTaskCreateStatic+0x66>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	61bb      	str	r3, [r7, #24]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800484a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01e      	beq.n	8004890 <xTaskCreateStatic+0xac>
 8004852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004860:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	2202      	movs	r2, #2
 8004866:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800486a:	2300      	movs	r3, #0
 800486c:	9303      	str	r3, [sp, #12]
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	9302      	str	r3, [sp, #8]
 8004872:	f107 0314 	add.w	r3, r7, #20
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f850 	bl	8004928 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800488a:	f000 f8f3 	bl	8004a74 <prvAddNewTaskToReadyList>
 800488e:	e001      	b.n	8004894 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004894:	697b      	ldr	r3, [r7, #20]
	}
 8004896:	4618      	mov	r0, r3
 8004898:	3728      	adds	r7, #40	; 0x28
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b08c      	sub	sp, #48	; 0x30
 80048a2:	af04      	add	r7, sp, #16
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 fc58 	bl	8006168 <pvPortMalloc>
 80048b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00e      	beq.n	80048de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048c0:	20a8      	movs	r0, #168	; 0xa8
 80048c2:	f001 fc51 	bl	8006168 <pvPortMalloc>
 80048c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
 80048d4:	e005      	b.n	80048e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048d6:	6978      	ldr	r0, [r7, #20]
 80048d8:	f001 fd12 	bl	8006300 <vPortFree>
 80048dc:	e001      	b.n	80048e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d017      	beq.n	8004918 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	2300      	movs	r3, #0
 80048f4:	9303      	str	r3, [sp, #12]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	9302      	str	r3, [sp, #8]
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f80e 	bl	8004928 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800490c:	69f8      	ldr	r0, [r7, #28]
 800490e:	f000 f8b1 	bl	8004a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004912:	2301      	movs	r3, #1
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	e002      	b.n	800491e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800491e:	69bb      	ldr	r3, [r7, #24]
	}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	461a      	mov	r2, r3
 8004940:	21a5      	movs	r1, #165	; 0xa5
 8004942:	f001 ff12 	bl	800676a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004950:	3b01      	subs	r3, #1
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f023 0307 	bic.w	r3, r3, #7
 800495e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <prvInitialiseNewTask+0x58>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	617b      	str	r3, [r7, #20]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01f      	beq.n	80049c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e012      	b.n	80049b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	7819      	ldrb	r1, [r3, #0]
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	3334      	adds	r3, #52	; 0x34
 800499c:	460a      	mov	r2, r1
 800499e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	4413      	add	r3, r2
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d006      	beq.n	80049ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3301      	adds	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b0f      	cmp	r3, #15
 80049b6:	d9e9      	bls.n	800498c <prvInitialiseNewTask+0x64>
 80049b8:	e000      	b.n	80049bc <prvInitialiseNewTask+0x94>
			{
				break;
 80049ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049c4:	e003      	b.n	80049ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	2b37      	cmp	r3, #55	; 0x37
 80049d2:	d901      	bls.n	80049d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049d4:	2337      	movs	r3, #55	; 0x37
 80049d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	2200      	movs	r2, #0
 80049e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	3304      	adds	r3, #4
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff f978 	bl	8003ce4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	3318      	adds	r3, #24
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff f973 	bl	8003ce4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	3354      	adds	r3, #84	; 0x54
 8004a28:	224c      	movs	r2, #76	; 0x4c
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f001 fe9c 	bl	800676a <memset>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <prvInitialiseNewTask+0x140>)
 8004a36:	659a      	str	r2, [r3, #88]	; 0x58
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <prvInitialiseNewTask+0x144>)
 8004a3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	4a0b      	ldr	r2, [pc, #44]	; (8004a70 <prvInitialiseNewTask+0x148>)
 8004a42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	69b8      	ldr	r0, [r7, #24]
 8004a4a:	f001 f941 	bl	8005cd0 <pxPortInitialiseStack>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a60:	bf00      	nop
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20004bc0 	.word	0x20004bc0
 8004a6c:	20004c28 	.word	0x20004c28
 8004a70:	20004c90 	.word	0x20004c90

08004a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a7c:	f001 fa52 	bl	8005f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a80:	4b2d      	ldr	r3, [pc, #180]	; (8004b38 <prvAddNewTaskToReadyList+0xc4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3301      	adds	r3, #1
 8004a86:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <prvAddNewTaskToReadyList+0xc4>)
 8004a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a8a:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a92:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a98:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <prvAddNewTaskToReadyList+0xc4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d110      	bne.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004aa0:	f000 fc26 	bl	80052f0 <prvInitialiseTaskLists>
 8004aa4:	e00d      	b.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004aa6:	4b26      	ldr	r3, [pc, #152]	; (8004b40 <prvAddNewTaskToReadyList+0xcc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aae:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d802      	bhi.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ac2:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <prvAddNewTaskToReadyList+0xd0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <prvAddNewTaskToReadyList+0xd0>)
 8004aca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <prvAddNewTaskToReadyList+0xd0>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <prvAddNewTaskToReadyList+0xd4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d903      	bls.n	8004ae8 <prvAddNewTaskToReadyList+0x74>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <prvAddNewTaskToReadyList+0xd4>)
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <prvAddNewTaskToReadyList+0xd8>)
 8004af6:	441a      	add	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f7ff f8fd 	bl	8003cfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b04:	f001 fa3e 	bl	8005f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <prvAddNewTaskToReadyList+0xcc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d207      	bcs.n	8004b2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <prvAddNewTaskToReadyList+0xdc>)
 8004b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000e40 	.word	0x20000e40
 8004b3c:	2000096c 	.word	0x2000096c
 8004b40:	20000e4c 	.word	0x20000e4c
 8004b44:	20000e5c 	.word	0x20000e5c
 8004b48:	20000e48 	.word	0x20000e48
 8004b4c:	20000970 	.word	0x20000970
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d017      	beq.n	8004b96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b66:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <vTaskDelay+0x60>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <vTaskDelay+0x30>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60bb      	str	r3, [r7, #8]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b84:	f000 f88a 	bl	8004c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b88:	2100      	movs	r1, #0
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fcfe 	bl	800558c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b90:	f000 f892 	bl	8004cb8 <xTaskResumeAll>
 8004b94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <vTaskDelay+0x64>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000e68 	.word	0x20000e68
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	; 0x28
 8004bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bca:	463a      	mov	r2, r7
 8004bcc:	1d39      	adds	r1, r7, #4
 8004bce:	f107 0308 	add.w	r3, r7, #8
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff f832 	bl	8003c3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	9202      	str	r2, [sp, #8]
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2300      	movs	r3, #0
 8004be8:	460a      	mov	r2, r1
 8004bea:	4924      	ldr	r1, [pc, #144]	; (8004c7c <vTaskStartScheduler+0xc0>)
 8004bec:	4824      	ldr	r0, [pc, #144]	; (8004c80 <vTaskStartScheduler+0xc4>)
 8004bee:	f7ff fdf9 	bl	80047e4 <xTaskCreateStatic>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <vTaskStartScheduler+0xc8>)
 8004bf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bf8:	4b22      	ldr	r3, [pc, #136]	; (8004c84 <vTaskStartScheduler+0xc8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c00:	2301      	movs	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e001      	b.n	8004c0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d102      	bne.n	8004c16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c10:	f000 fd10 	bl	8005634 <xTimerCreateTimerTask>
 8004c14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d11b      	bne.n	8004c54 <vTaskStartScheduler+0x98>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	613b      	str	r3, [r7, #16]
}
 8004c2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c30:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <vTaskStartScheduler+0xcc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3354      	adds	r3, #84	; 0x54
 8004c36:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <vTaskStartScheduler+0xd0>)
 8004c38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c3a:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <vTaskStartScheduler+0xd4>)
 8004c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c42:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <vTaskStartScheduler+0xd8>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <vTaskStartScheduler+0xdc>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c4e:	f001 f8c7 	bl	8005de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c52:	e00e      	b.n	8004c72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d10a      	bne.n	8004c72 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	60fb      	str	r3, [r7, #12]
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <vTaskStartScheduler+0xb4>
}
 8004c72:	bf00      	nop
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	080074ac 	.word	0x080074ac
 8004c80:	080052c1 	.word	0x080052c1
 8004c84:	20000e64 	.word	0x20000e64
 8004c88:	2000096c 	.word	0x2000096c
 8004c8c:	20000068 	.word	0x20000068
 8004c90:	20000e60 	.word	0x20000e60
 8004c94:	20000e4c 	.word	0x20000e4c
 8004c98:	20000e44 	.word	0x20000e44

08004c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <vTaskSuspendAll+0x18>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	4a03      	ldr	r2, [pc, #12]	; (8004cb4 <vTaskSuspendAll+0x18>)
 8004ca8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	20000e68 	.word	0x20000e68

08004cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cc6:	4b42      	ldr	r3, [pc, #264]	; (8004dd0 <xTaskResumeAll+0x118>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	603b      	str	r3, [r7, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ce4:	f001 f91e 	bl	8005f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ce8:	4b39      	ldr	r3, [pc, #228]	; (8004dd0 <xTaskResumeAll+0x118>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	4a38      	ldr	r2, [pc, #224]	; (8004dd0 <xTaskResumeAll+0x118>)
 8004cf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf2:	4b37      	ldr	r3, [pc, #220]	; (8004dd0 <xTaskResumeAll+0x118>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d162      	bne.n	8004dc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cfa:	4b36      	ldr	r3, [pc, #216]	; (8004dd4 <xTaskResumeAll+0x11c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d05e      	beq.n	8004dc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d02:	e02f      	b.n	8004d64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d04:	4b34      	ldr	r3, [pc, #208]	; (8004dd8 <xTaskResumeAll+0x120>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3318      	adds	r3, #24
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff f851 	bl	8003db8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff f84c 	bl	8003db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	4b2d      	ldr	r3, [pc, #180]	; (8004ddc <xTaskResumeAll+0x124>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d903      	bls.n	8004d34 <xTaskResumeAll+0x7c>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <xTaskResumeAll+0x124>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <xTaskResumeAll+0x128>)
 8004d42:	441a      	add	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7fe ffd7 	bl	8003cfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d54:	4b23      	ldr	r3, [pc, #140]	; (8004de4 <xTaskResumeAll+0x12c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d302      	bcc.n	8004d64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d5e:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <xTaskResumeAll+0x130>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d64:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <xTaskResumeAll+0x120>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1cb      	bne.n	8004d04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d72:	f000 fb5f 	bl	8005434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <xTaskResumeAll+0x134>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d010      	beq.n	8004da4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d82:	f000 f847 	bl	8004e14 <xTaskIncrementTick>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <xTaskResumeAll+0x130>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f1      	bne.n	8004d82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d9e:	4b13      	ldr	r3, [pc, #76]	; (8004dec <xTaskResumeAll+0x134>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004da4:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <xTaskResumeAll+0x130>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d009      	beq.n	8004dc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <xTaskResumeAll+0x138>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dc0:	f001 f8e0 	bl	8005f84 <vPortExitCritical>

	return xAlreadyYielded;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000e68 	.word	0x20000e68
 8004dd4:	20000e40 	.word	0x20000e40
 8004dd8:	20000e00 	.word	0x20000e00
 8004ddc:	20000e48 	.word	0x20000e48
 8004de0:	20000970 	.word	0x20000970
 8004de4:	2000096c 	.word	0x2000096c
 8004de8:	20000e54 	.word	0x20000e54
 8004dec:	20000e50 	.word	0x20000e50
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <xTaskGetTickCount+0x1c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e00:	687b      	ldr	r3, [r7, #4]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000e44 	.word	0x20000e44

08004e14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e1e:	4b4f      	ldr	r3, [pc, #316]	; (8004f5c <xTaskIncrementTick+0x148>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f040 808f 	bne.w	8004f46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e28:	4b4d      	ldr	r3, [pc, #308]	; (8004f60 <xTaskIncrementTick+0x14c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e30:	4a4b      	ldr	r2, [pc, #300]	; (8004f60 <xTaskIncrementTick+0x14c>)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d120      	bne.n	8004e7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e3c:	4b49      	ldr	r3, [pc, #292]	; (8004f64 <xTaskIncrementTick+0x150>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <xTaskIncrementTick+0x48>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	603b      	str	r3, [r7, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <xTaskIncrementTick+0x46>
 8004e5c:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <xTaskIncrementTick+0x150>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	4b41      	ldr	r3, [pc, #260]	; (8004f68 <xTaskIncrementTick+0x154>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a3f      	ldr	r2, [pc, #252]	; (8004f64 <xTaskIncrementTick+0x150>)
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	; (8004f68 <xTaskIncrementTick+0x154>)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	4b3e      	ldr	r3, [pc, #248]	; (8004f6c <xTaskIncrementTick+0x158>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	4a3d      	ldr	r2, [pc, #244]	; (8004f6c <xTaskIncrementTick+0x158>)
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	f000 fadb 	bl	8005434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e7e:	4b3c      	ldr	r3, [pc, #240]	; (8004f70 <xTaskIncrementTick+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d349      	bcc.n	8004f1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e88:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <xTaskIncrementTick+0x150>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e92:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <xTaskIncrementTick+0x15c>)
 8004e94:	f04f 32ff 	mov.w	r2, #4294967295
 8004e98:	601a      	str	r2, [r3, #0]
					break;
 8004e9a:	e03f      	b.n	8004f1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e9c:	4b31      	ldr	r3, [pc, #196]	; (8004f64 <xTaskIncrementTick+0x150>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d203      	bcs.n	8004ebc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004eb4:	4a2e      	ldr	r2, [pc, #184]	; (8004f70 <xTaskIncrementTick+0x15c>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004eba:	e02f      	b.n	8004f1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fe ff79 	bl	8003db8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	3318      	adds	r3, #24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe ff70 	bl	8003db8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <xTaskIncrementTick+0x160>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d903      	bls.n	8004eec <xTaskIncrementTick+0xd8>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	4a22      	ldr	r2, [pc, #136]	; (8004f74 <xTaskIncrementTick+0x160>)
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <xTaskIncrementTick+0x164>)
 8004efa:	441a      	add	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f7fe fefb 	bl	8003cfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <xTaskIncrementTick+0x168>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d3b8      	bcc.n	8004e88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f16:	2301      	movs	r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f1a:	e7b5      	b.n	8004e88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f1c:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <xTaskIncrementTick+0x168>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f22:	4915      	ldr	r1, [pc, #84]	; (8004f78 <xTaskIncrementTick+0x164>)
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d901      	bls.n	8004f38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <xTaskIncrementTick+0x16c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e004      	b.n	8004f50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <xTaskIncrementTick+0x170>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <xTaskIncrementTick+0x170>)
 8004f4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f50:	697b      	ldr	r3, [r7, #20]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000e68 	.word	0x20000e68
 8004f60:	20000e44 	.word	0x20000e44
 8004f64:	20000df8 	.word	0x20000df8
 8004f68:	20000dfc 	.word	0x20000dfc
 8004f6c:	20000e58 	.word	0x20000e58
 8004f70:	20000e60 	.word	0x20000e60
 8004f74:	20000e48 	.word	0x20000e48
 8004f78:	20000970 	.word	0x20000970
 8004f7c:	2000096c 	.word	0x2000096c
 8004f80:	20000e54 	.word	0x20000e54
 8004f84:	20000e50 	.word	0x20000e50

08004f88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <vTaskSwitchContext+0xb0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f96:	4b29      	ldr	r3, [pc, #164]	; (800503c <vTaskSwitchContext+0xb4>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f9c:	e046      	b.n	800502c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004f9e:	4b27      	ldr	r3, [pc, #156]	; (800503c <vTaskSwitchContext+0xb4>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fa4:	4b26      	ldr	r3, [pc, #152]	; (8005040 <vTaskSwitchContext+0xb8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e010      	b.n	8004fce <vTaskSwitchContext+0x46>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vTaskSwitchContext+0x3e>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	491d      	ldr	r1, [pc, #116]	; (8005044 <vTaskSwitchContext+0xbc>)
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0e4      	beq.n	8004fac <vTaskSwitchContext+0x24>
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4a15      	ldr	r2, [pc, #84]	; (8005044 <vTaskSwitchContext+0xbc>)
 8004fee:	4413      	add	r3, r2
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	3308      	adds	r3, #8
 8005004:	429a      	cmp	r2, r3
 8005006:	d104      	bne.n	8005012 <vTaskSwitchContext+0x8a>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a0b      	ldr	r2, [pc, #44]	; (8005048 <vTaskSwitchContext+0xc0>)
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <vTaskSwitchContext+0xb8>)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <vTaskSwitchContext+0xc0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3354      	adds	r3, #84	; 0x54
 8005028:	4a08      	ldr	r2, [pc, #32]	; (800504c <vTaskSwitchContext+0xc4>)
 800502a:	6013      	str	r3, [r2, #0]
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20000e68 	.word	0x20000e68
 800503c:	20000e54 	.word	0x20000e54
 8005040:	20000e48 	.word	0x20000e48
 8005044:	20000970 	.word	0x20000970
 8005048:	2000096c 	.word	0x2000096c
 800504c:	20000068 	.word	0x20000068

08005050 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	60fb      	str	r3, [r7, #12]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005076:	4b07      	ldr	r3, [pc, #28]	; (8005094 <vTaskPlaceOnEventList+0x44>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3318      	adds	r3, #24
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fe fe61 	bl	8003d46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005084:	2101      	movs	r1, #1
 8005086:	6838      	ldr	r0, [r7, #0]
 8005088:	f000 fa80 	bl	800558c <prvAddCurrentTaskToDelayedList>
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	2000096c 	.word	0x2000096c

08005098 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	617b      	str	r3, [r7, #20]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <vTaskPlaceOnEventListRestricted+0x54>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3318      	adds	r3, #24
 80050c6:	4619      	mov	r1, r3
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7fe fe18 	bl	8003cfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80050d4:	f04f 33ff 	mov.w	r3, #4294967295
 80050d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	68b8      	ldr	r0, [r7, #8]
 80050de:	f000 fa55 	bl	800558c <prvAddCurrentTaskToDelayedList>
	}
 80050e2:	bf00      	nop
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	2000096c 	.word	0x2000096c

080050f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	60fb      	str	r3, [r7, #12]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	3318      	adds	r3, #24
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe fe49 	bl	8003db8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <xTaskRemoveFromEventList+0xb0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11d      	bne.n	800516a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3304      	adds	r3, #4
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fe40 	bl	8003db8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <xTaskRemoveFromEventList+0xb4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d903      	bls.n	800514c <xTaskRemoveFromEventList+0x5c>
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <xTaskRemoveFromEventList+0xb4>)
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <xTaskRemoveFromEventList+0xb8>)
 800515a:	441a      	add	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f7fe fdcb 	bl	8003cfe <vListInsertEnd>
 8005168:	e005      	b.n	8005176 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	3318      	adds	r3, #24
 800516e:	4619      	mov	r1, r3
 8005170:	480e      	ldr	r0, [pc, #56]	; (80051ac <xTaskRemoveFromEventList+0xbc>)
 8005172:	f7fe fdc4 	bl	8003cfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <xTaskRemoveFromEventList+0xc0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d905      	bls.n	8005190 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <xTaskRemoveFromEventList+0xc4>)
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e001      	b.n	8005194 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005194:	697b      	ldr	r3, [r7, #20]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000e68 	.word	0x20000e68
 80051a4:	20000e48 	.word	0x20000e48
 80051a8:	20000970 	.word	0x20000970
 80051ac:	20000e00 	.word	0x20000e00
 80051b0:	2000096c 	.word	0x2000096c
 80051b4:	20000e54 	.word	0x20000e54

080051b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <vTaskInternalSetTimeOutState+0x24>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <vTaskInternalSetTimeOutState+0x28>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	605a      	str	r2, [r3, #4]
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20000e58 	.word	0x20000e58
 80051e0:	20000e44 	.word	0x20000e44

080051e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	613b      	str	r3, [r7, #16]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	60fb      	str	r3, [r7, #12]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005226:	f000 fe7d 	bl	8005f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <xTaskCheckForTimeOut+0xbc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d102      	bne.n	800524a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	e023      	b.n	8005292 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <xTaskCheckForTimeOut+0xc0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d007      	beq.n	8005266 <xTaskCheckForTimeOut+0x82>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	429a      	cmp	r2, r3
 800525e:	d302      	bcc.n	8005266 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005260:	2301      	movs	r3, #1
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	e015      	b.n	8005292 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	429a      	cmp	r2, r3
 800526e:	d20b      	bcs.n	8005288 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff ff9b 	bl	80051b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	e004      	b.n	8005292 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800528e:	2301      	movs	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005292:	f000 fe77 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 8005296:	69fb      	ldr	r3, [r7, #28]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000e44 	.word	0x20000e44
 80052a4:	20000e58 	.word	0x20000e58

080052a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <vTaskMissedYield+0x14>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
}
 80052b2:	bf00      	nop
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	20000e54 	.word	0x20000e54

080052c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052c8:	f000 f852 	bl	8005370 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <prvIdleTask+0x28>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d9f9      	bls.n	80052c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <prvIdleTask+0x2c>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052e4:	e7f0      	b.n	80052c8 <prvIdleTask+0x8>
 80052e6:	bf00      	nop
 80052e8:	20000970 	.word	0x20000970
 80052ec:	e000ed04 	.word	0xe000ed04

080052f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	e00c      	b.n	8005316 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4a12      	ldr	r2, [pc, #72]	; (8005350 <prvInitialiseTaskLists+0x60>)
 8005308:	4413      	add	r3, r2
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fcca 	bl	8003ca4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3301      	adds	r3, #1
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b37      	cmp	r3, #55	; 0x37
 800531a:	d9ef      	bls.n	80052fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800531c:	480d      	ldr	r0, [pc, #52]	; (8005354 <prvInitialiseTaskLists+0x64>)
 800531e:	f7fe fcc1 	bl	8003ca4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005322:	480d      	ldr	r0, [pc, #52]	; (8005358 <prvInitialiseTaskLists+0x68>)
 8005324:	f7fe fcbe 	bl	8003ca4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005328:	480c      	ldr	r0, [pc, #48]	; (800535c <prvInitialiseTaskLists+0x6c>)
 800532a:	f7fe fcbb 	bl	8003ca4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800532e:	480c      	ldr	r0, [pc, #48]	; (8005360 <prvInitialiseTaskLists+0x70>)
 8005330:	f7fe fcb8 	bl	8003ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005334:	480b      	ldr	r0, [pc, #44]	; (8005364 <prvInitialiseTaskLists+0x74>)
 8005336:	f7fe fcb5 	bl	8003ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <prvInitialiseTaskLists+0x78>)
 800533c:	4a05      	ldr	r2, [pc, #20]	; (8005354 <prvInitialiseTaskLists+0x64>)
 800533e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <prvInitialiseTaskLists+0x7c>)
 8005342:	4a05      	ldr	r2, [pc, #20]	; (8005358 <prvInitialiseTaskLists+0x68>)
 8005344:	601a      	str	r2, [r3, #0]
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000970 	.word	0x20000970
 8005354:	20000dd0 	.word	0x20000dd0
 8005358:	20000de4 	.word	0x20000de4
 800535c:	20000e00 	.word	0x20000e00
 8005360:	20000e14 	.word	0x20000e14
 8005364:	20000e2c 	.word	0x20000e2c
 8005368:	20000df8 	.word	0x20000df8
 800536c:	20000dfc 	.word	0x20000dfc

08005370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005376:	e019      	b.n	80053ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005378:	f000 fdd4 	bl	8005f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800537c:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <prvCheckTasksWaitingTermination+0x50>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe fd15 	bl	8003db8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <prvCheckTasksWaitingTermination+0x54>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3b01      	subs	r3, #1
 8005394:	4a0b      	ldr	r2, [pc, #44]	; (80053c4 <prvCheckTasksWaitingTermination+0x54>)
 8005396:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <prvCheckTasksWaitingTermination+0x58>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3b01      	subs	r3, #1
 800539e:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <prvCheckTasksWaitingTermination+0x58>)
 80053a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053a2:	f000 fdef 	bl	8005f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f810 	bl	80053cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <prvCheckTasksWaitingTermination+0x58>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e1      	bne.n	8005378 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000e14 	.word	0x20000e14
 80053c4:	20000e40 	.word	0x20000e40
 80053c8:	20000e28 	.word	0x20000e28

080053cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3354      	adds	r3, #84	; 0x54
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 f9df 	bl	800679c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d108      	bne.n	80053fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 ff87 	bl	8006300 <vPortFree>
				vPortFree( pxTCB );
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 ff84 	bl	8006300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053f8:	e018      	b.n	800542c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005400:	2b01      	cmp	r3, #1
 8005402:	d103      	bne.n	800540c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 ff7b 	bl	8006300 <vPortFree>
	}
 800540a:	e00f      	b.n	800542c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005412:	2b02      	cmp	r3, #2
 8005414:	d00a      	beq.n	800542c <prvDeleteTCB+0x60>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	60fb      	str	r3, [r7, #12]
}
 8005428:	bf00      	nop
 800542a:	e7fe      	b.n	800542a <prvDeleteTCB+0x5e>
	}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <prvResetNextTaskUnblockTime+0x38>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d104      	bne.n	800544e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005444:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <prvResetNextTaskUnblockTime+0x3c>)
 8005446:	f04f 32ff 	mov.w	r2, #4294967295
 800544a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800544c:	e008      	b.n	8005460 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <prvResetNextTaskUnblockTime+0x38>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4a04      	ldr	r2, [pc, #16]	; (8005470 <prvResetNextTaskUnblockTime+0x3c>)
 800545e:	6013      	str	r3, [r2, #0]
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	20000df8 	.word	0x20000df8
 8005470:	20000e60 	.word	0x20000e60

08005474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <xTaskGetSchedulerState+0x34>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005482:	2301      	movs	r3, #1
 8005484:	607b      	str	r3, [r7, #4]
 8005486:	e008      	b.n	800549a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005488:	4b08      	ldr	r3, [pc, #32]	; (80054ac <xTaskGetSchedulerState+0x38>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005490:	2302      	movs	r3, #2
 8005492:	607b      	str	r3, [r7, #4]
 8005494:	e001      	b.n	800549a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005496:	2300      	movs	r3, #0
 8005498:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800549a:	687b      	ldr	r3, [r7, #4]
	}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	20000e4c 	.word	0x20000e4c
 80054ac:	20000e68 	.word	0x20000e68

080054b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d056      	beq.n	8005574 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054c6:	4b2e      	ldr	r3, [pc, #184]	; (8005580 <xTaskPriorityDisinherit+0xd0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d00a      	beq.n	80054e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60fb      	str	r3, [r7, #12]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60bb      	str	r3, [r7, #8]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005508:	1e5a      	subs	r2, r3, #1
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005516:	429a      	cmp	r2, r3
 8005518:	d02c      	beq.n	8005574 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551e:	2b00      	cmp	r3, #0
 8005520:	d128      	bne.n	8005574 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	3304      	adds	r3, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fc46 	bl	8003db8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <xTaskPriorityDisinherit+0xd4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d903      	bls.n	8005554 <xTaskPriorityDisinherit+0xa4>
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	4a0c      	ldr	r2, [pc, #48]	; (8005584 <xTaskPriorityDisinherit+0xd4>)
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <xTaskPriorityDisinherit+0xd8>)
 8005562:	441a      	add	r2, r3
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f7fe fbc7 	bl	8003cfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005570:	2301      	movs	r3, #1
 8005572:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005574:	697b      	ldr	r3, [r7, #20]
	}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	2000096c 	.word	0x2000096c
 8005584:	20000e48 	.word	0x20000e48
 8005588:	20000970 	.word	0x20000970

0800558c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <prvAddCurrentTaskToDelayedList+0x90>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800559c:	4b20      	ldr	r3, [pc, #128]	; (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fc08 	bl	8003db8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d10a      	bne.n	80055c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4619      	mov	r1, r3
 80055be:	4819      	ldr	r0, [pc, #100]	; (8005624 <prvAddCurrentTaskToDelayedList+0x98>)
 80055c0:	f7fe fb9d 	bl	8003cfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055c4:	e026      	b.n	8005614 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4413      	add	r3, r2
 80055cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055ce:	4b14      	ldr	r3, [pc, #80]	; (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d209      	bcs.n	80055f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7fe fbab 	bl	8003d46 <vListInsert>
}
 80055f0:	e010      	b.n	8005614 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f2:	4b0e      	ldr	r3, [pc, #56]	; (800562c <prvAddCurrentTaskToDelayedList+0xa0>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7fe fba1 	bl	8003d46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	429a      	cmp	r2, r3
 800560c:	d202      	bcs.n	8005614 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800560e:	4a08      	ldr	r2, [pc, #32]	; (8005630 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6013      	str	r3, [r2, #0]
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000e44 	.word	0x20000e44
 8005620:	2000096c 	.word	0x2000096c
 8005624:	20000e2c 	.word	0x20000e2c
 8005628:	20000dfc 	.word	0x20000dfc
 800562c:	20000df8 	.word	0x20000df8
 8005630:	20000e60 	.word	0x20000e60

08005634 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	; 0x28
 8005638:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800563e:	f000 fb07 	bl	8005c50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005642:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <xTimerCreateTimerTask+0x80>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d021      	beq.n	800568e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005652:	1d3a      	adds	r2, r7, #4
 8005654:	f107 0108 	add.w	r1, r7, #8
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe fb07 	bl	8003c70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	9202      	str	r2, [sp, #8]
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	2302      	movs	r3, #2
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2300      	movs	r3, #0
 8005672:	460a      	mov	r2, r1
 8005674:	4910      	ldr	r1, [pc, #64]	; (80056b8 <xTimerCreateTimerTask+0x84>)
 8005676:	4811      	ldr	r0, [pc, #68]	; (80056bc <xTimerCreateTimerTask+0x88>)
 8005678:	f7ff f8b4 	bl	80047e4 <xTaskCreateStatic>
 800567c:	4603      	mov	r3, r0
 800567e:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <xTimerCreateTimerTask+0x8c>)
 8005680:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <xTimerCreateTimerTask+0x8c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800568a:	2301      	movs	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	613b      	str	r3, [r7, #16]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056aa:	697b      	ldr	r3, [r7, #20]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000e9c 	.word	0x20000e9c
 80056b8:	080074b4 	.word	0x080074b4
 80056bc:	080057f9 	.word	0x080057f9
 80056c0:	20000ea0 	.word	0x20000ea0

080056c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	; 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	623b      	str	r3, [r7, #32]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056f2:	4b1a      	ldr	r3, [pc, #104]	; (800575c <xTimerGenericCommand+0x98>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d02a      	beq.n	8005750 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b05      	cmp	r3, #5
 800570a:	dc18      	bgt.n	800573e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800570c:	f7ff feb2 	bl	8005474 <xTaskGetSchedulerState>
 8005710:	4603      	mov	r3, r0
 8005712:	2b02      	cmp	r3, #2
 8005714:	d109      	bne.n	800572a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005716:	4b11      	ldr	r3, [pc, #68]	; (800575c <xTimerGenericCommand+0x98>)
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	f107 0110 	add.w	r1, r7, #16
 800571e:	2300      	movs	r3, #0
 8005720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005722:	f7fe fc77 	bl	8004014 <xQueueGenericSend>
 8005726:	6278      	str	r0, [r7, #36]	; 0x24
 8005728:	e012      	b.n	8005750 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800572a:	4b0c      	ldr	r3, [pc, #48]	; (800575c <xTimerGenericCommand+0x98>)
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	f107 0110 	add.w	r1, r7, #16
 8005732:	2300      	movs	r3, #0
 8005734:	2200      	movs	r2, #0
 8005736:	f7fe fc6d 	bl	8004014 <xQueueGenericSend>
 800573a:	6278      	str	r0, [r7, #36]	; 0x24
 800573c:	e008      	b.n	8005750 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <xTimerGenericCommand+0x98>)
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	f107 0110 	add.w	r1, r7, #16
 8005746:	2300      	movs	r3, #0
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	f7fe fd61 	bl	8004210 <xQueueGenericSendFromISR>
 800574e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005752:	4618      	mov	r0, r3
 8005754:	3728      	adds	r7, #40	; 0x28
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000e9c 	.word	0x20000e9c

08005760 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af02      	add	r7, sp, #8
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800576a:	4b22      	ldr	r3, [pc, #136]	; (80057f4 <prvProcessExpiredTimer+0x94>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3304      	adds	r3, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fb1d 	bl	8003db8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d022      	beq.n	80057d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	18d1      	adds	r1, r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	6978      	ldr	r0, [r7, #20]
 800579a:	f000 f8d1 	bl	8005940 <prvInsertTimerInActiveList>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01f      	beq.n	80057e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057a4:	2300      	movs	r3, #0
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	2300      	movs	r3, #0
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	2100      	movs	r1, #0
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f7ff ff88 	bl	80056c4 <xTimerGenericCommand>
 80057b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d113      	bne.n	80057e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	60fb      	str	r3, [r7, #12]
}
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	6978      	ldr	r0, [r7, #20]
 80057ea:	4798      	blx	r3
}
 80057ec:	bf00      	nop
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20000e94 	.word	0x20000e94

080057f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005800:	f107 0308 	add.w	r3, r7, #8
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f857 	bl	80058b8 <prvGetNextExpireTime>
 800580a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4619      	mov	r1, r3
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f803 	bl	800581c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005816:	f000 f8d5 	bl	80059c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800581a:	e7f1      	b.n	8005800 <prvTimerTask+0x8>

0800581c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005826:	f7ff fa39 	bl	8004c9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800582a:	f107 0308 	add.w	r3, r7, #8
 800582e:	4618      	mov	r0, r3
 8005830:	f000 f866 	bl	8005900 <prvSampleTimeNow>
 8005834:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d130      	bne.n	800589e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <prvProcessTimerOrBlockTask+0x3c>
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	429a      	cmp	r2, r3
 8005848:	d806      	bhi.n	8005858 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800584a:	f7ff fa35 	bl	8004cb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ff85 	bl	8005760 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005856:	e024      	b.n	80058a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <prvProcessTimerOrBlockTask+0x90>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <prvProcessTimerOrBlockTask+0x50>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <prvProcessTimerOrBlockTask+0x52>
 800586c:	2300      	movs	r3, #0
 800586e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005870:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <prvProcessTimerOrBlockTask+0x94>)
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	4619      	mov	r1, r3
 800587e:	f7fe ff7d 	bl	800477c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005882:	f7ff fa19 	bl	8004cb8 <xTaskResumeAll>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <prvProcessTimerOrBlockTask+0x98>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
}
 800589c:	e001      	b.n	80058a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800589e:	f7ff fa0b 	bl	8004cb8 <xTaskResumeAll>
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000e98 	.word	0x20000e98
 80058b0:	20000e9c 	.word	0x20000e9c
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058c0:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <prvGetNextExpireTime+0x44>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <prvGetNextExpireTime+0x16>
 80058ca:	2201      	movs	r2, #1
 80058cc:	e000      	b.n	80058d0 <prvGetNextExpireTime+0x18>
 80058ce:	2200      	movs	r2, #0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058dc:	4b07      	ldr	r3, [pc, #28]	; (80058fc <prvGetNextExpireTime+0x44>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	e001      	b.n	80058ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058ec:	68fb      	ldr	r3, [r7, #12]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000e94 	.word	0x20000e94

08005900 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005908:	f7ff fa74 	bl	8004df4 <xTaskGetTickCount>
 800590c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvSampleTimeNow+0x3c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	429a      	cmp	r2, r3
 8005916:	d205      	bcs.n	8005924 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005918:	f000 f936 	bl	8005b88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e002      	b.n	800592a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800592a:	4a04      	ldr	r2, [pc, #16]	; (800593c <prvSampleTimeNow+0x3c>)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005930:	68fb      	ldr	r3, [r7, #12]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000ea4 	.word	0x20000ea4

08005940 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d812      	bhi.n	800598c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005974:	2301      	movs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e01b      	b.n	80059b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <prvInsertTimerInActiveList+0x7c>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7fe f9de 	bl	8003d46 <vListInsert>
 800598a:	e012      	b.n	80059b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d206      	bcs.n	80059a2 <prvInsertTimerInActiveList+0x62>
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800599c:	2301      	movs	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e007      	b.n	80059b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <prvInsertTimerInActiveList+0x80>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f7fe f9ca 	bl	8003d46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059b2:	697b      	ldr	r3, [r7, #20]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000e98 	.word	0x20000e98
 80059c0:	20000e94 	.word	0x20000e94

080059c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08e      	sub	sp, #56	; 0x38
 80059c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ca:	e0ca      	b.n	8005b62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	da18      	bge.n	8005a04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059d2:	1d3b      	adds	r3, r7, #4
 80059d4:	3304      	adds	r3, #4
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	61fb      	str	r3, [r7, #28]
}
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fa:	6850      	ldr	r0, [r2, #4]
 80059fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fe:	6892      	ldr	r2, [r2, #8]
 8005a00:	4611      	mov	r1, r2
 8005a02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f2c0 80ab 	blt.w	8005b62 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe f9cb 	bl	8003db8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a22:	463b      	mov	r3, r7
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff ff6b 	bl	8005900 <prvSampleTimeNow>
 8005a2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b09      	cmp	r3, #9
 8005a30:	f200 8096 	bhi.w	8005b60 <prvProcessReceivedCommands+0x19c>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <prvProcessReceivedCommands+0x78>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a65 	.word	0x08005a65
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a65 	.word	0x08005a65
 8005a48:	08005ad9 	.word	0x08005ad9
 8005a4c:	08005aed 	.word	0x08005aed
 8005a50:	08005b37 	.word	0x08005b37
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005a65 	.word	0x08005a65
 8005a5c:	08005ad9 	.word	0x08005ad9
 8005a60:	08005aed 	.word	0x08005aed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	18d1      	adds	r1, r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a84:	f7ff ff5c 	bl	8005940 <prvInsertTimerInActiveList>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d069      	beq.n	8005b62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d05e      	beq.n	8005b62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	441a      	add	r2, r3
 8005aac:	2300      	movs	r3, #0
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab6:	f7ff fe05 	bl	80056c4 <xTimerGenericCommand>
 8005aba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d14f      	bne.n	8005b62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	61bb      	str	r3, [r7, #24]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005aea:	e03a      	b.n	8005b62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	617b      	str	r3, [r7, #20]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	18d1      	adds	r1, r2, r3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b30:	f7ff ff06 	bl	8005940 <prvInsertTimerInActiveList>
					break;
 8005b34:	e015      	b.n	8005b62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b46:	f000 fbdb 	bl	8006300 <vPortFree>
 8005b4a:	e00a      	b.n	8005b62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b5e:	e000      	b.n	8005b62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005b60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <prvProcessReceivedCommands+0x1c0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	1d39      	adds	r1, r7, #4
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fbec 	bl	8004348 <xQueueReceive>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f47f af2a 	bne.w	80059cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b78:	bf00      	nop
 8005b7a:	bf00      	nop
 8005b7c:	3730      	adds	r7, #48	; 0x30
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000e9c 	.word	0x20000e9c

08005b88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b8e:	e048      	b.n	8005c22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b90:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9a:	4b2b      	ldr	r3, [pc, #172]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe f905 	bl	8003db8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02e      	beq.n	8005c22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4413      	add	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d90e      	bls.n	8005bf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005be2:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7fe f8aa 	bl	8003d46 <vListInsert>
 8005bf2:	e016      	b.n	8005c22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff fd60 	bl	80056c4 <xTimerGenericCommand>
 8005c04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	603b      	str	r3, [r7, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1b1      	bne.n	8005b90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <prvSwitchTimerLists+0xc4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005c38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c3a:	4a04      	ldr	r2, [pc, #16]	; (8005c4c <prvSwitchTimerLists+0xc4>)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	6013      	str	r3, [r2, #0]
}
 8005c40:	bf00      	nop
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000e94 	.word	0x20000e94
 8005c4c:	20000e98 	.word	0x20000e98

08005c50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c56:	f000 f965 	bl	8005f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <prvCheckForValidListAndQueue+0x60>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d120      	bne.n	8005ca4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c62:	4814      	ldr	r0, [pc, #80]	; (8005cb4 <prvCheckForValidListAndQueue+0x64>)
 8005c64:	f7fe f81e 	bl	8003ca4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c68:	4813      	ldr	r0, [pc, #76]	; (8005cb8 <prvCheckForValidListAndQueue+0x68>)
 8005c6a:	f7fe f81b 	bl	8003ca4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <prvCheckForValidListAndQueue+0x6c>)
 8005c70:	4a10      	ldr	r2, [pc, #64]	; (8005cb4 <prvCheckForValidListAndQueue+0x64>)
 8005c72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c74:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <prvCheckForValidListAndQueue+0x70>)
 8005c76:	4a10      	ldr	r2, [pc, #64]	; (8005cb8 <prvCheckForValidListAndQueue+0x68>)
 8005c78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <prvCheckForValidListAndQueue+0x74>)
 8005c80:	4a11      	ldr	r2, [pc, #68]	; (8005cc8 <prvCheckForValidListAndQueue+0x78>)
 8005c82:	2110      	movs	r1, #16
 8005c84:	200a      	movs	r0, #10
 8005c86:	f7fe f929 	bl	8003edc <xQueueGenericCreateStatic>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <prvCheckForValidListAndQueue+0x60>)
 8005c8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <prvCheckForValidListAndQueue+0x60>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <prvCheckForValidListAndQueue+0x60>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	490b      	ldr	r1, [pc, #44]	; (8005ccc <prvCheckForValidListAndQueue+0x7c>)
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fd42 	bl	8004728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ca4:	f000 f96e 	bl	8005f84 <vPortExitCritical>
}
 8005ca8:	bf00      	nop
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000e9c 	.word	0x20000e9c
 8005cb4:	20000e6c 	.word	0x20000e6c
 8005cb8:	20000e80 	.word	0x20000e80
 8005cbc:	20000e94 	.word	0x20000e94
 8005cc0:	20000e98 	.word	0x20000e98
 8005cc4:	20000f48 	.word	0x20000f48
 8005cc8:	20000ea8 	.word	0x20000ea8
 8005ccc:	080074bc 	.word	0x080074bc

08005cd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3b04      	subs	r3, #4
 8005ce0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3b04      	subs	r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f023 0201 	bic.w	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3b04      	subs	r3, #4
 8005cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d00:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <pxPortInitialiseStack+0x64>)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3b14      	subs	r3, #20
 8005d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3b04      	subs	r3, #4
 8005d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f06f 0202 	mvn.w	r2, #2
 8005d1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3b20      	subs	r3, #32
 8005d24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d26:	68fb      	ldr	r3, [r7, #12]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	08005d39 	.word	0x08005d39

08005d38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <prvTaskExitError+0x54>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d00a      	beq.n	8005d62 <prvTaskExitError+0x2a>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60fb      	str	r3, [r7, #12]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <prvTaskExitError+0x28>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	60bb      	str	r3, [r7, #8]
}
 8005d74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d76:	bf00      	nop
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0fc      	beq.n	8005d78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	2000000c 	.word	0x2000000c

08005d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <pxCurrentTCBConst2>)
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	6808      	ldr	r0, [r1, #0]
 8005d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	f380 8809 	msr	PSP, r0
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8811 	msr	BASEPRI, r0
 8005daa:	4770      	bx	lr
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst2>:
 8005db0:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005db8:	4808      	ldr	r0, [pc, #32]	; (8005ddc <prvPortStartFirstTask+0x24>)
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f380 8808 	msr	MSP, r0
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8814 	msr	CONTROL, r0
 8005dca:	b662      	cpsie	i
 8005dcc:	b661      	cpsie	f
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	df00      	svc	0
 8005dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dda:	bf00      	nop
 8005ddc:	e000ed08 	.word	0xe000ed08

08005de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005de6:	4b46      	ldr	r3, [pc, #280]	; (8005f00 <xPortStartScheduler+0x120>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a46      	ldr	r2, [pc, #280]	; (8005f04 <xPortStartScheduler+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10a      	bne.n	8005e06 <xPortStartScheduler+0x26>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	613b      	str	r3, [r7, #16]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e06:	4b3e      	ldr	r3, [pc, #248]	; (8005f00 <xPortStartScheduler+0x120>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3f      	ldr	r2, [pc, #252]	; (8005f08 <xPortStartScheduler+0x128>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10a      	bne.n	8005e26 <xPortStartScheduler+0x46>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <xPortStartScheduler+0x12c>)
 8005e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <xPortStartScheduler+0x130>)
 8005e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e4e:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e54:	e009      	b.n	8005e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	4a2d      	ldr	r2, [pc, #180]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b80      	cmp	r3, #128	; 0x80
 8005e74:	d0ef      	beq.n	8005e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1c3 0307 	rsb	r3, r3, #7
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d00a      	beq.n	8005e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60bb      	str	r3, [r7, #8]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <xPortStartScheduler+0x134>)
 8005ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <xPortStartScheduler+0x134>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <xPortStartScheduler+0x134>)
 8005eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005eb6:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <xPortStartScheduler+0x138>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ece:	f000 f8dd 	bl	800608c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <xPortStartScheduler+0x13c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ed8:	f000 f8fc 	bl	80060d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <xPortStartScheduler+0x140>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0f      	ldr	r2, [pc, #60]	; (8005f20 <xPortStartScheduler+0x140>)
 8005ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ee8:	f7ff ff66 	bl	8005db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005eec:	f7ff f84c 	bl	8004f88 <vTaskSwitchContext>
	prvTaskExitError();
 8005ef0:	f7ff ff22 	bl	8005d38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	e000ed00 	.word	0xe000ed00
 8005f04:	410fc271 	.word	0x410fc271
 8005f08:	410fc270 	.word	0x410fc270
 8005f0c:	e000e400 	.word	0xe000e400
 8005f10:	20000f98 	.word	0x20000f98
 8005f14:	20000f9c 	.word	0x20000f9c
 8005f18:	e000ed20 	.word	0xe000ed20
 8005f1c:	2000000c 	.word	0x2000000c
 8005f20:	e000ef34 	.word	0xe000ef34

08005f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	607b      	str	r3, [r7, #4]
}
 8005f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	4a0d      	ldr	r2, [pc, #52]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d10f      	bne.n	8005f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <vPortEnterCritical+0x5c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	603b      	str	r3, [r7, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <vPortEnterCritical+0x4a>
	}
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	2000000c 	.word	0x2000000c
 8005f80:	e000ed04 	.word	0xe000ed04

08005f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <vPortExitCritical+0x50>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <vPortExitCritical+0x24>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	607b      	str	r3, [r7, #4]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <vPortExitCritical+0x50>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <vPortExitCritical+0x50>)
 8005fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fb2:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <vPortExitCritical+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <vPortExitCritical+0x42>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f383 8811 	msr	BASEPRI, r3
}
 8005fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	2000000c 	.word	0x2000000c
	...

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f01e 0f10 	tst.w	lr, #16
 8005ff0:	bf08      	it	eq
 8005ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006004:	f380 8811 	msr	BASEPRI, r0
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f7fe ffba 	bl	8004f88 <vTaskSwitchContext>
 8006014:	f04f 0000 	mov.w	r0, #0
 8006018:	f380 8811 	msr	BASEPRI, r0
 800601c:	bc09      	pop	{r0, r3}
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006026:	f01e 0f10 	tst.w	lr, #16
 800602a:	bf08      	it	eq
 800602c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006030:	f380 8809 	msr	PSP, r0
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst>:
 8006040:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
}
 8006060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006062:	f7fe fed7 	bl	8004e14 <xTaskIncrementTick>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <xPortSysTickHandler+0x40>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f383 8811 	msr	BASEPRI, r3
}
 800607e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <vPortSetupTimerInterrupt+0x34>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <vPortSetupTimerInterrupt+0x38>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <vPortSetupTimerInterrupt+0x3c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <vPortSetupTimerInterrupt+0x40>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <vPortSetupTimerInterrupt+0x44>)
 80060aa:	3b01      	subs	r3, #1
 80060ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ae:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <vPortSetupTimerInterrupt+0x34>)
 80060b0:	2207      	movs	r2, #7
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	e000e010 	.word	0xe000e010
 80060c4:	e000e018 	.word	0xe000e018
 80060c8:	20000000 	.word	0x20000000
 80060cc:	10624dd3 	.word	0x10624dd3
 80060d0:	e000e014 	.word	0xe000e014

080060d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060e4 <vPortEnableVFP+0x10>
 80060d8:	6801      	ldr	r1, [r0, #0]
 80060da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060de:	6001      	str	r1, [r0, #0]
 80060e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060e2:	bf00      	nop
 80060e4:	e000ed88 	.word	0xe000ed88

080060e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d914      	bls.n	8006124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060fa:	4a17      	ldr	r2, [pc, #92]	; (8006158 <vPortValidateInterruptPriority+0x70>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006104:	4b15      	ldr	r3, [pc, #84]	; (800615c <vPortValidateInterruptPriority+0x74>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	7afa      	ldrb	r2, [r7, #11]
 800610a:	429a      	cmp	r2, r3
 800610c:	d20a      	bcs.n	8006124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <vPortValidateInterruptPriority+0x78>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800612c:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <vPortValidateInterruptPriority+0x7c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d90a      	bls.n	800614a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	603b      	str	r3, [r7, #0]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <vPortValidateInterruptPriority+0x60>
	}
 800614a:	bf00      	nop
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	e000e3f0 	.word	0xe000e3f0
 800615c:	20000f98 	.word	0x20000f98
 8006160:	e000ed0c 	.word	0xe000ed0c
 8006164:	20000f9c 	.word	0x20000f9c

08006168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006174:	f7fe fd92 	bl	8004c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006178:	4b5b      	ldr	r3, [pc, #364]	; (80062e8 <pvPortMalloc+0x180>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006180:	f000 f920 	bl	80063c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006184:	4b59      	ldr	r3, [pc, #356]	; (80062ec <pvPortMalloc+0x184>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8093 	bne.w	80062b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01d      	beq.n	80061d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006198:	2208      	movs	r2, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d014      	beq.n	80061d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	3308      	adds	r3, #8
 80061b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <pvPortMalloc+0x6c>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	617b      	str	r3, [r7, #20]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d06e      	beq.n	80062b8 <pvPortMalloc+0x150>
 80061da:	4b45      	ldr	r3, [pc, #276]	; (80062f0 <pvPortMalloc+0x188>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d869      	bhi.n	80062b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061e4:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <pvPortMalloc+0x18c>)
 80061e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061e8:	4b42      	ldr	r3, [pc, #264]	; (80062f4 <pvPortMalloc+0x18c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ee:	e004      	b.n	80061fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <pvPortMalloc+0xa4>
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f1      	bne.n	80061f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <pvPortMalloc+0x180>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006212:	429a      	cmp	r2, r3
 8006214:	d050      	beq.n	80062b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2208      	movs	r2, #8
 800621c:	4413      	add	r3, r2
 800621e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	2308      	movs	r3, #8
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	429a      	cmp	r2, r3
 8006236:	d91f      	bls.n	8006278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <pvPortMalloc+0xf8>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	613b      	str	r3, [r7, #16]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006272:	69b8      	ldr	r0, [r7, #24]
 8006274:	f000 f908 	bl	8006488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006278:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <pvPortMalloc+0x188>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	4a1b      	ldr	r2, [pc, #108]	; (80062f0 <pvPortMalloc+0x188>)
 8006284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006286:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <pvPortMalloc+0x188>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <pvPortMalloc+0x190>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d203      	bcs.n	800629a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006292:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <pvPortMalloc+0x188>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <pvPortMalloc+0x190>)
 8006298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <pvPortMalloc+0x184>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <pvPortMalloc+0x194>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3301      	adds	r3, #1
 80062b4:	4a11      	ldr	r2, [pc, #68]	; (80062fc <pvPortMalloc+0x194>)
 80062b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062b8:	f7fe fcfe 	bl	8004cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <pvPortMalloc+0x174>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <pvPortMalloc+0x172>
	return pvReturn;
 80062dc:	69fb      	ldr	r3, [r7, #28]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3728      	adds	r7, #40	; 0x28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20004ba8 	.word	0x20004ba8
 80062ec:	20004bbc 	.word	0x20004bbc
 80062f0:	20004bac 	.word	0x20004bac
 80062f4:	20004ba0 	.word	0x20004ba0
 80062f8:	20004bb0 	.word	0x20004bb0
 80062fc:	20004bb4 	.word	0x20004bb4

08006300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d04d      	beq.n	80063ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006312:	2308      	movs	r3, #8
 8006314:	425b      	negs	r3, r3
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <vPortFree+0xb8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <vPortFree+0x44>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60fb      	str	r3, [r7, #12]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <vPortFree+0x62>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60bb      	str	r3, [r7, #8]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <vPortFree+0xb8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d11a      	bne.n	80063ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <vPortFree+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006388:	f7fe fc88 	bl	8004c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <vPortFree+0xbc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4413      	add	r3, r2
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <vPortFree+0xbc>)
 8006398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639a:	6938      	ldr	r0, [r7, #16]
 800639c:	f000 f874 	bl	8006488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <vPortFree+0xc0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	4a06      	ldr	r2, [pc, #24]	; (80063c0 <vPortFree+0xc0>)
 80063a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063aa:	f7fe fc85 	bl	8004cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ae:	bf00      	nop
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20004bbc 	.word	0x20004bbc
 80063bc:	20004bac 	.word	0x20004bac
 80063c0:	20004bb8 	.word	0x20004bb8

080063c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <prvHeapInit+0xac>)
 80063d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3307      	adds	r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	4a1f      	ldr	r2, [pc, #124]	; (8006470 <prvHeapInit+0xac>)
 80063f4:	4413      	add	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063fc:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <prvHeapInit+0xb0>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <prvHeapInit+0xb0>)
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006410:	2208      	movs	r2, #8
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <prvHeapInit+0xb4>)
 8006424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <prvHeapInit+0xb4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <prvHeapInit+0xb4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006444:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <prvHeapInit+0xb4>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4a0a      	ldr	r2, [pc, #40]	; (800647c <prvHeapInit+0xb8>)
 8006452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4a09      	ldr	r2, [pc, #36]	; (8006480 <prvHeapInit+0xbc>)
 800645a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <prvHeapInit+0xc0>)
 800645e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006462:	601a      	str	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000fa0 	.word	0x20000fa0
 8006474:	20004ba0 	.word	0x20004ba0
 8006478:	20004ba8 	.word	0x20004ba8
 800647c:	20004bb0 	.word	0x20004bb0
 8006480:	20004bac 	.word	0x20004bac
 8006484:	20004bbc 	.word	0x20004bbc

08006488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006490:	4b28      	ldr	r3, [pc, #160]	; (8006534 <prvInsertBlockIntoFreeList+0xac>)
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e002      	b.n	800649c <prvInsertBlockIntoFreeList+0x14>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d8f7      	bhi.n	8006496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d108      	bne.n	80064ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	441a      	add	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d118      	bne.n	8006510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b15      	ldr	r3, [pc, #84]	; (8006538 <prvInsertBlockIntoFreeList+0xb0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d00d      	beq.n	8006506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	e008      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <prvInsertBlockIntoFreeList+0xb0>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e003      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d002      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20004ba0 	.word	0x20004ba0
 8006538:	20004ba8 	.word	0x20004ba8

0800653c <std>:
 800653c:	2300      	movs	r3, #0
 800653e:	b510      	push	{r4, lr}
 8006540:	4604      	mov	r4, r0
 8006542:	e9c0 3300 	strd	r3, r3, [r0]
 8006546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800654a:	6083      	str	r3, [r0, #8]
 800654c:	8181      	strh	r1, [r0, #12]
 800654e:	6643      	str	r3, [r0, #100]	; 0x64
 8006550:	81c2      	strh	r2, [r0, #14]
 8006552:	6183      	str	r3, [r0, #24]
 8006554:	4619      	mov	r1, r3
 8006556:	2208      	movs	r2, #8
 8006558:	305c      	adds	r0, #92	; 0x5c
 800655a:	f000 f906 	bl	800676a <memset>
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <std+0x58>)
 8006560:	6263      	str	r3, [r4, #36]	; 0x24
 8006562:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <std+0x5c>)
 8006564:	62a3      	str	r3, [r4, #40]	; 0x28
 8006566:	4b0d      	ldr	r3, [pc, #52]	; (800659c <std+0x60>)
 8006568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800656a:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <std+0x64>)
 800656c:	6323      	str	r3, [r4, #48]	; 0x30
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <std+0x68>)
 8006570:	6224      	str	r4, [r4, #32]
 8006572:	429c      	cmp	r4, r3
 8006574:	d006      	beq.n	8006584 <std+0x48>
 8006576:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800657a:	4294      	cmp	r4, r2
 800657c:	d002      	beq.n	8006584 <std+0x48>
 800657e:	33d0      	adds	r3, #208	; 0xd0
 8006580:	429c      	cmp	r4, r3
 8006582:	d105      	bne.n	8006590 <std+0x54>
 8006584:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658c:	f000 b9bc 	b.w	8006908 <__retarget_lock_init_recursive>
 8006590:	bd10      	pop	{r4, pc}
 8006592:	bf00      	nop
 8006594:	080066e5 	.word	0x080066e5
 8006598:	08006707 	.word	0x08006707
 800659c:	0800673f 	.word	0x0800673f
 80065a0:	08006763 	.word	0x08006763
 80065a4:	20004bc0 	.word	0x20004bc0

080065a8 <stdio_exit_handler>:
 80065a8:	4a02      	ldr	r2, [pc, #8]	; (80065b4 <stdio_exit_handler+0xc>)
 80065aa:	4903      	ldr	r1, [pc, #12]	; (80065b8 <stdio_exit_handler+0x10>)
 80065ac:	4803      	ldr	r0, [pc, #12]	; (80065bc <stdio_exit_handler+0x14>)
 80065ae:	f000 b869 	b.w	8006684 <_fwalk_sglue>
 80065b2:	bf00      	nop
 80065b4:	20000010 	.word	0x20000010
 80065b8:	080071d1 	.word	0x080071d1
 80065bc:	2000001c 	.word	0x2000001c

080065c0 <cleanup_stdio>:
 80065c0:	6841      	ldr	r1, [r0, #4]
 80065c2:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <cleanup_stdio+0x34>)
 80065c4:	4299      	cmp	r1, r3
 80065c6:	b510      	push	{r4, lr}
 80065c8:	4604      	mov	r4, r0
 80065ca:	d001      	beq.n	80065d0 <cleanup_stdio+0x10>
 80065cc:	f000 fe00 	bl	80071d0 <_fflush_r>
 80065d0:	68a1      	ldr	r1, [r4, #8]
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <cleanup_stdio+0x38>)
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d002      	beq.n	80065de <cleanup_stdio+0x1e>
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 fdf9 	bl	80071d0 <_fflush_r>
 80065de:	68e1      	ldr	r1, [r4, #12]
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <cleanup_stdio+0x3c>)
 80065e2:	4299      	cmp	r1, r3
 80065e4:	d004      	beq.n	80065f0 <cleanup_stdio+0x30>
 80065e6:	4620      	mov	r0, r4
 80065e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ec:	f000 bdf0 	b.w	80071d0 <_fflush_r>
 80065f0:	bd10      	pop	{r4, pc}
 80065f2:	bf00      	nop
 80065f4:	20004bc0 	.word	0x20004bc0
 80065f8:	20004c28 	.word	0x20004c28
 80065fc:	20004c90 	.word	0x20004c90

08006600 <global_stdio_init.part.0>:
 8006600:	b510      	push	{r4, lr}
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <global_stdio_init.part.0+0x30>)
 8006604:	4c0b      	ldr	r4, [pc, #44]	; (8006634 <global_stdio_init.part.0+0x34>)
 8006606:	4a0c      	ldr	r2, [pc, #48]	; (8006638 <global_stdio_init.part.0+0x38>)
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	4620      	mov	r0, r4
 800660c:	2200      	movs	r2, #0
 800660e:	2104      	movs	r1, #4
 8006610:	f7ff ff94 	bl	800653c <std>
 8006614:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006618:	2201      	movs	r2, #1
 800661a:	2109      	movs	r1, #9
 800661c:	f7ff ff8e 	bl	800653c <std>
 8006620:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006624:	2202      	movs	r2, #2
 8006626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800662a:	2112      	movs	r1, #18
 800662c:	f7ff bf86 	b.w	800653c <std>
 8006630:	20004cf8 	.word	0x20004cf8
 8006634:	20004bc0 	.word	0x20004bc0
 8006638:	080065a9 	.word	0x080065a9

0800663c <__sfp_lock_acquire>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__sfp_lock_acquire+0x8>)
 800663e:	f000 b964 	b.w	800690a <__retarget_lock_acquire_recursive>
 8006642:	bf00      	nop
 8006644:	20004d01 	.word	0x20004d01

08006648 <__sfp_lock_release>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__sfp_lock_release+0x8>)
 800664a:	f000 b95f 	b.w	800690c <__retarget_lock_release_recursive>
 800664e:	bf00      	nop
 8006650:	20004d01 	.word	0x20004d01

08006654 <__sinit>:
 8006654:	b510      	push	{r4, lr}
 8006656:	4604      	mov	r4, r0
 8006658:	f7ff fff0 	bl	800663c <__sfp_lock_acquire>
 800665c:	6a23      	ldr	r3, [r4, #32]
 800665e:	b11b      	cbz	r3, 8006668 <__sinit+0x14>
 8006660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006664:	f7ff bff0 	b.w	8006648 <__sfp_lock_release>
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <__sinit+0x28>)
 800666a:	6223      	str	r3, [r4, #32]
 800666c:	4b04      	ldr	r3, [pc, #16]	; (8006680 <__sinit+0x2c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f5      	bne.n	8006660 <__sinit+0xc>
 8006674:	f7ff ffc4 	bl	8006600 <global_stdio_init.part.0>
 8006678:	e7f2      	b.n	8006660 <__sinit+0xc>
 800667a:	bf00      	nop
 800667c:	080065c1 	.word	0x080065c1
 8006680:	20004cf8 	.word	0x20004cf8

08006684 <_fwalk_sglue>:
 8006684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006688:	4607      	mov	r7, r0
 800668a:	4688      	mov	r8, r1
 800668c:	4614      	mov	r4, r2
 800668e:	2600      	movs	r6, #0
 8006690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006694:	f1b9 0901 	subs.w	r9, r9, #1
 8006698:	d505      	bpl.n	80066a6 <_fwalk_sglue+0x22>
 800669a:	6824      	ldr	r4, [r4, #0]
 800669c:	2c00      	cmp	r4, #0
 800669e:	d1f7      	bne.n	8006690 <_fwalk_sglue+0xc>
 80066a0:	4630      	mov	r0, r6
 80066a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d907      	bls.n	80066bc <_fwalk_sglue+0x38>
 80066ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066b0:	3301      	adds	r3, #1
 80066b2:	d003      	beq.n	80066bc <_fwalk_sglue+0x38>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4638      	mov	r0, r7
 80066b8:	47c0      	blx	r8
 80066ba:	4306      	orrs	r6, r0
 80066bc:	3568      	adds	r5, #104	; 0x68
 80066be:	e7e9      	b.n	8006694 <_fwalk_sglue+0x10>

080066c0 <iprintf>:
 80066c0:	b40f      	push	{r0, r1, r2, r3}
 80066c2:	b507      	push	{r0, r1, r2, lr}
 80066c4:	4906      	ldr	r1, [pc, #24]	; (80066e0 <iprintf+0x20>)
 80066c6:	ab04      	add	r3, sp, #16
 80066c8:	6808      	ldr	r0, [r1, #0]
 80066ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ce:	6881      	ldr	r1, [r0, #8]
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	f000 fa4d 	bl	8006b70 <_vfiprintf_r>
 80066d6:	b003      	add	sp, #12
 80066d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066dc:	b004      	add	sp, #16
 80066de:	4770      	bx	lr
 80066e0:	20000068 	.word	0x20000068

080066e4 <__sread>:
 80066e4:	b510      	push	{r4, lr}
 80066e6:	460c      	mov	r4, r1
 80066e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ec:	f000 f8be 	bl	800686c <_read_r>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	bfab      	itete	ge
 80066f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066f6:	89a3      	ldrhlt	r3, [r4, #12]
 80066f8:	181b      	addge	r3, r3, r0
 80066fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066fe:	bfac      	ite	ge
 8006700:	6563      	strge	r3, [r4, #84]	; 0x54
 8006702:	81a3      	strhlt	r3, [r4, #12]
 8006704:	bd10      	pop	{r4, pc}

08006706 <__swrite>:
 8006706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670a:	461f      	mov	r7, r3
 800670c:	898b      	ldrh	r3, [r1, #12]
 800670e:	05db      	lsls	r3, r3, #23
 8006710:	4605      	mov	r5, r0
 8006712:	460c      	mov	r4, r1
 8006714:	4616      	mov	r6, r2
 8006716:	d505      	bpl.n	8006724 <__swrite+0x1e>
 8006718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671c:	2302      	movs	r3, #2
 800671e:	2200      	movs	r2, #0
 8006720:	f000 f892 	bl	8006848 <_lseek_r>
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800672a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800672e:	81a3      	strh	r3, [r4, #12]
 8006730:	4632      	mov	r2, r6
 8006732:	463b      	mov	r3, r7
 8006734:	4628      	mov	r0, r5
 8006736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800673a:	f000 b8a9 	b.w	8006890 <_write_r>

0800673e <__sseek>:
 800673e:	b510      	push	{r4, lr}
 8006740:	460c      	mov	r4, r1
 8006742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006746:	f000 f87f 	bl	8006848 <_lseek_r>
 800674a:	1c43      	adds	r3, r0, #1
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	bf15      	itete	ne
 8006750:	6560      	strne	r0, [r4, #84]	; 0x54
 8006752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800675a:	81a3      	strheq	r3, [r4, #12]
 800675c:	bf18      	it	ne
 800675e:	81a3      	strhne	r3, [r4, #12]
 8006760:	bd10      	pop	{r4, pc}

08006762 <__sclose>:
 8006762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006766:	f000 b809 	b.w	800677c <_close_r>

0800676a <memset>:
 800676a:	4402      	add	r2, r0
 800676c:	4603      	mov	r3, r0
 800676e:	4293      	cmp	r3, r2
 8006770:	d100      	bne.n	8006774 <memset+0xa>
 8006772:	4770      	bx	lr
 8006774:	f803 1b01 	strb.w	r1, [r3], #1
 8006778:	e7f9      	b.n	800676e <memset+0x4>
	...

0800677c <_close_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d06      	ldr	r5, [pc, #24]	; (8006798 <_close_r+0x1c>)
 8006780:	2300      	movs	r3, #0
 8006782:	4604      	mov	r4, r0
 8006784:	4608      	mov	r0, r1
 8006786:	602b      	str	r3, [r5, #0]
 8006788:	f7fa fa25 	bl	8000bd6 <_close>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_close_r+0x1a>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_close_r+0x1a>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	20004cfc 	.word	0x20004cfc

0800679c <_reclaim_reent>:
 800679c:	4b29      	ldr	r3, [pc, #164]	; (8006844 <_reclaim_reent+0xa8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4283      	cmp	r3, r0
 80067a2:	b570      	push	{r4, r5, r6, lr}
 80067a4:	4604      	mov	r4, r0
 80067a6:	d04b      	beq.n	8006840 <_reclaim_reent+0xa4>
 80067a8:	69c3      	ldr	r3, [r0, #28]
 80067aa:	b143      	cbz	r3, 80067be <_reclaim_reent+0x22>
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d144      	bne.n	800683c <_reclaim_reent+0xa0>
 80067b2:	69e3      	ldr	r3, [r4, #28]
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	b111      	cbz	r1, 80067be <_reclaim_reent+0x22>
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 f8b7 	bl	800692c <_free_r>
 80067be:	6961      	ldr	r1, [r4, #20]
 80067c0:	b111      	cbz	r1, 80067c8 <_reclaim_reent+0x2c>
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 f8b2 	bl	800692c <_free_r>
 80067c8:	69e1      	ldr	r1, [r4, #28]
 80067ca:	b111      	cbz	r1, 80067d2 <_reclaim_reent+0x36>
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 f8ad 	bl	800692c <_free_r>
 80067d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80067d4:	b111      	cbz	r1, 80067dc <_reclaim_reent+0x40>
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 f8a8 	bl	800692c <_free_r>
 80067dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067de:	b111      	cbz	r1, 80067e6 <_reclaim_reent+0x4a>
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 f8a3 	bl	800692c <_free_r>
 80067e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80067e8:	b111      	cbz	r1, 80067f0 <_reclaim_reent+0x54>
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 f89e 	bl	800692c <_free_r>
 80067f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80067f2:	b111      	cbz	r1, 80067fa <_reclaim_reent+0x5e>
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 f899 	bl	800692c <_free_r>
 80067fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80067fc:	b111      	cbz	r1, 8006804 <_reclaim_reent+0x68>
 80067fe:	4620      	mov	r0, r4
 8006800:	f000 f894 	bl	800692c <_free_r>
 8006804:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006806:	b111      	cbz	r1, 800680e <_reclaim_reent+0x72>
 8006808:	4620      	mov	r0, r4
 800680a:	f000 f88f 	bl	800692c <_free_r>
 800680e:	6a23      	ldr	r3, [r4, #32]
 8006810:	b1b3      	cbz	r3, 8006840 <_reclaim_reent+0xa4>
 8006812:	4620      	mov	r0, r4
 8006814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006818:	4718      	bx	r3
 800681a:	5949      	ldr	r1, [r1, r5]
 800681c:	b941      	cbnz	r1, 8006830 <_reclaim_reent+0x94>
 800681e:	3504      	adds	r5, #4
 8006820:	69e3      	ldr	r3, [r4, #28]
 8006822:	2d80      	cmp	r5, #128	; 0x80
 8006824:	68d9      	ldr	r1, [r3, #12]
 8006826:	d1f8      	bne.n	800681a <_reclaim_reent+0x7e>
 8006828:	4620      	mov	r0, r4
 800682a:	f000 f87f 	bl	800692c <_free_r>
 800682e:	e7c0      	b.n	80067b2 <_reclaim_reent+0x16>
 8006830:	680e      	ldr	r6, [r1, #0]
 8006832:	4620      	mov	r0, r4
 8006834:	f000 f87a 	bl	800692c <_free_r>
 8006838:	4631      	mov	r1, r6
 800683a:	e7ef      	b.n	800681c <_reclaim_reent+0x80>
 800683c:	2500      	movs	r5, #0
 800683e:	e7ef      	b.n	8006820 <_reclaim_reent+0x84>
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	bf00      	nop
 8006844:	20000068 	.word	0x20000068

08006848 <_lseek_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d07      	ldr	r5, [pc, #28]	; (8006868 <_lseek_r+0x20>)
 800684c:	4604      	mov	r4, r0
 800684e:	4608      	mov	r0, r1
 8006850:	4611      	mov	r1, r2
 8006852:	2200      	movs	r2, #0
 8006854:	602a      	str	r2, [r5, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	f7fa f9e4 	bl	8000c24 <_lseek>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_lseek_r+0x1e>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_lseek_r+0x1e>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	20004cfc 	.word	0x20004cfc

0800686c <_read_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4d07      	ldr	r5, [pc, #28]	; (800688c <_read_r+0x20>)
 8006870:	4604      	mov	r4, r0
 8006872:	4608      	mov	r0, r1
 8006874:	4611      	mov	r1, r2
 8006876:	2200      	movs	r2, #0
 8006878:	602a      	str	r2, [r5, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	f7fa f972 	bl	8000b64 <_read>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_read_r+0x1e>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_read_r+0x1e>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20004cfc 	.word	0x20004cfc

08006890 <_write_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d07      	ldr	r5, [pc, #28]	; (80068b0 <_write_r+0x20>)
 8006894:	4604      	mov	r4, r0
 8006896:	4608      	mov	r0, r1
 8006898:	4611      	mov	r1, r2
 800689a:	2200      	movs	r2, #0
 800689c:	602a      	str	r2, [r5, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	f7fa f97d 	bl	8000b9e <_write>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_write_r+0x1e>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_write_r+0x1e>
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	20004cfc 	.word	0x20004cfc

080068b4 <__errno>:
 80068b4:	4b01      	ldr	r3, [pc, #4]	; (80068bc <__errno+0x8>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	20000068 	.word	0x20000068

080068c0 <__libc_init_array>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	4d0d      	ldr	r5, [pc, #52]	; (80068f8 <__libc_init_array+0x38>)
 80068c4:	4c0d      	ldr	r4, [pc, #52]	; (80068fc <__libc_init_array+0x3c>)
 80068c6:	1b64      	subs	r4, r4, r5
 80068c8:	10a4      	asrs	r4, r4, #2
 80068ca:	2600      	movs	r6, #0
 80068cc:	42a6      	cmp	r6, r4
 80068ce:	d109      	bne.n	80068e4 <__libc_init_array+0x24>
 80068d0:	4d0b      	ldr	r5, [pc, #44]	; (8006900 <__libc_init_array+0x40>)
 80068d2:	4c0c      	ldr	r4, [pc, #48]	; (8006904 <__libc_init_array+0x44>)
 80068d4:	f000 fdce 	bl	8007474 <_init>
 80068d8:	1b64      	subs	r4, r4, r5
 80068da:	10a4      	asrs	r4, r4, #2
 80068dc:	2600      	movs	r6, #0
 80068de:	42a6      	cmp	r6, r4
 80068e0:	d105      	bne.n	80068ee <__libc_init_array+0x2e>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e8:	4798      	blx	r3
 80068ea:	3601      	adds	r6, #1
 80068ec:	e7ee      	b.n	80068cc <__libc_init_array+0xc>
 80068ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f2:	4798      	blx	r3
 80068f4:	3601      	adds	r6, #1
 80068f6:	e7f2      	b.n	80068de <__libc_init_array+0x1e>
 80068f8:	08007544 	.word	0x08007544
 80068fc:	08007544 	.word	0x08007544
 8006900:	08007544 	.word	0x08007544
 8006904:	08007548 	.word	0x08007548

08006908 <__retarget_lock_init_recursive>:
 8006908:	4770      	bx	lr

0800690a <__retarget_lock_acquire_recursive>:
 800690a:	4770      	bx	lr

0800690c <__retarget_lock_release_recursive>:
 800690c:	4770      	bx	lr

0800690e <memcpy>:
 800690e:	440a      	add	r2, r1
 8006910:	4291      	cmp	r1, r2
 8006912:	f100 33ff 	add.w	r3, r0, #4294967295
 8006916:	d100      	bne.n	800691a <memcpy+0xc>
 8006918:	4770      	bx	lr
 800691a:	b510      	push	{r4, lr}
 800691c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006924:	4291      	cmp	r1, r2
 8006926:	d1f9      	bne.n	800691c <memcpy+0xe>
 8006928:	bd10      	pop	{r4, pc}
	...

0800692c <_free_r>:
 800692c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800692e:	2900      	cmp	r1, #0
 8006930:	d044      	beq.n	80069bc <_free_r+0x90>
 8006932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006936:	9001      	str	r0, [sp, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f1a1 0404 	sub.w	r4, r1, #4
 800693e:	bfb8      	it	lt
 8006940:	18e4      	addlt	r4, r4, r3
 8006942:	f000 f8df 	bl	8006b04 <__malloc_lock>
 8006946:	4a1e      	ldr	r2, [pc, #120]	; (80069c0 <_free_r+0x94>)
 8006948:	9801      	ldr	r0, [sp, #4]
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	b933      	cbnz	r3, 800695c <_free_r+0x30>
 800694e:	6063      	str	r3, [r4, #4]
 8006950:	6014      	str	r4, [r2, #0]
 8006952:	b003      	add	sp, #12
 8006954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006958:	f000 b8da 	b.w	8006b10 <__malloc_unlock>
 800695c:	42a3      	cmp	r3, r4
 800695e:	d908      	bls.n	8006972 <_free_r+0x46>
 8006960:	6825      	ldr	r5, [r4, #0]
 8006962:	1961      	adds	r1, r4, r5
 8006964:	428b      	cmp	r3, r1
 8006966:	bf01      	itttt	eq
 8006968:	6819      	ldreq	r1, [r3, #0]
 800696a:	685b      	ldreq	r3, [r3, #4]
 800696c:	1949      	addeq	r1, r1, r5
 800696e:	6021      	streq	r1, [r4, #0]
 8006970:	e7ed      	b.n	800694e <_free_r+0x22>
 8006972:	461a      	mov	r2, r3
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	b10b      	cbz	r3, 800697c <_free_r+0x50>
 8006978:	42a3      	cmp	r3, r4
 800697a:	d9fa      	bls.n	8006972 <_free_r+0x46>
 800697c:	6811      	ldr	r1, [r2, #0]
 800697e:	1855      	adds	r5, r2, r1
 8006980:	42a5      	cmp	r5, r4
 8006982:	d10b      	bne.n	800699c <_free_r+0x70>
 8006984:	6824      	ldr	r4, [r4, #0]
 8006986:	4421      	add	r1, r4
 8006988:	1854      	adds	r4, r2, r1
 800698a:	42a3      	cmp	r3, r4
 800698c:	6011      	str	r1, [r2, #0]
 800698e:	d1e0      	bne.n	8006952 <_free_r+0x26>
 8006990:	681c      	ldr	r4, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	6053      	str	r3, [r2, #4]
 8006996:	440c      	add	r4, r1
 8006998:	6014      	str	r4, [r2, #0]
 800699a:	e7da      	b.n	8006952 <_free_r+0x26>
 800699c:	d902      	bls.n	80069a4 <_free_r+0x78>
 800699e:	230c      	movs	r3, #12
 80069a0:	6003      	str	r3, [r0, #0]
 80069a2:	e7d6      	b.n	8006952 <_free_r+0x26>
 80069a4:	6825      	ldr	r5, [r4, #0]
 80069a6:	1961      	adds	r1, r4, r5
 80069a8:	428b      	cmp	r3, r1
 80069aa:	bf04      	itt	eq
 80069ac:	6819      	ldreq	r1, [r3, #0]
 80069ae:	685b      	ldreq	r3, [r3, #4]
 80069b0:	6063      	str	r3, [r4, #4]
 80069b2:	bf04      	itt	eq
 80069b4:	1949      	addeq	r1, r1, r5
 80069b6:	6021      	streq	r1, [r4, #0]
 80069b8:	6054      	str	r4, [r2, #4]
 80069ba:	e7ca      	b.n	8006952 <_free_r+0x26>
 80069bc:	b003      	add	sp, #12
 80069be:	bd30      	pop	{r4, r5, pc}
 80069c0:	20004d04 	.word	0x20004d04

080069c4 <sbrk_aligned>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	4e0e      	ldr	r6, [pc, #56]	; (8006a00 <sbrk_aligned+0x3c>)
 80069c8:	460c      	mov	r4, r1
 80069ca:	6831      	ldr	r1, [r6, #0]
 80069cc:	4605      	mov	r5, r0
 80069ce:	b911      	cbnz	r1, 80069d6 <sbrk_aligned+0x12>
 80069d0:	f000 fcbc 	bl	800734c <_sbrk_r>
 80069d4:	6030      	str	r0, [r6, #0]
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 fcb7 	bl	800734c <_sbrk_r>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	d00a      	beq.n	80069f8 <sbrk_aligned+0x34>
 80069e2:	1cc4      	adds	r4, r0, #3
 80069e4:	f024 0403 	bic.w	r4, r4, #3
 80069e8:	42a0      	cmp	r0, r4
 80069ea:	d007      	beq.n	80069fc <sbrk_aligned+0x38>
 80069ec:	1a21      	subs	r1, r4, r0
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 fcac 	bl	800734c <_sbrk_r>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d101      	bne.n	80069fc <sbrk_aligned+0x38>
 80069f8:	f04f 34ff 	mov.w	r4, #4294967295
 80069fc:	4620      	mov	r0, r4
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	20004d08 	.word	0x20004d08

08006a04 <_malloc_r>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	1ccd      	adds	r5, r1, #3
 8006a0a:	f025 0503 	bic.w	r5, r5, #3
 8006a0e:	3508      	adds	r5, #8
 8006a10:	2d0c      	cmp	r5, #12
 8006a12:	bf38      	it	cc
 8006a14:	250c      	movcc	r5, #12
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	4607      	mov	r7, r0
 8006a1a:	db01      	blt.n	8006a20 <_malloc_r+0x1c>
 8006a1c:	42a9      	cmp	r1, r5
 8006a1e:	d905      	bls.n	8006a2c <_malloc_r+0x28>
 8006a20:	230c      	movs	r3, #12
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	2600      	movs	r6, #0
 8006a26:	4630      	mov	r0, r6
 8006a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b00 <_malloc_r+0xfc>
 8006a30:	f000 f868 	bl	8006b04 <__malloc_lock>
 8006a34:	f8d8 3000 	ldr.w	r3, [r8]
 8006a38:	461c      	mov	r4, r3
 8006a3a:	bb5c      	cbnz	r4, 8006a94 <_malloc_r+0x90>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4638      	mov	r0, r7
 8006a40:	f7ff ffc0 	bl	80069c4 <sbrk_aligned>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	4604      	mov	r4, r0
 8006a48:	d155      	bne.n	8006af6 <_malloc_r+0xf2>
 8006a4a:	f8d8 4000 	ldr.w	r4, [r8]
 8006a4e:	4626      	mov	r6, r4
 8006a50:	2e00      	cmp	r6, #0
 8006a52:	d145      	bne.n	8006ae0 <_malloc_r+0xdc>
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	d048      	beq.n	8006aea <_malloc_r+0xe6>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	eb04 0903 	add.w	r9, r4, r3
 8006a62:	f000 fc73 	bl	800734c <_sbrk_r>
 8006a66:	4581      	cmp	r9, r0
 8006a68:	d13f      	bne.n	8006aea <_malloc_r+0xe6>
 8006a6a:	6821      	ldr	r1, [r4, #0]
 8006a6c:	1a6d      	subs	r5, r5, r1
 8006a6e:	4629      	mov	r1, r5
 8006a70:	4638      	mov	r0, r7
 8006a72:	f7ff ffa7 	bl	80069c4 <sbrk_aligned>
 8006a76:	3001      	adds	r0, #1
 8006a78:	d037      	beq.n	8006aea <_malloc_r+0xe6>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	442b      	add	r3, r5
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	f8d8 3000 	ldr.w	r3, [r8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d038      	beq.n	8006afa <_malloc_r+0xf6>
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	42a2      	cmp	r2, r4
 8006a8c:	d12b      	bne.n	8006ae6 <_malloc_r+0xe2>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	e00f      	b.n	8006ab4 <_malloc_r+0xb0>
 8006a94:	6822      	ldr	r2, [r4, #0]
 8006a96:	1b52      	subs	r2, r2, r5
 8006a98:	d41f      	bmi.n	8006ada <_malloc_r+0xd6>
 8006a9a:	2a0b      	cmp	r2, #11
 8006a9c:	d917      	bls.n	8006ace <_malloc_r+0xca>
 8006a9e:	1961      	adds	r1, r4, r5
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	6025      	str	r5, [r4, #0]
 8006aa4:	bf18      	it	ne
 8006aa6:	6059      	strne	r1, [r3, #4]
 8006aa8:	6863      	ldr	r3, [r4, #4]
 8006aaa:	bf08      	it	eq
 8006aac:	f8c8 1000 	streq.w	r1, [r8]
 8006ab0:	5162      	str	r2, [r4, r5]
 8006ab2:	604b      	str	r3, [r1, #4]
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f104 060b 	add.w	r6, r4, #11
 8006aba:	f000 f829 	bl	8006b10 <__malloc_unlock>
 8006abe:	f026 0607 	bic.w	r6, r6, #7
 8006ac2:	1d23      	adds	r3, r4, #4
 8006ac4:	1af2      	subs	r2, r6, r3
 8006ac6:	d0ae      	beq.n	8006a26 <_malloc_r+0x22>
 8006ac8:	1b9b      	subs	r3, r3, r6
 8006aca:	50a3      	str	r3, [r4, r2]
 8006acc:	e7ab      	b.n	8006a26 <_malloc_r+0x22>
 8006ace:	42a3      	cmp	r3, r4
 8006ad0:	6862      	ldr	r2, [r4, #4]
 8006ad2:	d1dd      	bne.n	8006a90 <_malloc_r+0x8c>
 8006ad4:	f8c8 2000 	str.w	r2, [r8]
 8006ad8:	e7ec      	b.n	8006ab4 <_malloc_r+0xb0>
 8006ada:	4623      	mov	r3, r4
 8006adc:	6864      	ldr	r4, [r4, #4]
 8006ade:	e7ac      	b.n	8006a3a <_malloc_r+0x36>
 8006ae0:	4634      	mov	r4, r6
 8006ae2:	6876      	ldr	r6, [r6, #4]
 8006ae4:	e7b4      	b.n	8006a50 <_malloc_r+0x4c>
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	e7cc      	b.n	8006a84 <_malloc_r+0x80>
 8006aea:	230c      	movs	r3, #12
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	4638      	mov	r0, r7
 8006af0:	f000 f80e 	bl	8006b10 <__malloc_unlock>
 8006af4:	e797      	b.n	8006a26 <_malloc_r+0x22>
 8006af6:	6025      	str	r5, [r4, #0]
 8006af8:	e7dc      	b.n	8006ab4 <_malloc_r+0xb0>
 8006afa:	605b      	str	r3, [r3, #4]
 8006afc:	deff      	udf	#255	; 0xff
 8006afe:	bf00      	nop
 8006b00:	20004d04 	.word	0x20004d04

08006b04 <__malloc_lock>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__malloc_lock+0x8>)
 8006b06:	f7ff bf00 	b.w	800690a <__retarget_lock_acquire_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	20004d00 	.word	0x20004d00

08006b10 <__malloc_unlock>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__malloc_unlock+0x8>)
 8006b12:	f7ff befb 	b.w	800690c <__retarget_lock_release_recursive>
 8006b16:	bf00      	nop
 8006b18:	20004d00 	.word	0x20004d00

08006b1c <__sfputc_r>:
 8006b1c:	6893      	ldr	r3, [r2, #8]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	b410      	push	{r4}
 8006b24:	6093      	str	r3, [r2, #8]
 8006b26:	da08      	bge.n	8006b3a <__sfputc_r+0x1e>
 8006b28:	6994      	ldr	r4, [r2, #24]
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	db01      	blt.n	8006b32 <__sfputc_r+0x16>
 8006b2e:	290a      	cmp	r1, #10
 8006b30:	d103      	bne.n	8006b3a <__sfputc_r+0x1e>
 8006b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b36:	f000 bb73 	b.w	8007220 <__swbuf_r>
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	1c58      	adds	r0, r3, #1
 8006b3e:	6010      	str	r0, [r2, #0]
 8006b40:	7019      	strb	r1, [r3, #0]
 8006b42:	4608      	mov	r0, r1
 8006b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <__sfputs_r>:
 8006b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	460f      	mov	r7, r1
 8006b50:	4614      	mov	r4, r2
 8006b52:	18d5      	adds	r5, r2, r3
 8006b54:	42ac      	cmp	r4, r5
 8006b56:	d101      	bne.n	8006b5c <__sfputs_r+0x12>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e007      	b.n	8006b6c <__sfputs_r+0x22>
 8006b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b60:	463a      	mov	r2, r7
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ffda 	bl	8006b1c <__sfputc_r>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	d1f3      	bne.n	8006b54 <__sfputs_r+0xa>
 8006b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b70 <_vfiprintf_r>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	460d      	mov	r5, r1
 8006b76:	b09d      	sub	sp, #116	; 0x74
 8006b78:	4614      	mov	r4, r2
 8006b7a:	4698      	mov	r8, r3
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	b118      	cbz	r0, 8006b88 <_vfiprintf_r+0x18>
 8006b80:	6a03      	ldr	r3, [r0, #32]
 8006b82:	b90b      	cbnz	r3, 8006b88 <_vfiprintf_r+0x18>
 8006b84:	f7ff fd66 	bl	8006654 <__sinit>
 8006b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b8a:	07d9      	lsls	r1, r3, #31
 8006b8c:	d405      	bmi.n	8006b9a <_vfiprintf_r+0x2a>
 8006b8e:	89ab      	ldrh	r3, [r5, #12]
 8006b90:	059a      	lsls	r2, r3, #22
 8006b92:	d402      	bmi.n	8006b9a <_vfiprintf_r+0x2a>
 8006b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b96:	f7ff feb8 	bl	800690a <__retarget_lock_acquire_recursive>
 8006b9a:	89ab      	ldrh	r3, [r5, #12]
 8006b9c:	071b      	lsls	r3, r3, #28
 8006b9e:	d501      	bpl.n	8006ba4 <_vfiprintf_r+0x34>
 8006ba0:	692b      	ldr	r3, [r5, #16]
 8006ba2:	b99b      	cbnz	r3, 8006bcc <_vfiprintf_r+0x5c>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f000 fb78 	bl	800729c <__swsetup_r>
 8006bac:	b170      	cbz	r0, 8006bcc <_vfiprintf_r+0x5c>
 8006bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bb0:	07dc      	lsls	r4, r3, #31
 8006bb2:	d504      	bpl.n	8006bbe <_vfiprintf_r+0x4e>
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	b01d      	add	sp, #116	; 0x74
 8006bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbe:	89ab      	ldrh	r3, [r5, #12]
 8006bc0:	0598      	lsls	r0, r3, #22
 8006bc2:	d4f7      	bmi.n	8006bb4 <_vfiprintf_r+0x44>
 8006bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bc6:	f7ff fea1 	bl	800690c <__retarget_lock_release_recursive>
 8006bca:	e7f3      	b.n	8006bb4 <_vfiprintf_r+0x44>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd0:	2320      	movs	r3, #32
 8006bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bda:	2330      	movs	r3, #48	; 0x30
 8006bdc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006d90 <_vfiprintf_r+0x220>
 8006be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006be4:	f04f 0901 	mov.w	r9, #1
 8006be8:	4623      	mov	r3, r4
 8006bea:	469a      	mov	sl, r3
 8006bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf0:	b10a      	cbz	r2, 8006bf6 <_vfiprintf_r+0x86>
 8006bf2:	2a25      	cmp	r2, #37	; 0x25
 8006bf4:	d1f9      	bne.n	8006bea <_vfiprintf_r+0x7a>
 8006bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8006bfa:	d00b      	beq.n	8006c14 <_vfiprintf_r+0xa4>
 8006bfc:	465b      	mov	r3, fp
 8006bfe:	4622      	mov	r2, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7ff ffa1 	bl	8006b4a <__sfputs_r>
 8006c08:	3001      	adds	r0, #1
 8006c0a:	f000 80a9 	beq.w	8006d60 <_vfiprintf_r+0x1f0>
 8006c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c10:	445a      	add	r2, fp
 8006c12:	9209      	str	r2, [sp, #36]	; 0x24
 8006c14:	f89a 3000 	ldrb.w	r3, [sl]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80a1 	beq.w	8006d60 <_vfiprintf_r+0x1f0>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f04f 32ff 	mov.w	r2, #4294967295
 8006c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c28:	f10a 0a01 	add.w	sl, sl, #1
 8006c2c:	9304      	str	r3, [sp, #16]
 8006c2e:	9307      	str	r3, [sp, #28]
 8006c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c34:	931a      	str	r3, [sp, #104]	; 0x68
 8006c36:	4654      	mov	r4, sl
 8006c38:	2205      	movs	r2, #5
 8006c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c3e:	4854      	ldr	r0, [pc, #336]	; (8006d90 <_vfiprintf_r+0x220>)
 8006c40:	f7f9 face 	bl	80001e0 <memchr>
 8006c44:	9a04      	ldr	r2, [sp, #16]
 8006c46:	b9d8      	cbnz	r0, 8006c80 <_vfiprintf_r+0x110>
 8006c48:	06d1      	lsls	r1, r2, #27
 8006c4a:	bf44      	itt	mi
 8006c4c:	2320      	movmi	r3, #32
 8006c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c52:	0713      	lsls	r3, r2, #28
 8006c54:	bf44      	itt	mi
 8006c56:	232b      	movmi	r3, #43	; 0x2b
 8006c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c60:	2b2a      	cmp	r3, #42	; 0x2a
 8006c62:	d015      	beq.n	8006c90 <_vfiprintf_r+0x120>
 8006c64:	9a07      	ldr	r2, [sp, #28]
 8006c66:	4654      	mov	r4, sl
 8006c68:	2000      	movs	r0, #0
 8006c6a:	f04f 0c0a 	mov.w	ip, #10
 8006c6e:	4621      	mov	r1, r4
 8006c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c74:	3b30      	subs	r3, #48	; 0x30
 8006c76:	2b09      	cmp	r3, #9
 8006c78:	d94d      	bls.n	8006d16 <_vfiprintf_r+0x1a6>
 8006c7a:	b1b0      	cbz	r0, 8006caa <_vfiprintf_r+0x13a>
 8006c7c:	9207      	str	r2, [sp, #28]
 8006c7e:	e014      	b.n	8006caa <_vfiprintf_r+0x13a>
 8006c80:	eba0 0308 	sub.w	r3, r0, r8
 8006c84:	fa09 f303 	lsl.w	r3, r9, r3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	46a2      	mov	sl, r4
 8006c8e:	e7d2      	b.n	8006c36 <_vfiprintf_r+0xc6>
 8006c90:	9b03      	ldr	r3, [sp, #12]
 8006c92:	1d19      	adds	r1, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	9103      	str	r1, [sp, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	bfbb      	ittet	lt
 8006c9c:	425b      	neglt	r3, r3
 8006c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8006ca2:	9307      	strge	r3, [sp, #28]
 8006ca4:	9307      	strlt	r3, [sp, #28]
 8006ca6:	bfb8      	it	lt
 8006ca8:	9204      	strlt	r2, [sp, #16]
 8006caa:	7823      	ldrb	r3, [r4, #0]
 8006cac:	2b2e      	cmp	r3, #46	; 0x2e
 8006cae:	d10c      	bne.n	8006cca <_vfiprintf_r+0x15a>
 8006cb0:	7863      	ldrb	r3, [r4, #1]
 8006cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb4:	d134      	bne.n	8006d20 <_vfiprintf_r+0x1b0>
 8006cb6:	9b03      	ldr	r3, [sp, #12]
 8006cb8:	1d1a      	adds	r2, r3, #4
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	9203      	str	r2, [sp, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bfb8      	it	lt
 8006cc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cc6:	3402      	adds	r4, #2
 8006cc8:	9305      	str	r3, [sp, #20]
 8006cca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006da0 <_vfiprintf_r+0x230>
 8006cce:	7821      	ldrb	r1, [r4, #0]
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	4650      	mov	r0, sl
 8006cd4:	f7f9 fa84 	bl	80001e0 <memchr>
 8006cd8:	b138      	cbz	r0, 8006cea <_vfiprintf_r+0x17a>
 8006cda:	9b04      	ldr	r3, [sp, #16]
 8006cdc:	eba0 000a 	sub.w	r0, r0, sl
 8006ce0:	2240      	movs	r2, #64	; 0x40
 8006ce2:	4082      	lsls	r2, r0
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	3401      	adds	r4, #1
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cee:	4829      	ldr	r0, [pc, #164]	; (8006d94 <_vfiprintf_r+0x224>)
 8006cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cf4:	2206      	movs	r2, #6
 8006cf6:	f7f9 fa73 	bl	80001e0 <memchr>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d03f      	beq.n	8006d7e <_vfiprintf_r+0x20e>
 8006cfe:	4b26      	ldr	r3, [pc, #152]	; (8006d98 <_vfiprintf_r+0x228>)
 8006d00:	bb1b      	cbnz	r3, 8006d4a <_vfiprintf_r+0x1da>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	3307      	adds	r3, #7
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	9303      	str	r3, [sp, #12]
 8006d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d10:	443b      	add	r3, r7
 8006d12:	9309      	str	r3, [sp, #36]	; 0x24
 8006d14:	e768      	b.n	8006be8 <_vfiprintf_r+0x78>
 8006d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	e7a6      	b.n	8006c6e <_vfiprintf_r+0xfe>
 8006d20:	2300      	movs	r3, #0
 8006d22:	3401      	adds	r4, #1
 8006d24:	9305      	str	r3, [sp, #20]
 8006d26:	4619      	mov	r1, r3
 8006d28:	f04f 0c0a 	mov.w	ip, #10
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d32:	3a30      	subs	r2, #48	; 0x30
 8006d34:	2a09      	cmp	r2, #9
 8006d36:	d903      	bls.n	8006d40 <_vfiprintf_r+0x1d0>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0c6      	beq.n	8006cca <_vfiprintf_r+0x15a>
 8006d3c:	9105      	str	r1, [sp, #20]
 8006d3e:	e7c4      	b.n	8006cca <_vfiprintf_r+0x15a>
 8006d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d44:	4604      	mov	r4, r0
 8006d46:	2301      	movs	r3, #1
 8006d48:	e7f0      	b.n	8006d2c <_vfiprintf_r+0x1bc>
 8006d4a:	ab03      	add	r3, sp, #12
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	462a      	mov	r2, r5
 8006d50:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <_vfiprintf_r+0x22c>)
 8006d52:	a904      	add	r1, sp, #16
 8006d54:	4630      	mov	r0, r6
 8006d56:	f3af 8000 	nop.w
 8006d5a:	4607      	mov	r7, r0
 8006d5c:	1c78      	adds	r0, r7, #1
 8006d5e:	d1d6      	bne.n	8006d0e <_vfiprintf_r+0x19e>
 8006d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d62:	07d9      	lsls	r1, r3, #31
 8006d64:	d405      	bmi.n	8006d72 <_vfiprintf_r+0x202>
 8006d66:	89ab      	ldrh	r3, [r5, #12]
 8006d68:	059a      	lsls	r2, r3, #22
 8006d6a:	d402      	bmi.n	8006d72 <_vfiprintf_r+0x202>
 8006d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d6e:	f7ff fdcd 	bl	800690c <__retarget_lock_release_recursive>
 8006d72:	89ab      	ldrh	r3, [r5, #12]
 8006d74:	065b      	lsls	r3, r3, #25
 8006d76:	f53f af1d 	bmi.w	8006bb4 <_vfiprintf_r+0x44>
 8006d7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d7c:	e71c      	b.n	8006bb8 <_vfiprintf_r+0x48>
 8006d7e:	ab03      	add	r3, sp, #12
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	462a      	mov	r2, r5
 8006d84:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <_vfiprintf_r+0x22c>)
 8006d86:	a904      	add	r1, sp, #16
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f000 f879 	bl	8006e80 <_printf_i>
 8006d8e:	e7e4      	b.n	8006d5a <_vfiprintf_r+0x1ea>
 8006d90:	08007508 	.word	0x08007508
 8006d94:	08007512 	.word	0x08007512
 8006d98:	00000000 	.word	0x00000000
 8006d9c:	08006b4b 	.word	0x08006b4b
 8006da0:	0800750e 	.word	0x0800750e

08006da4 <_printf_common>:
 8006da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	4616      	mov	r6, r2
 8006daa:	4699      	mov	r9, r3
 8006dac:	688a      	ldr	r2, [r1, #8]
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	bfb8      	it	lt
 8006db8:	4613      	movlt	r3, r2
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b10a      	cbz	r2, 8006dca <_printf_common+0x26>
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	6033      	str	r3, [r6, #0]
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	0699      	lsls	r1, r3, #26
 8006dce:	bf42      	ittt	mi
 8006dd0:	6833      	ldrmi	r3, [r6, #0]
 8006dd2:	3302      	addmi	r3, #2
 8006dd4:	6033      	strmi	r3, [r6, #0]
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	f015 0506 	ands.w	r5, r5, #6
 8006ddc:	d106      	bne.n	8006dec <_printf_common+0x48>
 8006dde:	f104 0a19 	add.w	sl, r4, #25
 8006de2:	68e3      	ldr	r3, [r4, #12]
 8006de4:	6832      	ldr	r2, [r6, #0]
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	42ab      	cmp	r3, r5
 8006dea:	dc26      	bgt.n	8006e3a <_printf_common+0x96>
 8006dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006df0:	1e13      	subs	r3, r2, #0
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	bf18      	it	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	0692      	lsls	r2, r2, #26
 8006dfa:	d42b      	bmi.n	8006e54 <_printf_common+0xb0>
 8006dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e00:	4649      	mov	r1, r9
 8006e02:	4638      	mov	r0, r7
 8006e04:	47c0      	blx	r8
 8006e06:	3001      	adds	r0, #1
 8006e08:	d01e      	beq.n	8006e48 <_printf_common+0xa4>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6922      	ldr	r2, [r4, #16]
 8006e0e:	f003 0306 	and.w	r3, r3, #6
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	bf02      	ittt	eq
 8006e16:	68e5      	ldreq	r5, [r4, #12]
 8006e18:	6833      	ldreq	r3, [r6, #0]
 8006e1a:	1aed      	subeq	r5, r5, r3
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	bf0c      	ite	eq
 8006e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e24:	2500      	movne	r5, #0
 8006e26:	4293      	cmp	r3, r2
 8006e28:	bfc4      	itt	gt
 8006e2a:	1a9b      	subgt	r3, r3, r2
 8006e2c:	18ed      	addgt	r5, r5, r3
 8006e2e:	2600      	movs	r6, #0
 8006e30:	341a      	adds	r4, #26
 8006e32:	42b5      	cmp	r5, r6
 8006e34:	d11a      	bne.n	8006e6c <_printf_common+0xc8>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e008      	b.n	8006e4c <_printf_common+0xa8>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4649      	mov	r1, r9
 8006e40:	4638      	mov	r0, r7
 8006e42:	47c0      	blx	r8
 8006e44:	3001      	adds	r0, #1
 8006e46:	d103      	bne.n	8006e50 <_printf_common+0xac>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	3501      	adds	r5, #1
 8006e52:	e7c6      	b.n	8006de2 <_printf_common+0x3e>
 8006e54:	18e1      	adds	r1, r4, r3
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	2030      	movs	r0, #48	; 0x30
 8006e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e5e:	4422      	add	r2, r4
 8006e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e68:	3302      	adds	r3, #2
 8006e6a:	e7c7      	b.n	8006dfc <_printf_common+0x58>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4649      	mov	r1, r9
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c0      	blx	r8
 8006e76:	3001      	adds	r0, #1
 8006e78:	d0e6      	beq.n	8006e48 <_printf_common+0xa4>
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7d9      	b.n	8006e32 <_printf_common+0x8e>
	...

08006e80 <_printf_i>:
 8006e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	7e0f      	ldrb	r7, [r1, #24]
 8006e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e88:	2f78      	cmp	r7, #120	; 0x78
 8006e8a:	4691      	mov	r9, r2
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	469a      	mov	sl, r3
 8006e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e96:	d807      	bhi.n	8006ea8 <_printf_i+0x28>
 8006e98:	2f62      	cmp	r7, #98	; 0x62
 8006e9a:	d80a      	bhi.n	8006eb2 <_printf_i+0x32>
 8006e9c:	2f00      	cmp	r7, #0
 8006e9e:	f000 80d4 	beq.w	800704a <_printf_i+0x1ca>
 8006ea2:	2f58      	cmp	r7, #88	; 0x58
 8006ea4:	f000 80c0 	beq.w	8007028 <_printf_i+0x1a8>
 8006ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006eb0:	e03a      	b.n	8006f28 <_printf_i+0xa8>
 8006eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eb6:	2b15      	cmp	r3, #21
 8006eb8:	d8f6      	bhi.n	8006ea8 <_printf_i+0x28>
 8006eba:	a101      	add	r1, pc, #4	; (adr r1, 8006ec0 <_printf_i+0x40>)
 8006ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ec0:	08006f19 	.word	0x08006f19
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006ea9 	.word	0x08006ea9
 8006ecc:	08006ea9 	.word	0x08006ea9
 8006ed0:	08006ea9 	.word	0x08006ea9
 8006ed4:	08006ea9 	.word	0x08006ea9
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006ea9 	.word	0x08006ea9
 8006ee0:	08006ea9 	.word	0x08006ea9
 8006ee4:	08006ea9 	.word	0x08006ea9
 8006ee8:	08006ea9 	.word	0x08006ea9
 8006eec:	08007031 	.word	0x08007031
 8006ef0:	08006f59 	.word	0x08006f59
 8006ef4:	08006feb 	.word	0x08006feb
 8006ef8:	08006ea9 	.word	0x08006ea9
 8006efc:	08006ea9 	.word	0x08006ea9
 8006f00:	08007053 	.word	0x08007053
 8006f04:	08006ea9 	.word	0x08006ea9
 8006f08:	08006f59 	.word	0x08006f59
 8006f0c:	08006ea9 	.word	0x08006ea9
 8006f10:	08006ea9 	.word	0x08006ea9
 8006f14:	08006ff3 	.word	0x08006ff3
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	1d1a      	adds	r2, r3, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	602a      	str	r2, [r5, #0]
 8006f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e09f      	b.n	800706c <_printf_i+0x1ec>
 8006f2c:	6820      	ldr	r0, [r4, #0]
 8006f2e:	682b      	ldr	r3, [r5, #0]
 8006f30:	0607      	lsls	r7, r0, #24
 8006f32:	f103 0104 	add.w	r1, r3, #4
 8006f36:	6029      	str	r1, [r5, #0]
 8006f38:	d501      	bpl.n	8006f3e <_printf_i+0xbe>
 8006f3a:	681e      	ldr	r6, [r3, #0]
 8006f3c:	e003      	b.n	8006f46 <_printf_i+0xc6>
 8006f3e:	0646      	lsls	r6, r0, #25
 8006f40:	d5fb      	bpl.n	8006f3a <_printf_i+0xba>
 8006f42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	da03      	bge.n	8006f52 <_printf_i+0xd2>
 8006f4a:	232d      	movs	r3, #45	; 0x2d
 8006f4c:	4276      	negs	r6, r6
 8006f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f52:	485a      	ldr	r0, [pc, #360]	; (80070bc <_printf_i+0x23c>)
 8006f54:	230a      	movs	r3, #10
 8006f56:	e012      	b.n	8006f7e <_printf_i+0xfe>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	6820      	ldr	r0, [r4, #0]
 8006f5c:	1d19      	adds	r1, r3, #4
 8006f5e:	6029      	str	r1, [r5, #0]
 8006f60:	0605      	lsls	r5, r0, #24
 8006f62:	d501      	bpl.n	8006f68 <_printf_i+0xe8>
 8006f64:	681e      	ldr	r6, [r3, #0]
 8006f66:	e002      	b.n	8006f6e <_printf_i+0xee>
 8006f68:	0641      	lsls	r1, r0, #25
 8006f6a:	d5fb      	bpl.n	8006f64 <_printf_i+0xe4>
 8006f6c:	881e      	ldrh	r6, [r3, #0]
 8006f6e:	4853      	ldr	r0, [pc, #332]	; (80070bc <_printf_i+0x23c>)
 8006f70:	2f6f      	cmp	r7, #111	; 0x6f
 8006f72:	bf0c      	ite	eq
 8006f74:	2308      	moveq	r3, #8
 8006f76:	230a      	movne	r3, #10
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f7e:	6865      	ldr	r5, [r4, #4]
 8006f80:	60a5      	str	r5, [r4, #8]
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	bfa2      	ittt	ge
 8006f86:	6821      	ldrge	r1, [r4, #0]
 8006f88:	f021 0104 	bicge.w	r1, r1, #4
 8006f8c:	6021      	strge	r1, [r4, #0]
 8006f8e:	b90e      	cbnz	r6, 8006f94 <_printf_i+0x114>
 8006f90:	2d00      	cmp	r5, #0
 8006f92:	d04b      	beq.n	800702c <_printf_i+0x1ac>
 8006f94:	4615      	mov	r5, r2
 8006f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f9e:	5dc7      	ldrb	r7, [r0, r7]
 8006fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fa4:	4637      	mov	r7, r6
 8006fa6:	42bb      	cmp	r3, r7
 8006fa8:	460e      	mov	r6, r1
 8006faa:	d9f4      	bls.n	8006f96 <_printf_i+0x116>
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d10b      	bne.n	8006fc8 <_printf_i+0x148>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	07de      	lsls	r6, r3, #31
 8006fb4:	d508      	bpl.n	8006fc8 <_printf_i+0x148>
 8006fb6:	6923      	ldr	r3, [r4, #16]
 8006fb8:	6861      	ldr	r1, [r4, #4]
 8006fba:	4299      	cmp	r1, r3
 8006fbc:	bfde      	ittt	le
 8006fbe:	2330      	movle	r3, #48	; 0x30
 8006fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fc8:	1b52      	subs	r2, r2, r5
 8006fca:	6122      	str	r2, [r4, #16]
 8006fcc:	f8cd a000 	str.w	sl, [sp]
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	aa03      	add	r2, sp, #12
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	f7ff fee4 	bl	8006da4 <_printf_common>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d14a      	bne.n	8007076 <_printf_i+0x1f6>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	b004      	add	sp, #16
 8006fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	f043 0320 	orr.w	r3, r3, #32
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	4833      	ldr	r0, [pc, #204]	; (80070c0 <_printf_i+0x240>)
 8006ff4:	2778      	movs	r7, #120	; 0x78
 8006ff6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	6829      	ldr	r1, [r5, #0]
 8006ffe:	061f      	lsls	r7, r3, #24
 8007000:	f851 6b04 	ldr.w	r6, [r1], #4
 8007004:	d402      	bmi.n	800700c <_printf_i+0x18c>
 8007006:	065f      	lsls	r7, r3, #25
 8007008:	bf48      	it	mi
 800700a:	b2b6      	uxthmi	r6, r6
 800700c:	07df      	lsls	r7, r3, #31
 800700e:	bf48      	it	mi
 8007010:	f043 0320 	orrmi.w	r3, r3, #32
 8007014:	6029      	str	r1, [r5, #0]
 8007016:	bf48      	it	mi
 8007018:	6023      	strmi	r3, [r4, #0]
 800701a:	b91e      	cbnz	r6, 8007024 <_printf_i+0x1a4>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	f023 0320 	bic.w	r3, r3, #32
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	2310      	movs	r3, #16
 8007026:	e7a7      	b.n	8006f78 <_printf_i+0xf8>
 8007028:	4824      	ldr	r0, [pc, #144]	; (80070bc <_printf_i+0x23c>)
 800702a:	e7e4      	b.n	8006ff6 <_printf_i+0x176>
 800702c:	4615      	mov	r5, r2
 800702e:	e7bd      	b.n	8006fac <_printf_i+0x12c>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	6826      	ldr	r6, [r4, #0]
 8007034:	6961      	ldr	r1, [r4, #20]
 8007036:	1d18      	adds	r0, r3, #4
 8007038:	6028      	str	r0, [r5, #0]
 800703a:	0635      	lsls	r5, r6, #24
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	d501      	bpl.n	8007044 <_printf_i+0x1c4>
 8007040:	6019      	str	r1, [r3, #0]
 8007042:	e002      	b.n	800704a <_printf_i+0x1ca>
 8007044:	0670      	lsls	r0, r6, #25
 8007046:	d5fb      	bpl.n	8007040 <_printf_i+0x1c0>
 8007048:	8019      	strh	r1, [r3, #0]
 800704a:	2300      	movs	r3, #0
 800704c:	6123      	str	r3, [r4, #16]
 800704e:	4615      	mov	r5, r2
 8007050:	e7bc      	b.n	8006fcc <_printf_i+0x14c>
 8007052:	682b      	ldr	r3, [r5, #0]
 8007054:	1d1a      	adds	r2, r3, #4
 8007056:	602a      	str	r2, [r5, #0]
 8007058:	681d      	ldr	r5, [r3, #0]
 800705a:	6862      	ldr	r2, [r4, #4]
 800705c:	2100      	movs	r1, #0
 800705e:	4628      	mov	r0, r5
 8007060:	f7f9 f8be 	bl	80001e0 <memchr>
 8007064:	b108      	cbz	r0, 800706a <_printf_i+0x1ea>
 8007066:	1b40      	subs	r0, r0, r5
 8007068:	6060      	str	r0, [r4, #4]
 800706a:	6863      	ldr	r3, [r4, #4]
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	2300      	movs	r3, #0
 8007070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007074:	e7aa      	b.n	8006fcc <_printf_i+0x14c>
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	462a      	mov	r2, r5
 800707a:	4649      	mov	r1, r9
 800707c:	4640      	mov	r0, r8
 800707e:	47d0      	blx	sl
 8007080:	3001      	adds	r0, #1
 8007082:	d0ad      	beq.n	8006fe0 <_printf_i+0x160>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	079b      	lsls	r3, r3, #30
 8007088:	d413      	bmi.n	80070b2 <_printf_i+0x232>
 800708a:	68e0      	ldr	r0, [r4, #12]
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	4298      	cmp	r0, r3
 8007090:	bfb8      	it	lt
 8007092:	4618      	movlt	r0, r3
 8007094:	e7a6      	b.n	8006fe4 <_printf_i+0x164>
 8007096:	2301      	movs	r3, #1
 8007098:	4632      	mov	r2, r6
 800709a:	4649      	mov	r1, r9
 800709c:	4640      	mov	r0, r8
 800709e:	47d0      	blx	sl
 80070a0:	3001      	adds	r0, #1
 80070a2:	d09d      	beq.n	8006fe0 <_printf_i+0x160>
 80070a4:	3501      	adds	r5, #1
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	9903      	ldr	r1, [sp, #12]
 80070aa:	1a5b      	subs	r3, r3, r1
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dcf2      	bgt.n	8007096 <_printf_i+0x216>
 80070b0:	e7eb      	b.n	800708a <_printf_i+0x20a>
 80070b2:	2500      	movs	r5, #0
 80070b4:	f104 0619 	add.w	r6, r4, #25
 80070b8:	e7f5      	b.n	80070a6 <_printf_i+0x226>
 80070ba:	bf00      	nop
 80070bc:	08007519 	.word	0x08007519
 80070c0:	0800752a 	.word	0x0800752a

080070c4 <__sflush_r>:
 80070c4:	898a      	ldrh	r2, [r1, #12]
 80070c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ca:	4605      	mov	r5, r0
 80070cc:	0710      	lsls	r0, r2, #28
 80070ce:	460c      	mov	r4, r1
 80070d0:	d458      	bmi.n	8007184 <__sflush_r+0xc0>
 80070d2:	684b      	ldr	r3, [r1, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	dc05      	bgt.n	80070e4 <__sflush_r+0x20>
 80070d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dc02      	bgt.n	80070e4 <__sflush_r+0x20>
 80070de:	2000      	movs	r0, #0
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070e6:	2e00      	cmp	r6, #0
 80070e8:	d0f9      	beq.n	80070de <__sflush_r+0x1a>
 80070ea:	2300      	movs	r3, #0
 80070ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070f0:	682f      	ldr	r7, [r5, #0]
 80070f2:	6a21      	ldr	r1, [r4, #32]
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	d032      	beq.n	800715e <__sflush_r+0x9a>
 80070f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	075a      	lsls	r2, r3, #29
 80070fe:	d505      	bpl.n	800710c <__sflush_r+0x48>
 8007100:	6863      	ldr	r3, [r4, #4]
 8007102:	1ac0      	subs	r0, r0, r3
 8007104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007106:	b10b      	cbz	r3, 800710c <__sflush_r+0x48>
 8007108:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800710a:	1ac0      	subs	r0, r0, r3
 800710c:	2300      	movs	r3, #0
 800710e:	4602      	mov	r2, r0
 8007110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007112:	6a21      	ldr	r1, [r4, #32]
 8007114:	4628      	mov	r0, r5
 8007116:	47b0      	blx	r6
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	d106      	bne.n	800712c <__sflush_r+0x68>
 800711e:	6829      	ldr	r1, [r5, #0]
 8007120:	291d      	cmp	r1, #29
 8007122:	d82b      	bhi.n	800717c <__sflush_r+0xb8>
 8007124:	4a29      	ldr	r2, [pc, #164]	; (80071cc <__sflush_r+0x108>)
 8007126:	410a      	asrs	r2, r1
 8007128:	07d6      	lsls	r6, r2, #31
 800712a:	d427      	bmi.n	800717c <__sflush_r+0xb8>
 800712c:	2200      	movs	r2, #0
 800712e:	6062      	str	r2, [r4, #4]
 8007130:	04d9      	lsls	r1, r3, #19
 8007132:	6922      	ldr	r2, [r4, #16]
 8007134:	6022      	str	r2, [r4, #0]
 8007136:	d504      	bpl.n	8007142 <__sflush_r+0x7e>
 8007138:	1c42      	adds	r2, r0, #1
 800713a:	d101      	bne.n	8007140 <__sflush_r+0x7c>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b903      	cbnz	r3, 8007142 <__sflush_r+0x7e>
 8007140:	6560      	str	r0, [r4, #84]	; 0x54
 8007142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007144:	602f      	str	r7, [r5, #0]
 8007146:	2900      	cmp	r1, #0
 8007148:	d0c9      	beq.n	80070de <__sflush_r+0x1a>
 800714a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800714e:	4299      	cmp	r1, r3
 8007150:	d002      	beq.n	8007158 <__sflush_r+0x94>
 8007152:	4628      	mov	r0, r5
 8007154:	f7ff fbea 	bl	800692c <_free_r>
 8007158:	2000      	movs	r0, #0
 800715a:	6360      	str	r0, [r4, #52]	; 0x34
 800715c:	e7c0      	b.n	80070e0 <__sflush_r+0x1c>
 800715e:	2301      	movs	r3, #1
 8007160:	4628      	mov	r0, r5
 8007162:	47b0      	blx	r6
 8007164:	1c41      	adds	r1, r0, #1
 8007166:	d1c8      	bne.n	80070fa <__sflush_r+0x36>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0c5      	beq.n	80070fa <__sflush_r+0x36>
 800716e:	2b1d      	cmp	r3, #29
 8007170:	d001      	beq.n	8007176 <__sflush_r+0xb2>
 8007172:	2b16      	cmp	r3, #22
 8007174:	d101      	bne.n	800717a <__sflush_r+0xb6>
 8007176:	602f      	str	r7, [r5, #0]
 8007178:	e7b1      	b.n	80070de <__sflush_r+0x1a>
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	e7ad      	b.n	80070e0 <__sflush_r+0x1c>
 8007184:	690f      	ldr	r7, [r1, #16]
 8007186:	2f00      	cmp	r7, #0
 8007188:	d0a9      	beq.n	80070de <__sflush_r+0x1a>
 800718a:	0793      	lsls	r3, r2, #30
 800718c:	680e      	ldr	r6, [r1, #0]
 800718e:	bf08      	it	eq
 8007190:	694b      	ldreq	r3, [r1, #20]
 8007192:	600f      	str	r7, [r1, #0]
 8007194:	bf18      	it	ne
 8007196:	2300      	movne	r3, #0
 8007198:	eba6 0807 	sub.w	r8, r6, r7
 800719c:	608b      	str	r3, [r1, #8]
 800719e:	f1b8 0f00 	cmp.w	r8, #0
 80071a2:	dd9c      	ble.n	80070de <__sflush_r+0x1a>
 80071a4:	6a21      	ldr	r1, [r4, #32]
 80071a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071a8:	4643      	mov	r3, r8
 80071aa:	463a      	mov	r2, r7
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b0      	blx	r6
 80071b0:	2800      	cmp	r0, #0
 80071b2:	dc06      	bgt.n	80071c2 <__sflush_r+0xfe>
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	e78e      	b.n	80070e0 <__sflush_r+0x1c>
 80071c2:	4407      	add	r7, r0
 80071c4:	eba8 0800 	sub.w	r8, r8, r0
 80071c8:	e7e9      	b.n	800719e <__sflush_r+0xda>
 80071ca:	bf00      	nop
 80071cc:	dfbffffe 	.word	0xdfbffffe

080071d0 <_fflush_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	690b      	ldr	r3, [r1, #16]
 80071d4:	4605      	mov	r5, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	b913      	cbnz	r3, 80071e0 <_fflush_r+0x10>
 80071da:	2500      	movs	r5, #0
 80071dc:	4628      	mov	r0, r5
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	b118      	cbz	r0, 80071ea <_fflush_r+0x1a>
 80071e2:	6a03      	ldr	r3, [r0, #32]
 80071e4:	b90b      	cbnz	r3, 80071ea <_fflush_r+0x1a>
 80071e6:	f7ff fa35 	bl	8006654 <__sinit>
 80071ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f3      	beq.n	80071da <_fflush_r+0xa>
 80071f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071f4:	07d0      	lsls	r0, r2, #31
 80071f6:	d404      	bmi.n	8007202 <_fflush_r+0x32>
 80071f8:	0599      	lsls	r1, r3, #22
 80071fa:	d402      	bmi.n	8007202 <_fflush_r+0x32>
 80071fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071fe:	f7ff fb84 	bl	800690a <__retarget_lock_acquire_recursive>
 8007202:	4628      	mov	r0, r5
 8007204:	4621      	mov	r1, r4
 8007206:	f7ff ff5d 	bl	80070c4 <__sflush_r>
 800720a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800720c:	07da      	lsls	r2, r3, #31
 800720e:	4605      	mov	r5, r0
 8007210:	d4e4      	bmi.n	80071dc <_fflush_r+0xc>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	059b      	lsls	r3, r3, #22
 8007216:	d4e1      	bmi.n	80071dc <_fflush_r+0xc>
 8007218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800721a:	f7ff fb77 	bl	800690c <__retarget_lock_release_recursive>
 800721e:	e7dd      	b.n	80071dc <_fflush_r+0xc>

08007220 <__swbuf_r>:
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007222:	460e      	mov	r6, r1
 8007224:	4614      	mov	r4, r2
 8007226:	4605      	mov	r5, r0
 8007228:	b118      	cbz	r0, 8007232 <__swbuf_r+0x12>
 800722a:	6a03      	ldr	r3, [r0, #32]
 800722c:	b90b      	cbnz	r3, 8007232 <__swbuf_r+0x12>
 800722e:	f7ff fa11 	bl	8006654 <__sinit>
 8007232:	69a3      	ldr	r3, [r4, #24]
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	071a      	lsls	r2, r3, #28
 800723a:	d525      	bpl.n	8007288 <__swbuf_r+0x68>
 800723c:	6923      	ldr	r3, [r4, #16]
 800723e:	b31b      	cbz	r3, 8007288 <__swbuf_r+0x68>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	6922      	ldr	r2, [r4, #16]
 8007244:	1a98      	subs	r0, r3, r2
 8007246:	6963      	ldr	r3, [r4, #20]
 8007248:	b2f6      	uxtb	r6, r6
 800724a:	4283      	cmp	r3, r0
 800724c:	4637      	mov	r7, r6
 800724e:	dc04      	bgt.n	800725a <__swbuf_r+0x3a>
 8007250:	4621      	mov	r1, r4
 8007252:	4628      	mov	r0, r5
 8007254:	f7ff ffbc 	bl	80071d0 <_fflush_r>
 8007258:	b9e0      	cbnz	r0, 8007294 <__swbuf_r+0x74>
 800725a:	68a3      	ldr	r3, [r4, #8]
 800725c:	3b01      	subs	r3, #1
 800725e:	60a3      	str	r3, [r4, #8]
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	6022      	str	r2, [r4, #0]
 8007266:	701e      	strb	r6, [r3, #0]
 8007268:	6962      	ldr	r2, [r4, #20]
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	429a      	cmp	r2, r3
 800726e:	d004      	beq.n	800727a <__swbuf_r+0x5a>
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	07db      	lsls	r3, r3, #31
 8007274:	d506      	bpl.n	8007284 <__swbuf_r+0x64>
 8007276:	2e0a      	cmp	r6, #10
 8007278:	d104      	bne.n	8007284 <__swbuf_r+0x64>
 800727a:	4621      	mov	r1, r4
 800727c:	4628      	mov	r0, r5
 800727e:	f7ff ffa7 	bl	80071d0 <_fflush_r>
 8007282:	b938      	cbnz	r0, 8007294 <__swbuf_r+0x74>
 8007284:	4638      	mov	r0, r7
 8007286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007288:	4621      	mov	r1, r4
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f806 	bl	800729c <__swsetup_r>
 8007290:	2800      	cmp	r0, #0
 8007292:	d0d5      	beq.n	8007240 <__swbuf_r+0x20>
 8007294:	f04f 37ff 	mov.w	r7, #4294967295
 8007298:	e7f4      	b.n	8007284 <__swbuf_r+0x64>
	...

0800729c <__swsetup_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4b2a      	ldr	r3, [pc, #168]	; (8007348 <__swsetup_r+0xac>)
 80072a0:	4605      	mov	r5, r0
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	460c      	mov	r4, r1
 80072a6:	b118      	cbz	r0, 80072b0 <__swsetup_r+0x14>
 80072a8:	6a03      	ldr	r3, [r0, #32]
 80072aa:	b90b      	cbnz	r3, 80072b0 <__swsetup_r+0x14>
 80072ac:	f7ff f9d2 	bl	8006654 <__sinit>
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072b6:	0718      	lsls	r0, r3, #28
 80072b8:	d422      	bmi.n	8007300 <__swsetup_r+0x64>
 80072ba:	06d9      	lsls	r1, r3, #27
 80072bc:	d407      	bmi.n	80072ce <__swsetup_r+0x32>
 80072be:	2309      	movs	r3, #9
 80072c0:	602b      	str	r3, [r5, #0]
 80072c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	e034      	b.n	8007338 <__swsetup_r+0x9c>
 80072ce:	0758      	lsls	r0, r3, #29
 80072d0:	d512      	bpl.n	80072f8 <__swsetup_r+0x5c>
 80072d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072d4:	b141      	cbz	r1, 80072e8 <__swsetup_r+0x4c>
 80072d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072da:	4299      	cmp	r1, r3
 80072dc:	d002      	beq.n	80072e4 <__swsetup_r+0x48>
 80072de:	4628      	mov	r0, r5
 80072e0:	f7ff fb24 	bl	800692c <_free_r>
 80072e4:	2300      	movs	r3, #0
 80072e6:	6363      	str	r3, [r4, #52]	; 0x34
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072ee:	81a3      	strh	r3, [r4, #12]
 80072f0:	2300      	movs	r3, #0
 80072f2:	6063      	str	r3, [r4, #4]
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	f043 0308 	orr.w	r3, r3, #8
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	b94b      	cbnz	r3, 8007318 <__swsetup_r+0x7c>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800730a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730e:	d003      	beq.n	8007318 <__swsetup_r+0x7c>
 8007310:	4621      	mov	r1, r4
 8007312:	4628      	mov	r0, r5
 8007314:	f000 f850 	bl	80073b8 <__smakebuf_r>
 8007318:	89a0      	ldrh	r0, [r4, #12]
 800731a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800731e:	f010 0301 	ands.w	r3, r0, #1
 8007322:	d00a      	beq.n	800733a <__swsetup_r+0x9e>
 8007324:	2300      	movs	r3, #0
 8007326:	60a3      	str	r3, [r4, #8]
 8007328:	6963      	ldr	r3, [r4, #20]
 800732a:	425b      	negs	r3, r3
 800732c:	61a3      	str	r3, [r4, #24]
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	b943      	cbnz	r3, 8007344 <__swsetup_r+0xa8>
 8007332:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007336:	d1c4      	bne.n	80072c2 <__swsetup_r+0x26>
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	0781      	lsls	r1, r0, #30
 800733c:	bf58      	it	pl
 800733e:	6963      	ldrpl	r3, [r4, #20]
 8007340:	60a3      	str	r3, [r4, #8]
 8007342:	e7f4      	b.n	800732e <__swsetup_r+0x92>
 8007344:	2000      	movs	r0, #0
 8007346:	e7f7      	b.n	8007338 <__swsetup_r+0x9c>
 8007348:	20000068 	.word	0x20000068

0800734c <_sbrk_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4d06      	ldr	r5, [pc, #24]	; (8007368 <_sbrk_r+0x1c>)
 8007350:	2300      	movs	r3, #0
 8007352:	4604      	mov	r4, r0
 8007354:	4608      	mov	r0, r1
 8007356:	602b      	str	r3, [r5, #0]
 8007358:	f7f9 fc72 	bl	8000c40 <_sbrk>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_sbrk_r+0x1a>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_sbrk_r+0x1a>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	20004cfc 	.word	0x20004cfc

0800736c <__swhatbuf_r>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	460c      	mov	r4, r1
 8007370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007374:	2900      	cmp	r1, #0
 8007376:	b096      	sub	sp, #88	; 0x58
 8007378:	4615      	mov	r5, r2
 800737a:	461e      	mov	r6, r3
 800737c:	da0d      	bge.n	800739a <__swhatbuf_r+0x2e>
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007384:	f04f 0100 	mov.w	r1, #0
 8007388:	bf0c      	ite	eq
 800738a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800738e:	2340      	movne	r3, #64	; 0x40
 8007390:	2000      	movs	r0, #0
 8007392:	6031      	str	r1, [r6, #0]
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	b016      	add	sp, #88	; 0x58
 8007398:	bd70      	pop	{r4, r5, r6, pc}
 800739a:	466a      	mov	r2, sp
 800739c:	f000 f848 	bl	8007430 <_fstat_r>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	dbec      	blt.n	800737e <__swhatbuf_r+0x12>
 80073a4:	9901      	ldr	r1, [sp, #4]
 80073a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80073aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80073ae:	4259      	negs	r1, r3
 80073b0:	4159      	adcs	r1, r3
 80073b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b6:	e7eb      	b.n	8007390 <__swhatbuf_r+0x24>

080073b8 <__smakebuf_r>:
 80073b8:	898b      	ldrh	r3, [r1, #12]
 80073ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073bc:	079d      	lsls	r5, r3, #30
 80073be:	4606      	mov	r6, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	d507      	bpl.n	80073d4 <__smakebuf_r+0x1c>
 80073c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	6123      	str	r3, [r4, #16]
 80073cc:	2301      	movs	r3, #1
 80073ce:	6163      	str	r3, [r4, #20]
 80073d0:	b002      	add	sp, #8
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	ab01      	add	r3, sp, #4
 80073d6:	466a      	mov	r2, sp
 80073d8:	f7ff ffc8 	bl	800736c <__swhatbuf_r>
 80073dc:	9900      	ldr	r1, [sp, #0]
 80073de:	4605      	mov	r5, r0
 80073e0:	4630      	mov	r0, r6
 80073e2:	f7ff fb0f 	bl	8006a04 <_malloc_r>
 80073e6:	b948      	cbnz	r0, 80073fc <__smakebuf_r+0x44>
 80073e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ec:	059a      	lsls	r2, r3, #22
 80073ee:	d4ef      	bmi.n	80073d0 <__smakebuf_r+0x18>
 80073f0:	f023 0303 	bic.w	r3, r3, #3
 80073f4:	f043 0302 	orr.w	r3, r3, #2
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	e7e3      	b.n	80073c4 <__smakebuf_r+0xc>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	6020      	str	r0, [r4, #0]
 8007400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	9b00      	ldr	r3, [sp, #0]
 8007408:	6163      	str	r3, [r4, #20]
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	6120      	str	r0, [r4, #16]
 800740e:	b15b      	cbz	r3, 8007428 <__smakebuf_r+0x70>
 8007410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007414:	4630      	mov	r0, r6
 8007416:	f000 f81d 	bl	8007454 <_isatty_r>
 800741a:	b128      	cbz	r0, 8007428 <__smakebuf_r+0x70>
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	431d      	orrs	r5, r3
 800742c:	81a5      	strh	r5, [r4, #12]
 800742e:	e7cf      	b.n	80073d0 <__smakebuf_r+0x18>

08007430 <_fstat_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d07      	ldr	r5, [pc, #28]	; (8007450 <_fstat_r+0x20>)
 8007434:	2300      	movs	r3, #0
 8007436:	4604      	mov	r4, r0
 8007438:	4608      	mov	r0, r1
 800743a:	4611      	mov	r1, r2
 800743c:	602b      	str	r3, [r5, #0]
 800743e:	f7f9 fbd6 	bl	8000bee <_fstat>
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	d102      	bne.n	800744c <_fstat_r+0x1c>
 8007446:	682b      	ldr	r3, [r5, #0]
 8007448:	b103      	cbz	r3, 800744c <_fstat_r+0x1c>
 800744a:	6023      	str	r3, [r4, #0]
 800744c:	bd38      	pop	{r3, r4, r5, pc}
 800744e:	bf00      	nop
 8007450:	20004cfc 	.word	0x20004cfc

08007454 <_isatty_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4d06      	ldr	r5, [pc, #24]	; (8007470 <_isatty_r+0x1c>)
 8007458:	2300      	movs	r3, #0
 800745a:	4604      	mov	r4, r0
 800745c:	4608      	mov	r0, r1
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	f7f9 fbd5 	bl	8000c0e <_isatty>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_isatty_r+0x1a>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b103      	cbz	r3, 800746e <_isatty_r+0x1a>
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	20004cfc 	.word	0x20004cfc

08007474 <_init>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr

08007480 <_fini>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	bf00      	nop
 8007484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007486:	bc08      	pop	{r3}
 8007488:	469e      	mov	lr, r3
 800748a:	4770      	bx	lr
