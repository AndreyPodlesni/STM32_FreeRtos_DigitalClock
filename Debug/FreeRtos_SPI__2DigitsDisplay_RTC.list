
FreeRtos_SPI__2DigitsDisplay_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000846c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008794  08008794  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800879c  0800879c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087a0  080087a0  000187a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080087a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cd4  2000006c  08008810  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d40  08008810  00024d40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d27a  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046a1  00000000  00000000  0003d359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001940  00000000  00000000  00041a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001378  00000000  00000000  00043340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bb6a  00000000  00000000  000446b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0c9  00000000  00000000  00060222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2837  00000000  00000000  0007f2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006fec  00000000  00000000  00121b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00128b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085f4 	.word	0x080085f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080085f4 	.word	0x080085f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <FourDigitsetSegments>:
    // Display the second digit
    WriteDigit(2, secondDigit);
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
}

void FourDigitsetSegments(uint8_t number) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
        0b00000111, // 7
        0b01111111, // 8
        0b01101111  // 9
    };

    uint8_t segments = segmentMap[number];
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a32      	ldr	r2, [pc, #200]	; (8000654 <FourDigitsetSegments+0xd8>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	75fb      	strb	r3, [r7, #23]

    GPIO_PinState FourDigitsPinA_State = (segments & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	75bb      	strb	r3, [r7, #22]
    GPIO_PinState FourDigitsPinB_State = (segments & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	105b      	asrs	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	757b      	strb	r3, [r7, #21]
    GPIO_PinState FourDigitsPinC_State = (segments & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	109b      	asrs	r3, r3, #2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	753b      	strb	r3, [r7, #20]
    GPIO_PinState FourDigitsPinD_State = (segments & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ae:	7dfb      	ldrb	r3, [r7, #23]
 80005b0:	10db      	asrs	r3, r3, #3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	74fb      	strb	r3, [r7, #19]
    GPIO_PinState FourDigitsPinE_State = (segments & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	111b      	asrs	r3, r3, #4
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	74bb      	strb	r3, [r7, #18]
    GPIO_PinState FourDigitsPinF_State = (segments & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	115b      	asrs	r3, r3, #5
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	747b      	strb	r3, [r7, #17]
    GPIO_PinState FourDigitsPinG_State = (segments & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005d2:	7dfb      	ldrb	r3, [r7, #23]
 80005d4:	119b      	asrs	r3, r3, #6
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	743b      	strb	r3, [r7, #16]
    GPIO_PinState FourDigitsPinDP_State = (segments & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005de:	7dfb      	ldrb	r3, [r7, #23]
 80005e0:	09db      	lsrs	r3, r3, #7
 80005e2:	73fb      	strb	r3, [r7, #15]

    // Corresponding HAL_GPIO_WritePin calls
    HAL_GPIO_WritePin(FourDigitA_GPIO_Port, FourDigitA_Pin, FourDigitsPinA_State);
 80005e4:	7dbb      	ldrb	r3, [r7, #22]
 80005e6:	461a      	mov	r2, r3
 80005e8:	2104      	movs	r1, #4
 80005ea:	481b      	ldr	r0, [pc, #108]	; (8000658 <FourDigitsetSegments+0xdc>)
 80005ec:	f001 fcdc 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitB_GPIO_Port, FourDigitB_Pin, FourDigitsPinB_State);
 80005f0:	7d7b      	ldrb	r3, [r7, #21]
 80005f2:	461a      	mov	r2, r3
 80005f4:	2102      	movs	r1, #2
 80005f6:	4818      	ldr	r0, [pc, #96]	; (8000658 <FourDigitsetSegments+0xdc>)
 80005f8:	f001 fcd6 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitC_GPIO_Port, FourDigitC_Pin, FourDigitsPinC_State);
 80005fc:	7d3b      	ldrb	r3, [r7, #20]
 80005fe:	461a      	mov	r2, r3
 8000600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000604:	4814      	ldr	r0, [pc, #80]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000606:	f001 fccf 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD_GPIO_Port, FourDigitD_Pin, FourDigitsPinD_State);
 800060a:	7cfb      	ldrb	r3, [r7, #19]
 800060c:	461a      	mov	r2, r3
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000614:	f001 fcc8 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitE_GPIO_Port, FourDigitE_Pin, FourDigitsPinE_State);
 8000618:	7cbb      	ldrb	r3, [r7, #18]
 800061a:	461a      	mov	r2, r3
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000622:	f001 fcc1 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitF_GPIO_Port, FourDigitF_Pin, FourDigitsPinF_State);
 8000626:	7c7b      	ldrb	r3, [r7, #17]
 8000628:	461a      	mov	r2, r3
 800062a:	2110      	movs	r1, #16
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <FourDigitsetSegments+0xe0>)
 800062e:	f001 fcbb 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitG_GPIO_Port, FourDigitG_Pin, FourDigitsPinG_State);
 8000632:	7c3b      	ldrb	r3, [r7, #16]
 8000634:	461a      	mov	r2, r3
 8000636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <FourDigitsetSegments+0xe4>)
 800063c:	f001 fcb4 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, FourDigitsPinDP_State);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	461a      	mov	r2, r3
 8000644:	2110      	movs	r1, #16
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000648:	f001 fcae 	bl	8001fa8 <HAL_GPIO_WritePin>

}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08008694 	.word	0x08008694
 8000658:	40020400 	.word	0x40020400
 800065c:	40020800 	.word	0x40020800
 8000660:	40020000 	.word	0x40020000

08000664 <FourDigitsSetCathode>:

void FourDigitsSetCathode(uint8_t Digit)
{	//Problem Here
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState FourDigitsCathodeD1_Pin_State = (Digit == 1)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b01      	cmp	r3, #1
 8000672:	bf14      	ite	ne
 8000674:	2301      	movne	r3, #1
 8000676:	2300      	moveq	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState FourDigitsCathodeD2_Pin_State = (Digit == 2)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b02      	cmp	r3, #2
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState FourDigitsCathodeD3_Pin_State = (Digit == 3)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b03      	cmp	r3, #3
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	737b      	strb	r3, [r7, #13]
	GPIO_PinState FourDigitsCathodeD4_Pin_State = (Digit == 4)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf14      	ite	ne
 800069e:	2301      	movne	r3, #1
 80006a0:	2300      	moveq	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	733b      	strb	r3, [r7, #12]



    HAL_GPIO_WritePin(FourDigitD1_GPIO_Port, FourDigitD1_Pin, FourDigitsCathodeD1_Pin_State);
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	461a      	mov	r2, r3
 80006aa:	2120      	movs	r1, #32
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <FourDigitsSetCathode+0x80>)
 80006ae:	f001 fc7b 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD2_GPIO_Port, FourDigitD2_Pin, FourDigitsCathodeD2_Pin_State);
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	461a      	mov	r2, r3
 80006b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <FourDigitsSetCathode+0x84>)
 80006bc:	f001 fc74 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD3_GPIO_Port, FourDigitD3_Pin, FourDigitsCathodeD3_Pin_State);
 80006c0:	7b7b      	ldrb	r3, [r7, #13]
 80006c2:	461a      	mov	r2, r3
 80006c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <FourDigitsSetCathode+0x84>)
 80006ca:	f001 fc6d 	bl	8001fa8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD4_GPIO_Port, FourDigitD4_Pin, FourDigitsCathodeD4_Pin_State);
 80006ce:	7b3b      	ldrb	r3, [r7, #12]
 80006d0:	461a      	mov	r2, r3
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <FourDigitsSetCathode+0x84>)
 80006d6:	f001 fc67 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020000 	.word	0x40020000

080006ec <FourDigitsWrite>:
void FourDigitsWrite(uint8_t Digit,uint8_t number)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	FourDigitsetSegments(number);
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff3c 	bl	800057c <FourDigitsetSegments>
	FourDigitsSetCathode(Digit);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffac 	bl	8000664 <FourDigitsSetCathode>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <FourDigitsWriteNumber>:

void FourDigitsWriteNumber(uint16_t number)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
    // Ensure the number is within the range of two digits (0-99)
    if (number > 9999) {
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	f242 720f 	movw	r2, #9999	; 0x270f
 8000724:	4293      	cmp	r3, r2
 8000726:	d855      	bhi.n	80007d4 <FourDigitsWriteNumber+0xc0>
        return; // Or handle the error as needed
    }



    uint16_t fourthDigit = number / 1000;      // Extract the first digit
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <FourDigitsWriteNumber+0xc8>)
 800072c:	fba2 2303 	umull	r2, r3, r2, r3
 8000730:	099b      	lsrs	r3, r3, #6
 8000732:	81fb      	strh	r3, [r7, #14]
    uint16_t thirdDigit = (number / 100) % 10; // Extract the second digit
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <FourDigitsWriteNumber+0xcc>)
 8000738:	fba2 2303 	umull	r2, r3, r2, r3
 800073c:	095b      	lsrs	r3, r3, #5
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <FourDigitsWriteNumber+0xd0>)
 8000742:	fba3 1302 	umull	r1, r3, r3, r2
 8000746:	08d9      	lsrs	r1, r3, #3
 8000748:	460b      	mov	r3, r1
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	440b      	add	r3, r1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	81bb      	strh	r3, [r7, #12]
    uint16_t secondDigit = (number / 10) % 10;   // Extract the third digit
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <FourDigitsWriteNumber+0xd0>)
 8000758:	fba2 2303 	umull	r2, r3, r2, r3
 800075c:	08db      	lsrs	r3, r3, #3
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <FourDigitsWriteNumber+0xd0>)
 8000762:	fba3 1302 	umull	r1, r3, r3, r2
 8000766:	08d9      	lsrs	r1, r3, #3
 8000768:	460b      	mov	r3, r1
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	817b      	strh	r3, [r7, #10]
    uint16_t firstDigit = number % 10;        // Extract the fourth digit
 8000774:	88fa      	ldrh	r2, [r7, #6]
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <FourDigitsWriteNumber+0xd0>)
 8000778:	fba3 1302 	umull	r1, r3, r3, r2
 800077c:	08d9      	lsrs	r1, r3, #3
 800077e:	460b      	mov	r3, r1
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	440b      	add	r3, r1
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	813b      	strh	r3, [r7, #8]




    // Display the first digit
    FourDigitsWrite(1, firstDigit);
 800078a:	893b      	ldrh	r3, [r7, #8]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4619      	mov	r1, r3
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ffab 	bl	80006ec <FourDigitsWrite>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 8000796:	2005      	movs	r0, #5
 8000798:	f003 fec4 	bl	8004524 <osDelay>

    // Display the second digit
    FourDigitsWrite(2, secondDigit);
 800079c:	897b      	ldrh	r3, [r7, #10]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	2002      	movs	r0, #2
 80007a4:	f7ff ffa2 	bl	80006ec <FourDigitsWrite>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 80007a8:	2005      	movs	r0, #5
 80007aa:	f003 febb 	bl	8004524 <osDelay>


    FourDigitsWrite(3, thirdDigit);
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	2003      	movs	r0, #3
 80007b6:	f7ff ff99 	bl	80006ec <FourDigitsWrite>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 80007ba:	2005      	movs	r0, #5
 80007bc:	f003 feb2 	bl	8004524 <osDelay>

    FourDigitsWrite(4, fourthDigit);
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4619      	mov	r1, r3
 80007c6:	2004      	movs	r0, #4
 80007c8:	f7ff ff90 	bl	80006ec <FourDigitsWrite>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 80007cc:	2005      	movs	r0, #5
 80007ce:	f003 fea9 	bl	8004524 <osDelay>
 80007d2:	e000      	b.n	80007d6 <FourDigitsWriteNumber+0xc2>
        return; // Or handle the error as needed
 80007d4:	bf00      	nop
}
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	10624dd3 	.word	0x10624dd3
 80007e0:	51eb851f 	.word	0x51eb851f
 80007e4:	cccccccd 	.word	0xcccccccd

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_DMA_Init+0x3c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <MX_DMA_Init+0x3c>)
 80007f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_DMA_Init+0x3c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2105      	movs	r1, #5
 800080e:	200e      	movs	r0, #14
 8000810:	f000 fe94 	bl	800153c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000814:	200e      	movs	r0, #14
 8000816:	f000 fead 	bl	8001574 <HAL_NVIC_EnableIRQ>

}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of UartMutex */
  UartMutexHandle = osMutexNew(&UartMutex_attributes);
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <MX_FREERTOS_Init+0x54>)
 800082e:	f003 fe94 	bl	800455a <osMutexNew>
 8000832:	4603      	mov	r3, r0
 8000834:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_FREERTOS_Init+0x58>)
 8000836:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadSpi */
  ReadSpiHandle = osThreadNew(Read_spi, NULL, &ReadSpi_attributes);
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_FREERTOS_Init+0x5c>)
 800083a:	2100      	movs	r1, #0
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_FREERTOS_Init+0x60>)
 800083e:	f003 fddf 	bl	8004400 <osThreadNew>
 8000842:	4603      	mov	r3, r0
 8000844:	4a11      	ldr	r2, [pc, #68]	; (800088c <MX_FREERTOS_Init+0x64>)
 8000846:	6013      	str	r3, [r2, #0]

  /* creation of TwoDigitsWrite */
  TwoDigitsWriteHandle = osThreadNew(TwoDigitsWriteTask, NULL, &TwoDigitsWrite_attributes);
 8000848:	4a11      	ldr	r2, [pc, #68]	; (8000890 <MX_FREERTOS_Init+0x68>)
 800084a:	2100      	movs	r1, #0
 800084c:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_FREERTOS_Init+0x6c>)
 800084e:	f003 fdd7 	bl	8004400 <osThreadNew>
 8000852:	4603      	mov	r3, r0
 8000854:	4a10      	ldr	r2, [pc, #64]	; (8000898 <MX_FREERTOS_Init+0x70>)
 8000856:	6013      	str	r3, [r2, #0]

  /* creation of FourDigitWrite */
  FourDigitWriteHandle = osThreadNew(FourDigitWriteTask, NULL, &FourDigitWrite_attributes);
 8000858:	4a10      	ldr	r2, [pc, #64]	; (800089c <MX_FREERTOS_Init+0x74>)
 800085a:	2100      	movs	r1, #0
 800085c:	4810      	ldr	r0, [pc, #64]	; (80008a0 <MX_FREERTOS_Init+0x78>)
 800085e:	f003 fdcf 	bl	8004400 <osThreadNew>
 8000862:	4603      	mov	r3, r0
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <MX_FREERTOS_Init+0x7c>)
 8000866:	6013      	str	r3, [r2, #0]

  /* creation of PushButtons */
  PushButtonsHandle = osThreadNew(PushButtonsTask, NULL, &PushButtons_attributes);
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <MX_FREERTOS_Init+0x80>)
 800086a:	2100      	movs	r1, #0
 800086c:	480f      	ldr	r0, [pc, #60]	; (80008ac <MX_FREERTOS_Init+0x84>)
 800086e:	f003 fdc7 	bl	8004400 <osThreadNew>
 8000872:	4603      	mov	r3, r0
 8000874:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <MX_FREERTOS_Init+0x88>)
 8000876:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	08008730 	.word	0x08008730
 8000880:	2000009c 	.word	0x2000009c
 8000884:	080086a0 	.word	0x080086a0
 8000888:	080008b5 	.word	0x080008b5
 800088c:	2000008c 	.word	0x2000008c
 8000890:	080086c4 	.word	0x080086c4
 8000894:	08000921 	.word	0x08000921
 8000898:	20000090 	.word	0x20000090
 800089c:	080086e8 	.word	0x080086e8
 80008a0:	08000931 	.word	0x08000931
 80008a4:	20000094 	.word	0x20000094
 80008a8:	0800870c 	.word	0x0800870c
 80008ac:	08000949 	.word	0x08000949
 80008b0:	20000098 	.word	0x20000098

080008b4 <Read_spi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_spi */
void Read_spi(void *argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_spi */
	uint16_t reading[1];
	 HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)reading, sizeof(reading));
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2202      	movs	r2, #2
 80008c2:	4619      	mov	r1, r3
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <Read_spi+0x60>)
 80008c6:	f002 fac7 	bl	8002e58 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  number++;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <Read_spi+0x64>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <Read_spi+0x64>)
 80008d4:	801a      	strh	r2, [r3, #0]
	  if (number == 9999) { number = 0;}
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <Read_spi+0x64>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	f242 720f 	movw	r2, #9999	; 0x270f
 80008de:	4293      	cmp	r3, r2
 80008e0:	d102      	bne.n	80008e8 <Read_spi+0x34>
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <Read_spi+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	801a      	strh	r2, [r3, #0]
  	  osDelay(20);
 80008e8:	2014      	movs	r0, #20
 80008ea:	f003 fe1b 	bl	8004524 <osDelay>
  		if (osMutexAcquire(UartMutexHandle, 20) == osOK)
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <Read_spi+0x68>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2114      	movs	r1, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 feb6 	bl	8004666 <osMutexAcquire>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e4      	bne.n	80008ca <Read_spi+0x16>
  		  	{
  		  	    osDelay(20);
 8000900:	2014      	movs	r0, #20
 8000902:	f003 fe0f 	bl	8004524 <osDelay>
  		  //	 printf("reading values is: %d\n\r",reading[0]);
  		  	  osMutexRelease(UartMutexHandle);
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <Read_spi+0x68>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f003 fef6 	bl	80046fc <osMutexRelease>
	  number++;
 8000910:	e7db      	b.n	80008ca <Read_spi+0x16>
 8000912:	bf00      	nop
 8000914:	200000c0 	.word	0x200000c0
 8000918:	20000088 	.word	0x20000088
 800091c:	2000009c 	.word	0x2000009c

08000920 <TwoDigitsWriteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TwoDigitsWriteTask */
void TwoDigitsWriteTask(void *argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]


//	  SetDP(GPIO_PIN_SET);
//	  osDelay(pdMS_TO_TICKS(2000));
//	  SetDP(GPIO_PIN_RESET);
	  osDelay(pdMS_TO_TICKS(20));
 8000928:	2014      	movs	r0, #20
 800092a:	f003 fdfb 	bl	8004524 <osDelay>
 800092e:	e7fb      	b.n	8000928 <TwoDigitsWriteTask+0x8>

08000930 <FourDigitWriteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FourDigitWriteTask */
void FourDigitWriteTask(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FourDigitWriteTask */
  /* Infinite loop */
  for(;;)
  {
	  FourDigitsWriteNumber(number);
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <FourDigitWriteTask+0x14>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fee9 	bl	8000714 <FourDigitsWriteNumber>
 8000942:	e7f9      	b.n	8000938 <FourDigitWriteTask+0x8>
 8000944:	20000088 	.word	0x20000088

08000948 <PushButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PushButtonsTask */
void PushButtonsTask(void *argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PushButtonsTask */
  /* Infinite loop */
	GPIO_PinState Mode;
	GPIO_PinState Up;
	GPIO_PinState Down;
	HAL_GPIO_WritePin(PushButtonGND_GPIO_Port, PushButtonGND_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	4821      	ldr	r0, [pc, #132]	; (80009dc <PushButtonsTask+0x94>)
 8000958:	f001 fb26 	bl	8001fa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PushButton3V_GPIO_Port, PushButton3V_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000962:	481e      	ldr	r0, [pc, #120]	; (80009dc <PushButtonsTask+0x94>)
 8000964:	f001 fb20 	bl	8001fa8 <HAL_GPIO_WritePin>

  for(;;)
  {


	 Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 8000968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096c:	481c      	ldr	r0, [pc, #112]	; (80009e0 <PushButtonsTask+0x98>)
 800096e:	f001 fb03 	bl	8001f78 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]
	 Up = HAL_GPIO_ReadPin(PushButtonUp_GPIO_Port, PushButtonUp_Pin);
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	4818      	ldr	r0, [pc, #96]	; (80009dc <PushButtonsTask+0x94>)
 800097a:	f001 fafd 	bl	8001f78 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	73bb      	strb	r3, [r7, #14]
	 Down = HAL_GPIO_ReadPin(PushButtonDown_GPIO_Port, PushButtonDown_Pin);
 8000982:	2120      	movs	r1, #32
 8000984:	4815      	ldr	r0, [pc, #84]	; (80009dc <PushButtonsTask+0x94>)
 8000986:	f001 faf7 	bl	8001f78 <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	737b      	strb	r3, [r7, #13]



		if (osMutexAcquire(UartMutexHandle, 20) == osOK)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <PushButtonsTask+0x9c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2114      	movs	r1, #20
 8000994:	4618      	mov	r0, r3
 8000996:	f003 fe66 	bl	8004666 <osMutexAcquire>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d119      	bne.n	80009d4 <PushButtonsTask+0x8c>
		  	{
		  	    osDelay(20);
 80009a0:	2014      	movs	r0, #20
 80009a2:	f003 fdbf 	bl	8004524 <osDelay>
		  	    if(Up == GPIO_PIN_SET )
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d102      	bne.n	80009b2 <PushButtonsTask+0x6a>
		  	    {
		  	    	printf(" Up Pushed \n\r");
 80009ac:	480e      	ldr	r0, [pc, #56]	; (80009e8 <PushButtonsTask+0xa0>)
 80009ae:	f006 ff47 	bl	8007840 <iprintf>
		  	    }
		  	    if(Down == GPIO_PIN_SET )
 80009b2:	7b7b      	ldrb	r3, [r7, #13]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d102      	bne.n	80009be <PushButtonsTask+0x76>
		  	    {
		  	    	printf(" Down Pushed \n\r");
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <PushButtonsTask+0xa4>)
 80009ba:	f006 ff41 	bl	8007840 <iprintf>
		  	    }
		  	    if(Mode == GPIO_PIN_SET )
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d102      	bne.n	80009ca <PushButtonsTask+0x82>
		  	    {
		  	    	printf(" Mode Pushed \n\r");
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <PushButtonsTask+0xa8>)
 80009c6:	f006 ff3b 	bl	8007840 <iprintf>
		  	    }

		  	//printf(" %d\n\r",number);
		  	  osMutexRelease(UartMutexHandle);
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <PushButtonsTask+0x9c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fe94 	bl	80046fc <osMutexRelease>
		  	}
    osDelay(1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f003 fda5 	bl	8004524 <osDelay>
	 Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 80009da:	e7c5      	b.n	8000968 <PushButtonsTask+0x20>
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020400 	.word	0x40020400
 80009e4:	2000009c 	.word	0x2000009c
 80009e8:	0800864c 	.word	0x0800864c
 80009ec:	0800865c 	.word	0x0800865c
 80009f0:	0800866c 	.word	0x0800866c

080009f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b51      	ldr	r3, [pc, #324]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a50      	ldr	r2, [pc, #320]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b4e      	ldr	r3, [pc, #312]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b4a      	ldr	r3, [pc, #296]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a49      	ldr	r2, [pc, #292]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b47      	ldr	r3, [pc, #284]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a42      	ldr	r2, [pc, #264]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a3b      	ldr	r2, [pc, #236]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <MX_GPIO_Init+0x160>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f241 7117 	movw	r1, #5911	; 0x1717
 8000a80:	4835      	ldr	r0, [pc, #212]	; (8000b58 <MX_GPIO_Init+0x164>)
 8000a82:	f001 fa91 	bl	8001fa8 <HAL_GPIO_WritePin>
                          |PushButtonGND_Pin|PushButton3V_Pin|Cathode_1_Pin|Cathode_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|LD2_Pin
 8000a86:	2200      	movs	r2, #0
 8000a88:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8000a8c:	4833      	ldr	r0, [pc, #204]	; (8000b5c <MX_GPIO_Init+0x168>)
 8000a8e:	f001 fa8b 	bl	8001fa8 <HAL_GPIO_WritePin>
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 8000a92:	2200      	movs	r2, #0
 8000a94:	f24e 0137 	movw	r1, #57399	; 0xe037
 8000a98:	4831      	ldr	r0, [pc, #196]	; (8000b60 <MX_GPIO_Init+0x16c>)
 8000a9a:	f001 fa85 	bl	8001fa8 <HAL_GPIO_WritePin>
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4828      	ldr	r0, [pc, #160]	; (8000b58 <MX_GPIO_Init+0x164>)
 8000ab6:	f001 f8db 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 8000aba:	f241 7317 	movw	r3, #5911	; 0x1717
 8000abe:	617b      	str	r3, [r7, #20]
                          |PushButtonGND_Pin|PushButton3V_Pin|Cathode_1_Pin|Cathode_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4821      	ldr	r0, [pc, #132]	; (8000b58 <MX_GPIO_Init+0x164>)
 8000ad4:	f001 f8cc 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|LD2_Pin
 8000ad8:	f240 73b3 	movw	r3, #1971	; 0x7b3
 8000adc:	617b      	str	r3, [r7, #20]
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	481a      	ldr	r0, [pc, #104]	; (8000b5c <MX_GPIO_Init+0x168>)
 8000af2:	f001 f8bd 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PushButtonDown_Pin|PushButtonUp_Pin;
 8000af6:	2360      	movs	r3, #96	; 0x60
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4813      	ldr	r0, [pc, #76]	; (8000b58 <MX_GPIO_Init+0x164>)
 8000b0c:	f001 f8b0 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 8000b10:	f24e 0337 	movw	r3, #57399	; 0xe037
 8000b14:	617b      	str	r3, [r7, #20]
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_GPIO_Init+0x16c>)
 8000b2a:	f001 f8a1 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PushButtonMode_Pin;
 8000b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PushButtonMode_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_GPIO_Init+0x16c>)
 8000b46:	f001 f893 	bl	8001c70 <HAL_GPIO_Init>

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020400 	.word	0x40020400

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b68:	f000 fbee 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6c:	f000 f812 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b70:	f7ff ff40 	bl	80009f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b74:	f7ff fe38 	bl	80007e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b78:	f000 fb4a 	bl	8001210 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000b7c:	f000 f8de 	bl	8000d3c <MX_SPI2_Init>
  MX_RTC_Init();
 8000b80:	f000 f88a 	bl	8000c98 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b84:	f003 fbf2 	bl	800436c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b88:	f7ff fe4e 	bl	8000828 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b8c:	f003 fc12 	bl	80043b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b90:	e7fe      	b.n	8000b90 <main+0x2c>
	...

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	; 0x50
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0320 	add.w	r3, r7, #32
 8000b9e:	2230      	movs	r2, #48	; 0x30
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f006 fea1 	bl	80078ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <SystemClock_Config+0xcc>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <SystemClock_Config+0xcc>)
 8000bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <SystemClock_Config+0xcc>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <SystemClock_Config+0xd0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <SystemClock_Config+0xd0>)
 8000bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <SystemClock_Config+0xd0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bf0:	2309      	movs	r3, #9
 8000bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000c0c:	2364      	movs	r3, #100	; 0x64
 8000c0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c14:	2304      	movs	r3, #4
 8000c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0320 	add.w	r3, r7, #32
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 f9dd 	bl	8001fdc <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c28:	f000 f830 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c30:	2302      	movs	r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2103      	movs	r1, #3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 fc3f 	bl	80024cc <HAL_RCC_ClockConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c54:	f000 f81a 	bl	8000c8c <Error_Handler>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3750      	adds	r7, #80	; 0x50
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c7a:	f000 fb87 	bl	800138c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40000400 	.word	0x40000400

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_RTC_Init+0x44>)
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <MX_RTC_Init+0x48>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_RTC_Init+0x44>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_RTC_Init+0x44>)
 8000caa:	227f      	movs	r2, #127	; 0x7f
 8000cac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_RTC_Init+0x44>)
 8000cb0:	22ff      	movs	r2, #255	; 0xff
 8000cb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_RTC_Init+0x44>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_RTC_Init+0x44>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_RTC_Init+0x44>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_RTC_Init+0x44>)
 8000cc8:	f001 ff42 	bl	8002b50 <HAL_RTC_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000cd2:	f7ff ffdb 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000a0 	.word	0x200000a0
 8000ce0:	40002800 	.word	0x40002800

08000ce4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0c      	ldr	r2, [pc, #48]	; (8000d34 <HAL_RTC_MspInit+0x50>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d111      	bne.n	8000d2c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d10:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fe2a 	bl	8002970 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d22:	f7ff ffb3 	bl	8000c8c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <HAL_RTC_MspInit+0x54>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40002800 	.word	0x40002800
 8000d38:	42470e3c 	.word	0x42470e3c

08000d3c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <MX_SPI2_Init+0x64>)
 8000d44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d84:	220a      	movs	r2, #10
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_SPI2_Init+0x60>)
 8000d8a:	f001 ffdb 	bl	8002d44 <HAL_SPI_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8000d94:	f7ff ff7a 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000c0 	.word	0x200000c0
 8000da0:	40003800 	.word	0x40003800

08000da4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <HAL_SPI_MspInit+0x120>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d17a      	bne.n	8000ebc <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a3e      	ldr	r2, [pc, #248]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a37      	ldr	r2, [pc, #220]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a30      	ldr	r2, [pc, #192]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <HAL_SPI_MspInit+0x124>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4825      	ldr	r0, [pc, #148]	; (8000ecc <HAL_SPI_MspInit+0x128>)
 8000e36:	f000 ff1b 	bl	8001c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4c:	2305      	movs	r3, #5
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <HAL_SPI_MspInit+0x12c>)
 8000e58:	f000 ff0a 	bl	8001c70 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_SPI_MspInit+0x134>)
 8000e60:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e7a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e82:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e92:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000ea2:	f000 fb75 	bl	8001590 <HAL_DMA_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8000eac:	f7ff feee 	bl	8000c8c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000eb4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_SPI_MspInit+0x130>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40003800 	.word	0x40003800
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	20000118 	.word	0x20000118
 8000ed8:	40026058 	.word	0x40026058

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_MspInit+0x54>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <HAL_MspInit+0x54>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_MspInit+0x54>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_MspInit+0x54>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_MspInit+0x54>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_MspInit+0x54>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	f06f 0001 	mvn.w	r0, #1
 8000f22:	f000 fb0b 	bl	800153c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	; 0x38
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	4b33      	ldr	r3, [pc, #204]	; (8001018 <HAL_InitTick+0xe4>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a32      	ldr	r2, [pc, #200]	; (8001018 <HAL_InitTick+0xe4>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b30      	ldr	r3, [pc, #192]	; (8001018 <HAL_InitTick+0xe4>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f60:	f107 0210 	add.w	r2, r7, #16
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fcce 	bl	800290c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d103      	bne.n	8000f82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f7a:	f001 fc9f 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8000f7e:	6378      	str	r0, [r7, #52]	; 0x34
 8000f80:	e004      	b.n	8000f8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f82:	f001 fc9b 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8000f86:	4603      	mov	r3, r0
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8e:	4a23      	ldr	r2, [pc, #140]	; (800101c <HAL_InitTick+0xe8>)
 8000f90:	fba2 2303 	umull	r2, r3, r2, r3
 8000f94:	0c9b      	lsrs	r3, r3, #18
 8000f96:	3b01      	subs	r3, #1
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_InitTick+0xec>)
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <HAL_InitTick+0xf0>)
 8000f9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_InitTick+0xec>)
 8000fa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fa6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_InitTick+0xec>)
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_InitTick+0xec>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_InitTick+0xec>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_InitTick+0xec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000fc0:	4817      	ldr	r0, [pc, #92]	; (8001020 <HAL_InitTick+0xec>)
 8000fc2:	f002 fb4d 	bl	8003660 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11b      	bne.n	800100c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000fd4:	4812      	ldr	r0, [pc, #72]	; (8001020 <HAL_InitTick+0xec>)
 8000fd6:	f002 fb9d 	bl	8003714 <HAL_TIM_Base_Start_IT>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d111      	bne.n	800100c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fe8:	201d      	movs	r0, #29
 8000fea:	f000 fac3 	bl	8001574 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d808      	bhi.n	8001006 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	201d      	movs	r0, #29
 8000ffa:	f000 fa9f 	bl	800153c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_InitTick+0xf4>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	e002      	b.n	800100c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800100c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001010:	4618      	mov	r0, r3
 8001012:	3738      	adds	r7, #56	; 0x38
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	431bde83 	.word	0x431bde83
 8001020:	20000178 	.word	0x20000178
 8001024:	40000400 	.word	0x40000400
 8001028:	20000004 	.word	0x20000004

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <DMA1_Stream3_IRQHandler+0x10>)
 800105e:	f000 fb9d 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000118 	.word	0x20000118

0800106c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <TIM3_IRQHandler+0x10>)
 8001072:	f002 fbb1 	bl	80037d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000178 	.word	0x20000178

08001080 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e00a      	b.n	80010a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001092:	f3af 8000 	nop.w
 8001096:	4601      	mov	r1, r0
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf0      	blt.n	8001092 <_read+0x12>
  }

  return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e009      	b.n	80010e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f889 	bl	80011ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf1      	blt.n	80010cc <_write+0x12>
  }
  return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_close>:

int _close(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111a:	605a      	str	r2, [r3, #4]
  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_isatty>:

int _isatty(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f006 fc52 	bl	8007a34 <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20020000 	.word	0x20020000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	200001c0 	.word	0x200001c0
 80011c4:	20004d40 	.word	0x20004d40

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__io_putchar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 80011f4:	1d39      	adds	r1, r7, #4
 80011f6:	230a      	movs	r3, #10
 80011f8:	2201      	movs	r2, #1
 80011fa:	4804      	ldr	r0, [pc, #16]	; (800120c <__io_putchar+0x20>)
 80011fc:	f002 fcfd 	bl	8003bfa <HAL_UART_Transmit>
	return ch;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001c4 	.word	0x200001c4

08001210 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_USART2_UART_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001248:	f002 fc8a 	bl	8003b60 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001252:	f7ff fd1b 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001c4 	.word	0x200001c4
 8001260:	40004400 	.word	0x40004400

08001264 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_UART_MspInit+0x84>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12b      	bne.n	80012de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_UART_MspInit+0x88>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_UART_MspInit+0x88>)
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_UART_MspInit+0x88>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_UART_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_UART_MspInit+0x88>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_UART_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012be:	230c      	movs	r3, #12
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ce:	2307      	movs	r3, #7
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_UART_MspInit+0x8c>)
 80012da:	f000 fcc9 	bl	8001c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40004400 	.word	0x40004400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000

080012f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012fa:	490e      	ldr	r1, [pc, #56]	; (8001334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001310:	4c0b      	ldr	r4, [pc, #44]	; (8001340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800131e:	f7ff ff53 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f006 fb8d 	bl	8007a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001326:	f7ff fc1d 	bl	8000b64 <main>
  bx  lr    
 800132a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800132c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001338:	080087a4 	.word	0x080087a4
  ldr r2, =_sbss
 800133c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001340:	20004d40 	.word	0x20004d40

08001344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC_IRQHandler>
	...

08001348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_Init+0x40>)
 8001352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_Init+0x40>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_Init+0x40>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f8d8 	bl	8001526 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	200f      	movs	r0, #15
 8001378:	f7ff fddc 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fdae 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023c00 	.word	0x40023c00

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000208 	.word	0x20000208

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000208 	.word	0x20000208

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ff4c 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154e:	f7ff ff61 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001552:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f7ff ffb1 	bl	80014c0 <NVIC_EncodePriority>
 800155e:	4602      	mov	r2, r0
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff80 	bl	800146c <__NVIC_SetPriority>
}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff54 	bl	8001430 <__NVIC_EnableIRQ>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ff0a 	bl	80013b4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e099      	b.n	80016e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015cc:	e00f      	b.n	80015ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ce:	f7ff fef1 	bl	80013b4 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d908      	bls.n	80015ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2220      	movs	r2, #32
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2203      	movs	r2, #3
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e078      	b.n	80016e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1e8      	bne.n	80015ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_DMA_Init+0x158>)
 8001608:	4013      	ands	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800161a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	2b04      	cmp	r3, #4
 8001646:	d107      	bne.n	8001658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4313      	orrs	r3, r2
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f023 0307 	bic.w	r3, r3, #7
 800166e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4313      	orrs	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	2b04      	cmp	r3, #4
 8001680:	d117      	bne.n	80016b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00e      	beq.n	80016b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 fa6f 	bl	8001b78 <DMA_CheckFifoParam>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016ae:	2301      	movs	r3, #1
 80016b0:	e016      	b.n	80016e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fa26 	bl	8001b0c <DMA_CalcBaseAndBitshift>
 80016c0:	4603      	mov	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	f010803f 	.word	0xf010803f

080016ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_DMA_Start_IT+0x26>
 800170e:	2302      	movs	r3, #2
 8001710:	e040      	b.n	8001794 <HAL_DMA_Start_IT+0xa8>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d12f      	bne.n	8001786 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2202      	movs	r2, #2
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f9b8 	bl	8001ab0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	223f      	movs	r2, #63	; 0x3f
 8001746:	409a      	lsls	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0216 	orr.w	r2, r2, #22
 800175a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	2b00      	cmp	r3, #0
 8001762:	d007      	beq.n	8001774 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0208 	orr.w	r2, r2, #8
 8001772:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0201 	orr.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e005      	b.n	8001792 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800178e:	2302      	movs	r3, #2
 8001790:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001792:	7dfb      	ldrb	r3, [r7, #23]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017a8:	4b8e      	ldr	r3, [pc, #568]	; (80019e4 <HAL_DMA_IRQHandler+0x248>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a8e      	ldr	r2, [pc, #568]	; (80019e8 <HAL_DMA_IRQHandler+0x24c>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0a9b      	lsrs	r3, r3, #10
 80017b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	2208      	movs	r2, #8
 80017c8:	409a      	lsls	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d01a      	beq.n	8001808 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0204 	bic.w	r2, r2, #4
 80017ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	2208      	movs	r2, #8
 80017f6:	409a      	lsls	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2201      	movs	r2, #1
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d012      	beq.n	800183e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	2201      	movs	r2, #1
 800182c:	409a      	lsls	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	f043 0202 	orr.w	r2, r3, #2
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2204      	movs	r2, #4
 8001844:	409a      	lsls	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d012      	beq.n	8001874 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00b      	beq.n	8001874 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	2204      	movs	r2, #4
 8001862:	409a      	lsls	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	f043 0204 	orr.w	r2, r3, #4
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	2210      	movs	r2, #16
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d043      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03c      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2210      	movs	r2, #16
 8001898:	409a      	lsls	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d018      	beq.n	80018de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d108      	bne.n	80018cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d024      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
 80018ca:	e01f      	b.n	800190c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01b      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
 80018dc:	e016      	b.n	800190c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0208 	bic.w	r2, r2, #8
 80018fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001910:	2220      	movs	r2, #32
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 808f 	beq.w	8001a3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 8087 	beq.w	8001a3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001932:	2220      	movs	r2, #32
 8001934:	409a      	lsls	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b05      	cmp	r3, #5
 8001944:	d136      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0216 	bic.w	r2, r2, #22
 8001954:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001964:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d103      	bne.n	8001976 <HAL_DMA_IRQHandler+0x1da>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0208 	bic.w	r2, r2, #8
 8001984:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	223f      	movs	r2, #63	; 0x3f
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d07e      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4798      	blx	r3
        }
        return;
 80019b2:	e079      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d01d      	beq.n	80019fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10d      	bne.n	80019ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d031      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
 80019e0:	e02c      	b.n	8001a3c <HAL_DMA_IRQHandler+0x2a0>
 80019e2:	bf00      	nop
 80019e4:	20000000 	.word	0x20000000
 80019e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d023      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
 80019fc:	e01e      	b.n	8001a3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10f      	bne.n	8001a2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0210 	bic.w	r2, r2, #16
 8001a1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d032      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d022      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2205      	movs	r2, #5
 8001a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d307      	bcc.n	8001a84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f2      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x2cc>
 8001a82:	e000      	b.n	8001a86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
 8001aa6:	e000      	b.n	8001aaa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001aa8:	bf00      	nop
    }
  }
}
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001acc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b40      	cmp	r3, #64	; 0x40
 8001adc:	d108      	bne.n	8001af0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aee:	e007      	b.n	8001b00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	60da      	str	r2, [r3, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3b10      	subs	r3, #16
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <DMA_CalcBaseAndBitshift+0x64>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <DMA_CalcBaseAndBitshift+0x68>)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d909      	bls.n	8001b4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b42:	f023 0303 	bic.w	r3, r3, #3
 8001b46:	1d1a      	adds	r2, r3, #4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b4c:	e007      	b.n	8001b5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	aaaaaaab 	.word	0xaaaaaaab
 8001b74:	08008758 	.word	0x08008758

08001b78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11f      	bne.n	8001bd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d856      	bhi.n	8001c46 <DMA_CheckFifoParam+0xce>
 8001b98:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <DMA_CheckFifoParam+0x28>)
 8001b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9e:	bf00      	nop
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001bc3 	.word	0x08001bc3
 8001ba8:	08001bb1 	.word	0x08001bb1
 8001bac:	08001c47 	.word	0x08001c47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d046      	beq.n	8001c4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc0:	e043      	b.n	8001c4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bca:	d140      	bne.n	8001c4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd0:	e03d      	b.n	8001c4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bda:	d121      	bne.n	8001c20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d837      	bhi.n	8001c52 <DMA_CheckFifoParam+0xda>
 8001be2:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <DMA_CheckFifoParam+0x70>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001bf9 	.word	0x08001bf9
 8001bec:	08001bff 	.word	0x08001bff
 8001bf0:	08001bf9 	.word	0x08001bf9
 8001bf4:	08001c11 	.word	0x08001c11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001bfc:	e030      	b.n	8001c60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d025      	beq.n	8001c56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c0e:	e022      	b.n	8001c56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c18:	d11f      	bne.n	8001c5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c1e:	e01c      	b.n	8001c5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d903      	bls.n	8001c2e <DMA_CheckFifoParam+0xb6>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d003      	beq.n	8001c34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c2c:	e018      	b.n	8001c60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
      break;
 8001c32:	e015      	b.n	8001c60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00e      	beq.n	8001c5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
      break;
 8001c44:	e00b      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
      break;
 8001c46:	bf00      	nop
 8001c48:	e00a      	b.n	8001c60 <DMA_CheckFifoParam+0xe8>
      break;
 8001c4a:	bf00      	nop
 8001c4c:	e008      	b.n	8001c60 <DMA_CheckFifoParam+0xe8>
      break;
 8001c4e:	bf00      	nop
 8001c50:	e006      	b.n	8001c60 <DMA_CheckFifoParam+0xe8>
      break;
 8001c52:	bf00      	nop
 8001c54:	e004      	b.n	8001c60 <DMA_CheckFifoParam+0xe8>
      break;
 8001c56:	bf00      	nop
 8001c58:	e002      	b.n	8001c60 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c5a:	bf00      	nop
 8001c5c:	e000      	b.n	8001c60 <DMA_CheckFifoParam+0xe8>
      break;
 8001c5e:	bf00      	nop
    }
  } 
  
  return status; 
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e159      	b.n	8001f40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f040 8148 	bne.w	8001f3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d005      	beq.n	8001cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d130      	bne.n	8001d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 0201 	and.w	r2, r3, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d017      	beq.n	8001d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d123      	bne.n	8001db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a2 	beq.w	8001f3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a56      	ldr	r2, [pc, #344]	; (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b54      	ldr	r3, [pc, #336]	; (8001f58 <HAL_GPIO_Init+0x2e8>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e12:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a49      	ldr	r2, [pc, #292]	; (8001f60 <HAL_GPIO_Init+0x2f0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x202>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x1fe>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a47      	ldr	r2, [pc, #284]	; (8001f68 <HAL_GPIO_Init+0x2f8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x1fa>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a46      	ldr	r2, [pc, #280]	; (8001f6c <HAL_GPIO_Init+0x2fc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x1f6>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a45      	ldr	r2, [pc, #276]	; (8001f70 <HAL_GPIO_Init+0x300>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x1f2>
 8001e5e:	2304      	movs	r3, #4
 8001e60:	e008      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e62:	2307      	movs	r3, #7
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e66:	2303      	movs	r3, #3
 8001e68:	e004      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x204>
 8001e72:	2300      	movs	r3, #0
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f002 0203 	and.w	r2, r2, #3
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	4093      	lsls	r3, r2
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e84:	4935      	ldr	r1, [pc, #212]	; (8001f5c <HAL_GPIO_Init+0x2ec>)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e92:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee0:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0a:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f34:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	f67f aea2 	bls.w	8001c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020c00 	.word	0x40020c00
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40013c00 	.word	0x40013c00

08001f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e001      	b.n	8001f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc4:	e003      	b.n	8001fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	619a      	str	r2, [r3, #24]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e267      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d075      	beq.n	80020e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d00c      	beq.n	8002020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002006:	4b85      	ldr	r3, [pc, #532]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200e:	2b08      	cmp	r3, #8
 8002010:	d112      	bne.n	8002038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	4b82      	ldr	r3, [pc, #520]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800201e:	d10b      	bne.n	8002038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	4b7e      	ldr	r3, [pc, #504]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d05b      	beq.n	80020e4 <HAL_RCC_OscConfig+0x108>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d157      	bne.n	80020e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e242      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002040:	d106      	bne.n	8002050 <HAL_RCC_OscConfig+0x74>
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a75      	ldr	r2, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e01d      	b.n	800208c <HAL_RCC_OscConfig+0xb0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x98>
 800205a:	4b70      	ldr	r3, [pc, #448]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a6f      	ldr	r2, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b6d      	ldr	r3, [pc, #436]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6c      	ldr	r2, [pc, #432]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0xb0>
 8002074:	4b69      	ldr	r3, [pc, #420]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a68      	ldr	r2, [pc, #416]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800207a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b66      	ldr	r3, [pc, #408]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a65      	ldr	r2, [pc, #404]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff f98e 	bl	80013b4 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff f98a 	bl	80013b4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e207      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b5b      	ldr	r3, [pc, #364]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0xc0>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff f97a 	bl	80013b4 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff f976 	bl	80013b4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1f3      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	4b51      	ldr	r3, [pc, #324]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0xe8>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d063      	beq.n	80021ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002106:	2b08      	cmp	r3, #8
 8002108:	d11c      	bne.n	8002144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210a:	4b44      	ldr	r3, [pc, #272]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d116      	bne.n	8002144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x152>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e1c7      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	e03a      	b.n	80021ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214c:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_RCC_OscConfig+0x244>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7ff f92f 	bl	80013b4 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215a:	f7ff f92b 	bl	80013b4 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1a8      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4925      	ldr	r1, [pc, #148]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_OscConfig+0x244>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f90e 	bl	80013b4 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff f90a 	bl	80013b4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e187      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d036      	beq.n	8002234 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d016      	beq.n	80021fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_RCC_OscConfig+0x248>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff f8ee 	bl	80013b4 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff f8ea 	bl	80013b4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e167      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x200>
 80021fa:	e01b      	b.n	8002234 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_OscConfig+0x248>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7ff f8d7 	bl	80013b4 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	e00e      	b.n	8002228 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220a:	f7ff f8d3 	bl	80013b4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d907      	bls.n	8002228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e150      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
 800221c:	40023800 	.word	0x40023800
 8002220:	42470000 	.word	0x42470000
 8002224:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	4b88      	ldr	r3, [pc, #544]	; (800244c <HAL_RCC_OscConfig+0x470>)
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ea      	bne.n	800220a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8097 	beq.w	8002370 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b81      	ldr	r3, [pc, #516]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b7d      	ldr	r3, [pc, #500]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a7c      	ldr	r2, [pc, #496]	; (800244c <HAL_RCC_OscConfig+0x470>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b7a      	ldr	r3, [pc, #488]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b77      	ldr	r3, [pc, #476]	; (8002450 <HAL_RCC_OscConfig+0x474>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d118      	bne.n	80022b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	4b74      	ldr	r3, [pc, #464]	; (8002450 <HAL_RCC_OscConfig+0x474>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a73      	ldr	r2, [pc, #460]	; (8002450 <HAL_RCC_OscConfig+0x474>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7ff f893 	bl	80013b4 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002292:	f7ff f88f 	bl	80013b4 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e10c      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0x474>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2ea>
 80022b8:	4b64      	ldr	r3, [pc, #400]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	4a63      	ldr	r2, [pc, #396]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6713      	str	r3, [r2, #112]	; 0x70
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x324>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x30c>
 80022ce:	4b5f      	ldr	r3, [pc, #380]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a5e      	ldr	r2, [pc, #376]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	4b5c      	ldr	r3, [pc, #368]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	4a5b      	ldr	r2, [pc, #364]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0x324>
 80022e8:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a57      	ldr	r2, [pc, #348]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	4b55      	ldr	r3, [pc, #340]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a54      	ldr	r2, [pc, #336]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022fa:	f023 0304 	bic.w	r3, r3, #4
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7ff f854 	bl	80013b4 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7ff f850 	bl	80013b4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0cb      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002326:	4b49      	ldr	r3, [pc, #292]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0ee      	beq.n	8002310 <HAL_RCC_OscConfig+0x334>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7ff f83e 	bl	80013b4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7ff f83a 	bl	80013b4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0b5      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002352:	4b3e      	ldr	r3, [pc, #248]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ee      	bne.n	800233c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235e:	7dfb      	ldrb	r3, [r7, #23]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002364:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a38      	ldr	r2, [pc, #224]	; (800244c <HAL_RCC_OscConfig+0x470>)
 800236a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a1 	beq.w	80024bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x470>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d05c      	beq.n	8002440 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d141      	bne.n	8002412 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_RCC_OscConfig+0x478>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7ff f80e 	bl	80013b4 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239c:	f7ff f80a 	bl	80013b4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e087      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69da      	ldr	r2, [r3, #28]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	3b01      	subs	r3, #1
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	491b      	ldr	r1, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCC_OscConfig+0x478>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe ffe3 	bl	80013b4 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe ffdf 	bl	80013b4 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e05c      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x416>
 8002410:	e054      	b.n	80024bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_RCC_OscConfig+0x478>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe ffcc 	bl	80013b4 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002420:	f7fe ffc8 	bl	80013b4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e045      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x444>
 800243e:	e03d      	b.n	80024bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d107      	bne.n	8002458 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e038      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
 800244c:	40023800 	.word	0x40023800
 8002450:	40007000 	.word	0x40007000
 8002454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_RCC_OscConfig+0x4ec>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d028      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d121      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d11a      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002488:	4013      	ands	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800248e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002490:	4293      	cmp	r3, r2
 8002492:	d111      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	3b01      	subs	r3, #1
 80024a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800

080024cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0cc      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d90c      	bls.n	8002508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b65      	ldr	r3, [pc, #404]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b8      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002520:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800252a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002538:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a52      	ldr	r2, [pc, #328]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b50      	ldr	r3, [pc, #320]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	494d      	ldr	r1, [pc, #308]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d044      	beq.n	80025ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d119      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e07f      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d003      	beq.n	800258a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002586:	2b03      	cmp	r3, #3
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e06f      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e067      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b37      	ldr	r3, [pc, #220]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4934      	ldr	r1, [pc, #208]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025bc:	f7fe fefa 	bl	80013b4 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7fe fef6 	bl	80013b4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e04f      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d20c      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e032      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4916      	ldr	r1, [pc, #88]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	490e      	ldr	r1, [pc, #56]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002652:	f000 f821 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002656:	4602      	mov	r2, r0
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	490a      	ldr	r1, [pc, #40]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	5ccb      	ldrb	r3, [r1, r3]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fc5e 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00
 8002688:	40023800 	.word	0x40023800
 800268c:	08008740 	.word	0x08008740
 8002690:	20000000 	.word	0x20000000
 8002694:	20000004 	.word	0x20000004

08002698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800269c:	b094      	sub	sp, #80	; 0x50
 800269e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	647b      	str	r3, [r7, #68]	; 0x44
 80026a4:	2300      	movs	r3, #0
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a8:	2300      	movs	r3, #0
 80026aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b0:	4b79      	ldr	r3, [pc, #484]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d00d      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x40>
 80026bc:	2b08      	cmp	r3, #8
 80026be:	f200 80e1 	bhi.w	8002884 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x34>
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ca:	e0db      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b73      	ldr	r3, [pc, #460]	; (800289c <HAL_RCC_GetSysClockFreq+0x204>)
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026d0:	e0db      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026d2:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80026d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026d6:	e0d8      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d8:	4b6f      	ldr	r3, [pc, #444]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026e2:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ee:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	099b      	lsrs	r3, r3, #6
 80026f4:	2200      	movs	r2, #0
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
 8002702:	2300      	movs	r3, #0
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
 8002706:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800270a:	4622      	mov	r2, r4
 800270c:	462b      	mov	r3, r5
 800270e:	f04f 0000 	mov.w	r0, #0
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	0159      	lsls	r1, r3, #5
 8002718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800271c:	0150      	lsls	r0, r2, #5
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4621      	mov	r1, r4
 8002724:	1a51      	subs	r1, r2, r1
 8002726:	6139      	str	r1, [r7, #16]
 8002728:	4629      	mov	r1, r5
 800272a:	eb63 0301 	sbc.w	r3, r3, r1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800273c:	4659      	mov	r1, fp
 800273e:	018b      	lsls	r3, r1, #6
 8002740:	4651      	mov	r1, sl
 8002742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002746:	4651      	mov	r1, sl
 8002748:	018a      	lsls	r2, r1, #6
 800274a:	4651      	mov	r1, sl
 800274c:	ebb2 0801 	subs.w	r8, r2, r1
 8002750:	4659      	mov	r1, fp
 8002752:	eb63 0901 	sbc.w	r9, r3, r1
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800276a:	4690      	mov	r8, r2
 800276c:	4699      	mov	r9, r3
 800276e:	4623      	mov	r3, r4
 8002770:	eb18 0303 	adds.w	r3, r8, r3
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	462b      	mov	r3, r5
 8002778:	eb49 0303 	adc.w	r3, r9, r3
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800278a:	4629      	mov	r1, r5
 800278c:	024b      	lsls	r3, r1, #9
 800278e:	4621      	mov	r1, r4
 8002790:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002794:	4621      	mov	r1, r4
 8002796:	024a      	lsls	r2, r1, #9
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279e:	2200      	movs	r2, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027a8:	f7fd fd6a 	bl	8000280 <__aeabi_uldivmod>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4613      	mov	r3, r2
 80027b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b4:	e058      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b6:	4b38      	ldr	r3, [pc, #224]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	099b      	lsrs	r3, r3, #6
 80027bc:	2200      	movs	r2, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	4611      	mov	r1, r2
 80027c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027d0:	4642      	mov	r2, r8
 80027d2:	464b      	mov	r3, r9
 80027d4:	f04f 0000 	mov.w	r0, #0
 80027d8:	f04f 0100 	mov.w	r1, #0
 80027dc:	0159      	lsls	r1, r3, #5
 80027de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027e2:	0150      	lsls	r0, r2, #5
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4641      	mov	r1, r8
 80027ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ee:	4649      	mov	r1, r9
 80027f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002800:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002804:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002808:	ebb2 040a 	subs.w	r4, r2, sl
 800280c:	eb63 050b 	sbc.w	r5, r3, fp
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	00eb      	lsls	r3, r5, #3
 800281a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800281e:	00e2      	lsls	r2, r4, #3
 8002820:	4614      	mov	r4, r2
 8002822:	461d      	mov	r5, r3
 8002824:	4643      	mov	r3, r8
 8002826:	18e3      	adds	r3, r4, r3
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	464b      	mov	r3, r9
 800282c:	eb45 0303 	adc.w	r3, r5, r3
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800283e:	4629      	mov	r1, r5
 8002840:	028b      	lsls	r3, r1, #10
 8002842:	4621      	mov	r1, r4
 8002844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002848:	4621      	mov	r1, r4
 800284a:	028a      	lsls	r2, r1, #10
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002852:	2200      	movs	r2, #0
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	61fa      	str	r2, [r7, #28]
 8002858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800285c:	f7fd fd10 	bl	8000280 <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4613      	mov	r3, r2
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800287a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetSysClockFreq+0x204>)
 8002886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800288c:	4618      	mov	r0, r3
 800288e:	3750      	adds	r7, #80	; 0x50
 8002890:	46bd      	mov	sp, r7
 8002892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	007a1200 	.word	0x007a1200

080028a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000000 	.word	0x20000000

080028bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028c0:	f7ff fff0 	bl	80028a4 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	0a9b      	lsrs	r3, r3, #10
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	08008750 	.word	0x08008750

080028e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e8:	f7ff ffdc 	bl	80028a4 <HAL_RCC_GetHCLKFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	0b5b      	lsrs	r3, r3, #13
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4903      	ldr	r1, [pc, #12]	; (8002908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40023800 	.word	0x40023800
 8002908:	08008750 	.word	0x08008750

0800290c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	220f      	movs	r2, #15
 800291a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_RCC_GetClockConfig+0x5c>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_RCC_GetClockConfig+0x5c>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_RCC_GetClockConfig+0x5c>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <HAL_RCC_GetClockConfig+0x5c>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	08db      	lsrs	r3, r3, #3
 8002946:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <HAL_RCC_GetClockConfig+0x60>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0207 	and.w	r2, r3, #7
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	601a      	str	r2, [r3, #0]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	40023c00 	.word	0x40023c00

08002970 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002994:	2b00      	cmp	r3, #0
 8002996:	d038      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800299e:	f7fe fd09 	bl	80013b4 <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029a6:	f7fe fd05 	bl	80013b4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0bd      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029b8:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	019b      	lsls	r3, r3, #6
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	071b      	lsls	r3, r3, #28
 80029d6:	495a      	ldr	r1, [pc, #360]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029de:	4b57      	ldr	r3, [pc, #348]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029e4:	f7fe fce6 	bl	80013b4 <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ec:	f7fe fce2 	bl	80013b4 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e09a      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029fe:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8083 	beq.w	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	4a47      	ldr	r2, [pc, #284]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a26:	6413      	str	r3, [r2, #64]	; 0x40
 8002a28:	4b45      	ldr	r3, [pc, #276]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a34:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a42      	ldr	r2, [pc, #264]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fcb8 	bl	80013b4 <HAL_GetTick>
 8002a44:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fcb4 	bl	80013b4 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e06c      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a5a:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a66:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d02f      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d028      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a8e:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002aa0:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d114      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fc82 	bl	80013b4 <HAL_GetTick>
 8002ab0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fc7e 	bl	80013b4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e034      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0ee      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ae2:	d10d      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af8:	4911      	ldr	r1, [pc, #68]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
 8002afe:	e005      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b0a:	6093      	str	r3, [r2, #8]
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b18:	4909      	ldr	r1, [pc, #36]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7d1a      	ldrb	r2, [r3, #20]
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002b30:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	42470068 	.word	0x42470068
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40007000 	.word	0x40007000
 8002b48:	42470e40 	.word	0x42470e40
 8002b4c:	424711e0 	.word	0x424711e0

08002b50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e066      	b.n	8002c34 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7f5b      	ldrb	r3, [r3, #29]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe f8b4 	bl	8000ce4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	22ca      	movs	r2, #202	; 0xca
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2253      	movs	r2, #83	; 0x53
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f87a 	bl	8002c8c <RTC_EnterInitMode>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d12c      	bne.n	8002bfc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6899      	ldr	r1, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68d2      	ldr	r2, [r2, #12]
 8002bdc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	041a      	lsls	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f881 	bl	8002cfa <RTC_ExitInitMode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	22ff      	movs	r2, #255	; 0xff
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c56:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c58:	f7fe fbac 	bl	80013b4 <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c5e:	e009      	b.n	8002c74 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c60:	f7fe fba8 	bl	80013b4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c6e:	d901      	bls.n	8002c74 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e007      	b.n	8002c84 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0ee      	beq.n	8002c60 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d122      	bne.n	8002cf0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cb8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cba:	f7fe fb7b 	bl	80013b4 <HAL_GetTick>
 8002cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cc0:	e00c      	b.n	8002cdc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cc2:	f7fe fb77 	bl	80013b4 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd0:	d904      	bls.n	8002cdc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <RTC_EnterInitMode+0x64>
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d1e8      	bne.n	8002cc2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d14:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ff89 	bl	8002c3c <HAL_RTC_WaitForSynchro>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2204      	movs	r2, #4
 8002d34:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07b      	b.n	8002e4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d66:	d009      	beq.n	8002d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
 8002d6e:	e005      	b.n	8002d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fe f804 	bl	8000da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e00:	ea42 0103 	orr.w	r1, r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	f003 0104 	and.w	r1, r3, #4
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	f003 0210 	and.w	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d110      	bne.n	8002e94 <HAL_SPI_Receive_DMA+0x3c>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7a:	d10b      	bne.n	8002e94 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f8ac 	bl	8002fe8 <HAL_SPI_TransmitReceive_DMA>
 8002e90:	4603      	mov	r3, r0
 8002e92:	e09f      	b.n	8002fd4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_SPI_Receive_DMA+0x4a>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e098      	b.n	8002fd4 <HAL_SPI_Receive_DMA+0x17c>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d002      	beq.n	8002ebc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eba:	e086      	b.n	8002fca <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_Receive_DMA+0x70>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ecc:	e07d      	b.n	8002fca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	88fa      	ldrh	r2, [r7, #6]
 8002ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0e:	d10f      	bne.n	8002f30 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <HAL_SPI_Receive_DMA+0x184>)
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3c:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <HAL_SPI_Receive_DMA+0x188>)
 8002f3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <HAL_SPI_Receive_DMA+0x18c>)
 8002f46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f66:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002f68:	f7fe fbc0 	bl	80016ec <HAL_DMA_Start_IT>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002f8a:	e01e      	b.n	8002fca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d007      	beq.n	8002faa <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0220 	orr.w	r2, r2, #32
 8002fb8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	08003389 	.word	0x08003389
 8002fe0:	08003251 	.word	0x08003251
 8002fe4:	080033c1 	.word	0x080033c1

08002fe8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003004:	2302      	movs	r3, #2
 8003006:	e0e3      	b.n	80031d0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003016:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800301e:	7dbb      	ldrb	r3, [r7, #22]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d00d      	beq.n	8003040 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800302a:	d106      	bne.n	800303a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <HAL_SPI_TransmitReceive_DMA+0x52>
 8003034:	7dbb      	ldrb	r3, [r7, #22]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d002      	beq.n	8003040 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800303a:	2302      	movs	r3, #2
 800303c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800303e:	e0c2      	b.n	80031c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003056:	e0b6      	b.n	80031c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b04      	cmp	r3, #4
 8003062:	d003      	beq.n	800306c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2205      	movs	r2, #5
 8003068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	887a      	ldrh	r2, [r7, #2]
 8003082:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	887a      	ldrh	r2, [r7, #2]
 800308e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d108      	bne.n	80030c0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b2:	4a49      	ldr	r2, [pc, #292]	; (80031d8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80030be:	e007      	b.n	80030d0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c4:	4a46      	ldr	r2, [pc, #280]	; (80031e0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030cc:	4a45      	ldr	r2, [pc, #276]	; (80031e4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80030ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	4a44      	ldr	r2, [pc, #272]	; (80031e8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80030d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030dc:	2200      	movs	r2, #0
 80030de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	4619      	mov	r1, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80030f8:	f7fe faf8 	bl	80016ec <HAL_DMA_Start_IT>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00c      	beq.n	800311c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f043 0210 	orr.w	r2, r3, #16
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800311a:	e054      	b.n	80031c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	2200      	movs	r2, #0
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	2200      	movs	r2, #0
 800313a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	2200      	movs	r2, #0
 8003142:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003148:	2200      	movs	r2, #0
 800314a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	4619      	mov	r1, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	330c      	adds	r3, #12
 800315c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003164:	f7fe fac2 	bl	80016ec <HAL_DMA_Start_IT>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0210 	orr.w	r2, r3, #16
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003186:	e01e      	b.n	80031c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d007      	beq.n	80031a6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0220 	orr.w	r2, r2, #32
 80031b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0202 	orr.w	r2, r2, #2
 80031c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	08003389 	.word	0x08003389
 80031dc:	08003251 	.word	0x08003251
 80031e0:	080033a5 	.word	0x080033a5
 80031e4:	080032f9 	.word	0x080032f9
 80031e8:	080033c1 	.word	0x080033c1

080031ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800325e:	f7fe f8a9 	bl	80013b4 <HAL_GetTick>
 8003262:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003272:	d03b      	beq.n	80032ec <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0220 	bic.w	r2, r2, #32
 8003282:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <SPI_DMAReceiveCplt+0x58>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003294:	d108      	bne.n	80032a8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0203 	bic.w	r2, r2, #3
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	e007      	b.n	80032b8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	2164      	movs	r1, #100	; 0x64
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f927 	bl	8003510 <SPI_EndRxTransaction>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff ffa9 	bl	800323c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80032ea:	e002      	b.n	80032f2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ff7d 	bl	80031ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003306:	f7fe f855 	bl	80013b4 <HAL_GetTick>
 800330a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331a:	d02f      	beq.n	800337c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0220 	bic.w	r2, r2, #32
 800332a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	2164      	movs	r1, #100	; 0x64
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f953 	bl	80035dc <SPI_EndRxTxTransaction>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0203 	bic.w	r2, r2, #3
 8003356:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7ff ff61 	bl	800323c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800337a:	e002      	b.n	8003382 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff ff3f 	bl	8003200 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff ff3c 	bl	8003214 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff ff38 	bl	8003228 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0203 	bic.w	r2, r2, #3
 80033dc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e2:	f043 0210 	orr.w	r2, r3, #16
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff ff22 	bl	800323c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003410:	f7fd ffd0 	bl	80013b4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	4413      	add	r3, r2
 800341e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003420:	f7fd ffc8 	bl	80013b4 <HAL_GetTick>
 8003424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003426:	4b39      	ldr	r3, [pc, #228]	; (800350c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	015b      	lsls	r3, r3, #5
 800342c:	0d1b      	lsrs	r3, r3, #20
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003436:	e054      	b.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d050      	beq.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003440:	f7fd ffb8 	bl	80013b4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	429a      	cmp	r2, r3
 800344e:	d902      	bls.n	8003456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d13d      	bne.n	80034d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346e:	d111      	bne.n	8003494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003478:	d004      	beq.n	8003484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d107      	bne.n	8003494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d10f      	bne.n	80034be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e017      	b.n	8003502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3b01      	subs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d19b      	bne.n	8003438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000000 	.word	0x20000000

08003510 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003524:	d111      	bne.n	800354a <SPI_EndRxTransaction+0x3a>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352e:	d004      	beq.n	800353a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003538:	d107      	bne.n	800354a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003552:	d12a      	bne.n	80035aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	d012      	beq.n	8003584 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff ff49 	bl	8003400 <SPI_WaitFlagStateUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d02d      	beq.n	80035d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e026      	b.n	80035d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2200      	movs	r2, #0
 800358c:	2101      	movs	r1, #1
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff ff36 	bl	8003400 <SPI_WaitFlagStateUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01a      	beq.n	80035d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e013      	b.n	80035d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2101      	movs	r1, #1
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff ff23 	bl	8003400 <SPI_WaitFlagStateUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e000      	b.n	80035d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <SPI_EndRxTxTransaction+0x7c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1b      	ldr	r2, [pc, #108]	; (800365c <SPI_EndRxTxTransaction+0x80>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0d5b      	lsrs	r3, r3, #21
 80035f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003606:	d112      	bne.n	800362e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	2180      	movs	r1, #128	; 0x80
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff fef4 	bl	8003400 <SPI_WaitFlagStateUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e00f      	b.n	800364e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3b01      	subs	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b80      	cmp	r3, #128	; 0x80
 8003646:	d0f2      	beq.n	800362e <SPI_EndRxTxTransaction+0x52>
 8003648:	e000      	b.n	800364c <SPI_EndRxTxTransaction+0x70>
        break;
 800364a:	bf00      	nop
  }

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000000 	.word	0x20000000
 800365c:	165e9f81 	.word	0x165e9f81

08003660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e041      	b.n	80036f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f839 	bl	80036fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 f9ca 	bl	8003a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d001      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e044      	b.n	80037b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d018      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x6c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003756:	d013      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x6c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00e      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x6c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_TIM_Base_Start_IT+0xb8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x6c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x6c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d111      	bne.n	80037a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b06      	cmp	r3, #6
 8003790:	d010      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a2:	e007      	b.n	80037b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40010000 	.word	0x40010000
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800
 80037d0:	40000c00 	.word	0x40000c00
 80037d4:	40014000 	.word	0x40014000

080037d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0202 	mvn.w	r2, #2
 8003804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8ee 	bl	80039fc <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8e0 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f8f1 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b04      	cmp	r3, #4
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0204 	mvn.w	r2, #4
 8003858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8c4 	bl	80039fc <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8b6 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8c7 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0208 	mvn.w	r2, #8
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f89a 	bl	80039fc <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f88c 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f89d 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0210 	mvn.w	r2, #16
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2208      	movs	r2, #8
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f870 	bl	80039fc <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f862 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f873 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0201 	mvn.w	r2, #1
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd f986 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b80      	cmp	r3, #128	; 0x80
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8e2 	bl	8003b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d10e      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d107      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f838 	bl	8003a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d10e      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d107      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0220 	mvn.w	r2, #32
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8ac 	bl	8003b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a34      	ldr	r2, [pc, #208]	; (8003b1c <TIM_Base_SetConfig+0xe4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00f      	beq.n	8003a70 <TIM_Base_SetConfig+0x38>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a56:	d00b      	beq.n	8003a70 <TIM_Base_SetConfig+0x38>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a31      	ldr	r2, [pc, #196]	; (8003b20 <TIM_Base_SetConfig+0xe8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d007      	beq.n	8003a70 <TIM_Base_SetConfig+0x38>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a30      	ldr	r2, [pc, #192]	; (8003b24 <TIM_Base_SetConfig+0xec>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d003      	beq.n	8003a70 <TIM_Base_SetConfig+0x38>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a2f      	ldr	r2, [pc, #188]	; (8003b28 <TIM_Base_SetConfig+0xf0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d108      	bne.n	8003a82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a25      	ldr	r2, [pc, #148]	; (8003b1c <TIM_Base_SetConfig+0xe4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01b      	beq.n	8003ac2 <TIM_Base_SetConfig+0x8a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a90:	d017      	beq.n	8003ac2 <TIM_Base_SetConfig+0x8a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <TIM_Base_SetConfig+0xe8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <TIM_Base_SetConfig+0x8a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <TIM_Base_SetConfig+0xec>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00f      	beq.n	8003ac2 <TIM_Base_SetConfig+0x8a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <TIM_Base_SetConfig+0xf0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <TIM_Base_SetConfig+0x8a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <TIM_Base_SetConfig+0xf4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <TIM_Base_SetConfig+0x8a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <TIM_Base_SetConfig+0xf8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_Base_SetConfig+0x8a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <TIM_Base_SetConfig+0xfc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d108      	bne.n	8003ad4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <TIM_Base_SetConfig+0xe4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d103      	bne.n	8003b08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	615a      	str	r2, [r3, #20]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40014000 	.word	0x40014000
 8003b30:	40014400 	.word	0x40014400
 8003b34:	40014800 	.word	0x40014800

08003b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e03f      	b.n	8003bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd fb6c 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	; 0x24
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f929 	bl	8003dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08a      	sub	sp, #40	; 0x28
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d17c      	bne.n	8003d14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_UART_Transmit+0x2c>
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e075      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Transmit+0x3e>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e06e      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2221      	movs	r2, #33	; 0x21
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c4e:	f7fd fbb1 	bl	80013b4 <HAL_GetTick>
 8003c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	88fa      	ldrh	r2, [r7, #6]
 8003c5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c68:	d108      	bne.n	8003c7c <HAL_UART_Transmit+0x82>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e003      	b.n	8003c84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c8c:	e02a      	b.n	8003ce4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2180      	movs	r1, #128	; 0x80
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f840 	bl	8003d1e <UART_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e036      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10b      	bne.n	8003cc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e007      	b.n	8003cd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1cf      	bne.n	8003c8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2140      	movs	r1, #64	; 0x40
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f810 	bl	8003d1e <UART_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e006      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b090      	sub	sp, #64	; 0x40
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2e:	e050      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d04c      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3e:	f7fd fb39 	bl	80013b4 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d241      	bcs.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d6e:	637a      	str	r2, [r7, #52]	; 0x34
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e5      	bne.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3314      	adds	r3, #20
 8003d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	613b      	str	r3, [r7, #16]
   return(result);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3314      	adds	r3, #20
 8003da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da2:	623a      	str	r2, [r7, #32]
 8003da4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	69f9      	ldr	r1, [r7, #28]
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e5      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e00f      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d09f      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3740      	adds	r7, #64	; 0x40
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e00:	b0c0      	sub	sp, #256	; 0x100
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	68d9      	ldr	r1, [r3, #12]
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	ea40 0301 	orr.w	r3, r0, r1
 8003e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e54:	f021 010c 	bic.w	r1, r1, #12
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e62:	430b      	orrs	r3, r1
 8003e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e76:	6999      	ldr	r1, [r3, #24]
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	ea40 0301 	orr.w	r3, r0, r1
 8003e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b8f      	ldr	r3, [pc, #572]	; (80040c8 <UART_SetConfig+0x2cc>)
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d005      	beq.n	8003e9c <UART_SetConfig+0xa0>
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b8d      	ldr	r3, [pc, #564]	; (80040cc <UART_SetConfig+0x2d0>)
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d104      	bne.n	8003ea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e9c:	f7fe fd22 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8003ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ea4:	e003      	b.n	8003eae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ea6:	f7fe fd09 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8003eaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb8:	f040 810c 	bne.w	80040d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	1891      	adds	r1, r2, r2
 8003ed4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ed6:	415b      	adcs	r3, r3
 8003ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ede:	4621      	mov	r1, r4
 8003ee0:	eb12 0801 	adds.w	r8, r2, r1
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	eb43 0901 	adc.w	r9, r3, r1
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003efe:	4690      	mov	r8, r2
 8003f00:	4699      	mov	r9, r3
 8003f02:	4623      	mov	r3, r4
 8003f04:	eb18 0303 	adds.w	r3, r8, r3
 8003f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	eb49 0303 	adc.w	r3, r9, r3
 8003f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	18db      	adds	r3, r3, r3
 8003f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f30:	4613      	mov	r3, r2
 8003f32:	eb42 0303 	adc.w	r3, r2, r3
 8003f36:	657b      	str	r3, [r7, #84]	; 0x54
 8003f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f40:	f7fc f99e 	bl	8000280 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4b61      	ldr	r3, [pc, #388]	; (80040d0 <UART_SetConfig+0x2d4>)
 8003f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	011c      	lsls	r4, r3, #4
 8003f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f64:	4642      	mov	r2, r8
 8003f66:	464b      	mov	r3, r9
 8003f68:	1891      	adds	r1, r2, r2
 8003f6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f6c:	415b      	adcs	r3, r3
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f74:	4641      	mov	r1, r8
 8003f76:	eb12 0a01 	adds.w	sl, r2, r1
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f94:	4692      	mov	sl, r2
 8003f96:	469b      	mov	fp, r3
 8003f98:	4643      	mov	r3, r8
 8003f9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	eb4b 0303 	adc.w	r3, fp, r3
 8003fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	18db      	adds	r3, r3, r3
 8003fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	eb42 0303 	adc.w	r3, r2, r3
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fd6:	f7fc f953 	bl	8000280 <__aeabi_uldivmod>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <UART_SetConfig+0x2d4>)
 8003fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2264      	movs	r2, #100	; 0x64
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	1acb      	subs	r3, r1, r3
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ff6:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <UART_SetConfig+0x2d4>)
 8003ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004004:	441c      	add	r4, r3
 8004006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004010:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004018:	4642      	mov	r2, r8
 800401a:	464b      	mov	r3, r9
 800401c:	1891      	adds	r1, r2, r2
 800401e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004020:	415b      	adcs	r3, r3
 8004022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004028:	4641      	mov	r1, r8
 800402a:	1851      	adds	r1, r2, r1
 800402c:	6339      	str	r1, [r7, #48]	; 0x30
 800402e:	4649      	mov	r1, r9
 8004030:	414b      	adcs	r3, r1
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004040:	4659      	mov	r1, fp
 8004042:	00cb      	lsls	r3, r1, #3
 8004044:	4651      	mov	r1, sl
 8004046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404a:	4651      	mov	r1, sl
 800404c:	00ca      	lsls	r2, r1, #3
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	4603      	mov	r3, r0
 8004054:	4642      	mov	r2, r8
 8004056:	189b      	adds	r3, r3, r2
 8004058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800405c:	464b      	mov	r3, r9
 800405e:	460a      	mov	r2, r1
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004074:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800407c:	460b      	mov	r3, r1
 800407e:	18db      	adds	r3, r3, r3
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
 8004082:	4613      	mov	r3, r2
 8004084:	eb42 0303 	adc.w	r3, r2, r3
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800408e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004092:	f7fc f8f5 	bl	8000280 <__aeabi_uldivmod>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <UART_SetConfig+0x2d4>)
 800409c:	fba3 1302 	umull	r1, r3, r3, r2
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	2164      	movs	r1, #100	; 0x64
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	3332      	adds	r3, #50	; 0x32
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <UART_SetConfig+0x2d4>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	f003 0207 	and.w	r2, r3, #7
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4422      	add	r2, r4
 80040c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040c4:	e106      	b.n	80042d4 <UART_SetConfig+0x4d8>
 80040c6:	bf00      	nop
 80040c8:	40011000 	.word	0x40011000
 80040cc:	40011400 	.word	0x40011400
 80040d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040e6:	4642      	mov	r2, r8
 80040e8:	464b      	mov	r3, r9
 80040ea:	1891      	adds	r1, r2, r2
 80040ec:	6239      	str	r1, [r7, #32]
 80040ee:	415b      	adcs	r3, r3
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
 80040f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040f6:	4641      	mov	r1, r8
 80040f8:	1854      	adds	r4, r2, r1
 80040fa:	4649      	mov	r1, r9
 80040fc:	eb43 0501 	adc.w	r5, r3, r1
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	00eb      	lsls	r3, r5, #3
 800410a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410e:	00e2      	lsls	r2, r4, #3
 8004110:	4614      	mov	r4, r2
 8004112:	461d      	mov	r5, r3
 8004114:	4643      	mov	r3, r8
 8004116:	18e3      	adds	r3, r4, r3
 8004118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800411c:	464b      	mov	r3, r9
 800411e:	eb45 0303 	adc.w	r3, r5, r3
 8004122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004132:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004142:	4629      	mov	r1, r5
 8004144:	008b      	lsls	r3, r1, #2
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414c:	4621      	mov	r1, r4
 800414e:	008a      	lsls	r2, r1, #2
 8004150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004154:	f7fc f894 	bl	8000280 <__aeabi_uldivmod>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4b60      	ldr	r3, [pc, #384]	; (80042e0 <UART_SetConfig+0x4e4>)
 800415e:	fba3 2302 	umull	r2, r3, r3, r2
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	011c      	lsls	r4, r3, #4
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004170:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	1891      	adds	r1, r2, r2
 800417e:	61b9      	str	r1, [r7, #24]
 8004180:	415b      	adcs	r3, r3
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004188:	4641      	mov	r1, r8
 800418a:	1851      	adds	r1, r2, r1
 800418c:	6139      	str	r1, [r7, #16]
 800418e:	4649      	mov	r1, r9
 8004190:	414b      	adcs	r3, r1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a0:	4659      	mov	r1, fp
 80041a2:	00cb      	lsls	r3, r1, #3
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041aa:	4651      	mov	r1, sl
 80041ac:	00ca      	lsls	r2, r1, #3
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	4642      	mov	r2, r8
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041bc:	464b      	mov	r3, r9
 80041be:	460a      	mov	r2, r1
 80041c0:	eb42 0303 	adc.w	r3, r2, r3
 80041c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80041d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041e0:	4649      	mov	r1, r9
 80041e2:	008b      	lsls	r3, r1, #2
 80041e4:	4641      	mov	r1, r8
 80041e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ea:	4641      	mov	r1, r8
 80041ec:	008a      	lsls	r2, r1, #2
 80041ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041f2:	f7fc f845 	bl	8000280 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	4b38      	ldr	r3, [pc, #224]	; (80042e0 <UART_SetConfig+0x4e4>)
 80041fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2264      	movs	r2, #100	; 0x64
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	1acb      	subs	r3, r1, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	3332      	adds	r3, #50	; 0x32
 8004210:	4a33      	ldr	r2, [pc, #204]	; (80042e0 <UART_SetConfig+0x4e4>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421c:	441c      	add	r4, r3
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	673b      	str	r3, [r7, #112]	; 0x70
 8004226:	677a      	str	r2, [r7, #116]	; 0x74
 8004228:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800422c:	4642      	mov	r2, r8
 800422e:	464b      	mov	r3, r9
 8004230:	1891      	adds	r1, r2, r2
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	415b      	adcs	r3, r3
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800423c:	4641      	mov	r1, r8
 800423e:	1851      	adds	r1, r2, r1
 8004240:	6039      	str	r1, [r7, #0]
 8004242:	4649      	mov	r1, r9
 8004244:	414b      	adcs	r3, r1
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004254:	4659      	mov	r1, fp
 8004256:	00cb      	lsls	r3, r1, #3
 8004258:	4651      	mov	r1, sl
 800425a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425e:	4651      	mov	r1, sl
 8004260:	00ca      	lsls	r2, r1, #3
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	4603      	mov	r3, r0
 8004268:	4642      	mov	r2, r8
 800426a:	189b      	adds	r3, r3, r2
 800426c:	66bb      	str	r3, [r7, #104]	; 0x68
 800426e:	464b      	mov	r3, r9
 8004270:	460a      	mov	r2, r1
 8004272:	eb42 0303 	adc.w	r3, r2, r3
 8004276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	663b      	str	r3, [r7, #96]	; 0x60
 8004282:	667a      	str	r2, [r7, #100]	; 0x64
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004290:	4649      	mov	r1, r9
 8004292:	008b      	lsls	r3, r1, #2
 8004294:	4641      	mov	r1, r8
 8004296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429a:	4641      	mov	r1, r8
 800429c:	008a      	lsls	r2, r1, #2
 800429e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042a2:	f7fb ffed 	bl	8000280 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <UART_SetConfig+0x4e4>)
 80042ac:	fba3 1302 	umull	r1, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	2164      	movs	r1, #100	; 0x64
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	3332      	adds	r3, #50	; 0x32
 80042be:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <UART_SetConfig+0x4e4>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	f003 020f 	and.w	r2, r3, #15
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4422      	add	r2, r4
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042da:	46bd      	mov	sp, r7
 80042dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e0:	51eb851f 	.word	0x51eb851f

080042e4 <__NVIC_SetPriority>:
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	6039      	str	r1, [r7, #0]
 80042ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	db0a      	blt.n	800430e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	490c      	ldr	r1, [pc, #48]	; (8004330 <__NVIC_SetPriority+0x4c>)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	0112      	lsls	r2, r2, #4
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	440b      	add	r3, r1
 8004308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800430c:	e00a      	b.n	8004324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	4908      	ldr	r1, [pc, #32]	; (8004334 <__NVIC_SetPriority+0x50>)
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	3b04      	subs	r3, #4
 800431c:	0112      	lsls	r2, r2, #4
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	440b      	add	r3, r1
 8004322:	761a      	strb	r2, [r3, #24]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000e100 	.word	0xe000e100
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <SysTick_Handler+0x1c>)
 800433e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004340:	f002 f85a 	bl	80063f8 <xTaskGetSchedulerState>
 8004344:	4603      	mov	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800434a:	f002 ff3d 	bl	80071c8 <xPortSysTickHandler>
  }
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	e000e010 	.word	0xe000e010

08004358 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800435c:	2100      	movs	r1, #0
 800435e:	f06f 0004 	mvn.w	r0, #4
 8004362:	f7ff ffbf 	bl	80042e4 <__NVIC_SetPriority>
#endif
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004372:	f3ef 8305 	mrs	r3, IPSR
 8004376:	603b      	str	r3, [r7, #0]
  return(result);
 8004378:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800437e:	f06f 0305 	mvn.w	r3, #5
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	e00c      	b.n	80043a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <osKernelInitialize+0x44>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <osKernelInitialize+0x44>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004394:	2300      	movs	r3, #0
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	e002      	b.n	80043a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800439a:	f04f 33ff 	mov.w	r3, #4294967295
 800439e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043a0:	687b      	ldr	r3, [r7, #4]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	2000020c 	.word	0x2000020c

080043b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ba:	f3ef 8305 	mrs	r3, IPSR
 80043be:	603b      	str	r3, [r7, #0]
  return(result);
 80043c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80043c6:	f06f 0305 	mvn.w	r3, #5
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	e010      	b.n	80043f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <osKernelStart+0x48>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d109      	bne.n	80043ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043d6:	f7ff ffbf 	bl	8004358 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <osKernelStart+0x48>)
 80043dc:	2202      	movs	r2, #2
 80043de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043e0:	f001 fb9e 	bl	8005b20 <vTaskStartScheduler>
      stat = osOK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	607b      	str	r3, [r7, #4]
 80043e8:	e002      	b.n	80043f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043f0:	687b      	ldr	r3, [r7, #4]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	2000020c 	.word	0x2000020c

08004400 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b08e      	sub	sp, #56	; 0x38
 8004404:	af04      	add	r7, sp, #16
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004410:	f3ef 8305 	mrs	r3, IPSR
 8004414:	617b      	str	r3, [r7, #20]
  return(result);
 8004416:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004418:	2b00      	cmp	r3, #0
 800441a:	d17e      	bne.n	800451a <osThreadNew+0x11a>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d07b      	beq.n	800451a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004426:	2318      	movs	r3, #24
 8004428:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d045      	beq.n	80044c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <osThreadNew+0x48>
        name = attr->name;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <osThreadNew+0x6e>
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2b38      	cmp	r3, #56	; 0x38
 8004460:	d805      	bhi.n	800446e <osThreadNew+0x6e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <osThreadNew+0x72>
        return (NULL);
 800446e:	2300      	movs	r3, #0
 8004470:	e054      	b.n	800451c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <osThreadNew+0xa8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2ba7      	cmp	r3, #167	; 0xa7
 8004490:	d90a      	bls.n	80044a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <osThreadNew+0xa8>
        mem = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	e010      	b.n	80044ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10c      	bne.n	80044ca <osThreadNew+0xca>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d108      	bne.n	80044ca <osThreadNew+0xca>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <osThreadNew+0xca>
          mem = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e001      	b.n	80044ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d110      	bne.n	80044f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044d8:	9202      	str	r2, [sp, #8]
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f001 f92e 	bl	8005748 <xTaskCreateStatic>
 80044ec:	4603      	mov	r3, r0
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e013      	b.n	800451a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d110      	bne.n	800451a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	f107 0310 	add.w	r3, r7, #16
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f001 f979 	bl	8005802 <xTaskCreate>
 8004510:	4603      	mov	r3, r0
 8004512:	2b01      	cmp	r3, #1
 8004514:	d001      	beq.n	800451a <osThreadNew+0x11a>
            hTask = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800451a:	693b      	ldr	r3, [r7, #16]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3728      	adds	r7, #40	; 0x28
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800452c:	f3ef 8305 	mrs	r3, IPSR
 8004530:	60bb      	str	r3, [r7, #8]
  return(result);
 8004532:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <osDelay+0x1c>
    stat = osErrorISR;
 8004538:	f06f 0305 	mvn.w	r3, #5
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e007      	b.n	8004550 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <osDelay+0x2c>
      vTaskDelay(ticks);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 fab4 	bl	8005ab8 <vTaskDelay>
    }
  }

  return (stat);
 8004550:	68fb      	ldr	r3, [r7, #12]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800455a:	b580      	push	{r7, lr}
 800455c:	b088      	sub	sp, #32
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004566:	f3ef 8305 	mrs	r3, IPSR
 800456a:	60bb      	str	r3, [r7, #8]
  return(result);
 800456c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800456e:	2b00      	cmp	r3, #0
 8004570:	d174      	bne.n	800465c <osMutexNew+0x102>
    if (attr != NULL) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e001      	b.n	8004584 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <osMutexNew+0x3a>
      rmtx = 1U;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	e001      	b.n	8004598 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d15c      	bne.n	800465c <osMutexNew+0x102>
      mem = -1;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d015      	beq.n	80045da <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <osMutexNew+0x6a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b4f      	cmp	r3, #79	; 0x4f
 80045bc:	d902      	bls.n	80045c4 <osMutexNew+0x6a>
          mem = 1;
 80045be:	2301      	movs	r3, #1
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e00c      	b.n	80045de <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <osMutexNew+0x84>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d104      	bne.n	80045de <osMutexNew+0x84>
            mem = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	e001      	b.n	80045de <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d112      	bne.n	800460a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	4619      	mov	r1, r3
 80045f0:	2004      	movs	r0, #4
 80045f2:	f000 fb18 	bl	8004c26 <xQueueCreateMutexStatic>
 80045f6:	61f8      	str	r0, [r7, #28]
 80045f8:	e016      	b.n	8004628 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	4619      	mov	r1, r3
 8004600:	2001      	movs	r0, #1
 8004602:	f000 fb10 	bl	8004c26 <xQueueCreateMutexStatic>
 8004606:	61f8      	str	r0, [r7, #28]
 8004608:	e00e      	b.n	8004628 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d004      	beq.n	8004620 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004616:	2004      	movs	r0, #4
 8004618:	f000 faed 	bl	8004bf6 <xQueueCreateMutex>
 800461c:	61f8      	str	r0, [r7, #28]
 800461e:	e003      	b.n	8004628 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004620:	2001      	movs	r0, #1
 8004622:	f000 fae8 	bl	8004bf6 <xQueueCreateMutex>
 8004626:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <osMutexNew+0xee>
        if (attr != NULL) {
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <osMutexNew+0xe2>
          name = attr->name;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e001      	b.n	8004640 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	69f8      	ldr	r0, [r7, #28]
 8004644:	f001 f822 	bl	800568c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <osMutexNew+0x102>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800465c:	69fb      	ldr	r3, [r7, #28]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004684:	f3ef 8305 	mrs	r3, IPSR
 8004688:	60bb      	str	r3, [r7, #8]
  return(result);
 800468a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004690:	f06f 0305 	mvn.w	r3, #5
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e02c      	b.n	80046f2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800469e:	f06f 0303 	mvn.w	r3, #3
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e025      	b.n	80046f2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d011      	beq.n	80046d0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	6938      	ldr	r0, [r7, #16]
 80046b0:	f000 fb08 	bl	8004cc4 <xQueueTakeMutexRecursive>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d01b      	beq.n	80046f2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80046c0:	f06f 0301 	mvn.w	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e014      	b.n	80046f2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80046c8:	f06f 0302 	mvn.w	r3, #2
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e010      	b.n	80046f2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	6938      	ldr	r0, [r7, #16]
 80046d4:	f000 fda6 	bl	8005224 <xQueueSemaphoreTake>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d009      	beq.n	80046f2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80046e4:	f06f 0301 	mvn.w	r3, #1
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e002      	b.n	80046f2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80046ec:	f06f 0302 	mvn.w	r3, #2
 80046f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80046f2:	697b      	ldr	r3, [r7, #20]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004718:	f3ef 8305 	mrs	r3, IPSR
 800471c:	60bb      	str	r3, [r7, #8]
  return(result);
 800471e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <osMutexRelease+0x30>
    stat = osErrorISR;
 8004724:	f06f 0305 	mvn.w	r3, #5
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	e01f      	b.n	800476c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004732:	f06f 0303 	mvn.w	r3, #3
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e018      	b.n	800476c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004740:	6938      	ldr	r0, [r7, #16]
 8004742:	f000 fa8b 	bl	8004c5c <xQueueGiveMutexRecursive>
 8004746:	4603      	mov	r3, r0
 8004748:	2b01      	cmp	r3, #1
 800474a:	d00f      	beq.n	800476c <osMutexRelease+0x70>
        stat = osErrorResource;
 800474c:	f06f 0302 	mvn.w	r3, #2
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e00b      	b.n	800476c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004754:	2300      	movs	r3, #0
 8004756:	2200      	movs	r2, #0
 8004758:	2100      	movs	r1, #0
 800475a:	6938      	ldr	r0, [r7, #16]
 800475c:	f000 fae8 	bl	8004d30 <xQueueGenericSend>
 8004760:	4603      	mov	r3, r0
 8004762:	2b01      	cmp	r3, #1
 8004764:	d002      	beq.n	800476c <osMutexRelease+0x70>
        stat = osErrorResource;
 8004766:	f06f 0302 	mvn.w	r3, #2
 800476a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800476c:	697b      	ldr	r3, [r7, #20]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004788:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4a06      	ldr	r2, [pc, #24]	; (80047a8 <vApplicationGetIdleTaskMemory+0x30>)
 800478e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	601a      	str	r2, [r3, #0]
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000210 	.word	0x20000210
 80047a8:	200002b8 	.word	0x200002b8

080047ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a07      	ldr	r2, [pc, #28]	; (80047d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80047bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a06      	ldr	r2, [pc, #24]	; (80047dc <vApplicationGetTimerTaskMemory+0x30>)
 80047c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ca:	601a      	str	r2, [r3, #0]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	200004b8 	.word	0x200004b8
 80047dc:	20000560 	.word	0x20000560

080047e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f103 0208 	add.w	r2, r3, #8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f04f 32ff 	mov.w	r2, #4294967295
 80047f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f103 0208 	add.w	r2, r3, #8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f103 0208 	add.w	r2, r3, #8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004882:	b480      	push	{r7}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d103      	bne.n	80048a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e00c      	b.n	80048bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3308      	adds	r3, #8
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e002      	b.n	80048b0 <vListInsert+0x2e>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d2f6      	bcs.n	80048aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	601a      	str	r2, [r3, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6892      	ldr	r2, [r2, #8]
 800490a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6852      	ldr	r2, [r2, #4]
 8004914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d103      	bne.n	8004928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	1e5a      	subs	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004972:	f002 fb97 	bl	80070a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	3b01      	subs	r3, #1
 80049a4:	68f9      	ldr	r1, [r7, #12]
 80049a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	441a      	add	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	22ff      	movs	r2, #255	; 0xff
 80049b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	22ff      	movs	r2, #255	; 0xff
 80049be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d114      	bne.n	80049f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01a      	beq.n	8004a06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3310      	adds	r3, #16
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 fb3d 	bl	8006054 <xTaskRemoveFromEventList>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d012      	beq.n	8004a06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049e0:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <xQueueGenericReset+0xcc>)
 80049e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	e009      	b.n	8004a06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3310      	adds	r3, #16
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fef2 	bl	80047e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3324      	adds	r3, #36	; 0x24
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff feed 	bl	80047e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a06:	f002 fb7d 	bl	8007104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a0a:	2301      	movs	r3, #1
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08e      	sub	sp, #56	; 0x38
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <xQueueGenericCreateStatic+0x52>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <xQueueGenericCreateStatic+0x56>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <xQueueGenericCreateStatic+0x58>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	623b      	str	r3, [r7, #32]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <xQueueGenericCreateStatic+0x7e>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueGenericCreateStatic+0x82>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueGenericCreateStatic+0x84>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	61fb      	str	r3, [r7, #28]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ab6:	2350      	movs	r3, #80	; 0x50
 8004ab8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b50      	cmp	r3, #80	; 0x50
 8004abe:	d00a      	beq.n	8004ad6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	61bb      	str	r3, [r7, #24]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ad6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f83f 	bl	8004b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3730      	adds	r7, #48	; 0x30
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	4613      	mov	r3, r2
 8004b14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	613b      	str	r3, [r7, #16]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	3350      	adds	r3, #80	; 0x50
 8004b40:	4618      	mov	r0, r3
 8004b42:	f002 fbd1 	bl	80072e8 <pvPortMalloc>
 8004b46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d011      	beq.n	8004b72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	3350      	adds	r3, #80	; 0x50
 8004b56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b60:	79fa      	ldrb	r2, [r7, #7]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f805 	bl	8004b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b72:	69bb      	ldr	r3, [r7, #24]
	}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d103      	bne.n	8004b98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e002      	b.n	8004b9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004baa:	2101      	movs	r1, #1
 8004bac:	69b8      	ldr	r0, [r7, #24]
 8004bae:	f7ff fecb 	bl	8004948 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00e      	beq.n	8004bee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004be2:	2300      	movs	r3, #0
 8004be4:	2200      	movs	r2, #0
 8004be6:	2100      	movs	r1, #0
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f8a1 	bl	8004d30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c00:	2301      	movs	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6939      	ldr	r1, [r7, #16]
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f7ff ff7a 	bl	8004b08 <xQueueGenericCreate>
 8004c14:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff ffd3 	bl	8004bc2 <prvInitialiseMutex>

		return xNewQueue;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
	}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b088      	sub	sp, #32
 8004c2a:	af02      	add	r7, sp, #8
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	6039      	str	r1, [r7, #0]
 8004c30:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c32:	2301      	movs	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	2300      	movs	r3, #0
 8004c38:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	6939      	ldr	r1, [r7, #16]
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f7ff fee7 	bl	8004a18 <xQueueGenericCreateStatic>
 8004c4a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff ffb8 	bl	8004bc2 <prvInitialiseMutex>

		return xNewQueue;
 8004c52:	68fb      	ldr	r3, [r7, #12]
	}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	60fb      	str	r3, [r7, #12]
}
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	689c      	ldr	r4, [r3, #8]
 8004c88:	f001 fba6 	bl	80063d8 <xTaskGetCurrentTaskHandle>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	429c      	cmp	r4, r3
 8004c90:	d111      	bne.n	8004cb6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	1e5a      	subs	r2, r3, #1
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	6938      	ldr	r0, [r7, #16]
 8004cac:	f000 f840 	bl	8004d30 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e001      	b.n	8004cba <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004cba:	697b      	ldr	r3, [r7, #20]
	}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd90      	pop	{r4, r7, pc}

08004cc4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	60fb      	str	r3, [r7, #12]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	689c      	ldr	r4, [r3, #8]
 8004cf2:	f001 fb71 	bl	80063d8 <xTaskGetCurrentTaskHandle>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	d107      	bne.n	8004d0c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004d06:	2301      	movs	r3, #1
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e00c      	b.n	8004d26 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	6938      	ldr	r0, [r7, #16]
 8004d10:	f000 fa88 	bl	8005224 <xQueueSemaphoreTake>
 8004d14:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004d26:	697b      	ldr	r3, [r7, #20]
	}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd90      	pop	{r4, r7, pc}

08004d30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08e      	sub	sp, #56	; 0x38
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xQueueGenericSend+0x32>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <xQueueGenericSend+0x40>
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <xQueueGenericSend+0x44>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <xQueueGenericSend+0x46>
 8004d74:	2300      	movs	r3, #0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <xQueueGenericSend+0x60>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d103      	bne.n	8004d9e <xQueueGenericSend+0x6e>
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <xQueueGenericSend+0x72>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <xQueueGenericSend+0x74>
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xQueueGenericSend+0x8e>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	623b      	str	r3, [r7, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dbe:	f001 fb1b 	bl	80063f8 <xTaskGetSchedulerState>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <xQueueGenericSend+0x9e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <xQueueGenericSend+0xa2>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <xQueueGenericSend+0xa4>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xQueueGenericSend+0xbe>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61fb      	str	r3, [r7, #28]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dee:	f002 f959 	bl	80070a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <xQueueGenericSend+0xd4>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d129      	bne.n	8004e58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0a:	f000 fb2f 	bl	800546c <prvCopyDataToQueue>
 8004e0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	3324      	adds	r3, #36	; 0x24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 f919 	bl	8006054 <xTaskRemoveFromEventList>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e28:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <xQueueGenericSend+0x1f8>)
 8004e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	e00a      	b.n	8004e50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e40:	4b39      	ldr	r3, [pc, #228]	; (8004f28 <xQueueGenericSend+0x1f8>)
 8004e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e50:	f002 f958 	bl	8007104 <vPortExitCritical>
				return pdPASS;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e063      	b.n	8004f20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e5e:	f002 f951 	bl	8007104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e05c      	b.n	8004f20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e6c:	f107 0314 	add.w	r3, r7, #20
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 f953 	bl	800611c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e76:	2301      	movs	r3, #1
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e7a:	f002 f943 	bl	8007104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e7e:	f000 febf 	bl	8005c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e82:	f002 f90f 	bl	80070a4 <vPortEnterCritical>
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e8c:	b25b      	sxtb	r3, r3
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d103      	bne.n	8004e9c <xQueueGenericSend+0x16c>
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea2:	b25b      	sxtb	r3, r3
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d103      	bne.n	8004eb2 <xQueueGenericSend+0x182>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb2:	f002 f927 	bl	8007104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eb6:	1d3a      	adds	r2, r7, #4
 8004eb8:	f107 0314 	add.w	r3, r7, #20
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 f942 	bl	8006148 <xTaskCheckForTimeOut>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d124      	bne.n	8004f14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ecc:	f000 fbc6 	bl	800565c <prvIsQueueFull>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d018      	beq.n	8004f08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	3310      	adds	r3, #16
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 f868 	bl	8005fb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ee6:	f000 fb51 	bl	800558c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004eea:	f000 fe97 	bl	8005c1c <xTaskResumeAll>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f47f af7c 	bne.w	8004dee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <xQueueGenericSend+0x1f8>)
 8004ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	e772      	b.n	8004dee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f0a:	f000 fb3f 	bl	800558c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f0e:	f000 fe85 	bl	8005c1c <xTaskResumeAll>
 8004f12:	e76c      	b.n	8004dee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f16:	f000 fb39 	bl	800558c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f1a:	f000 fe7f 	bl	8005c1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3738      	adds	r7, #56	; 0x38
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b090      	sub	sp, #64	; 0x40
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <xQueueGenericSendFromISR+0x3c>
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <xQueueGenericSendFromISR+0x40>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <xQueueGenericSendFromISR+0x42>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d103      	bne.n	8004f96 <xQueueGenericSendFromISR+0x6a>
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <xQueueGenericSendFromISR+0x6e>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <xQueueGenericSendFromISR+0x70>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	623b      	str	r3, [r7, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fb6:	f002 f957 	bl	8007268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fba:	f3ef 8211 	mrs	r2, BASEPRI
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	61fa      	str	r2, [r7, #28]
 8004fd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d302      	bcc.n	8004fe8 <xQueueGenericSendFromISR+0xbc>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d12f      	bne.n	8005048 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ffe:	f000 fa35 	bl	800546c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005002:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d112      	bne.n	8005032 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d016      	beq.n	8005042 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	3324      	adds	r3, #36	; 0x24
 8005018:	4618      	mov	r0, r3
 800501a:	f001 f81b 	bl	8006054 <xTaskRemoveFromEventList>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e007      	b.n	8005042 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005032:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005036:	3301      	adds	r3, #1
 8005038:	b2db      	uxtb	r3, r3
 800503a:	b25a      	sxtb	r2, r3
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005042:	2301      	movs	r3, #1
 8005044:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005046:	e001      	b.n	800504c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005048:	2300      	movs	r3, #0
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005056:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800505a:	4618      	mov	r0, r3
 800505c:	3740      	adds	r7, #64	; 0x40
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	; 0x30
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005070:	2300      	movs	r3, #0
 8005072:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <xQueueReceive+0x30>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	623b      	str	r3, [r7, #32]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <xQueueReceive+0x3e>
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <xQueueReceive+0x42>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <xQueueReceive+0x44>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <xQueueReceive+0x5e>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	61fb      	str	r3, [r7, #28]
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050c2:	f001 f999 	bl	80063f8 <xTaskGetSchedulerState>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <xQueueReceive+0x6e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <xQueueReceive+0x72>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <xQueueReceive+0x74>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueReceive+0x8e>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	61bb      	str	r3, [r7, #24]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050f2:	f001 ffd7 	bl	80070a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01f      	beq.n	8005142 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005106:	f000 fa1b 	bl	8005540 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	1e5a      	subs	r2, r3, #1
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00f      	beq.n	800513a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	3310      	adds	r3, #16
 800511e:	4618      	mov	r0, r3
 8005120:	f000 ff98 	bl	8006054 <xTaskRemoveFromEventList>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800512a:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <xQueueReceive+0x1bc>)
 800512c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800513a:	f001 ffe3 	bl	8007104 <vPortExitCritical>
				return pdPASS;
 800513e:	2301      	movs	r3, #1
 8005140:	e069      	b.n	8005216 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005148:	f001 ffdc 	bl	8007104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800514c:	2300      	movs	r3, #0
 800514e:	e062      	b.n	8005216 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005156:	f107 0310 	add.w	r3, r7, #16
 800515a:	4618      	mov	r0, r3
 800515c:	f000 ffde 	bl	800611c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005164:	f001 ffce 	bl	8007104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005168:	f000 fd4a 	bl	8005c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800516c:	f001 ff9a 	bl	80070a4 <vPortEnterCritical>
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005176:	b25b      	sxtb	r3, r3
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d103      	bne.n	8005186 <xQueueReceive+0x122>
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800518c:	b25b      	sxtb	r3, r3
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d103      	bne.n	800519c <xQueueReceive+0x138>
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800519c:	f001 ffb2 	bl	8007104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051a0:	1d3a      	adds	r2, r7, #4
 80051a2:	f107 0310 	add.w	r3, r7, #16
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 ffcd 	bl	8006148 <xTaskCheckForTimeOut>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d123      	bne.n	80051fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051b6:	f000 fa3b 	bl	8005630 <prvIsQueueEmpty>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d017      	beq.n	80051f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	3324      	adds	r3, #36	; 0x24
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fef3 	bl	8005fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d0:	f000 f9dc 	bl	800558c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051d4:	f000 fd22 	bl	8005c1c <xTaskResumeAll>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d189      	bne.n	80050f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80051de:	4b10      	ldr	r3, [pc, #64]	; (8005220 <xQueueReceive+0x1bc>)
 80051e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	e780      	b.n	80050f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f2:	f000 f9cb 	bl	800558c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051f6:	f000 fd11 	bl	8005c1c <xTaskResumeAll>
 80051fa:	e77a      	b.n	80050f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051fe:	f000 f9c5 	bl	800558c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005202:	f000 fd0b 	bl	8005c1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005208:	f000 fa12 	bl	8005630 <prvIsQueueEmpty>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	f43f af6f 	beq.w	80050f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005214:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005216:	4618      	mov	r0, r3
 8005218:	3730      	adds	r7, #48	; 0x30
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	e000ed04 	.word	0xe000ed04

08005224 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08e      	sub	sp, #56	; 0x38
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	623b      	str	r3, [r7, #32]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	61fb      	str	r3, [r7, #28]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005274:	f001 f8c0 	bl	80063f8 <xTaskGetSchedulerState>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <xQueueSemaphoreTake+0x60>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <xQueueSemaphoreTake+0x64>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <xQueueSemaphoreTake+0x66>
 8005288:	2300      	movs	r3, #0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	61bb      	str	r3, [r7, #24]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052a4:	f001 fefe 	bl	80070a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d024      	beq.n	80052fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	1e5a      	subs	r2, r3, #1
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80052c4:	f001 fa0e 	bl	80066e4 <pvTaskIncrementMutexHeldCount>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00f      	beq.n	80052f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	3310      	adds	r3, #16
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 feba 	bl	8006054 <xTaskRemoveFromEventList>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052e6:	4b54      	ldr	r3, [pc, #336]	; (8005438 <xQueueSemaphoreTake+0x214>)
 80052e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052f6:	f001 ff05 	bl	8007104 <vPortExitCritical>
				return pdPASS;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e097      	b.n	800542e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d111      	bne.n	8005328 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	617b      	str	r3, [r7, #20]
}
 800531c:	bf00      	nop
 800531e:	e7fe      	b.n	800531e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005320:	f001 fef0 	bl	8007104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005324:	2300      	movs	r3, #0
 8005326:	e082      	b.n	800542e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fef2 	bl	800611c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005338:	2301      	movs	r3, #1
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800533c:	f001 fee2 	bl	8007104 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005340:	f000 fc5e 	bl	8005c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005344:	f001 feae 	bl	80070a4 <vPortEnterCritical>
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800534e:	b25b      	sxtb	r3, r3
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d103      	bne.n	800535e <xQueueSemaphoreTake+0x13a>
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005364:	b25b      	sxtb	r3, r3
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d103      	bne.n	8005374 <xQueueSemaphoreTake+0x150>
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005374:	f001 fec6 	bl	8007104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005378:	463a      	mov	r2, r7
 800537a:	f107 030c 	add.w	r3, r7, #12
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fee1 	bl	8006148 <xTaskCheckForTimeOut>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d132      	bne.n	80053f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800538c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800538e:	f000 f94f 	bl	8005630 <prvIsQueueEmpty>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d026      	beq.n	80053e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80053a0:	f001 fe80 	bl	80070a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 f843 	bl	8006434 <xTaskPriorityInherit>
 80053ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80053b0:	f001 fea8 	bl	8007104 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	3324      	adds	r3, #36	; 0x24
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	4611      	mov	r1, r2
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fdf9 	bl	8005fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053c4:	f000 f8e2 	bl	800558c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053c8:	f000 fc28 	bl	8005c1c <xTaskResumeAll>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f47f af68 	bne.w	80052a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80053d4:	4b18      	ldr	r3, [pc, #96]	; (8005438 <xQueueSemaphoreTake+0x214>)
 80053d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	e75e      	b.n	80052a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80053e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053e8:	f000 f8d0 	bl	800558c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ec:	f000 fc16 	bl	8005c1c <xTaskResumeAll>
 80053f0:	e758      	b.n	80052a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80053f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053f4:	f000 f8ca 	bl	800558c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053f8:	f000 fc10 	bl	8005c1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053fe:	f000 f917 	bl	8005630 <prvIsQueueEmpty>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	f43f af4d 	beq.w	80052a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00d      	beq.n	800542c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005410:	f001 fe48 	bl	80070a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005416:	f000 f811 	bl	800543c <prvGetDisinheritPriorityAfterTimeout>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005422:	4618      	mov	r0, r3
 8005424:	f001 f8dc 	bl	80065e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005428:	f001 fe6c 	bl	8007104 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800542c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800542e:	4618      	mov	r0, r3
 8005430:	3738      	adds	r7, #56	; 0x38
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d006      	beq.n	800545a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e001      	b.n	800545e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800545e:	68fb      	ldr	r3, [r7, #12]
	}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10d      	bne.n	80054a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d14d      	bne.n	800552e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f001 f834 	bl	8006504 <xTaskPriorityDisinherit>
 800549c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	e043      	b.n	800552e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d119      	bne.n	80054e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6858      	ldr	r0, [r3, #4]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	461a      	mov	r2, r3
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	f002 fae9 	bl	8007a8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	441a      	add	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d32b      	bcc.n	800552e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	e026      	b.n	800552e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68d8      	ldr	r0, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	461a      	mov	r2, r3
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	f002 facf 	bl	8007a8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	425b      	negs	r3, r3
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d207      	bcs.n	800551c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	425b      	negs	r3, r3
 8005516:	441a      	add	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d105      	bne.n	800552e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	3b01      	subs	r3, #1
 800552c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005536:	697b      	ldr	r3, [r7, #20]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d018      	beq.n	8005584 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	441a      	add	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d303      	bcc.n	8005574 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68d9      	ldr	r1, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	461a      	mov	r2, r3
 800557e:	6838      	ldr	r0, [r7, #0]
 8005580:	f002 fa85 	bl	8007a8e <memcpy>
	}
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005594:	f001 fd86 	bl	80070a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800559e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055a0:	e011      	b.n	80055c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d012      	beq.n	80055d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3324      	adds	r3, #36	; 0x24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fd50 	bl	8006054 <xTaskRemoveFromEventList>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055ba:	f000 fe27 	bl	800620c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dce9      	bgt.n	80055a2 <prvUnlockQueue+0x16>
 80055ce:	e000      	b.n	80055d2 <prvUnlockQueue+0x46>
					break;
 80055d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	22ff      	movs	r2, #255	; 0xff
 80055d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055da:	f001 fd93 	bl	8007104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055de:	f001 fd61 	bl	80070a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055ea:	e011      	b.n	8005610 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d012      	beq.n	800561a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3310      	adds	r3, #16
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fd2b 	bl	8006054 <xTaskRemoveFromEventList>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005604:	f000 fe02 	bl	800620c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005608:	7bbb      	ldrb	r3, [r7, #14]
 800560a:	3b01      	subs	r3, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005614:	2b00      	cmp	r3, #0
 8005616:	dce9      	bgt.n	80055ec <prvUnlockQueue+0x60>
 8005618:	e000      	b.n	800561c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800561a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	22ff      	movs	r2, #255	; 0xff
 8005620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005624:	f001 fd6e 	bl	8007104 <vPortExitCritical>
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005638:	f001 fd34 	bl	80070a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	2b00      	cmp	r3, #0
 8005642:	d102      	bne.n	800564a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005644:	2301      	movs	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e001      	b.n	800564e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800564e:	f001 fd59 	bl	8007104 <vPortExitCritical>

	return xReturn;
 8005652:	68fb      	ldr	r3, [r7, #12]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005664:	f001 fd1e 	bl	80070a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005670:	429a      	cmp	r2, r3
 8005672:	d102      	bne.n	800567a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005674:	2301      	movs	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e001      	b.n	800567e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800567e:	f001 fd41 	bl	8007104 <vPortExitCritical>

	return xReturn;
 8005682:	68fb      	ldr	r3, [r7, #12]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e014      	b.n	80056c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800569c:	4a0f      	ldr	r2, [pc, #60]	; (80056dc <vQueueAddToRegistry+0x50>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056a8:	490c      	ldr	r1, [pc, #48]	; (80056dc <vQueueAddToRegistry+0x50>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <vQueueAddToRegistry+0x50>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4413      	add	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056be:	e006      	b.n	80056ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3301      	adds	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b07      	cmp	r3, #7
 80056ca:	d9e7      	bls.n	800569c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000960 	.word	0x20000960

080056e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056f0:	f001 fcd8 	bl	80070a4 <vPortEnterCritical>
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056fa:	b25b      	sxtb	r3, r3
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d103      	bne.n	800570a <vQueueWaitForMessageRestricted+0x2a>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005710:	b25b      	sxtb	r3, r3
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d103      	bne.n	8005720 <vQueueWaitForMessageRestricted+0x40>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005720:	f001 fcf0 	bl	8007104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	3324      	adds	r3, #36	; 0x24
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fc61 	bl	8005ffc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800573a:	6978      	ldr	r0, [r7, #20]
 800573c:	f7ff ff26 	bl	800558c <prvUnlockQueue>
	}
 8005740:	bf00      	nop
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08e      	sub	sp, #56	; 0x38
 800574c:	af04      	add	r7, sp, #16
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xTaskCreateStatic+0x2a>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	623b      	str	r3, [r7, #32]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <xTaskCreateStatic+0x46>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	61fb      	str	r3, [r7, #28]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800578e:	23a8      	movs	r3, #168	; 0xa8
 8005790:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2ba8      	cmp	r3, #168	; 0xa8
 8005796:	d00a      	beq.n	80057ae <xTaskCreateStatic+0x66>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	61bb      	str	r3, [r7, #24]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01e      	beq.n	80057f4 <xTaskCreateStatic+0xac>
 80057b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01b      	beq.n	80057f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057ce:	2300      	movs	r3, #0
 80057d0:	9303      	str	r3, [sp, #12]
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	f107 0314 	add.w	r3, r7, #20
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f850 	bl	800588c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ee:	f000 f8f3 	bl	80059d8 <prvAddNewTaskToReadyList>
 80057f2:	e001      	b.n	80057f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057f8:	697b      	ldr	r3, [r7, #20]
	}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3728      	adds	r7, #40	; 0x28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005802:	b580      	push	{r7, lr}
 8005804:	b08c      	sub	sp, #48	; 0x30
 8005806:	af04      	add	r7, sp, #16
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	603b      	str	r3, [r7, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4618      	mov	r0, r3
 8005818:	f001 fd66 	bl	80072e8 <pvPortMalloc>
 800581c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00e      	beq.n	8005842 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005824:	20a8      	movs	r0, #168	; 0xa8
 8005826:	f001 fd5f 	bl	80072e8 <pvPortMalloc>
 800582a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
 8005838:	e005      	b.n	8005846 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800583a:	6978      	ldr	r0, [r7, #20]
 800583c:	f001 fe20 	bl	8007480 <vPortFree>
 8005840:	e001      	b.n	8005846 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d017      	beq.n	800587c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	2300      	movs	r3, #0
 8005858:	9303      	str	r3, [sp, #12]
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	9302      	str	r3, [sp, #8]
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f80e 	bl	800588c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005870:	69f8      	ldr	r0, [r7, #28]
 8005872:	f000 f8b1 	bl	80059d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005876:	2301      	movs	r3, #1
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	e002      	b.n	8005882 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800587c:	f04f 33ff 	mov.w	r3, #4294967295
 8005880:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005882:	69bb      	ldr	r3, [r7, #24]
	}
 8005884:	4618      	mov	r0, r3
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	461a      	mov	r2, r3
 80058a4:	21a5      	movs	r1, #165	; 0xa5
 80058a6:	f002 f820 	bl	80078ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058b4:	3b01      	subs	r3, #1
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f023 0307 	bic.w	r3, r3, #7
 80058c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	617b      	str	r3, [r7, #20]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01f      	beq.n	800592a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	e012      	b.n	8005916 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	7819      	ldrb	r1, [r3, #0]
 80058f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	3334      	adds	r3, #52	; 0x34
 8005900:	460a      	mov	r2, r1
 8005902:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b0f      	cmp	r3, #15
 800591a:	d9e9      	bls.n	80058f0 <prvInitialiseNewTask+0x64>
 800591c:	e000      	b.n	8005920 <prvInitialiseNewTask+0x94>
			{
				break;
 800591e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005928:	e003      	b.n	8005932 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	2b37      	cmp	r3, #55	; 0x37
 8005936:	d901      	bls.n	800593c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005938:	2337      	movs	r3, #55	; 0x37
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005940:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005946:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	2200      	movs	r2, #0
 800594c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	3304      	adds	r3, #4
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe ff64 	bl	8004820 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	3318      	adds	r3, #24
 800595c:	4618      	mov	r0, r3
 800595e:	f7fe ff5f 	bl	8004820 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005966:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005976:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	3354      	adds	r3, #84	; 0x54
 800598c:	224c      	movs	r2, #76	; 0x4c
 800598e:	2100      	movs	r1, #0
 8005990:	4618      	mov	r0, r3
 8005992:	f001 ffaa 	bl	80078ea <memset>
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	4a0c      	ldr	r2, [pc, #48]	; (80059cc <prvInitialiseNewTask+0x140>)
 800599a:	659a      	str	r2, [r3, #88]	; 0x58
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	4a0c      	ldr	r2, [pc, #48]	; (80059d0 <prvInitialiseNewTask+0x144>)
 80059a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	4a0b      	ldr	r2, [pc, #44]	; (80059d4 <prvInitialiseNewTask+0x148>)
 80059a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	69b8      	ldr	r0, [r7, #24]
 80059ae:	f001 fa4f 	bl	8006e50 <pxPortInitialiseStack>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c4:	bf00      	nop
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20004bf4 	.word	0x20004bf4
 80059d0:	20004c5c 	.word	0x20004c5c
 80059d4:	20004cc4 	.word	0x20004cc4

080059d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059e0:	f001 fb60 	bl	80070a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059e4:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <prvAddNewTaskToReadyList+0xc4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3301      	adds	r3, #1
 80059ea:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <prvAddNewTaskToReadyList+0xc4>)
 80059ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059ee:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <prvAddNewTaskToReadyList+0xc8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059f6:	4a2a      	ldr	r2, [pc, #168]	; (8005aa0 <prvAddNewTaskToReadyList+0xc8>)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059fc:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <prvAddNewTaskToReadyList+0xc4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d110      	bne.n	8005a26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a04:	f000 fc26 	bl	8006254 <prvInitialiseTaskLists>
 8005a08:	e00d      	b.n	8005a26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a0a:	4b26      	ldr	r3, [pc, #152]	; (8005aa4 <prvAddNewTaskToReadyList+0xcc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a12:	4b23      	ldr	r3, [pc, #140]	; (8005aa0 <prvAddNewTaskToReadyList+0xc8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d802      	bhi.n	8005a26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a20:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <prvAddNewTaskToReadyList+0xc8>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a26:	4b20      	ldr	r3, [pc, #128]	; (8005aa8 <prvAddNewTaskToReadyList+0xd0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <prvAddNewTaskToReadyList+0xd0>)
 8005a2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <prvAddNewTaskToReadyList+0xd0>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3c:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <prvAddNewTaskToReadyList+0xd4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d903      	bls.n	8005a4c <prvAddNewTaskToReadyList+0x74>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	4a18      	ldr	r2, [pc, #96]	; (8005aac <prvAddNewTaskToReadyList+0xd4>)
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <prvAddNewTaskToReadyList+0xd8>)
 8005a5a:	441a      	add	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f7fe fee9 	bl	800483a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a68:	f001 fb4c 	bl	8007104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <prvAddNewTaskToReadyList+0xcc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00e      	beq.n	8005a92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a74:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <prvAddNewTaskToReadyList+0xc8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d207      	bcs.n	8005a92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a82:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <prvAddNewTaskToReadyList+0xdc>)
 8005a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000e74 	.word	0x20000e74
 8005aa0:	200009a0 	.word	0x200009a0
 8005aa4:	20000e80 	.word	0x20000e80
 8005aa8:	20000e90 	.word	0x20000e90
 8005aac:	20000e7c 	.word	0x20000e7c
 8005ab0:	200009a4 	.word	0x200009a4
 8005ab4:	e000ed04 	.word	0xe000ed04

08005ab8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d017      	beq.n	8005afa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <vTaskDelay+0x60>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <vTaskDelay+0x30>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	60bb      	str	r3, [r7, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	e7fe      	b.n	8005ae6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ae8:	f000 f88a 	bl	8005c00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005aec:	2100      	movs	r1, #0
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fe0c 	bl	800670c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005af4:	f000 f892 	bl	8005c1c <xTaskResumeAll>
 8005af8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d107      	bne.n	8005b10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <vTaskDelay+0x64>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000e9c 	.word	0x20000e9c
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b2e:	463a      	mov	r2, r7
 8005b30:	1d39      	adds	r1, r7, #4
 8005b32:	f107 0308 	add.w	r3, r7, #8
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe fe1e 	bl	8004778 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	9202      	str	r2, [sp, #8]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	2300      	movs	r3, #0
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	4924      	ldr	r1, [pc, #144]	; (8005be0 <vTaskStartScheduler+0xc0>)
 8005b50:	4824      	ldr	r0, [pc, #144]	; (8005be4 <vTaskStartScheduler+0xc4>)
 8005b52:	f7ff fdf9 	bl	8005748 <xTaskCreateStatic>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4a23      	ldr	r2, [pc, #140]	; (8005be8 <vTaskStartScheduler+0xc8>)
 8005b5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b5c:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <vTaskStartScheduler+0xc8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b64:	2301      	movs	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e001      	b.n	8005b6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d102      	bne.n	8005b7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b74:	f000 fe1e 	bl	80067b4 <xTimerCreateTimerTask>
 8005b78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d11b      	bne.n	8005bb8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	613b      	str	r3, [r7, #16]
}
 8005b92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b94:	4b15      	ldr	r3, [pc, #84]	; (8005bec <vTaskStartScheduler+0xcc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3354      	adds	r3, #84	; 0x54
 8005b9a:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <vTaskStartScheduler+0xd0>)
 8005b9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b9e:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <vTaskStartScheduler+0xd4>)
 8005ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <vTaskStartScheduler+0xd8>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <vTaskStartScheduler+0xdc>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bb2:	f001 f9d5 	bl	8006f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bb6:	e00e      	b.n	8005bd6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d10a      	bne.n	8005bd6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60fb      	str	r3, [r7, #12]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <vTaskStartScheduler+0xb4>
}
 8005bd6:	bf00      	nop
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	0800867c 	.word	0x0800867c
 8005be4:	08006225 	.word	0x08006225
 8005be8:	20000e98 	.word	0x20000e98
 8005bec:	200009a0 	.word	0x200009a0
 8005bf0:	20000068 	.word	0x20000068
 8005bf4:	20000e94 	.word	0x20000e94
 8005bf8:	20000e80 	.word	0x20000e80
 8005bfc:	20000e78 	.word	0x20000e78

08005c00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c04:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <vTaskSuspendAll+0x18>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	4a03      	ldr	r2, [pc, #12]	; (8005c18 <vTaskSuspendAll+0x18>)
 8005c0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c0e:	bf00      	nop
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	20000e9c 	.word	0x20000e9c

08005c1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c2a:	4b42      	ldr	r3, [pc, #264]	; (8005d34 <xTaskResumeAll+0x118>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	603b      	str	r3, [r7, #0]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c48:	f001 fa2c 	bl	80070a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c4c:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <xTaskResumeAll+0x118>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	4a38      	ldr	r2, [pc, #224]	; (8005d34 <xTaskResumeAll+0x118>)
 8005c54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c56:	4b37      	ldr	r3, [pc, #220]	; (8005d34 <xTaskResumeAll+0x118>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d162      	bne.n	8005d24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <xTaskResumeAll+0x11c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d05e      	beq.n	8005d24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c66:	e02f      	b.n	8005cc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c68:	4b34      	ldr	r3, [pc, #208]	; (8005d3c <xTaskResumeAll+0x120>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3318      	adds	r3, #24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fe fe3d 	bl	80048f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fe38 	bl	80048f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c88:	4b2d      	ldr	r3, [pc, #180]	; (8005d40 <xTaskResumeAll+0x124>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d903      	bls.n	8005c98 <xTaskResumeAll+0x7c>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <xTaskResumeAll+0x124>)
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <xTaskResumeAll+0x128>)
 8005ca6:	441a      	add	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f7fe fdc3 	bl	800483a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb8:	4b23      	ldr	r3, [pc, #140]	; (8005d48 <xTaskResumeAll+0x12c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005cc2:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <xTaskResumeAll+0x130>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <xTaskResumeAll+0x120>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1cb      	bne.n	8005c68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cd6:	f000 fb5f 	bl	8006398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cda:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <xTaskResumeAll+0x134>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d010      	beq.n	8005d08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ce6:	f000 f847 	bl	8005d78 <xTaskIncrementTick>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005cf0:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <xTaskResumeAll+0x130>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1f1      	bne.n	8005ce6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d02:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <xTaskResumeAll+0x134>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d08:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <xTaskResumeAll+0x130>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <xTaskResumeAll+0x138>)
 8005d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d24:	f001 f9ee 	bl	8007104 <vPortExitCritical>

	return xAlreadyYielded;
 8005d28:	68bb      	ldr	r3, [r7, #8]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000e9c 	.word	0x20000e9c
 8005d38:	20000e74 	.word	0x20000e74
 8005d3c:	20000e34 	.word	0x20000e34
 8005d40:	20000e7c 	.word	0x20000e7c
 8005d44:	200009a4 	.word	0x200009a4
 8005d48:	200009a0 	.word	0x200009a0
 8005d4c:	20000e88 	.word	0x20000e88
 8005d50:	20000e84 	.word	0x20000e84
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d5e:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <xTaskGetTickCount+0x1c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d64:	687b      	ldr	r3, [r7, #4]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000e78 	.word	0x20000e78

08005d78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d82:	4b4f      	ldr	r3, [pc, #316]	; (8005ec0 <xTaskIncrementTick+0x148>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f040 808f 	bne.w	8005eaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d8c:	4b4d      	ldr	r3, [pc, #308]	; (8005ec4 <xTaskIncrementTick+0x14c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3301      	adds	r3, #1
 8005d92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d94:	4a4b      	ldr	r2, [pc, #300]	; (8005ec4 <xTaskIncrementTick+0x14c>)
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d120      	bne.n	8005de2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005da0:	4b49      	ldr	r3, [pc, #292]	; (8005ec8 <xTaskIncrementTick+0x150>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	603b      	str	r3, [r7, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <xTaskIncrementTick+0x46>
 8005dc0:	4b41      	ldr	r3, [pc, #260]	; (8005ec8 <xTaskIncrementTick+0x150>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	4b41      	ldr	r3, [pc, #260]	; (8005ecc <xTaskIncrementTick+0x154>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a3f      	ldr	r2, [pc, #252]	; (8005ec8 <xTaskIncrementTick+0x150>)
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4a3f      	ldr	r2, [pc, #252]	; (8005ecc <xTaskIncrementTick+0x154>)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <xTaskIncrementTick+0x158>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	4a3d      	ldr	r2, [pc, #244]	; (8005ed0 <xTaskIncrementTick+0x158>)
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	f000 fadb 	bl	8006398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005de2:	4b3c      	ldr	r3, [pc, #240]	; (8005ed4 <xTaskIncrementTick+0x15c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d349      	bcc.n	8005e80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dec:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <xTaskIncrementTick+0x150>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df6:	4b37      	ldr	r3, [pc, #220]	; (8005ed4 <xTaskIncrementTick+0x15c>)
 8005df8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfc:	601a      	str	r2, [r3, #0]
					break;
 8005dfe:	e03f      	b.n	8005e80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e00:	4b31      	ldr	r3, [pc, #196]	; (8005ec8 <xTaskIncrementTick+0x150>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d203      	bcs.n	8005e20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e18:	4a2e      	ldr	r2, [pc, #184]	; (8005ed4 <xTaskIncrementTick+0x15c>)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e1e:	e02f      	b.n	8005e80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fe fd65 	bl	80048f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	3318      	adds	r3, #24
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe fd5c 	bl	80048f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <xTaskIncrementTick+0x160>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d903      	bls.n	8005e50 <xTaskIncrementTick+0xd8>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <xTaskIncrementTick+0x160>)
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4a1f      	ldr	r2, [pc, #124]	; (8005edc <xTaskIncrementTick+0x164>)
 8005e5e:	441a      	add	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	3304      	adds	r3, #4
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f7fe fce7 	bl	800483a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <xTaskIncrementTick+0x168>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d3b8      	bcc.n	8005dec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e7e:	e7b5      	b.n	8005dec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e80:	4b17      	ldr	r3, [pc, #92]	; (8005ee0 <xTaskIncrementTick+0x168>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	4915      	ldr	r1, [pc, #84]	; (8005edc <xTaskIncrementTick+0x164>)
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d901      	bls.n	8005e9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e9c:	4b11      	ldr	r3, [pc, #68]	; (8005ee4 <xTaskIncrementTick+0x16c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e004      	b.n	8005eb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <xTaskIncrementTick+0x170>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ee8 <xTaskIncrementTick+0x170>)
 8005eb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005eb4:	697b      	ldr	r3, [r7, #20]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000e9c 	.word	0x20000e9c
 8005ec4:	20000e78 	.word	0x20000e78
 8005ec8:	20000e2c 	.word	0x20000e2c
 8005ecc:	20000e30 	.word	0x20000e30
 8005ed0:	20000e8c 	.word	0x20000e8c
 8005ed4:	20000e94 	.word	0x20000e94
 8005ed8:	20000e7c 	.word	0x20000e7c
 8005edc:	200009a4 	.word	0x200009a4
 8005ee0:	200009a0 	.word	0x200009a0
 8005ee4:	20000e88 	.word	0x20000e88
 8005ee8:	20000e84 	.word	0x20000e84

08005eec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ef2:	4b2a      	ldr	r3, [pc, #168]	; (8005f9c <vTaskSwitchContext+0xb0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005efa:	4b29      	ldr	r3, [pc, #164]	; (8005fa0 <vTaskSwitchContext+0xb4>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f00:	e046      	b.n	8005f90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <vTaskSwitchContext+0xb4>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f08:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <vTaskSwitchContext+0xb8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	e010      	b.n	8005f32 <vTaskSwitchContext+0x46>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <vTaskSwitchContext+0x40>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	607b      	str	r3, [r7, #4]
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <vTaskSwitchContext+0x3e>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	491d      	ldr	r1, [pc, #116]	; (8005fa8 <vTaskSwitchContext+0xbc>)
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0e4      	beq.n	8005f10 <vTaskSwitchContext+0x24>
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <vTaskSwitchContext+0xbc>)
 8005f52:	4413      	add	r3, r2
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	605a      	str	r2, [r3, #4]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	3308      	adds	r3, #8
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d104      	bne.n	8005f76 <vTaskSwitchContext+0x8a>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4a0b      	ldr	r2, [pc, #44]	; (8005fac <vTaskSwitchContext+0xc0>)
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <vTaskSwitchContext+0xb8>)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <vTaskSwitchContext+0xc0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3354      	adds	r3, #84	; 0x54
 8005f8c:	4a08      	ldr	r2, [pc, #32]	; (8005fb0 <vTaskSwitchContext+0xc4>)
 8005f8e:	6013      	str	r3, [r2, #0]
}
 8005f90:	bf00      	nop
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	20000e9c 	.word	0x20000e9c
 8005fa0:	20000e88 	.word	0x20000e88
 8005fa4:	20000e7c 	.word	0x20000e7c
 8005fa8:	200009a4 	.word	0x200009a4
 8005fac:	200009a0 	.word	0x200009a0
 8005fb0:	20000068 	.word	0x20000068

08005fb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60fb      	str	r3, [r7, #12]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fda:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <vTaskPlaceOnEventList+0x44>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3318      	adds	r3, #24
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fe fc4d 	bl	8004882 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fe8:	2101      	movs	r1, #1
 8005fea:	6838      	ldr	r0, [r7, #0]
 8005fec:	f000 fb8e 	bl	800670c <prvAddCurrentTaskToDelayedList>
}
 8005ff0:	bf00      	nop
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	200009a0 	.word	0x200009a0

08005ffc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	617b      	str	r3, [r7, #20]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006024:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <vTaskPlaceOnEventListRestricted+0x54>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3318      	adds	r3, #24
 800602a:	4619      	mov	r1, r3
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7fe fc04 	bl	800483a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006038:	f04f 33ff 	mov.w	r3, #4294967295
 800603c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	68b8      	ldr	r0, [r7, #8]
 8006042:	f000 fb63 	bl	800670c <prvAddCurrentTaskToDelayedList>
	}
 8006046:	bf00      	nop
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	200009a0 	.word	0x200009a0

08006054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	60fb      	str	r3, [r7, #12]
}
 800607c:	bf00      	nop
 800607e:	e7fe      	b.n	800607e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3318      	adds	r3, #24
 8006084:	4618      	mov	r0, r3
 8006086:	f7fe fc35 	bl	80048f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800608a:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <xTaskRemoveFromEventList+0xb0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d11d      	bne.n	80060ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	3304      	adds	r3, #4
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe fc2c 	bl	80048f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	4b19      	ldr	r3, [pc, #100]	; (8006108 <xTaskRemoveFromEventList+0xb4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d903      	bls.n	80060b0 <xTaskRemoveFromEventList+0x5c>
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	4a16      	ldr	r2, [pc, #88]	; (8006108 <xTaskRemoveFromEventList+0xb4>)
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4a13      	ldr	r2, [pc, #76]	; (800610c <xTaskRemoveFromEventList+0xb8>)
 80060be:	441a      	add	r2, r3
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7fe fbb7 	bl	800483a <vListInsertEnd>
 80060cc:	e005      	b.n	80060da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	3318      	adds	r3, #24
 80060d2:	4619      	mov	r1, r3
 80060d4:	480e      	ldr	r0, [pc, #56]	; (8006110 <xTaskRemoveFromEventList+0xbc>)
 80060d6:	f7fe fbb0 	bl	800483a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <xTaskRemoveFromEventList+0xc0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d905      	bls.n	80060f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <xTaskRemoveFromEventList+0xc4>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	e001      	b.n	80060f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060f8:	697b      	ldr	r3, [r7, #20]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000e9c 	.word	0x20000e9c
 8006108:	20000e7c 	.word	0x20000e7c
 800610c:	200009a4 	.word	0x200009a4
 8006110:	20000e34 	.word	0x20000e34
 8006114:	200009a0 	.word	0x200009a0
 8006118:	20000e88 	.word	0x20000e88

0800611c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <vTaskInternalSetTimeOutState+0x24>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <vTaskInternalSetTimeOutState+0x28>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	605a      	str	r2, [r3, #4]
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	20000e8c 	.word	0x20000e8c
 8006144:	20000e78 	.word	0x20000e78

08006148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	613b      	str	r3, [r7, #16]
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800618a:	f000 ff8b 	bl	80070a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800618e:	4b1d      	ldr	r3, [pc, #116]	; (8006204 <xTaskCheckForTimeOut+0xbc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d102      	bne.n	80061ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	e023      	b.n	80061f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <xTaskCheckForTimeOut+0xc0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d007      	beq.n	80061ca <xTaskCheckForTimeOut+0x82>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d302      	bcc.n	80061ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	e015      	b.n	80061f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d20b      	bcs.n	80061ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff ff9b 	bl	800611c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	e004      	b.n	80061f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061f2:	2301      	movs	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061f6:	f000 ff85 	bl	8007104 <vPortExitCritical>

	return xReturn;
 80061fa:	69fb      	ldr	r3, [r7, #28]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000e78 	.word	0x20000e78
 8006208:	20000e8c 	.word	0x20000e8c

0800620c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006210:	4b03      	ldr	r3, [pc, #12]	; (8006220 <vTaskMissedYield+0x14>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
}
 8006216:	bf00      	nop
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	20000e88 	.word	0x20000e88

08006224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800622c:	f000 f852 	bl	80062d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006230:	4b06      	ldr	r3, [pc, #24]	; (800624c <prvIdleTask+0x28>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d9f9      	bls.n	800622c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <prvIdleTask+0x2c>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006248:	e7f0      	b.n	800622c <prvIdleTask+0x8>
 800624a:	bf00      	nop
 800624c:	200009a4 	.word	0x200009a4
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800625a:	2300      	movs	r3, #0
 800625c:	607b      	str	r3, [r7, #4]
 800625e:	e00c      	b.n	800627a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4a12      	ldr	r2, [pc, #72]	; (80062b4 <prvInitialiseTaskLists+0x60>)
 800626c:	4413      	add	r3, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fab6 	bl	80047e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3301      	adds	r3, #1
 8006278:	607b      	str	r3, [r7, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b37      	cmp	r3, #55	; 0x37
 800627e:	d9ef      	bls.n	8006260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006280:	480d      	ldr	r0, [pc, #52]	; (80062b8 <prvInitialiseTaskLists+0x64>)
 8006282:	f7fe faad 	bl	80047e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006286:	480d      	ldr	r0, [pc, #52]	; (80062bc <prvInitialiseTaskLists+0x68>)
 8006288:	f7fe faaa 	bl	80047e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800628c:	480c      	ldr	r0, [pc, #48]	; (80062c0 <prvInitialiseTaskLists+0x6c>)
 800628e:	f7fe faa7 	bl	80047e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006292:	480c      	ldr	r0, [pc, #48]	; (80062c4 <prvInitialiseTaskLists+0x70>)
 8006294:	f7fe faa4 	bl	80047e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006298:	480b      	ldr	r0, [pc, #44]	; (80062c8 <prvInitialiseTaskLists+0x74>)
 800629a:	f7fe faa1 	bl	80047e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800629e:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <prvInitialiseTaskLists+0x78>)
 80062a0:	4a05      	ldr	r2, [pc, #20]	; (80062b8 <prvInitialiseTaskLists+0x64>)
 80062a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <prvInitialiseTaskLists+0x7c>)
 80062a6:	4a05      	ldr	r2, [pc, #20]	; (80062bc <prvInitialiseTaskLists+0x68>)
 80062a8:	601a      	str	r2, [r3, #0]
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	200009a4 	.word	0x200009a4
 80062b8:	20000e04 	.word	0x20000e04
 80062bc:	20000e18 	.word	0x20000e18
 80062c0:	20000e34 	.word	0x20000e34
 80062c4:	20000e48 	.word	0x20000e48
 80062c8:	20000e60 	.word	0x20000e60
 80062cc:	20000e2c 	.word	0x20000e2c
 80062d0:	20000e30 	.word	0x20000e30

080062d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062da:	e019      	b.n	8006310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062dc:	f000 fee2 	bl	80070a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e0:	4b10      	ldr	r3, [pc, #64]	; (8006324 <prvCheckTasksWaitingTermination+0x50>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe fb01 	bl	80048f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062f2:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <prvCheckTasksWaitingTermination+0x54>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	4a0b      	ldr	r2, [pc, #44]	; (8006328 <prvCheckTasksWaitingTermination+0x54>)
 80062fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062fc:	4b0b      	ldr	r3, [pc, #44]	; (800632c <prvCheckTasksWaitingTermination+0x58>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3b01      	subs	r3, #1
 8006302:	4a0a      	ldr	r2, [pc, #40]	; (800632c <prvCheckTasksWaitingTermination+0x58>)
 8006304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006306:	f000 fefd 	bl	8007104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f810 	bl	8006330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <prvCheckTasksWaitingTermination+0x58>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e1      	bne.n	80062dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000e48 	.word	0x20000e48
 8006328:	20000e74 	.word	0x20000e74
 800632c:	20000e5c 	.word	0x20000e5c

08006330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3354      	adds	r3, #84	; 0x54
 800633c:	4618      	mov	r0, r3
 800633e:	f001 faed 	bl	800791c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006348:	2b00      	cmp	r3, #0
 800634a:	d108      	bne.n	800635e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	4618      	mov	r0, r3
 8006352:	f001 f895 	bl	8007480 <vPortFree>
				vPortFree( pxTCB );
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 f892 	bl	8007480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800635c:	e018      	b.n	8006390 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006364:	2b01      	cmp	r3, #1
 8006366:	d103      	bne.n	8006370 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 f889 	bl	8007480 <vPortFree>
	}
 800636e:	e00f      	b.n	8006390 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006376:	2b02      	cmp	r3, #2
 8006378:	d00a      	beq.n	8006390 <prvDeleteTCB+0x60>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	60fb      	str	r3, [r7, #12]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <prvDeleteTCB+0x5e>
	}
 8006390:	bf00      	nop
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <prvResetNextTaskUnblockTime+0x38>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <prvResetNextTaskUnblockTime+0x3c>)
 80063aa:	f04f 32ff 	mov.w	r2, #4294967295
 80063ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063b0:	e008      	b.n	80063c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b2:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <prvResetNextTaskUnblockTime+0x38>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <prvResetNextTaskUnblockTime+0x3c>)
 80063c2:	6013      	str	r3, [r2, #0]
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20000e2c 	.word	0x20000e2c
 80063d4:	20000e94 	.word	0x20000e94

080063d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80063de:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <xTaskGetCurrentTaskHandle+0x1c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80063e4:	687b      	ldr	r3, [r7, #4]
	}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	200009a0 	.word	0x200009a0

080063f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063fe:	4b0b      	ldr	r3, [pc, #44]	; (800642c <xTaskGetSchedulerState+0x34>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006406:	2301      	movs	r3, #1
 8006408:	607b      	str	r3, [r7, #4]
 800640a:	e008      	b.n	800641e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800640c:	4b08      	ldr	r3, [pc, #32]	; (8006430 <xTaskGetSchedulerState+0x38>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006414:	2302      	movs	r3, #2
 8006416:	607b      	str	r3, [r7, #4]
 8006418:	e001      	b.n	800641e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800641a:	2300      	movs	r3, #0
 800641c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800641e:	687b      	ldr	r3, [r7, #4]
	}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	20000e80 	.word	0x20000e80
 8006430:	20000e9c 	.word	0x20000e9c

08006434 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d051      	beq.n	80064ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644e:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <xTaskPriorityInherit+0xc4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	429a      	cmp	r2, r3
 8006456:	d241      	bcs.n	80064dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	db06      	blt.n	800646e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <xTaskPriorityInherit+0xc4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6959      	ldr	r1, [r3, #20]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4a1f      	ldr	r2, [pc, #124]	; (80064fc <xTaskPriorityInherit+0xc8>)
 8006480:	4413      	add	r3, r2
 8006482:	4299      	cmp	r1, r3
 8006484:	d122      	bne.n	80064cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	3304      	adds	r3, #4
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe fa32 	bl	80048f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006490:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <xTaskPriorityInherit+0xc4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649e:	4b18      	ldr	r3, [pc, #96]	; (8006500 <xTaskPriorityInherit+0xcc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d903      	bls.n	80064ae <xTaskPriorityInherit+0x7a>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	4a15      	ldr	r2, [pc, #84]	; (8006500 <xTaskPriorityInherit+0xcc>)
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b2:	4613      	mov	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4a10      	ldr	r2, [pc, #64]	; (80064fc <xTaskPriorityInherit+0xc8>)
 80064bc:	441a      	add	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f7fe f9b8 	bl	800483a <vListInsertEnd>
 80064ca:	e004      	b.n	80064d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <xTaskPriorityInherit+0xc4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80064d6:	2301      	movs	r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	e008      	b.n	80064ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064e0:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <xTaskPriorityInherit+0xc4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d201      	bcs.n	80064ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80064ea:	2301      	movs	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064ee:	68fb      	ldr	r3, [r7, #12]
	}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	200009a0 	.word	0x200009a0
 80064fc:	200009a4 	.word	0x200009a4
 8006500:	20000e7c 	.word	0x20000e7c

08006504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006510:	2300      	movs	r3, #0
 8006512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d056      	beq.n	80065c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800651a:	4b2e      	ldr	r3, [pc, #184]	; (80065d4 <xTaskPriorityDisinherit+0xd0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	429a      	cmp	r2, r3
 8006522:	d00a      	beq.n	800653a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	60fb      	str	r3, [r7, #12]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	60bb      	str	r3, [r7, #8]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655c:	1e5a      	subs	r2, r3, #1
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656a:	429a      	cmp	r2, r3
 800656c:	d02c      	beq.n	80065c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006572:	2b00      	cmp	r3, #0
 8006574:	d128      	bne.n	80065c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	3304      	adds	r3, #4
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe f9ba 	bl	80048f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <xTaskPriorityDisinherit+0xd4>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d903      	bls.n	80065a8 <xTaskPriorityDisinherit+0xa4>
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a0c      	ldr	r2, [pc, #48]	; (80065d8 <xTaskPriorityDisinherit+0xd4>)
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4a09      	ldr	r2, [pc, #36]	; (80065dc <xTaskPriorityDisinherit+0xd8>)
 80065b6:	441a      	add	r2, r3
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f7fe f93b 	bl	800483a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065c8:	697b      	ldr	r3, [r7, #20]
	}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	200009a0 	.word	0x200009a0
 80065d8:	20000e7c 	.word	0x20000e7c
 80065dc:	200009a4 	.word	0x200009a4

080065e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80065ee:	2301      	movs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d06a      	beq.n	80066ce <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d902      	bls.n	8006626 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	e002      	b.n	800662c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	429a      	cmp	r2, r3
 8006634:	d04b      	beq.n	80066ce <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	429a      	cmp	r2, r3
 800663e:	d146      	bne.n	80066ce <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006640:	4b25      	ldr	r3, [pc, #148]	; (80066d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	429a      	cmp	r2, r3
 8006648:	d10a      	bne.n	8006660 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	60bb      	str	r3, [r7, #8]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	69fa      	ldr	r2, [r7, #28]
 800666a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	db04      	blt.n	800667e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	6959      	ldr	r1, [r3, #20]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4a13      	ldr	r2, [pc, #76]	; (80066dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800668e:	4413      	add	r3, r2
 8006690:	4299      	cmp	r1, r3
 8006692:	d11c      	bne.n	80066ce <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	3304      	adds	r3, #4
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe f92b 	bl	80048f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d903      	bls.n	80066b2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	4a0c      	ldr	r2, [pc, #48]	; (80066e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4a07      	ldr	r2, [pc, #28]	; (80066dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80066c0:	441a      	add	r2, r3
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f7fe f8b6 	bl	800483a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066ce:	bf00      	nop
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	200009a0 	.word	0x200009a0
 80066dc:	200009a4 	.word	0x200009a4
 80066e0:	20000e7c 	.word	0x20000e7c

080066e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80066e8:	4b07      	ldr	r3, [pc, #28]	; (8006708 <pvTaskIncrementMutexHeldCount+0x24>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <pvTaskIncrementMutexHeldCount+0x24>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066f6:	3201      	adds	r2, #1
 80066f8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <pvTaskIncrementMutexHeldCount+0x24>)
 80066fc:	681b      	ldr	r3, [r3, #0]
	}
 80066fe:	4618      	mov	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	200009a0 	.word	0x200009a0

0800670c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006716:	4b21      	ldr	r3, [pc, #132]	; (800679c <prvAddCurrentTaskToDelayedList+0x90>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800671c:	4b20      	ldr	r3, [pc, #128]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3304      	adds	r3, #4
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe f8e6 	bl	80048f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d10a      	bne.n	8006746 <prvAddCurrentTaskToDelayedList+0x3a>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006736:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3304      	adds	r3, #4
 800673c:	4619      	mov	r1, r3
 800673e:	4819      	ldr	r0, [pc, #100]	; (80067a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006740:	f7fe f87b 	bl	800483a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006744:	e026      	b.n	8006794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4413      	add	r3, r2
 800674c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	429a      	cmp	r2, r3
 800675c:	d209      	bcs.n	8006772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800675e:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3304      	adds	r3, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4610      	mov	r0, r2
 800676c:	f7fe f889 	bl	8004882 <vListInsert>
}
 8006770:	e010      	b.n	8006794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006772:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3304      	adds	r3, #4
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f7fe f87f 	bl	8004882 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006784:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	d202      	bcs.n	8006794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800678e:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6013      	str	r3, [r2, #0]
}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000e78 	.word	0x20000e78
 80067a0:	200009a0 	.word	0x200009a0
 80067a4:	20000e60 	.word	0x20000e60
 80067a8:	20000e30 	.word	0x20000e30
 80067ac:	20000e2c 	.word	0x20000e2c
 80067b0:	20000e94 	.word	0x20000e94

080067b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08a      	sub	sp, #40	; 0x28
 80067b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067be:	f000 fb07 	bl	8006dd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <xTimerCreateTimerTask+0x80>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d021      	beq.n	800680e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067d2:	1d3a      	adds	r2, r7, #4
 80067d4:	f107 0108 	add.w	r1, r7, #8
 80067d8:	f107 030c 	add.w	r3, r7, #12
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fd ffe5 	bl	80047ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	9202      	str	r2, [sp, #8]
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	2302      	movs	r3, #2
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	2300      	movs	r3, #0
 80067f2:	460a      	mov	r2, r1
 80067f4:	4910      	ldr	r1, [pc, #64]	; (8006838 <xTimerCreateTimerTask+0x84>)
 80067f6:	4811      	ldr	r0, [pc, #68]	; (800683c <xTimerCreateTimerTask+0x88>)
 80067f8:	f7fe ffa6 	bl	8005748 <xTaskCreateStatic>
 80067fc:	4603      	mov	r3, r0
 80067fe:	4a10      	ldr	r2, [pc, #64]	; (8006840 <xTimerCreateTimerTask+0x8c>)
 8006800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006802:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <xTimerCreateTimerTask+0x8c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800680a:	2301      	movs	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	613b      	str	r3, [r7, #16]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800682a:	697b      	ldr	r3, [r7, #20]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000ed0 	.word	0x20000ed0
 8006838:	08008684 	.word	0x08008684
 800683c:	08006979 	.word	0x08006979
 8006840:	20000ed4 	.word	0x20000ed4

08006844 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006852:	2300      	movs	r3, #0
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xTimerGenericCommand+0x2e>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	623b      	str	r3, [r7, #32]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006872:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <xTimerGenericCommand+0x98>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d02a      	beq.n	80068d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b05      	cmp	r3, #5
 800688a:	dc18      	bgt.n	80068be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800688c:	f7ff fdb4 	bl	80063f8 <xTaskGetSchedulerState>
 8006890:	4603      	mov	r3, r0
 8006892:	2b02      	cmp	r3, #2
 8006894:	d109      	bne.n	80068aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006896:	4b11      	ldr	r3, [pc, #68]	; (80068dc <xTimerGenericCommand+0x98>)
 8006898:	6818      	ldr	r0, [r3, #0]
 800689a:	f107 0110 	add.w	r1, r7, #16
 800689e:	2300      	movs	r3, #0
 80068a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a2:	f7fe fa45 	bl	8004d30 <xQueueGenericSend>
 80068a6:	6278      	str	r0, [r7, #36]	; 0x24
 80068a8:	e012      	b.n	80068d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068aa:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <xTimerGenericCommand+0x98>)
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	f107 0110 	add.w	r1, r7, #16
 80068b2:	2300      	movs	r3, #0
 80068b4:	2200      	movs	r2, #0
 80068b6:	f7fe fa3b 	bl	8004d30 <xQueueGenericSend>
 80068ba:	6278      	str	r0, [r7, #36]	; 0x24
 80068bc:	e008      	b.n	80068d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068be:	4b07      	ldr	r3, [pc, #28]	; (80068dc <xTimerGenericCommand+0x98>)
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	f107 0110 	add.w	r1, r7, #16
 80068c6:	2300      	movs	r3, #0
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	f7fe fb2f 	bl	8004f2c <xQueueGenericSendFromISR>
 80068ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3728      	adds	r7, #40	; 0x28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000ed0 	.word	0x20000ed0

080068e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ea:	4b22      	ldr	r3, [pc, #136]	; (8006974 <prvProcessExpiredTimer+0x94>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	3304      	adds	r3, #4
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fd fffb 	bl	80048f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	2b00      	cmp	r3, #0
 800690a:	d022      	beq.n	8006952 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	18d1      	adds	r1, r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	6978      	ldr	r0, [r7, #20]
 800691a:	f000 f8d1 	bl	8006ac0 <prvInsertTimerInActiveList>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01f      	beq.n	8006964 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006924:	2300      	movs	r3, #0
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	2300      	movs	r3, #0
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	2100      	movs	r1, #0
 800692e:	6978      	ldr	r0, [r7, #20]
 8006930:	f7ff ff88 	bl	8006844 <xTimerGenericCommand>
 8006934:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d113      	bne.n	8006964 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60fb      	str	r3, [r7, #12]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	b2da      	uxtb	r2, r3
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	6978      	ldr	r0, [r7, #20]
 800696a:	4798      	blx	r3
}
 800696c:	bf00      	nop
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000ec8 	.word	0x20000ec8

08006978 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006980:	f107 0308 	add.w	r3, r7, #8
 8006984:	4618      	mov	r0, r3
 8006986:	f000 f857 	bl	8006a38 <prvGetNextExpireTime>
 800698a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4619      	mov	r1, r3
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 f803 	bl	800699c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006996:	f000 f8d5 	bl	8006b44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800699a:	e7f1      	b.n	8006980 <prvTimerTask+0x8>

0800699c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069a6:	f7ff f92b 	bl	8005c00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069aa:	f107 0308 	add.w	r3, r7, #8
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f866 	bl	8006a80 <prvSampleTimeNow>
 80069b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d130      	bne.n	8006a1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <prvProcessTimerOrBlockTask+0x3c>
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d806      	bhi.n	80069d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069ca:	f7ff f927 	bl	8005c1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff ff85 	bl	80068e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069d6:	e024      	b.n	8006a22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d008      	beq.n	80069f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069de:	4b13      	ldr	r3, [pc, #76]	; (8006a2c <prvProcessTimerOrBlockTask+0x90>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <prvProcessTimerOrBlockTask+0x50>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <prvProcessTimerOrBlockTask+0x52>
 80069ec:	2300      	movs	r3, #0
 80069ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <prvProcessTimerOrBlockTask+0x94>)
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	4619      	mov	r1, r3
 80069fe:	f7fe fe6f 	bl	80056e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a02:	f7ff f90b 	bl	8005c1c <xTaskResumeAll>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <prvProcessTimerOrBlockTask+0x98>)
 8006a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	f3bf 8f6f 	isb	sy
}
 8006a1c:	e001      	b.n	8006a22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a1e:	f7ff f8fd 	bl	8005c1c <xTaskResumeAll>
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000ecc 	.word	0x20000ecc
 8006a30:	20000ed0 	.word	0x20000ed0
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a40:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <prvGetNextExpireTime+0x44>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <prvGetNextExpireTime+0x16>
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	e000      	b.n	8006a50 <prvGetNextExpireTime+0x18>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d105      	bne.n	8006a68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a5c:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <prvGetNextExpireTime+0x44>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e001      	b.n	8006a6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20000ec8 	.word	0x20000ec8

08006a80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a88:	f7ff f966 	bl	8005d58 <xTaskGetTickCount>
 8006a8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <prvSampleTimeNow+0x3c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d205      	bcs.n	8006aa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a98:	f000 f936 	bl	8006d08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	e002      	b.n	8006aaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006aaa:	4a04      	ldr	r2, [pc, #16]	; (8006abc <prvSampleTimeNow+0x3c>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000ed8 	.word	0x20000ed8

08006ac0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d812      	bhi.n	8006b0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d302      	bcc.n	8006afa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006af4:	2301      	movs	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e01b      	b.n	8006b32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006afa:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <prvInsertTimerInActiveList+0x7c>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7fd febc 	bl	8004882 <vListInsert>
 8006b0a:	e012      	b.n	8006b32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d206      	bcs.n	8006b22 <prvInsertTimerInActiveList+0x62>
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d302      	bcc.n	8006b22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	e007      	b.n	8006b32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b22:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <prvInsertTimerInActiveList+0x80>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f7fd fea8 	bl	8004882 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b32:	697b      	ldr	r3, [r7, #20]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20000ecc 	.word	0x20000ecc
 8006b40:	20000ec8 	.word	0x20000ec8

08006b44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08e      	sub	sp, #56	; 0x38
 8006b48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b4a:	e0ca      	b.n	8006ce2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da18      	bge.n	8006b84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b52:	1d3b      	adds	r3, r7, #4
 8006b54:	3304      	adds	r3, #4
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	61fb      	str	r3, [r7, #28]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b7a:	6850      	ldr	r0, [r2, #4]
 8006b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b7e:	6892      	ldr	r2, [r2, #8]
 8006b80:	4611      	mov	r1, r2
 8006b82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f2c0 80ab 	blt.w	8006ce2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fd fea9 	bl	80048f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff ff6b 	bl	8006a80 <prvSampleTimeNow>
 8006baa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b09      	cmp	r3, #9
 8006bb0:	f200 8096 	bhi.w	8006ce0 <prvProcessReceivedCommands+0x19c>
 8006bb4:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <prvProcessReceivedCommands+0x78>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006be5 	.word	0x08006be5
 8006bc8:	08006c59 	.word	0x08006c59
 8006bcc:	08006c6d 	.word	0x08006c6d
 8006bd0:	08006cb7 	.word	0x08006cb7
 8006bd4:	08006be5 	.word	0x08006be5
 8006bd8:	08006be5 	.word	0x08006be5
 8006bdc:	08006c59 	.word	0x08006c59
 8006be0:	08006c6d 	.word	0x08006c6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	18d1      	adds	r1, r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c04:	f7ff ff5c 	bl	8006ac0 <prvInsertTimerInActiveList>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d069      	beq.n	8006ce2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d05e      	beq.n	8006ce2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	441a      	add	r2, r3
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	2300      	movs	r3, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c36:	f7ff fe05 	bl	8006844 <xTimerGenericCommand>
 8006c3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d14f      	bne.n	8006ce2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	61bb      	str	r3, [r7, #24]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006c6a:	e03a      	b.n	8006ce2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	617b      	str	r3, [r7, #20]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	18d1      	adds	r1, r2, r3
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb0:	f7ff ff06 	bl	8006ac0 <prvInsertTimerInActiveList>
					break;
 8006cb4:	e015      	b.n	8006ce2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d103      	bne.n	8006ccc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc6:	f000 fbdb 	bl	8007480 <vPortFree>
 8006cca:	e00a      	b.n	8006ce2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cde:	e000      	b.n	8006ce2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006ce0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <prvProcessReceivedCommands+0x1c0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	1d39      	adds	r1, r7, #4
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe f9ba 	bl	8005064 <xQueueReceive>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f47f af2a 	bne.w	8006b4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	3730      	adds	r7, #48	; 0x30
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000ed0 	.word	0x20000ed0

08006d08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d0e:	e048      	b.n	8006da2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d10:	4b2d      	ldr	r3, [pc, #180]	; (8006dc8 <prvSwitchTimerLists+0xc0>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1a:	4b2b      	ldr	r3, [pc, #172]	; (8006dc8 <prvSwitchTimerLists+0xc0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fd fde3 	bl	80048f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d02e      	beq.n	8006da2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d90e      	bls.n	8006d74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d62:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <prvSwitchTimerLists+0xc0>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7fd fd88 	bl	8004882 <vListInsert>
 8006d72:	e016      	b.n	8006da2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d74:	2300      	movs	r3, #0
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff fd60 	bl	8006844 <xTimerGenericCommand>
 8006d84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	603b      	str	r3, [r7, #0]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006da2:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <prvSwitchTimerLists+0xc0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1b1      	bne.n	8006d10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <prvSwitchTimerLists+0xc0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <prvSwitchTimerLists+0xc4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <prvSwitchTimerLists+0xc0>)
 8006db8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006dba:	4a04      	ldr	r2, [pc, #16]	; (8006dcc <prvSwitchTimerLists+0xc4>)
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	6013      	str	r3, [r2, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20000ec8 	.word	0x20000ec8
 8006dcc:	20000ecc 	.word	0x20000ecc

08006dd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006dd6:	f000 f965 	bl	80070a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006dda:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <prvCheckForValidListAndQueue+0x60>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d120      	bne.n	8006e24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006de2:	4814      	ldr	r0, [pc, #80]	; (8006e34 <prvCheckForValidListAndQueue+0x64>)
 8006de4:	f7fd fcfc 	bl	80047e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006de8:	4813      	ldr	r0, [pc, #76]	; (8006e38 <prvCheckForValidListAndQueue+0x68>)
 8006dea:	f7fd fcf9 	bl	80047e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <prvCheckForValidListAndQueue+0x6c>)
 8006df0:	4a10      	ldr	r2, [pc, #64]	; (8006e34 <prvCheckForValidListAndQueue+0x64>)
 8006df2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006df4:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <prvCheckForValidListAndQueue+0x70>)
 8006df6:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <prvCheckForValidListAndQueue+0x68>)
 8006df8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <prvCheckForValidListAndQueue+0x74>)
 8006e00:	4a11      	ldr	r2, [pc, #68]	; (8006e48 <prvCheckForValidListAndQueue+0x78>)
 8006e02:	2110      	movs	r1, #16
 8006e04:	200a      	movs	r0, #10
 8006e06:	f7fd fe07 	bl	8004a18 <xQueueGenericCreateStatic>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4a08      	ldr	r2, [pc, #32]	; (8006e30 <prvCheckForValidListAndQueue+0x60>)
 8006e0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e10:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <prvCheckForValidListAndQueue+0x60>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <prvCheckForValidListAndQueue+0x60>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	490b      	ldr	r1, [pc, #44]	; (8006e4c <prvCheckForValidListAndQueue+0x7c>)
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fc34 	bl	800568c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e24:	f000 f96e 	bl	8007104 <vPortExitCritical>
}
 8006e28:	bf00      	nop
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000ed0 	.word	0x20000ed0
 8006e34:	20000ea0 	.word	0x20000ea0
 8006e38:	20000eb4 	.word	0x20000eb4
 8006e3c:	20000ec8 	.word	0x20000ec8
 8006e40:	20000ecc 	.word	0x20000ecc
 8006e44:	20000f7c 	.word	0x20000f7c
 8006e48:	20000edc 	.word	0x20000edc
 8006e4c:	0800868c 	.word	0x0800868c

08006e50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3b04      	subs	r3, #4
 8006e60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3b04      	subs	r3, #4
 8006e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3b04      	subs	r3, #4
 8006e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e80:	4a0c      	ldr	r2, [pc, #48]	; (8006eb4 <pxPortInitialiseStack+0x64>)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3b14      	subs	r3, #20
 8006e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3b04      	subs	r3, #4
 8006e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f06f 0202 	mvn.w	r2, #2
 8006e9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3b20      	subs	r3, #32
 8006ea4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	08006eb9 	.word	0x08006eb9

08006eb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ec2:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <prvTaskExitError+0x54>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eca:	d00a      	beq.n	8006ee2 <prvTaskExitError+0x2a>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	60fb      	str	r3, [r7, #12]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <prvTaskExitError+0x28>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	60bb      	str	r3, [r7, #8]
}
 8006ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ef6:	bf00      	nop
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0fc      	beq.n	8006ef8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	2000000c 	.word	0x2000000c

08006f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f10:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <pxCurrentTCBConst2>)
 8006f12:	6819      	ldr	r1, [r3, #0]
 8006f14:	6808      	ldr	r0, [r1, #0]
 8006f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1a:	f380 8809 	msr	PSP, r0
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f04f 0000 	mov.w	r0, #0
 8006f26:	f380 8811 	msr	BASEPRI, r0
 8006f2a:	4770      	bx	lr
 8006f2c:	f3af 8000 	nop.w

08006f30 <pxCurrentTCBConst2>:
 8006f30:	200009a0 	.word	0x200009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop

08006f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f38:	4808      	ldr	r0, [pc, #32]	; (8006f5c <prvPortStartFirstTask+0x24>)
 8006f3a:	6800      	ldr	r0, [r0, #0]
 8006f3c:	6800      	ldr	r0, [r0, #0]
 8006f3e:	f380 8808 	msr	MSP, r0
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f380 8814 	msr	CONTROL, r0
 8006f4a:	b662      	cpsie	i
 8006f4c:	b661      	cpsie	f
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	df00      	svc	0
 8006f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f5a:	bf00      	nop
 8006f5c:	e000ed08 	.word	0xe000ed08

08006f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f66:	4b46      	ldr	r3, [pc, #280]	; (8007080 <xPortStartScheduler+0x120>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a46      	ldr	r2, [pc, #280]	; (8007084 <xPortStartScheduler+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10a      	bne.n	8006f86 <xPortStartScheduler+0x26>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	613b      	str	r3, [r7, #16]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f86:	4b3e      	ldr	r3, [pc, #248]	; (8007080 <xPortStartScheduler+0x120>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a3f      	ldr	r2, [pc, #252]	; (8007088 <xPortStartScheduler+0x128>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10a      	bne.n	8006fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	60fb      	str	r3, [r7, #12]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fa6:	4b39      	ldr	r3, [pc, #228]	; (800708c <xPortStartScheduler+0x12c>)
 8006fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	22ff      	movs	r2, #255	; 0xff
 8006fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	4b31      	ldr	r3, [pc, #196]	; (8007090 <xPortStartScheduler+0x130>)
 8006fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fce:	4b31      	ldr	r3, [pc, #196]	; (8007094 <xPortStartScheduler+0x134>)
 8006fd0:	2207      	movs	r2, #7
 8006fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fd4:	e009      	b.n	8006fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006fd6:	4b2f      	ldr	r3, [pc, #188]	; (8007094 <xPortStartScheduler+0x134>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	4a2d      	ldr	r2, [pc, #180]	; (8007094 <xPortStartScheduler+0x134>)
 8006fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff2:	2b80      	cmp	r3, #128	; 0x80
 8006ff4:	d0ef      	beq.n	8006fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ff6:	4b27      	ldr	r3, [pc, #156]	; (8007094 <xPortStartScheduler+0x134>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1c3 0307 	rsb	r3, r3, #7
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d00a      	beq.n	8007018 <xPortStartScheduler+0xb8>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	60bb      	str	r3, [r7, #8]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007018:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <xPortStartScheduler+0x134>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	021b      	lsls	r3, r3, #8
 800701e:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <xPortStartScheduler+0x134>)
 8007020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007022:	4b1c      	ldr	r3, [pc, #112]	; (8007094 <xPortStartScheduler+0x134>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800702a:	4a1a      	ldr	r2, [pc, #104]	; (8007094 <xPortStartScheduler+0x134>)
 800702c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007036:	4b18      	ldr	r3, [pc, #96]	; (8007098 <xPortStartScheduler+0x138>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <xPortStartScheduler+0x138>)
 800703c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007042:	4b15      	ldr	r3, [pc, #84]	; (8007098 <xPortStartScheduler+0x138>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a14      	ldr	r2, [pc, #80]	; (8007098 <xPortStartScheduler+0x138>)
 8007048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800704c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800704e:	f000 f8dd 	bl	800720c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007052:	4b12      	ldr	r3, [pc, #72]	; (800709c <xPortStartScheduler+0x13c>)
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007058:	f000 f8fc 	bl	8007254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800705c:	4b10      	ldr	r3, [pc, #64]	; (80070a0 <xPortStartScheduler+0x140>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a0f      	ldr	r2, [pc, #60]	; (80070a0 <xPortStartScheduler+0x140>)
 8007062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007068:	f7ff ff66 	bl	8006f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800706c:	f7fe ff3e 	bl	8005eec <vTaskSwitchContext>
	prvTaskExitError();
 8007070:	f7ff ff22 	bl	8006eb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	e000ed00 	.word	0xe000ed00
 8007084:	410fc271 	.word	0x410fc271
 8007088:	410fc270 	.word	0x410fc270
 800708c:	e000e400 	.word	0xe000e400
 8007090:	20000fcc 	.word	0x20000fcc
 8007094:	20000fd0 	.word	0x20000fd0
 8007098:	e000ed20 	.word	0xe000ed20
 800709c:	2000000c 	.word	0x2000000c
 80070a0:	e000ef34 	.word	0xe000ef34

080070a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	607b      	str	r3, [r7, #4]
}
 80070bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <vPortEnterCritical+0x58>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	4a0d      	ldr	r2, [pc, #52]	; (80070fc <vPortEnterCritical+0x58>)
 80070c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070c8:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <vPortEnterCritical+0x58>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d10f      	bne.n	80070f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <vPortEnterCritical+0x5c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	603b      	str	r3, [r7, #0]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <vPortEnterCritical+0x4a>
	}
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	2000000c 	.word	0x2000000c
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <vPortExitCritical+0x50>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <vPortExitCritical+0x24>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	607b      	str	r3, [r7, #4]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007128:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <vPortExitCritical+0x50>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3b01      	subs	r3, #1
 800712e:	4a09      	ldr	r2, [pc, #36]	; (8007154 <vPortExitCritical+0x50>)
 8007130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007132:	4b08      	ldr	r3, [pc, #32]	; (8007154 <vPortExitCritical+0x50>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d105      	bne.n	8007146 <vPortExitCritical+0x42>
 800713a:	2300      	movs	r3, #0
 800713c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	f383 8811 	msr	BASEPRI, r3
}
 8007144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	2000000c 	.word	0x2000000c
	...

08007160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007160:	f3ef 8009 	mrs	r0, PSP
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <pxCurrentTCBConst>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	f01e 0f10 	tst.w	lr, #16
 8007170:	bf08      	it	eq
 8007172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007184:	f380 8811 	msr	BASEPRI, r0
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f7fe feac 	bl	8005eec <vTaskSwitchContext>
 8007194:	f04f 0000 	mov.w	r0, #0
 8007198:	f380 8811 	msr	BASEPRI, r0
 800719c:	bc09      	pop	{r0, r3}
 800719e:	6819      	ldr	r1, [r3, #0]
 80071a0:	6808      	ldr	r0, [r1, #0]
 80071a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a6:	f01e 0f10 	tst.w	lr, #16
 80071aa:	bf08      	it	eq
 80071ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071b0:	f380 8809 	msr	PSP, r0
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	f3af 8000 	nop.w

080071c0 <pxCurrentTCBConst>:
 80071c0:	200009a0 	.word	0x200009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop

080071c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
}
 80071e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071e2:	f7fe fdc9 	bl	8005d78 <xTaskIncrementTick>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <xPortSysTickHandler+0x40>)
 80071ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f383 8811 	msr	BASEPRI, r3
}
 80071fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <vPortSetupTimerInterrupt+0x34>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <vPortSetupTimerInterrupt+0x38>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800721c:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <vPortSetupTimerInterrupt+0x3c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a0a      	ldr	r2, [pc, #40]	; (800724c <vPortSetupTimerInterrupt+0x40>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	099b      	lsrs	r3, r3, #6
 8007228:	4a09      	ldr	r2, [pc, #36]	; (8007250 <vPortSetupTimerInterrupt+0x44>)
 800722a:	3b01      	subs	r3, #1
 800722c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800722e:	4b04      	ldr	r3, [pc, #16]	; (8007240 <vPortSetupTimerInterrupt+0x34>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	e000e010 	.word	0xe000e010
 8007244:	e000e018 	.word	0xe000e018
 8007248:	20000000 	.word	0x20000000
 800724c:	10624dd3 	.word	0x10624dd3
 8007250:	e000e014 	.word	0xe000e014

08007254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007264 <vPortEnableVFP+0x10>
 8007258:	6801      	ldr	r1, [r0, #0]
 800725a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800725e:	6001      	str	r1, [r0, #0]
 8007260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007262:	bf00      	nop
 8007264:	e000ed88 	.word	0xe000ed88

08007268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800726e:	f3ef 8305 	mrs	r3, IPSR
 8007272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b0f      	cmp	r3, #15
 8007278:	d914      	bls.n	80072a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800727a:	4a17      	ldr	r2, [pc, #92]	; (80072d8 <vPortValidateInterruptPriority+0x70>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007284:	4b15      	ldr	r3, [pc, #84]	; (80072dc <vPortValidateInterruptPriority+0x74>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	7afa      	ldrb	r2, [r7, #11]
 800728a:	429a      	cmp	r2, r3
 800728c:	d20a      	bcs.n	80072a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	607b      	str	r3, [r7, #4]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072a4:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <vPortValidateInterruptPriority+0x78>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072ac:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <vPortValidateInterruptPriority+0x7c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d90a      	bls.n	80072ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	603b      	str	r3, [r7, #0]
}
 80072c6:	bf00      	nop
 80072c8:	e7fe      	b.n	80072c8 <vPortValidateInterruptPriority+0x60>
	}
 80072ca:	bf00      	nop
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	e000e3f0 	.word	0xe000e3f0
 80072dc:	20000fcc 	.word	0x20000fcc
 80072e0:	e000ed0c 	.word	0xe000ed0c
 80072e4:	20000fd0 	.word	0x20000fd0

080072e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072f4:	f7fe fc84 	bl	8005c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072f8:	4b5b      	ldr	r3, [pc, #364]	; (8007468 <pvPortMalloc+0x180>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007300:	f000 f920 	bl	8007544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007304:	4b59      	ldr	r3, [pc, #356]	; (800746c <pvPortMalloc+0x184>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	f040 8093 	bne.w	8007438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01d      	beq.n	8007354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007318:	2208      	movs	r2, #8
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	2b00      	cmp	r3, #0
 8007328:	d014      	beq.n	8007354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f023 0307 	bic.w	r3, r3, #7
 8007330:	3308      	adds	r3, #8
 8007332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <pvPortMalloc+0x6c>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	617b      	str	r3, [r7, #20]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d06e      	beq.n	8007438 <pvPortMalloc+0x150>
 800735a:	4b45      	ldr	r3, [pc, #276]	; (8007470 <pvPortMalloc+0x188>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d869      	bhi.n	8007438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007364:	4b43      	ldr	r3, [pc, #268]	; (8007474 <pvPortMalloc+0x18c>)
 8007366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007368:	4b42      	ldr	r3, [pc, #264]	; (8007474 <pvPortMalloc+0x18c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800736e:	e004      	b.n	800737a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d903      	bls.n	800738c <pvPortMalloc+0xa4>
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f1      	bne.n	8007370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800738c:	4b36      	ldr	r3, [pc, #216]	; (8007468 <pvPortMalloc+0x180>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	429a      	cmp	r2, r3
 8007394:	d050      	beq.n	8007438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2208      	movs	r2, #8
 800739c:	4413      	add	r3, r2
 800739e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	2308      	movs	r3, #8
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d91f      	bls.n	80073f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <pvPortMalloc+0xf8>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	613b      	str	r3, [r7, #16]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	1ad2      	subs	r2, r2, r3
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073f2:	69b8      	ldr	r0, [r7, #24]
 80073f4:	f000 f908 	bl	8007608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073f8:	4b1d      	ldr	r3, [pc, #116]	; (8007470 <pvPortMalloc+0x188>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	4a1b      	ldr	r2, [pc, #108]	; (8007470 <pvPortMalloc+0x188>)
 8007404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007406:	4b1a      	ldr	r3, [pc, #104]	; (8007470 <pvPortMalloc+0x188>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <pvPortMalloc+0x190>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d203      	bcs.n	800741a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007412:	4b17      	ldr	r3, [pc, #92]	; (8007470 <pvPortMalloc+0x188>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a18      	ldr	r2, [pc, #96]	; (8007478 <pvPortMalloc+0x190>)
 8007418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <pvPortMalloc+0x184>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	431a      	orrs	r2, r3
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800742e:	4b13      	ldr	r3, [pc, #76]	; (800747c <pvPortMalloc+0x194>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3301      	adds	r3, #1
 8007434:	4a11      	ldr	r2, [pc, #68]	; (800747c <pvPortMalloc+0x194>)
 8007436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007438:	f7fe fbf0 	bl	8005c1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <pvPortMalloc+0x174>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60fb      	str	r3, [r7, #12]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <pvPortMalloc+0x172>
	return pvReturn;
 800745c:	69fb      	ldr	r3, [r7, #28]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3728      	adds	r7, #40	; 0x28
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20004bdc 	.word	0x20004bdc
 800746c:	20004bf0 	.word	0x20004bf0
 8007470:	20004be0 	.word	0x20004be0
 8007474:	20004bd4 	.word	0x20004bd4
 8007478:	20004be4 	.word	0x20004be4
 800747c:	20004be8 	.word	0x20004be8

08007480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d04d      	beq.n	800752e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007492:	2308      	movs	r3, #8
 8007494:	425b      	negs	r3, r3
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4413      	add	r3, r2
 800749a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	4b24      	ldr	r3, [pc, #144]	; (8007538 <vPortFree+0xb8>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <vPortFree+0x44>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	60fb      	str	r3, [r7, #12]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <vPortFree+0x62>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	60bb      	str	r3, [r7, #8]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	4b14      	ldr	r3, [pc, #80]	; (8007538 <vPortFree+0xb8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01e      	beq.n	800752e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d11a      	bne.n	800752e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <vPortFree+0xb8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	43db      	mvns	r3, r3
 8007502:	401a      	ands	r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007508:	f7fe fb7a 	bl	8005c00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	4b0a      	ldr	r3, [pc, #40]	; (800753c <vPortFree+0xbc>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4413      	add	r3, r2
 8007516:	4a09      	ldr	r2, [pc, #36]	; (800753c <vPortFree+0xbc>)
 8007518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800751a:	6938      	ldr	r0, [r7, #16]
 800751c:	f000 f874 	bl	8007608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007520:	4b07      	ldr	r3, [pc, #28]	; (8007540 <vPortFree+0xc0>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	4a06      	ldr	r2, [pc, #24]	; (8007540 <vPortFree+0xc0>)
 8007528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800752a:	f7fe fb77 	bl	8005c1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800752e:	bf00      	nop
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20004bf0 	.word	0x20004bf0
 800753c:	20004be0 	.word	0x20004be0
 8007540:	20004bec 	.word	0x20004bec

08007544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800754a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800754e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007550:	4b27      	ldr	r3, [pc, #156]	; (80075f0 <prvHeapInit+0xac>)
 8007552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00c      	beq.n	8007578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3307      	adds	r3, #7
 8007562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0307 	bic.w	r3, r3, #7
 800756a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <prvHeapInit+0xac>)
 8007574:	4413      	add	r3, r2
 8007576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800757c:	4a1d      	ldr	r2, [pc, #116]	; (80075f4 <prvHeapInit+0xb0>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007582:	4b1c      	ldr	r3, [pc, #112]	; (80075f4 <prvHeapInit+0xb0>)
 8007584:	2200      	movs	r2, #0
 8007586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4413      	add	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007590:	2208      	movs	r2, #8
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0307 	bic.w	r3, r3, #7
 800759e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4a15      	ldr	r2, [pc, #84]	; (80075f8 <prvHeapInit+0xb4>)
 80075a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075a6:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <prvHeapInit+0xb4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075ae:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <prvHeapInit+0xb4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075c4:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <prvHeapInit+0xb4>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <prvHeapInit+0xb8>)
 80075d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	4a09      	ldr	r2, [pc, #36]	; (8007600 <prvHeapInit+0xbc>)
 80075da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <prvHeapInit+0xc0>)
 80075de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075e2:	601a      	str	r2, [r3, #0]
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	20000fd4 	.word	0x20000fd4
 80075f4:	20004bd4 	.word	0x20004bd4
 80075f8:	20004bdc 	.word	0x20004bdc
 80075fc:	20004be4 	.word	0x20004be4
 8007600:	20004be0 	.word	0x20004be0
 8007604:	20004bf0 	.word	0x20004bf0

08007608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007610:	4b28      	ldr	r3, [pc, #160]	; (80076b4 <prvInsertBlockIntoFreeList+0xac>)
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	e002      	b.n	800761c <prvInsertBlockIntoFreeList+0x14>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d8f7      	bhi.n	8007616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	4413      	add	r3, r2
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d108      	bne.n	800764a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	441a      	add	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	441a      	add	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d118      	bne.n	8007690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d00d      	beq.n	8007686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	441a      	add	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e008      	b.n	8007698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007686:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e003      	b.n	8007698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	429a      	cmp	r2, r3
 800769e:	d002      	beq.n	80076a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20004bd4 	.word	0x20004bd4
 80076b8:	20004bdc 	.word	0x20004bdc

080076bc <std>:
 80076bc:	2300      	movs	r3, #0
 80076be:	b510      	push	{r4, lr}
 80076c0:	4604      	mov	r4, r0
 80076c2:	e9c0 3300 	strd	r3, r3, [r0]
 80076c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ca:	6083      	str	r3, [r0, #8]
 80076cc:	8181      	strh	r1, [r0, #12]
 80076ce:	6643      	str	r3, [r0, #100]	; 0x64
 80076d0:	81c2      	strh	r2, [r0, #14]
 80076d2:	6183      	str	r3, [r0, #24]
 80076d4:	4619      	mov	r1, r3
 80076d6:	2208      	movs	r2, #8
 80076d8:	305c      	adds	r0, #92	; 0x5c
 80076da:	f000 f906 	bl	80078ea <memset>
 80076de:	4b0d      	ldr	r3, [pc, #52]	; (8007714 <std+0x58>)
 80076e0:	6263      	str	r3, [r4, #36]	; 0x24
 80076e2:	4b0d      	ldr	r3, [pc, #52]	; (8007718 <std+0x5c>)
 80076e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <std+0x60>)
 80076e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076ea:	4b0d      	ldr	r3, [pc, #52]	; (8007720 <std+0x64>)
 80076ec:	6323      	str	r3, [r4, #48]	; 0x30
 80076ee:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <std+0x68>)
 80076f0:	6224      	str	r4, [r4, #32]
 80076f2:	429c      	cmp	r4, r3
 80076f4:	d006      	beq.n	8007704 <std+0x48>
 80076f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80076fa:	4294      	cmp	r4, r2
 80076fc:	d002      	beq.n	8007704 <std+0x48>
 80076fe:	33d0      	adds	r3, #208	; 0xd0
 8007700:	429c      	cmp	r4, r3
 8007702:	d105      	bne.n	8007710 <std+0x54>
 8007704:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800770c:	f000 b9bc 	b.w	8007a88 <__retarget_lock_init_recursive>
 8007710:	bd10      	pop	{r4, pc}
 8007712:	bf00      	nop
 8007714:	08007865 	.word	0x08007865
 8007718:	08007887 	.word	0x08007887
 800771c:	080078bf 	.word	0x080078bf
 8007720:	080078e3 	.word	0x080078e3
 8007724:	20004bf4 	.word	0x20004bf4

08007728 <stdio_exit_handler>:
 8007728:	4a02      	ldr	r2, [pc, #8]	; (8007734 <stdio_exit_handler+0xc>)
 800772a:	4903      	ldr	r1, [pc, #12]	; (8007738 <stdio_exit_handler+0x10>)
 800772c:	4803      	ldr	r0, [pc, #12]	; (800773c <stdio_exit_handler+0x14>)
 800772e:	f000 b869 	b.w	8007804 <_fwalk_sglue>
 8007732:	bf00      	nop
 8007734:	20000010 	.word	0x20000010
 8007738:	08008351 	.word	0x08008351
 800773c:	2000001c 	.word	0x2000001c

08007740 <cleanup_stdio>:
 8007740:	6841      	ldr	r1, [r0, #4]
 8007742:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <cleanup_stdio+0x34>)
 8007744:	4299      	cmp	r1, r3
 8007746:	b510      	push	{r4, lr}
 8007748:	4604      	mov	r4, r0
 800774a:	d001      	beq.n	8007750 <cleanup_stdio+0x10>
 800774c:	f000 fe00 	bl	8008350 <_fflush_r>
 8007750:	68a1      	ldr	r1, [r4, #8]
 8007752:	4b09      	ldr	r3, [pc, #36]	; (8007778 <cleanup_stdio+0x38>)
 8007754:	4299      	cmp	r1, r3
 8007756:	d002      	beq.n	800775e <cleanup_stdio+0x1e>
 8007758:	4620      	mov	r0, r4
 800775a:	f000 fdf9 	bl	8008350 <_fflush_r>
 800775e:	68e1      	ldr	r1, [r4, #12]
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <cleanup_stdio+0x3c>)
 8007762:	4299      	cmp	r1, r3
 8007764:	d004      	beq.n	8007770 <cleanup_stdio+0x30>
 8007766:	4620      	mov	r0, r4
 8007768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776c:	f000 bdf0 	b.w	8008350 <_fflush_r>
 8007770:	bd10      	pop	{r4, pc}
 8007772:	bf00      	nop
 8007774:	20004bf4 	.word	0x20004bf4
 8007778:	20004c5c 	.word	0x20004c5c
 800777c:	20004cc4 	.word	0x20004cc4

08007780 <global_stdio_init.part.0>:
 8007780:	b510      	push	{r4, lr}
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <global_stdio_init.part.0+0x30>)
 8007784:	4c0b      	ldr	r4, [pc, #44]	; (80077b4 <global_stdio_init.part.0+0x34>)
 8007786:	4a0c      	ldr	r2, [pc, #48]	; (80077b8 <global_stdio_init.part.0+0x38>)
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	4620      	mov	r0, r4
 800778c:	2200      	movs	r2, #0
 800778e:	2104      	movs	r1, #4
 8007790:	f7ff ff94 	bl	80076bc <std>
 8007794:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007798:	2201      	movs	r2, #1
 800779a:	2109      	movs	r1, #9
 800779c:	f7ff ff8e 	bl	80076bc <std>
 80077a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077a4:	2202      	movs	r2, #2
 80077a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077aa:	2112      	movs	r1, #18
 80077ac:	f7ff bf86 	b.w	80076bc <std>
 80077b0:	20004d2c 	.word	0x20004d2c
 80077b4:	20004bf4 	.word	0x20004bf4
 80077b8:	08007729 	.word	0x08007729

080077bc <__sfp_lock_acquire>:
 80077bc:	4801      	ldr	r0, [pc, #4]	; (80077c4 <__sfp_lock_acquire+0x8>)
 80077be:	f000 b964 	b.w	8007a8a <__retarget_lock_acquire_recursive>
 80077c2:	bf00      	nop
 80077c4:	20004d35 	.word	0x20004d35

080077c8 <__sfp_lock_release>:
 80077c8:	4801      	ldr	r0, [pc, #4]	; (80077d0 <__sfp_lock_release+0x8>)
 80077ca:	f000 b95f 	b.w	8007a8c <__retarget_lock_release_recursive>
 80077ce:	bf00      	nop
 80077d0:	20004d35 	.word	0x20004d35

080077d4 <__sinit>:
 80077d4:	b510      	push	{r4, lr}
 80077d6:	4604      	mov	r4, r0
 80077d8:	f7ff fff0 	bl	80077bc <__sfp_lock_acquire>
 80077dc:	6a23      	ldr	r3, [r4, #32]
 80077de:	b11b      	cbz	r3, 80077e8 <__sinit+0x14>
 80077e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e4:	f7ff bff0 	b.w	80077c8 <__sfp_lock_release>
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <__sinit+0x28>)
 80077ea:	6223      	str	r3, [r4, #32]
 80077ec:	4b04      	ldr	r3, [pc, #16]	; (8007800 <__sinit+0x2c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1f5      	bne.n	80077e0 <__sinit+0xc>
 80077f4:	f7ff ffc4 	bl	8007780 <global_stdio_init.part.0>
 80077f8:	e7f2      	b.n	80077e0 <__sinit+0xc>
 80077fa:	bf00      	nop
 80077fc:	08007741 	.word	0x08007741
 8007800:	20004d2c 	.word	0x20004d2c

08007804 <_fwalk_sglue>:
 8007804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007808:	4607      	mov	r7, r0
 800780a:	4688      	mov	r8, r1
 800780c:	4614      	mov	r4, r2
 800780e:	2600      	movs	r6, #0
 8007810:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007814:	f1b9 0901 	subs.w	r9, r9, #1
 8007818:	d505      	bpl.n	8007826 <_fwalk_sglue+0x22>
 800781a:	6824      	ldr	r4, [r4, #0]
 800781c:	2c00      	cmp	r4, #0
 800781e:	d1f7      	bne.n	8007810 <_fwalk_sglue+0xc>
 8007820:	4630      	mov	r0, r6
 8007822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d907      	bls.n	800783c <_fwalk_sglue+0x38>
 800782c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007830:	3301      	adds	r3, #1
 8007832:	d003      	beq.n	800783c <_fwalk_sglue+0x38>
 8007834:	4629      	mov	r1, r5
 8007836:	4638      	mov	r0, r7
 8007838:	47c0      	blx	r8
 800783a:	4306      	orrs	r6, r0
 800783c:	3568      	adds	r5, #104	; 0x68
 800783e:	e7e9      	b.n	8007814 <_fwalk_sglue+0x10>

08007840 <iprintf>:
 8007840:	b40f      	push	{r0, r1, r2, r3}
 8007842:	b507      	push	{r0, r1, r2, lr}
 8007844:	4906      	ldr	r1, [pc, #24]	; (8007860 <iprintf+0x20>)
 8007846:	ab04      	add	r3, sp, #16
 8007848:	6808      	ldr	r0, [r1, #0]
 800784a:	f853 2b04 	ldr.w	r2, [r3], #4
 800784e:	6881      	ldr	r1, [r0, #8]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	f000 fa4d 	bl	8007cf0 <_vfiprintf_r>
 8007856:	b003      	add	sp, #12
 8007858:	f85d eb04 	ldr.w	lr, [sp], #4
 800785c:	b004      	add	sp, #16
 800785e:	4770      	bx	lr
 8007860:	20000068 	.word	0x20000068

08007864 <__sread>:
 8007864:	b510      	push	{r4, lr}
 8007866:	460c      	mov	r4, r1
 8007868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786c:	f000 f8be 	bl	80079ec <_read_r>
 8007870:	2800      	cmp	r0, #0
 8007872:	bfab      	itete	ge
 8007874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007876:	89a3      	ldrhlt	r3, [r4, #12]
 8007878:	181b      	addge	r3, r3, r0
 800787a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800787e:	bfac      	ite	ge
 8007880:	6563      	strge	r3, [r4, #84]	; 0x54
 8007882:	81a3      	strhlt	r3, [r4, #12]
 8007884:	bd10      	pop	{r4, pc}

08007886 <__swrite>:
 8007886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800788a:	461f      	mov	r7, r3
 800788c:	898b      	ldrh	r3, [r1, #12]
 800788e:	05db      	lsls	r3, r3, #23
 8007890:	4605      	mov	r5, r0
 8007892:	460c      	mov	r4, r1
 8007894:	4616      	mov	r6, r2
 8007896:	d505      	bpl.n	80078a4 <__swrite+0x1e>
 8007898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789c:	2302      	movs	r3, #2
 800789e:	2200      	movs	r2, #0
 80078a0:	f000 f892 	bl	80079c8 <_lseek_r>
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ae:	81a3      	strh	r3, [r4, #12]
 80078b0:	4632      	mov	r2, r6
 80078b2:	463b      	mov	r3, r7
 80078b4:	4628      	mov	r0, r5
 80078b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ba:	f000 b8a9 	b.w	8007a10 <_write_r>

080078be <__sseek>:
 80078be:	b510      	push	{r4, lr}
 80078c0:	460c      	mov	r4, r1
 80078c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c6:	f000 f87f 	bl	80079c8 <_lseek_r>
 80078ca:	1c43      	adds	r3, r0, #1
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	bf15      	itete	ne
 80078d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078da:	81a3      	strheq	r3, [r4, #12]
 80078dc:	bf18      	it	ne
 80078de:	81a3      	strhne	r3, [r4, #12]
 80078e0:	bd10      	pop	{r4, pc}

080078e2 <__sclose>:
 80078e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e6:	f000 b809 	b.w	80078fc <_close_r>

080078ea <memset>:
 80078ea:	4402      	add	r2, r0
 80078ec:	4603      	mov	r3, r0
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d100      	bne.n	80078f4 <memset+0xa>
 80078f2:	4770      	bx	lr
 80078f4:	f803 1b01 	strb.w	r1, [r3], #1
 80078f8:	e7f9      	b.n	80078ee <memset+0x4>
	...

080078fc <_close_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4d06      	ldr	r5, [pc, #24]	; (8007918 <_close_r+0x1c>)
 8007900:	2300      	movs	r3, #0
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7f9 fbf3 	bl	80010f2 <_close>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_close_r+0x1a>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_close_r+0x1a>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	20004d30 	.word	0x20004d30

0800791c <_reclaim_reent>:
 800791c:	4b29      	ldr	r3, [pc, #164]	; (80079c4 <_reclaim_reent+0xa8>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4283      	cmp	r3, r0
 8007922:	b570      	push	{r4, r5, r6, lr}
 8007924:	4604      	mov	r4, r0
 8007926:	d04b      	beq.n	80079c0 <_reclaim_reent+0xa4>
 8007928:	69c3      	ldr	r3, [r0, #28]
 800792a:	b143      	cbz	r3, 800793e <_reclaim_reent+0x22>
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d144      	bne.n	80079bc <_reclaim_reent+0xa0>
 8007932:	69e3      	ldr	r3, [r4, #28]
 8007934:	6819      	ldr	r1, [r3, #0]
 8007936:	b111      	cbz	r1, 800793e <_reclaim_reent+0x22>
 8007938:	4620      	mov	r0, r4
 800793a:	f000 f8b7 	bl	8007aac <_free_r>
 800793e:	6961      	ldr	r1, [r4, #20]
 8007940:	b111      	cbz	r1, 8007948 <_reclaim_reent+0x2c>
 8007942:	4620      	mov	r0, r4
 8007944:	f000 f8b2 	bl	8007aac <_free_r>
 8007948:	69e1      	ldr	r1, [r4, #28]
 800794a:	b111      	cbz	r1, 8007952 <_reclaim_reent+0x36>
 800794c:	4620      	mov	r0, r4
 800794e:	f000 f8ad 	bl	8007aac <_free_r>
 8007952:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007954:	b111      	cbz	r1, 800795c <_reclaim_reent+0x40>
 8007956:	4620      	mov	r0, r4
 8007958:	f000 f8a8 	bl	8007aac <_free_r>
 800795c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800795e:	b111      	cbz	r1, 8007966 <_reclaim_reent+0x4a>
 8007960:	4620      	mov	r0, r4
 8007962:	f000 f8a3 	bl	8007aac <_free_r>
 8007966:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007968:	b111      	cbz	r1, 8007970 <_reclaim_reent+0x54>
 800796a:	4620      	mov	r0, r4
 800796c:	f000 f89e 	bl	8007aac <_free_r>
 8007970:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007972:	b111      	cbz	r1, 800797a <_reclaim_reent+0x5e>
 8007974:	4620      	mov	r0, r4
 8007976:	f000 f899 	bl	8007aac <_free_r>
 800797a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800797c:	b111      	cbz	r1, 8007984 <_reclaim_reent+0x68>
 800797e:	4620      	mov	r0, r4
 8007980:	f000 f894 	bl	8007aac <_free_r>
 8007984:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007986:	b111      	cbz	r1, 800798e <_reclaim_reent+0x72>
 8007988:	4620      	mov	r0, r4
 800798a:	f000 f88f 	bl	8007aac <_free_r>
 800798e:	6a23      	ldr	r3, [r4, #32]
 8007990:	b1b3      	cbz	r3, 80079c0 <_reclaim_reent+0xa4>
 8007992:	4620      	mov	r0, r4
 8007994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007998:	4718      	bx	r3
 800799a:	5949      	ldr	r1, [r1, r5]
 800799c:	b941      	cbnz	r1, 80079b0 <_reclaim_reent+0x94>
 800799e:	3504      	adds	r5, #4
 80079a0:	69e3      	ldr	r3, [r4, #28]
 80079a2:	2d80      	cmp	r5, #128	; 0x80
 80079a4:	68d9      	ldr	r1, [r3, #12]
 80079a6:	d1f8      	bne.n	800799a <_reclaim_reent+0x7e>
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 f87f 	bl	8007aac <_free_r>
 80079ae:	e7c0      	b.n	8007932 <_reclaim_reent+0x16>
 80079b0:	680e      	ldr	r6, [r1, #0]
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 f87a 	bl	8007aac <_free_r>
 80079b8:	4631      	mov	r1, r6
 80079ba:	e7ef      	b.n	800799c <_reclaim_reent+0x80>
 80079bc:	2500      	movs	r5, #0
 80079be:	e7ef      	b.n	80079a0 <_reclaim_reent+0x84>
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	bf00      	nop
 80079c4:	20000068 	.word	0x20000068

080079c8 <_lseek_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d07      	ldr	r5, [pc, #28]	; (80079e8 <_lseek_r+0x20>)
 80079cc:	4604      	mov	r4, r0
 80079ce:	4608      	mov	r0, r1
 80079d0:	4611      	mov	r1, r2
 80079d2:	2200      	movs	r2, #0
 80079d4:	602a      	str	r2, [r5, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f7f9 fbb2 	bl	8001140 <_lseek>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_lseek_r+0x1e>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_lseek_r+0x1e>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	20004d30 	.word	0x20004d30

080079ec <_read_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d07      	ldr	r5, [pc, #28]	; (8007a0c <_read_r+0x20>)
 80079f0:	4604      	mov	r4, r0
 80079f2:	4608      	mov	r0, r1
 80079f4:	4611      	mov	r1, r2
 80079f6:	2200      	movs	r2, #0
 80079f8:	602a      	str	r2, [r5, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f7f9 fb40 	bl	8001080 <_read>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_read_r+0x1e>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_read_r+0x1e>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	20004d30 	.word	0x20004d30

08007a10 <_write_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d07      	ldr	r5, [pc, #28]	; (8007a30 <_write_r+0x20>)
 8007a14:	4604      	mov	r4, r0
 8007a16:	4608      	mov	r0, r1
 8007a18:	4611      	mov	r1, r2
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	602a      	str	r2, [r5, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f7f9 fb4b 	bl	80010ba <_write>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_write_r+0x1e>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_write_r+0x1e>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	20004d30 	.word	0x20004d30

08007a34 <__errno>:
 8007a34:	4b01      	ldr	r3, [pc, #4]	; (8007a3c <__errno+0x8>)
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000068 	.word	0x20000068

08007a40 <__libc_init_array>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4d0d      	ldr	r5, [pc, #52]	; (8007a78 <__libc_init_array+0x38>)
 8007a44:	4c0d      	ldr	r4, [pc, #52]	; (8007a7c <__libc_init_array+0x3c>)
 8007a46:	1b64      	subs	r4, r4, r5
 8007a48:	10a4      	asrs	r4, r4, #2
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	42a6      	cmp	r6, r4
 8007a4e:	d109      	bne.n	8007a64 <__libc_init_array+0x24>
 8007a50:	4d0b      	ldr	r5, [pc, #44]	; (8007a80 <__libc_init_array+0x40>)
 8007a52:	4c0c      	ldr	r4, [pc, #48]	; (8007a84 <__libc_init_array+0x44>)
 8007a54:	f000 fdce 	bl	80085f4 <_init>
 8007a58:	1b64      	subs	r4, r4, r5
 8007a5a:	10a4      	asrs	r4, r4, #2
 8007a5c:	2600      	movs	r6, #0
 8007a5e:	42a6      	cmp	r6, r4
 8007a60:	d105      	bne.n	8007a6e <__libc_init_array+0x2e>
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a68:	4798      	blx	r3
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7ee      	b.n	8007a4c <__libc_init_array+0xc>
 8007a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a72:	4798      	blx	r3
 8007a74:	3601      	adds	r6, #1
 8007a76:	e7f2      	b.n	8007a5e <__libc_init_array+0x1e>
 8007a78:	0800879c 	.word	0x0800879c
 8007a7c:	0800879c 	.word	0x0800879c
 8007a80:	0800879c 	.word	0x0800879c
 8007a84:	080087a0 	.word	0x080087a0

08007a88 <__retarget_lock_init_recursive>:
 8007a88:	4770      	bx	lr

08007a8a <__retarget_lock_acquire_recursive>:
 8007a8a:	4770      	bx	lr

08007a8c <__retarget_lock_release_recursive>:
 8007a8c:	4770      	bx	lr

08007a8e <memcpy>:
 8007a8e:	440a      	add	r2, r1
 8007a90:	4291      	cmp	r1, r2
 8007a92:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a96:	d100      	bne.n	8007a9a <memcpy+0xc>
 8007a98:	4770      	bx	lr
 8007a9a:	b510      	push	{r4, lr}
 8007a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aa4:	4291      	cmp	r1, r2
 8007aa6:	d1f9      	bne.n	8007a9c <memcpy+0xe>
 8007aa8:	bd10      	pop	{r4, pc}
	...

08007aac <_free_r>:
 8007aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	d044      	beq.n	8007b3c <_free_r+0x90>
 8007ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab6:	9001      	str	r0, [sp, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f1a1 0404 	sub.w	r4, r1, #4
 8007abe:	bfb8      	it	lt
 8007ac0:	18e4      	addlt	r4, r4, r3
 8007ac2:	f000 f8df 	bl	8007c84 <__malloc_lock>
 8007ac6:	4a1e      	ldr	r2, [pc, #120]	; (8007b40 <_free_r+0x94>)
 8007ac8:	9801      	ldr	r0, [sp, #4]
 8007aca:	6813      	ldr	r3, [r2, #0]
 8007acc:	b933      	cbnz	r3, 8007adc <_free_r+0x30>
 8007ace:	6063      	str	r3, [r4, #4]
 8007ad0:	6014      	str	r4, [r2, #0]
 8007ad2:	b003      	add	sp, #12
 8007ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ad8:	f000 b8da 	b.w	8007c90 <__malloc_unlock>
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d908      	bls.n	8007af2 <_free_r+0x46>
 8007ae0:	6825      	ldr	r5, [r4, #0]
 8007ae2:	1961      	adds	r1, r4, r5
 8007ae4:	428b      	cmp	r3, r1
 8007ae6:	bf01      	itttt	eq
 8007ae8:	6819      	ldreq	r1, [r3, #0]
 8007aea:	685b      	ldreq	r3, [r3, #4]
 8007aec:	1949      	addeq	r1, r1, r5
 8007aee:	6021      	streq	r1, [r4, #0]
 8007af0:	e7ed      	b.n	8007ace <_free_r+0x22>
 8007af2:	461a      	mov	r2, r3
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	b10b      	cbz	r3, 8007afc <_free_r+0x50>
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d9fa      	bls.n	8007af2 <_free_r+0x46>
 8007afc:	6811      	ldr	r1, [r2, #0]
 8007afe:	1855      	adds	r5, r2, r1
 8007b00:	42a5      	cmp	r5, r4
 8007b02:	d10b      	bne.n	8007b1c <_free_r+0x70>
 8007b04:	6824      	ldr	r4, [r4, #0]
 8007b06:	4421      	add	r1, r4
 8007b08:	1854      	adds	r4, r2, r1
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	6011      	str	r1, [r2, #0]
 8007b0e:	d1e0      	bne.n	8007ad2 <_free_r+0x26>
 8007b10:	681c      	ldr	r4, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	6053      	str	r3, [r2, #4]
 8007b16:	440c      	add	r4, r1
 8007b18:	6014      	str	r4, [r2, #0]
 8007b1a:	e7da      	b.n	8007ad2 <_free_r+0x26>
 8007b1c:	d902      	bls.n	8007b24 <_free_r+0x78>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	e7d6      	b.n	8007ad2 <_free_r+0x26>
 8007b24:	6825      	ldr	r5, [r4, #0]
 8007b26:	1961      	adds	r1, r4, r5
 8007b28:	428b      	cmp	r3, r1
 8007b2a:	bf04      	itt	eq
 8007b2c:	6819      	ldreq	r1, [r3, #0]
 8007b2e:	685b      	ldreq	r3, [r3, #4]
 8007b30:	6063      	str	r3, [r4, #4]
 8007b32:	bf04      	itt	eq
 8007b34:	1949      	addeq	r1, r1, r5
 8007b36:	6021      	streq	r1, [r4, #0]
 8007b38:	6054      	str	r4, [r2, #4]
 8007b3a:	e7ca      	b.n	8007ad2 <_free_r+0x26>
 8007b3c:	b003      	add	sp, #12
 8007b3e:	bd30      	pop	{r4, r5, pc}
 8007b40:	20004d38 	.word	0x20004d38

08007b44 <sbrk_aligned>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4e0e      	ldr	r6, [pc, #56]	; (8007b80 <sbrk_aligned+0x3c>)
 8007b48:	460c      	mov	r4, r1
 8007b4a:	6831      	ldr	r1, [r6, #0]
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	b911      	cbnz	r1, 8007b56 <sbrk_aligned+0x12>
 8007b50:	f000 fcbc 	bl	80084cc <_sbrk_r>
 8007b54:	6030      	str	r0, [r6, #0]
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 fcb7 	bl	80084cc <_sbrk_r>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	d00a      	beq.n	8007b78 <sbrk_aligned+0x34>
 8007b62:	1cc4      	adds	r4, r0, #3
 8007b64:	f024 0403 	bic.w	r4, r4, #3
 8007b68:	42a0      	cmp	r0, r4
 8007b6a:	d007      	beq.n	8007b7c <sbrk_aligned+0x38>
 8007b6c:	1a21      	subs	r1, r4, r0
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 fcac 	bl	80084cc <_sbrk_r>
 8007b74:	3001      	adds	r0, #1
 8007b76:	d101      	bne.n	8007b7c <sbrk_aligned+0x38>
 8007b78:	f04f 34ff 	mov.w	r4, #4294967295
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	20004d3c 	.word	0x20004d3c

08007b84 <_malloc_r>:
 8007b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b88:	1ccd      	adds	r5, r1, #3
 8007b8a:	f025 0503 	bic.w	r5, r5, #3
 8007b8e:	3508      	adds	r5, #8
 8007b90:	2d0c      	cmp	r5, #12
 8007b92:	bf38      	it	cc
 8007b94:	250c      	movcc	r5, #12
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	4607      	mov	r7, r0
 8007b9a:	db01      	blt.n	8007ba0 <_malloc_r+0x1c>
 8007b9c:	42a9      	cmp	r1, r5
 8007b9e:	d905      	bls.n	8007bac <_malloc_r+0x28>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	2600      	movs	r6, #0
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c80 <_malloc_r+0xfc>
 8007bb0:	f000 f868 	bl	8007c84 <__malloc_lock>
 8007bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb8:	461c      	mov	r4, r3
 8007bba:	bb5c      	cbnz	r4, 8007c14 <_malloc_r+0x90>
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	f7ff ffc0 	bl	8007b44 <sbrk_aligned>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	d155      	bne.n	8007c76 <_malloc_r+0xf2>
 8007bca:	f8d8 4000 	ldr.w	r4, [r8]
 8007bce:	4626      	mov	r6, r4
 8007bd0:	2e00      	cmp	r6, #0
 8007bd2:	d145      	bne.n	8007c60 <_malloc_r+0xdc>
 8007bd4:	2c00      	cmp	r4, #0
 8007bd6:	d048      	beq.n	8007c6a <_malloc_r+0xe6>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4638      	mov	r0, r7
 8007bde:	eb04 0903 	add.w	r9, r4, r3
 8007be2:	f000 fc73 	bl	80084cc <_sbrk_r>
 8007be6:	4581      	cmp	r9, r0
 8007be8:	d13f      	bne.n	8007c6a <_malloc_r+0xe6>
 8007bea:	6821      	ldr	r1, [r4, #0]
 8007bec:	1a6d      	subs	r5, r5, r1
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff ffa7 	bl	8007b44 <sbrk_aligned>
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	d037      	beq.n	8007c6a <_malloc_r+0xe6>
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	442b      	add	r3, r5
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	f8d8 3000 	ldr.w	r3, [r8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d038      	beq.n	8007c7a <_malloc_r+0xf6>
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	42a2      	cmp	r2, r4
 8007c0c:	d12b      	bne.n	8007c66 <_malloc_r+0xe2>
 8007c0e:	2200      	movs	r2, #0
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	e00f      	b.n	8007c34 <_malloc_r+0xb0>
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	1b52      	subs	r2, r2, r5
 8007c18:	d41f      	bmi.n	8007c5a <_malloc_r+0xd6>
 8007c1a:	2a0b      	cmp	r2, #11
 8007c1c:	d917      	bls.n	8007c4e <_malloc_r+0xca>
 8007c1e:	1961      	adds	r1, r4, r5
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	6025      	str	r5, [r4, #0]
 8007c24:	bf18      	it	ne
 8007c26:	6059      	strne	r1, [r3, #4]
 8007c28:	6863      	ldr	r3, [r4, #4]
 8007c2a:	bf08      	it	eq
 8007c2c:	f8c8 1000 	streq.w	r1, [r8]
 8007c30:	5162      	str	r2, [r4, r5]
 8007c32:	604b      	str	r3, [r1, #4]
 8007c34:	4638      	mov	r0, r7
 8007c36:	f104 060b 	add.w	r6, r4, #11
 8007c3a:	f000 f829 	bl	8007c90 <__malloc_unlock>
 8007c3e:	f026 0607 	bic.w	r6, r6, #7
 8007c42:	1d23      	adds	r3, r4, #4
 8007c44:	1af2      	subs	r2, r6, r3
 8007c46:	d0ae      	beq.n	8007ba6 <_malloc_r+0x22>
 8007c48:	1b9b      	subs	r3, r3, r6
 8007c4a:	50a3      	str	r3, [r4, r2]
 8007c4c:	e7ab      	b.n	8007ba6 <_malloc_r+0x22>
 8007c4e:	42a3      	cmp	r3, r4
 8007c50:	6862      	ldr	r2, [r4, #4]
 8007c52:	d1dd      	bne.n	8007c10 <_malloc_r+0x8c>
 8007c54:	f8c8 2000 	str.w	r2, [r8]
 8007c58:	e7ec      	b.n	8007c34 <_malloc_r+0xb0>
 8007c5a:	4623      	mov	r3, r4
 8007c5c:	6864      	ldr	r4, [r4, #4]
 8007c5e:	e7ac      	b.n	8007bba <_malloc_r+0x36>
 8007c60:	4634      	mov	r4, r6
 8007c62:	6876      	ldr	r6, [r6, #4]
 8007c64:	e7b4      	b.n	8007bd0 <_malloc_r+0x4c>
 8007c66:	4613      	mov	r3, r2
 8007c68:	e7cc      	b.n	8007c04 <_malloc_r+0x80>
 8007c6a:	230c      	movs	r3, #12
 8007c6c:	603b      	str	r3, [r7, #0]
 8007c6e:	4638      	mov	r0, r7
 8007c70:	f000 f80e 	bl	8007c90 <__malloc_unlock>
 8007c74:	e797      	b.n	8007ba6 <_malloc_r+0x22>
 8007c76:	6025      	str	r5, [r4, #0]
 8007c78:	e7dc      	b.n	8007c34 <_malloc_r+0xb0>
 8007c7a:	605b      	str	r3, [r3, #4]
 8007c7c:	deff      	udf	#255	; 0xff
 8007c7e:	bf00      	nop
 8007c80:	20004d38 	.word	0x20004d38

08007c84 <__malloc_lock>:
 8007c84:	4801      	ldr	r0, [pc, #4]	; (8007c8c <__malloc_lock+0x8>)
 8007c86:	f7ff bf00 	b.w	8007a8a <__retarget_lock_acquire_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	20004d34 	.word	0x20004d34

08007c90 <__malloc_unlock>:
 8007c90:	4801      	ldr	r0, [pc, #4]	; (8007c98 <__malloc_unlock+0x8>)
 8007c92:	f7ff befb 	b.w	8007a8c <__retarget_lock_release_recursive>
 8007c96:	bf00      	nop
 8007c98:	20004d34 	.word	0x20004d34

08007c9c <__sfputc_r>:
 8007c9c:	6893      	ldr	r3, [r2, #8]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	b410      	push	{r4}
 8007ca4:	6093      	str	r3, [r2, #8]
 8007ca6:	da08      	bge.n	8007cba <__sfputc_r+0x1e>
 8007ca8:	6994      	ldr	r4, [r2, #24]
 8007caa:	42a3      	cmp	r3, r4
 8007cac:	db01      	blt.n	8007cb2 <__sfputc_r+0x16>
 8007cae:	290a      	cmp	r1, #10
 8007cb0:	d103      	bne.n	8007cba <__sfputc_r+0x1e>
 8007cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cb6:	f000 bb73 	b.w	80083a0 <__swbuf_r>
 8007cba:	6813      	ldr	r3, [r2, #0]
 8007cbc:	1c58      	adds	r0, r3, #1
 8007cbe:	6010      	str	r0, [r2, #0]
 8007cc0:	7019      	strb	r1, [r3, #0]
 8007cc2:	4608      	mov	r0, r1
 8007cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <__sfputs_r>:
 8007cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ccc:	4606      	mov	r6, r0
 8007cce:	460f      	mov	r7, r1
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	18d5      	adds	r5, r2, r3
 8007cd4:	42ac      	cmp	r4, r5
 8007cd6:	d101      	bne.n	8007cdc <__sfputs_r+0x12>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e007      	b.n	8007cec <__sfputs_r+0x22>
 8007cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce0:	463a      	mov	r2, r7
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7ff ffda 	bl	8007c9c <__sfputc_r>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d1f3      	bne.n	8007cd4 <__sfputs_r+0xa>
 8007cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cf0 <_vfiprintf_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	460d      	mov	r5, r1
 8007cf6:	b09d      	sub	sp, #116	; 0x74
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	4698      	mov	r8, r3
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	b118      	cbz	r0, 8007d08 <_vfiprintf_r+0x18>
 8007d00:	6a03      	ldr	r3, [r0, #32]
 8007d02:	b90b      	cbnz	r3, 8007d08 <_vfiprintf_r+0x18>
 8007d04:	f7ff fd66 	bl	80077d4 <__sinit>
 8007d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d0a:	07d9      	lsls	r1, r3, #31
 8007d0c:	d405      	bmi.n	8007d1a <_vfiprintf_r+0x2a>
 8007d0e:	89ab      	ldrh	r3, [r5, #12]
 8007d10:	059a      	lsls	r2, r3, #22
 8007d12:	d402      	bmi.n	8007d1a <_vfiprintf_r+0x2a>
 8007d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d16:	f7ff feb8 	bl	8007a8a <__retarget_lock_acquire_recursive>
 8007d1a:	89ab      	ldrh	r3, [r5, #12]
 8007d1c:	071b      	lsls	r3, r3, #28
 8007d1e:	d501      	bpl.n	8007d24 <_vfiprintf_r+0x34>
 8007d20:	692b      	ldr	r3, [r5, #16]
 8007d22:	b99b      	cbnz	r3, 8007d4c <_vfiprintf_r+0x5c>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 fb78 	bl	800841c <__swsetup_r>
 8007d2c:	b170      	cbz	r0, 8007d4c <_vfiprintf_r+0x5c>
 8007d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d30:	07dc      	lsls	r4, r3, #31
 8007d32:	d504      	bpl.n	8007d3e <_vfiprintf_r+0x4e>
 8007d34:	f04f 30ff 	mov.w	r0, #4294967295
 8007d38:	b01d      	add	sp, #116	; 0x74
 8007d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3e:	89ab      	ldrh	r3, [r5, #12]
 8007d40:	0598      	lsls	r0, r3, #22
 8007d42:	d4f7      	bmi.n	8007d34 <_vfiprintf_r+0x44>
 8007d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d46:	f7ff fea1 	bl	8007a8c <__retarget_lock_release_recursive>
 8007d4a:	e7f3      	b.n	8007d34 <_vfiprintf_r+0x44>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d50:	2320      	movs	r3, #32
 8007d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d5a:	2330      	movs	r3, #48	; 0x30
 8007d5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f10 <_vfiprintf_r+0x220>
 8007d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d64:	f04f 0901 	mov.w	r9, #1
 8007d68:	4623      	mov	r3, r4
 8007d6a:	469a      	mov	sl, r3
 8007d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d70:	b10a      	cbz	r2, 8007d76 <_vfiprintf_r+0x86>
 8007d72:	2a25      	cmp	r2, #37	; 0x25
 8007d74:	d1f9      	bne.n	8007d6a <_vfiprintf_r+0x7a>
 8007d76:	ebba 0b04 	subs.w	fp, sl, r4
 8007d7a:	d00b      	beq.n	8007d94 <_vfiprintf_r+0xa4>
 8007d7c:	465b      	mov	r3, fp
 8007d7e:	4622      	mov	r2, r4
 8007d80:	4629      	mov	r1, r5
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff ffa1 	bl	8007cca <__sfputs_r>
 8007d88:	3001      	adds	r0, #1
 8007d8a:	f000 80a9 	beq.w	8007ee0 <_vfiprintf_r+0x1f0>
 8007d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d90:	445a      	add	r2, fp
 8007d92:	9209      	str	r2, [sp, #36]	; 0x24
 8007d94:	f89a 3000 	ldrb.w	r3, [sl]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 80a1 	beq.w	8007ee0 <_vfiprintf_r+0x1f0>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f04f 32ff 	mov.w	r2, #4294967295
 8007da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da8:	f10a 0a01 	add.w	sl, sl, #1
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	9307      	str	r3, [sp, #28]
 8007db0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007db4:	931a      	str	r3, [sp, #104]	; 0x68
 8007db6:	4654      	mov	r4, sl
 8007db8:	2205      	movs	r2, #5
 8007dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dbe:	4854      	ldr	r0, [pc, #336]	; (8007f10 <_vfiprintf_r+0x220>)
 8007dc0:	f7f8 fa0e 	bl	80001e0 <memchr>
 8007dc4:	9a04      	ldr	r2, [sp, #16]
 8007dc6:	b9d8      	cbnz	r0, 8007e00 <_vfiprintf_r+0x110>
 8007dc8:	06d1      	lsls	r1, r2, #27
 8007dca:	bf44      	itt	mi
 8007dcc:	2320      	movmi	r3, #32
 8007dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd2:	0713      	lsls	r3, r2, #28
 8007dd4:	bf44      	itt	mi
 8007dd6:	232b      	movmi	r3, #43	; 0x2b
 8007dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8007de0:	2b2a      	cmp	r3, #42	; 0x2a
 8007de2:	d015      	beq.n	8007e10 <_vfiprintf_r+0x120>
 8007de4:	9a07      	ldr	r2, [sp, #28]
 8007de6:	4654      	mov	r4, sl
 8007de8:	2000      	movs	r0, #0
 8007dea:	f04f 0c0a 	mov.w	ip, #10
 8007dee:	4621      	mov	r1, r4
 8007df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007df4:	3b30      	subs	r3, #48	; 0x30
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	d94d      	bls.n	8007e96 <_vfiprintf_r+0x1a6>
 8007dfa:	b1b0      	cbz	r0, 8007e2a <_vfiprintf_r+0x13a>
 8007dfc:	9207      	str	r2, [sp, #28]
 8007dfe:	e014      	b.n	8007e2a <_vfiprintf_r+0x13a>
 8007e00:	eba0 0308 	sub.w	r3, r0, r8
 8007e04:	fa09 f303 	lsl.w	r3, r9, r3
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	9304      	str	r3, [sp, #16]
 8007e0c:	46a2      	mov	sl, r4
 8007e0e:	e7d2      	b.n	8007db6 <_vfiprintf_r+0xc6>
 8007e10:	9b03      	ldr	r3, [sp, #12]
 8007e12:	1d19      	adds	r1, r3, #4
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	9103      	str	r1, [sp, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	bfbb      	ittet	lt
 8007e1c:	425b      	neglt	r3, r3
 8007e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e22:	9307      	strge	r3, [sp, #28]
 8007e24:	9307      	strlt	r3, [sp, #28]
 8007e26:	bfb8      	it	lt
 8007e28:	9204      	strlt	r2, [sp, #16]
 8007e2a:	7823      	ldrb	r3, [r4, #0]
 8007e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e2e:	d10c      	bne.n	8007e4a <_vfiprintf_r+0x15a>
 8007e30:	7863      	ldrb	r3, [r4, #1]
 8007e32:	2b2a      	cmp	r3, #42	; 0x2a
 8007e34:	d134      	bne.n	8007ea0 <_vfiprintf_r+0x1b0>
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	1d1a      	adds	r2, r3, #4
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	9203      	str	r2, [sp, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bfb8      	it	lt
 8007e42:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e46:	3402      	adds	r4, #2
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007f20 <_vfiprintf_r+0x230>
 8007e4e:	7821      	ldrb	r1, [r4, #0]
 8007e50:	2203      	movs	r2, #3
 8007e52:	4650      	mov	r0, sl
 8007e54:	f7f8 f9c4 	bl	80001e0 <memchr>
 8007e58:	b138      	cbz	r0, 8007e6a <_vfiprintf_r+0x17a>
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	eba0 000a 	sub.w	r0, r0, sl
 8007e60:	2240      	movs	r2, #64	; 0x40
 8007e62:	4082      	lsls	r2, r0
 8007e64:	4313      	orrs	r3, r2
 8007e66:	3401      	adds	r4, #1
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6e:	4829      	ldr	r0, [pc, #164]	; (8007f14 <_vfiprintf_r+0x224>)
 8007e70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e74:	2206      	movs	r2, #6
 8007e76:	f7f8 f9b3 	bl	80001e0 <memchr>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d03f      	beq.n	8007efe <_vfiprintf_r+0x20e>
 8007e7e:	4b26      	ldr	r3, [pc, #152]	; (8007f18 <_vfiprintf_r+0x228>)
 8007e80:	bb1b      	cbnz	r3, 8007eca <_vfiprintf_r+0x1da>
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	3307      	adds	r3, #7
 8007e86:	f023 0307 	bic.w	r3, r3, #7
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	9303      	str	r3, [sp, #12]
 8007e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e90:	443b      	add	r3, r7
 8007e92:	9309      	str	r3, [sp, #36]	; 0x24
 8007e94:	e768      	b.n	8007d68 <_vfiprintf_r+0x78>
 8007e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	e7a6      	b.n	8007dee <_vfiprintf_r+0xfe>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	3401      	adds	r4, #1
 8007ea4:	9305      	str	r3, [sp, #20]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	f04f 0c0a 	mov.w	ip, #10
 8007eac:	4620      	mov	r0, r4
 8007eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb2:	3a30      	subs	r2, #48	; 0x30
 8007eb4:	2a09      	cmp	r2, #9
 8007eb6:	d903      	bls.n	8007ec0 <_vfiprintf_r+0x1d0>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0c6      	beq.n	8007e4a <_vfiprintf_r+0x15a>
 8007ebc:	9105      	str	r1, [sp, #20]
 8007ebe:	e7c4      	b.n	8007e4a <_vfiprintf_r+0x15a>
 8007ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e7f0      	b.n	8007eac <_vfiprintf_r+0x1bc>
 8007eca:	ab03      	add	r3, sp, #12
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	462a      	mov	r2, r5
 8007ed0:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <_vfiprintf_r+0x22c>)
 8007ed2:	a904      	add	r1, sp, #16
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f3af 8000 	nop.w
 8007eda:	4607      	mov	r7, r0
 8007edc:	1c78      	adds	r0, r7, #1
 8007ede:	d1d6      	bne.n	8007e8e <_vfiprintf_r+0x19e>
 8007ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ee2:	07d9      	lsls	r1, r3, #31
 8007ee4:	d405      	bmi.n	8007ef2 <_vfiprintf_r+0x202>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	059a      	lsls	r2, r3, #22
 8007eea:	d402      	bmi.n	8007ef2 <_vfiprintf_r+0x202>
 8007eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eee:	f7ff fdcd 	bl	8007a8c <__retarget_lock_release_recursive>
 8007ef2:	89ab      	ldrh	r3, [r5, #12]
 8007ef4:	065b      	lsls	r3, r3, #25
 8007ef6:	f53f af1d 	bmi.w	8007d34 <_vfiprintf_r+0x44>
 8007efa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007efc:	e71c      	b.n	8007d38 <_vfiprintf_r+0x48>
 8007efe:	ab03      	add	r3, sp, #12
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	462a      	mov	r2, r5
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <_vfiprintf_r+0x22c>)
 8007f06:	a904      	add	r1, sp, #16
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f000 f879 	bl	8008000 <_printf_i>
 8007f0e:	e7e4      	b.n	8007eda <_vfiprintf_r+0x1ea>
 8007f10:	08008760 	.word	0x08008760
 8007f14:	0800876a 	.word	0x0800876a
 8007f18:	00000000 	.word	0x00000000
 8007f1c:	08007ccb 	.word	0x08007ccb
 8007f20:	08008766 	.word	0x08008766

08007f24 <_printf_common>:
 8007f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	4616      	mov	r6, r2
 8007f2a:	4699      	mov	r9, r3
 8007f2c:	688a      	ldr	r2, [r1, #8]
 8007f2e:	690b      	ldr	r3, [r1, #16]
 8007f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	bfb8      	it	lt
 8007f38:	4613      	movlt	r3, r2
 8007f3a:	6033      	str	r3, [r6, #0]
 8007f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f40:	4607      	mov	r7, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	b10a      	cbz	r2, 8007f4a <_printf_common+0x26>
 8007f46:	3301      	adds	r3, #1
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	0699      	lsls	r1, r3, #26
 8007f4e:	bf42      	ittt	mi
 8007f50:	6833      	ldrmi	r3, [r6, #0]
 8007f52:	3302      	addmi	r3, #2
 8007f54:	6033      	strmi	r3, [r6, #0]
 8007f56:	6825      	ldr	r5, [r4, #0]
 8007f58:	f015 0506 	ands.w	r5, r5, #6
 8007f5c:	d106      	bne.n	8007f6c <_printf_common+0x48>
 8007f5e:	f104 0a19 	add.w	sl, r4, #25
 8007f62:	68e3      	ldr	r3, [r4, #12]
 8007f64:	6832      	ldr	r2, [r6, #0]
 8007f66:	1a9b      	subs	r3, r3, r2
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	dc26      	bgt.n	8007fba <_printf_common+0x96>
 8007f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f70:	1e13      	subs	r3, r2, #0
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	bf18      	it	ne
 8007f76:	2301      	movne	r3, #1
 8007f78:	0692      	lsls	r2, r2, #26
 8007f7a:	d42b      	bmi.n	8007fd4 <_printf_common+0xb0>
 8007f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f80:	4649      	mov	r1, r9
 8007f82:	4638      	mov	r0, r7
 8007f84:	47c0      	blx	r8
 8007f86:	3001      	adds	r0, #1
 8007f88:	d01e      	beq.n	8007fc8 <_printf_common+0xa4>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	6922      	ldr	r2, [r4, #16]
 8007f8e:	f003 0306 	and.w	r3, r3, #6
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	bf02      	ittt	eq
 8007f96:	68e5      	ldreq	r5, [r4, #12]
 8007f98:	6833      	ldreq	r3, [r6, #0]
 8007f9a:	1aed      	subeq	r5, r5, r3
 8007f9c:	68a3      	ldr	r3, [r4, #8]
 8007f9e:	bf0c      	ite	eq
 8007fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fa4:	2500      	movne	r5, #0
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	bfc4      	itt	gt
 8007faa:	1a9b      	subgt	r3, r3, r2
 8007fac:	18ed      	addgt	r5, r5, r3
 8007fae:	2600      	movs	r6, #0
 8007fb0:	341a      	adds	r4, #26
 8007fb2:	42b5      	cmp	r5, r6
 8007fb4:	d11a      	bne.n	8007fec <_printf_common+0xc8>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e008      	b.n	8007fcc <_printf_common+0xa8>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4652      	mov	r2, sl
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	47c0      	blx	r8
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d103      	bne.n	8007fd0 <_printf_common+0xac>
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd0:	3501      	adds	r5, #1
 8007fd2:	e7c6      	b.n	8007f62 <_printf_common+0x3e>
 8007fd4:	18e1      	adds	r1, r4, r3
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	2030      	movs	r0, #48	; 0x30
 8007fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fde:	4422      	add	r2, r4
 8007fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fe8:	3302      	adds	r3, #2
 8007fea:	e7c7      	b.n	8007f7c <_printf_common+0x58>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4622      	mov	r2, r4
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	47c0      	blx	r8
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d0e6      	beq.n	8007fc8 <_printf_common+0xa4>
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	e7d9      	b.n	8007fb2 <_printf_common+0x8e>
	...

08008000 <_printf_i>:
 8008000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	7e0f      	ldrb	r7, [r1, #24]
 8008006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008008:	2f78      	cmp	r7, #120	; 0x78
 800800a:	4691      	mov	r9, r2
 800800c:	4680      	mov	r8, r0
 800800e:	460c      	mov	r4, r1
 8008010:	469a      	mov	sl, r3
 8008012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008016:	d807      	bhi.n	8008028 <_printf_i+0x28>
 8008018:	2f62      	cmp	r7, #98	; 0x62
 800801a:	d80a      	bhi.n	8008032 <_printf_i+0x32>
 800801c:	2f00      	cmp	r7, #0
 800801e:	f000 80d4 	beq.w	80081ca <_printf_i+0x1ca>
 8008022:	2f58      	cmp	r7, #88	; 0x58
 8008024:	f000 80c0 	beq.w	80081a8 <_printf_i+0x1a8>
 8008028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800802c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008030:	e03a      	b.n	80080a8 <_printf_i+0xa8>
 8008032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008036:	2b15      	cmp	r3, #21
 8008038:	d8f6      	bhi.n	8008028 <_printf_i+0x28>
 800803a:	a101      	add	r1, pc, #4	; (adr r1, 8008040 <_printf_i+0x40>)
 800803c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008040:	08008099 	.word	0x08008099
 8008044:	080080ad 	.word	0x080080ad
 8008048:	08008029 	.word	0x08008029
 800804c:	08008029 	.word	0x08008029
 8008050:	08008029 	.word	0x08008029
 8008054:	08008029 	.word	0x08008029
 8008058:	080080ad 	.word	0x080080ad
 800805c:	08008029 	.word	0x08008029
 8008060:	08008029 	.word	0x08008029
 8008064:	08008029 	.word	0x08008029
 8008068:	08008029 	.word	0x08008029
 800806c:	080081b1 	.word	0x080081b1
 8008070:	080080d9 	.word	0x080080d9
 8008074:	0800816b 	.word	0x0800816b
 8008078:	08008029 	.word	0x08008029
 800807c:	08008029 	.word	0x08008029
 8008080:	080081d3 	.word	0x080081d3
 8008084:	08008029 	.word	0x08008029
 8008088:	080080d9 	.word	0x080080d9
 800808c:	08008029 	.word	0x08008029
 8008090:	08008029 	.word	0x08008029
 8008094:	08008173 	.word	0x08008173
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	1d1a      	adds	r2, r3, #4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	602a      	str	r2, [r5, #0]
 80080a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080a8:	2301      	movs	r3, #1
 80080aa:	e09f      	b.n	80081ec <_printf_i+0x1ec>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	0607      	lsls	r7, r0, #24
 80080b2:	f103 0104 	add.w	r1, r3, #4
 80080b6:	6029      	str	r1, [r5, #0]
 80080b8:	d501      	bpl.n	80080be <_printf_i+0xbe>
 80080ba:	681e      	ldr	r6, [r3, #0]
 80080bc:	e003      	b.n	80080c6 <_printf_i+0xc6>
 80080be:	0646      	lsls	r6, r0, #25
 80080c0:	d5fb      	bpl.n	80080ba <_printf_i+0xba>
 80080c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	da03      	bge.n	80080d2 <_printf_i+0xd2>
 80080ca:	232d      	movs	r3, #45	; 0x2d
 80080cc:	4276      	negs	r6, r6
 80080ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d2:	485a      	ldr	r0, [pc, #360]	; (800823c <_printf_i+0x23c>)
 80080d4:	230a      	movs	r3, #10
 80080d6:	e012      	b.n	80080fe <_printf_i+0xfe>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	6820      	ldr	r0, [r4, #0]
 80080dc:	1d19      	adds	r1, r3, #4
 80080de:	6029      	str	r1, [r5, #0]
 80080e0:	0605      	lsls	r5, r0, #24
 80080e2:	d501      	bpl.n	80080e8 <_printf_i+0xe8>
 80080e4:	681e      	ldr	r6, [r3, #0]
 80080e6:	e002      	b.n	80080ee <_printf_i+0xee>
 80080e8:	0641      	lsls	r1, r0, #25
 80080ea:	d5fb      	bpl.n	80080e4 <_printf_i+0xe4>
 80080ec:	881e      	ldrh	r6, [r3, #0]
 80080ee:	4853      	ldr	r0, [pc, #332]	; (800823c <_printf_i+0x23c>)
 80080f0:	2f6f      	cmp	r7, #111	; 0x6f
 80080f2:	bf0c      	ite	eq
 80080f4:	2308      	moveq	r3, #8
 80080f6:	230a      	movne	r3, #10
 80080f8:	2100      	movs	r1, #0
 80080fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080fe:	6865      	ldr	r5, [r4, #4]
 8008100:	60a5      	str	r5, [r4, #8]
 8008102:	2d00      	cmp	r5, #0
 8008104:	bfa2      	ittt	ge
 8008106:	6821      	ldrge	r1, [r4, #0]
 8008108:	f021 0104 	bicge.w	r1, r1, #4
 800810c:	6021      	strge	r1, [r4, #0]
 800810e:	b90e      	cbnz	r6, 8008114 <_printf_i+0x114>
 8008110:	2d00      	cmp	r5, #0
 8008112:	d04b      	beq.n	80081ac <_printf_i+0x1ac>
 8008114:	4615      	mov	r5, r2
 8008116:	fbb6 f1f3 	udiv	r1, r6, r3
 800811a:	fb03 6711 	mls	r7, r3, r1, r6
 800811e:	5dc7      	ldrb	r7, [r0, r7]
 8008120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008124:	4637      	mov	r7, r6
 8008126:	42bb      	cmp	r3, r7
 8008128:	460e      	mov	r6, r1
 800812a:	d9f4      	bls.n	8008116 <_printf_i+0x116>
 800812c:	2b08      	cmp	r3, #8
 800812e:	d10b      	bne.n	8008148 <_printf_i+0x148>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	07de      	lsls	r6, r3, #31
 8008134:	d508      	bpl.n	8008148 <_printf_i+0x148>
 8008136:	6923      	ldr	r3, [r4, #16]
 8008138:	6861      	ldr	r1, [r4, #4]
 800813a:	4299      	cmp	r1, r3
 800813c:	bfde      	ittt	le
 800813e:	2330      	movle	r3, #48	; 0x30
 8008140:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008144:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008148:	1b52      	subs	r2, r2, r5
 800814a:	6122      	str	r2, [r4, #16]
 800814c:	f8cd a000 	str.w	sl, [sp]
 8008150:	464b      	mov	r3, r9
 8008152:	aa03      	add	r2, sp, #12
 8008154:	4621      	mov	r1, r4
 8008156:	4640      	mov	r0, r8
 8008158:	f7ff fee4 	bl	8007f24 <_printf_common>
 800815c:	3001      	adds	r0, #1
 800815e:	d14a      	bne.n	80081f6 <_printf_i+0x1f6>
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	b004      	add	sp, #16
 8008166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	f043 0320 	orr.w	r3, r3, #32
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	4833      	ldr	r0, [pc, #204]	; (8008240 <_printf_i+0x240>)
 8008174:	2778      	movs	r7, #120	; 0x78
 8008176:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	6829      	ldr	r1, [r5, #0]
 800817e:	061f      	lsls	r7, r3, #24
 8008180:	f851 6b04 	ldr.w	r6, [r1], #4
 8008184:	d402      	bmi.n	800818c <_printf_i+0x18c>
 8008186:	065f      	lsls	r7, r3, #25
 8008188:	bf48      	it	mi
 800818a:	b2b6      	uxthmi	r6, r6
 800818c:	07df      	lsls	r7, r3, #31
 800818e:	bf48      	it	mi
 8008190:	f043 0320 	orrmi.w	r3, r3, #32
 8008194:	6029      	str	r1, [r5, #0]
 8008196:	bf48      	it	mi
 8008198:	6023      	strmi	r3, [r4, #0]
 800819a:	b91e      	cbnz	r6, 80081a4 <_printf_i+0x1a4>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	f023 0320 	bic.w	r3, r3, #32
 80081a2:	6023      	str	r3, [r4, #0]
 80081a4:	2310      	movs	r3, #16
 80081a6:	e7a7      	b.n	80080f8 <_printf_i+0xf8>
 80081a8:	4824      	ldr	r0, [pc, #144]	; (800823c <_printf_i+0x23c>)
 80081aa:	e7e4      	b.n	8008176 <_printf_i+0x176>
 80081ac:	4615      	mov	r5, r2
 80081ae:	e7bd      	b.n	800812c <_printf_i+0x12c>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	6826      	ldr	r6, [r4, #0]
 80081b4:	6961      	ldr	r1, [r4, #20]
 80081b6:	1d18      	adds	r0, r3, #4
 80081b8:	6028      	str	r0, [r5, #0]
 80081ba:	0635      	lsls	r5, r6, #24
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	d501      	bpl.n	80081c4 <_printf_i+0x1c4>
 80081c0:	6019      	str	r1, [r3, #0]
 80081c2:	e002      	b.n	80081ca <_printf_i+0x1ca>
 80081c4:	0670      	lsls	r0, r6, #25
 80081c6:	d5fb      	bpl.n	80081c0 <_printf_i+0x1c0>
 80081c8:	8019      	strh	r1, [r3, #0]
 80081ca:	2300      	movs	r3, #0
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	4615      	mov	r5, r2
 80081d0:	e7bc      	b.n	800814c <_printf_i+0x14c>
 80081d2:	682b      	ldr	r3, [r5, #0]
 80081d4:	1d1a      	adds	r2, r3, #4
 80081d6:	602a      	str	r2, [r5, #0]
 80081d8:	681d      	ldr	r5, [r3, #0]
 80081da:	6862      	ldr	r2, [r4, #4]
 80081dc:	2100      	movs	r1, #0
 80081de:	4628      	mov	r0, r5
 80081e0:	f7f7 fffe 	bl	80001e0 <memchr>
 80081e4:	b108      	cbz	r0, 80081ea <_printf_i+0x1ea>
 80081e6:	1b40      	subs	r0, r0, r5
 80081e8:	6060      	str	r0, [r4, #4]
 80081ea:	6863      	ldr	r3, [r4, #4]
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	2300      	movs	r3, #0
 80081f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f4:	e7aa      	b.n	800814c <_printf_i+0x14c>
 80081f6:	6923      	ldr	r3, [r4, #16]
 80081f8:	462a      	mov	r2, r5
 80081fa:	4649      	mov	r1, r9
 80081fc:	4640      	mov	r0, r8
 80081fe:	47d0      	blx	sl
 8008200:	3001      	adds	r0, #1
 8008202:	d0ad      	beq.n	8008160 <_printf_i+0x160>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	079b      	lsls	r3, r3, #30
 8008208:	d413      	bmi.n	8008232 <_printf_i+0x232>
 800820a:	68e0      	ldr	r0, [r4, #12]
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	4298      	cmp	r0, r3
 8008210:	bfb8      	it	lt
 8008212:	4618      	movlt	r0, r3
 8008214:	e7a6      	b.n	8008164 <_printf_i+0x164>
 8008216:	2301      	movs	r3, #1
 8008218:	4632      	mov	r2, r6
 800821a:	4649      	mov	r1, r9
 800821c:	4640      	mov	r0, r8
 800821e:	47d0      	blx	sl
 8008220:	3001      	adds	r0, #1
 8008222:	d09d      	beq.n	8008160 <_printf_i+0x160>
 8008224:	3501      	adds	r5, #1
 8008226:	68e3      	ldr	r3, [r4, #12]
 8008228:	9903      	ldr	r1, [sp, #12]
 800822a:	1a5b      	subs	r3, r3, r1
 800822c:	42ab      	cmp	r3, r5
 800822e:	dcf2      	bgt.n	8008216 <_printf_i+0x216>
 8008230:	e7eb      	b.n	800820a <_printf_i+0x20a>
 8008232:	2500      	movs	r5, #0
 8008234:	f104 0619 	add.w	r6, r4, #25
 8008238:	e7f5      	b.n	8008226 <_printf_i+0x226>
 800823a:	bf00      	nop
 800823c:	08008771 	.word	0x08008771
 8008240:	08008782 	.word	0x08008782

08008244 <__sflush_r>:
 8008244:	898a      	ldrh	r2, [r1, #12]
 8008246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824a:	4605      	mov	r5, r0
 800824c:	0710      	lsls	r0, r2, #28
 800824e:	460c      	mov	r4, r1
 8008250:	d458      	bmi.n	8008304 <__sflush_r+0xc0>
 8008252:	684b      	ldr	r3, [r1, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	dc05      	bgt.n	8008264 <__sflush_r+0x20>
 8008258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800825a:	2b00      	cmp	r3, #0
 800825c:	dc02      	bgt.n	8008264 <__sflush_r+0x20>
 800825e:	2000      	movs	r0, #0
 8008260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008266:	2e00      	cmp	r6, #0
 8008268:	d0f9      	beq.n	800825e <__sflush_r+0x1a>
 800826a:	2300      	movs	r3, #0
 800826c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008270:	682f      	ldr	r7, [r5, #0]
 8008272:	6a21      	ldr	r1, [r4, #32]
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	d032      	beq.n	80082de <__sflush_r+0x9a>
 8008278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	075a      	lsls	r2, r3, #29
 800827e:	d505      	bpl.n	800828c <__sflush_r+0x48>
 8008280:	6863      	ldr	r3, [r4, #4]
 8008282:	1ac0      	subs	r0, r0, r3
 8008284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008286:	b10b      	cbz	r3, 800828c <__sflush_r+0x48>
 8008288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800828a:	1ac0      	subs	r0, r0, r3
 800828c:	2300      	movs	r3, #0
 800828e:	4602      	mov	r2, r0
 8008290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008292:	6a21      	ldr	r1, [r4, #32]
 8008294:	4628      	mov	r0, r5
 8008296:	47b0      	blx	r6
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	d106      	bne.n	80082ac <__sflush_r+0x68>
 800829e:	6829      	ldr	r1, [r5, #0]
 80082a0:	291d      	cmp	r1, #29
 80082a2:	d82b      	bhi.n	80082fc <__sflush_r+0xb8>
 80082a4:	4a29      	ldr	r2, [pc, #164]	; (800834c <__sflush_r+0x108>)
 80082a6:	410a      	asrs	r2, r1
 80082a8:	07d6      	lsls	r6, r2, #31
 80082aa:	d427      	bmi.n	80082fc <__sflush_r+0xb8>
 80082ac:	2200      	movs	r2, #0
 80082ae:	6062      	str	r2, [r4, #4]
 80082b0:	04d9      	lsls	r1, r3, #19
 80082b2:	6922      	ldr	r2, [r4, #16]
 80082b4:	6022      	str	r2, [r4, #0]
 80082b6:	d504      	bpl.n	80082c2 <__sflush_r+0x7e>
 80082b8:	1c42      	adds	r2, r0, #1
 80082ba:	d101      	bne.n	80082c0 <__sflush_r+0x7c>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b903      	cbnz	r3, 80082c2 <__sflush_r+0x7e>
 80082c0:	6560      	str	r0, [r4, #84]	; 0x54
 80082c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082c4:	602f      	str	r7, [r5, #0]
 80082c6:	2900      	cmp	r1, #0
 80082c8:	d0c9      	beq.n	800825e <__sflush_r+0x1a>
 80082ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082ce:	4299      	cmp	r1, r3
 80082d0:	d002      	beq.n	80082d8 <__sflush_r+0x94>
 80082d2:	4628      	mov	r0, r5
 80082d4:	f7ff fbea 	bl	8007aac <_free_r>
 80082d8:	2000      	movs	r0, #0
 80082da:	6360      	str	r0, [r4, #52]	; 0x34
 80082dc:	e7c0      	b.n	8008260 <__sflush_r+0x1c>
 80082de:	2301      	movs	r3, #1
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b0      	blx	r6
 80082e4:	1c41      	adds	r1, r0, #1
 80082e6:	d1c8      	bne.n	800827a <__sflush_r+0x36>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0c5      	beq.n	800827a <__sflush_r+0x36>
 80082ee:	2b1d      	cmp	r3, #29
 80082f0:	d001      	beq.n	80082f6 <__sflush_r+0xb2>
 80082f2:	2b16      	cmp	r3, #22
 80082f4:	d101      	bne.n	80082fa <__sflush_r+0xb6>
 80082f6:	602f      	str	r7, [r5, #0]
 80082f8:	e7b1      	b.n	800825e <__sflush_r+0x1a>
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008300:	81a3      	strh	r3, [r4, #12]
 8008302:	e7ad      	b.n	8008260 <__sflush_r+0x1c>
 8008304:	690f      	ldr	r7, [r1, #16]
 8008306:	2f00      	cmp	r7, #0
 8008308:	d0a9      	beq.n	800825e <__sflush_r+0x1a>
 800830a:	0793      	lsls	r3, r2, #30
 800830c:	680e      	ldr	r6, [r1, #0]
 800830e:	bf08      	it	eq
 8008310:	694b      	ldreq	r3, [r1, #20]
 8008312:	600f      	str	r7, [r1, #0]
 8008314:	bf18      	it	ne
 8008316:	2300      	movne	r3, #0
 8008318:	eba6 0807 	sub.w	r8, r6, r7
 800831c:	608b      	str	r3, [r1, #8]
 800831e:	f1b8 0f00 	cmp.w	r8, #0
 8008322:	dd9c      	ble.n	800825e <__sflush_r+0x1a>
 8008324:	6a21      	ldr	r1, [r4, #32]
 8008326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008328:	4643      	mov	r3, r8
 800832a:	463a      	mov	r2, r7
 800832c:	4628      	mov	r0, r5
 800832e:	47b0      	blx	r6
 8008330:	2800      	cmp	r0, #0
 8008332:	dc06      	bgt.n	8008342 <__sflush_r+0xfe>
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	e78e      	b.n	8008260 <__sflush_r+0x1c>
 8008342:	4407      	add	r7, r0
 8008344:	eba8 0800 	sub.w	r8, r8, r0
 8008348:	e7e9      	b.n	800831e <__sflush_r+0xda>
 800834a:	bf00      	nop
 800834c:	dfbffffe 	.word	0xdfbffffe

08008350 <_fflush_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	690b      	ldr	r3, [r1, #16]
 8008354:	4605      	mov	r5, r0
 8008356:	460c      	mov	r4, r1
 8008358:	b913      	cbnz	r3, 8008360 <_fflush_r+0x10>
 800835a:	2500      	movs	r5, #0
 800835c:	4628      	mov	r0, r5
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	b118      	cbz	r0, 800836a <_fflush_r+0x1a>
 8008362:	6a03      	ldr	r3, [r0, #32]
 8008364:	b90b      	cbnz	r3, 800836a <_fflush_r+0x1a>
 8008366:	f7ff fa35 	bl	80077d4 <__sinit>
 800836a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f3      	beq.n	800835a <_fflush_r+0xa>
 8008372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008374:	07d0      	lsls	r0, r2, #31
 8008376:	d404      	bmi.n	8008382 <_fflush_r+0x32>
 8008378:	0599      	lsls	r1, r3, #22
 800837a:	d402      	bmi.n	8008382 <_fflush_r+0x32>
 800837c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837e:	f7ff fb84 	bl	8007a8a <__retarget_lock_acquire_recursive>
 8008382:	4628      	mov	r0, r5
 8008384:	4621      	mov	r1, r4
 8008386:	f7ff ff5d 	bl	8008244 <__sflush_r>
 800838a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800838c:	07da      	lsls	r2, r3, #31
 800838e:	4605      	mov	r5, r0
 8008390:	d4e4      	bmi.n	800835c <_fflush_r+0xc>
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	059b      	lsls	r3, r3, #22
 8008396:	d4e1      	bmi.n	800835c <_fflush_r+0xc>
 8008398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800839a:	f7ff fb77 	bl	8007a8c <__retarget_lock_release_recursive>
 800839e:	e7dd      	b.n	800835c <_fflush_r+0xc>

080083a0 <__swbuf_r>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	460e      	mov	r6, r1
 80083a4:	4614      	mov	r4, r2
 80083a6:	4605      	mov	r5, r0
 80083a8:	b118      	cbz	r0, 80083b2 <__swbuf_r+0x12>
 80083aa:	6a03      	ldr	r3, [r0, #32]
 80083ac:	b90b      	cbnz	r3, 80083b2 <__swbuf_r+0x12>
 80083ae:	f7ff fa11 	bl	80077d4 <__sinit>
 80083b2:	69a3      	ldr	r3, [r4, #24]
 80083b4:	60a3      	str	r3, [r4, #8]
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	071a      	lsls	r2, r3, #28
 80083ba:	d525      	bpl.n	8008408 <__swbuf_r+0x68>
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	b31b      	cbz	r3, 8008408 <__swbuf_r+0x68>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	6922      	ldr	r2, [r4, #16]
 80083c4:	1a98      	subs	r0, r3, r2
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	b2f6      	uxtb	r6, r6
 80083ca:	4283      	cmp	r3, r0
 80083cc:	4637      	mov	r7, r6
 80083ce:	dc04      	bgt.n	80083da <__swbuf_r+0x3a>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4628      	mov	r0, r5
 80083d4:	f7ff ffbc 	bl	8008350 <_fflush_r>
 80083d8:	b9e0      	cbnz	r0, 8008414 <__swbuf_r+0x74>
 80083da:	68a3      	ldr	r3, [r4, #8]
 80083dc:	3b01      	subs	r3, #1
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	701e      	strb	r6, [r3, #0]
 80083e8:	6962      	ldr	r2, [r4, #20]
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d004      	beq.n	80083fa <__swbuf_r+0x5a>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	07db      	lsls	r3, r3, #31
 80083f4:	d506      	bpl.n	8008404 <__swbuf_r+0x64>
 80083f6:	2e0a      	cmp	r6, #10
 80083f8:	d104      	bne.n	8008404 <__swbuf_r+0x64>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f7ff ffa7 	bl	8008350 <_fflush_r>
 8008402:	b938      	cbnz	r0, 8008414 <__swbuf_r+0x74>
 8008404:	4638      	mov	r0, r7
 8008406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008408:	4621      	mov	r1, r4
 800840a:	4628      	mov	r0, r5
 800840c:	f000 f806 	bl	800841c <__swsetup_r>
 8008410:	2800      	cmp	r0, #0
 8008412:	d0d5      	beq.n	80083c0 <__swbuf_r+0x20>
 8008414:	f04f 37ff 	mov.w	r7, #4294967295
 8008418:	e7f4      	b.n	8008404 <__swbuf_r+0x64>
	...

0800841c <__swsetup_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4b2a      	ldr	r3, [pc, #168]	; (80084c8 <__swsetup_r+0xac>)
 8008420:	4605      	mov	r5, r0
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	460c      	mov	r4, r1
 8008426:	b118      	cbz	r0, 8008430 <__swsetup_r+0x14>
 8008428:	6a03      	ldr	r3, [r0, #32]
 800842a:	b90b      	cbnz	r3, 8008430 <__swsetup_r+0x14>
 800842c:	f7ff f9d2 	bl	80077d4 <__sinit>
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008436:	0718      	lsls	r0, r3, #28
 8008438:	d422      	bmi.n	8008480 <__swsetup_r+0x64>
 800843a:	06d9      	lsls	r1, r3, #27
 800843c:	d407      	bmi.n	800844e <__swsetup_r+0x32>
 800843e:	2309      	movs	r3, #9
 8008440:	602b      	str	r3, [r5, #0]
 8008442:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008446:	81a3      	strh	r3, [r4, #12]
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	e034      	b.n	80084b8 <__swsetup_r+0x9c>
 800844e:	0758      	lsls	r0, r3, #29
 8008450:	d512      	bpl.n	8008478 <__swsetup_r+0x5c>
 8008452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008454:	b141      	cbz	r1, 8008468 <__swsetup_r+0x4c>
 8008456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800845a:	4299      	cmp	r1, r3
 800845c:	d002      	beq.n	8008464 <__swsetup_r+0x48>
 800845e:	4628      	mov	r0, r5
 8008460:	f7ff fb24 	bl	8007aac <_free_r>
 8008464:	2300      	movs	r3, #0
 8008466:	6363      	str	r3, [r4, #52]	; 0x34
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	2300      	movs	r3, #0
 8008472:	6063      	str	r3, [r4, #4]
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	f043 0308 	orr.w	r3, r3, #8
 800847e:	81a3      	strh	r3, [r4, #12]
 8008480:	6923      	ldr	r3, [r4, #16]
 8008482:	b94b      	cbnz	r3, 8008498 <__swsetup_r+0x7c>
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800848a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800848e:	d003      	beq.n	8008498 <__swsetup_r+0x7c>
 8008490:	4621      	mov	r1, r4
 8008492:	4628      	mov	r0, r5
 8008494:	f000 f850 	bl	8008538 <__smakebuf_r>
 8008498:	89a0      	ldrh	r0, [r4, #12]
 800849a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800849e:	f010 0301 	ands.w	r3, r0, #1
 80084a2:	d00a      	beq.n	80084ba <__swsetup_r+0x9e>
 80084a4:	2300      	movs	r3, #0
 80084a6:	60a3      	str	r3, [r4, #8]
 80084a8:	6963      	ldr	r3, [r4, #20]
 80084aa:	425b      	negs	r3, r3
 80084ac:	61a3      	str	r3, [r4, #24]
 80084ae:	6923      	ldr	r3, [r4, #16]
 80084b0:	b943      	cbnz	r3, 80084c4 <__swsetup_r+0xa8>
 80084b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084b6:	d1c4      	bne.n	8008442 <__swsetup_r+0x26>
 80084b8:	bd38      	pop	{r3, r4, r5, pc}
 80084ba:	0781      	lsls	r1, r0, #30
 80084bc:	bf58      	it	pl
 80084be:	6963      	ldrpl	r3, [r4, #20]
 80084c0:	60a3      	str	r3, [r4, #8]
 80084c2:	e7f4      	b.n	80084ae <__swsetup_r+0x92>
 80084c4:	2000      	movs	r0, #0
 80084c6:	e7f7      	b.n	80084b8 <__swsetup_r+0x9c>
 80084c8:	20000068 	.word	0x20000068

080084cc <_sbrk_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d06      	ldr	r5, [pc, #24]	; (80084e8 <_sbrk_r+0x1c>)
 80084d0:	2300      	movs	r3, #0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	602b      	str	r3, [r5, #0]
 80084d8:	f7f8 fe40 	bl	800115c <_sbrk>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d102      	bne.n	80084e6 <_sbrk_r+0x1a>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	b103      	cbz	r3, 80084e6 <_sbrk_r+0x1a>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	20004d30 	.word	0x20004d30

080084ec <__swhatbuf_r>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	460c      	mov	r4, r1
 80084f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f4:	2900      	cmp	r1, #0
 80084f6:	b096      	sub	sp, #88	; 0x58
 80084f8:	4615      	mov	r5, r2
 80084fa:	461e      	mov	r6, r3
 80084fc:	da0d      	bge.n	800851a <__swhatbuf_r+0x2e>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008504:	f04f 0100 	mov.w	r1, #0
 8008508:	bf0c      	ite	eq
 800850a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800850e:	2340      	movne	r3, #64	; 0x40
 8008510:	2000      	movs	r0, #0
 8008512:	6031      	str	r1, [r6, #0]
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	b016      	add	sp, #88	; 0x58
 8008518:	bd70      	pop	{r4, r5, r6, pc}
 800851a:	466a      	mov	r2, sp
 800851c:	f000 f848 	bl	80085b0 <_fstat_r>
 8008520:	2800      	cmp	r0, #0
 8008522:	dbec      	blt.n	80084fe <__swhatbuf_r+0x12>
 8008524:	9901      	ldr	r1, [sp, #4]
 8008526:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800852a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800852e:	4259      	negs	r1, r3
 8008530:	4159      	adcs	r1, r3
 8008532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008536:	e7eb      	b.n	8008510 <__swhatbuf_r+0x24>

08008538 <__smakebuf_r>:
 8008538:	898b      	ldrh	r3, [r1, #12]
 800853a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800853c:	079d      	lsls	r5, r3, #30
 800853e:	4606      	mov	r6, r0
 8008540:	460c      	mov	r4, r1
 8008542:	d507      	bpl.n	8008554 <__smakebuf_r+0x1c>
 8008544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	2301      	movs	r3, #1
 800854e:	6163      	str	r3, [r4, #20]
 8008550:	b002      	add	sp, #8
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	ab01      	add	r3, sp, #4
 8008556:	466a      	mov	r2, sp
 8008558:	f7ff ffc8 	bl	80084ec <__swhatbuf_r>
 800855c:	9900      	ldr	r1, [sp, #0]
 800855e:	4605      	mov	r5, r0
 8008560:	4630      	mov	r0, r6
 8008562:	f7ff fb0f 	bl	8007b84 <_malloc_r>
 8008566:	b948      	cbnz	r0, 800857c <__smakebuf_r+0x44>
 8008568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800856c:	059a      	lsls	r2, r3, #22
 800856e:	d4ef      	bmi.n	8008550 <__smakebuf_r+0x18>
 8008570:	f023 0303 	bic.w	r3, r3, #3
 8008574:	f043 0302 	orr.w	r3, r3, #2
 8008578:	81a3      	strh	r3, [r4, #12]
 800857a:	e7e3      	b.n	8008544 <__smakebuf_r+0xc>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	6020      	str	r0, [r4, #0]
 8008580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008584:	81a3      	strh	r3, [r4, #12]
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	6163      	str	r3, [r4, #20]
 800858a:	9b01      	ldr	r3, [sp, #4]
 800858c:	6120      	str	r0, [r4, #16]
 800858e:	b15b      	cbz	r3, 80085a8 <__smakebuf_r+0x70>
 8008590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008594:	4630      	mov	r0, r6
 8008596:	f000 f81d 	bl	80085d4 <_isatty_r>
 800859a:	b128      	cbz	r0, 80085a8 <__smakebuf_r+0x70>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f023 0303 	bic.w	r3, r3, #3
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	431d      	orrs	r5, r3
 80085ac:	81a5      	strh	r5, [r4, #12]
 80085ae:	e7cf      	b.n	8008550 <__smakebuf_r+0x18>

080085b0 <_fstat_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d07      	ldr	r5, [pc, #28]	; (80085d0 <_fstat_r+0x20>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	4611      	mov	r1, r2
 80085bc:	602b      	str	r3, [r5, #0]
 80085be:	f7f8 fda4 	bl	800110a <_fstat>
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	d102      	bne.n	80085cc <_fstat_r+0x1c>
 80085c6:	682b      	ldr	r3, [r5, #0]
 80085c8:	b103      	cbz	r3, 80085cc <_fstat_r+0x1c>
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	bd38      	pop	{r3, r4, r5, pc}
 80085ce:	bf00      	nop
 80085d0:	20004d30 	.word	0x20004d30

080085d4 <_isatty_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4d06      	ldr	r5, [pc, #24]	; (80085f0 <_isatty_r+0x1c>)
 80085d8:	2300      	movs	r3, #0
 80085da:	4604      	mov	r4, r0
 80085dc:	4608      	mov	r0, r1
 80085de:	602b      	str	r3, [r5, #0]
 80085e0:	f7f8 fda3 	bl	800112a <_isatty>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_isatty_r+0x1a>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_isatty_r+0x1a>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	20004d30 	.word	0x20004d30

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr
