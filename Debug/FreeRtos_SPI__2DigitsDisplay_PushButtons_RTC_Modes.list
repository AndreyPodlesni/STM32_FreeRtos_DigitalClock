
FreeRtos_SPI__2DigitsDisplay_PushButtons_RTC_Modes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fec  08008fec  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fec  08008fec  00018fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff4  08008ff4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d00  2000006c  08009068  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d6c  08009068  00024d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e0fb  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047c7  00000000  00000000  0003e1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001978  00000000  00000000  000429a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013a6  00000000  00000000  00044320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bdeb  00000000  00000000  000456c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3dd  00000000  00000000  000614b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2b19  00000000  00000000  0008088e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070fc  00000000  00000000  001233a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0012a4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008dc4 	.word	0x08008dc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008dc4 	.word	0x08008dc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <FourDigitsetSegments>:
    // Display the second digit
    WriteDigit(2, secondDigit);
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
}

void FourDigitsetSegments(uint8_t number) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
		0b10000000,  // 10 (DP)
		0b00000000  // 11 (OFF)

    };

    uint8_t segments = segmentMap[number];
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a32      	ldr	r2, [pc, #200]	; (8000654 <FourDigitsetSegments+0xd8>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	75fb      	strb	r3, [r7, #23]

    GPIO_PinState FourDigitsPinA_State = (segments & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	75bb      	strb	r3, [r7, #22]
    GPIO_PinState FourDigitsPinB_State = (segments & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	105b      	asrs	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	757b      	strb	r3, [r7, #21]
    GPIO_PinState FourDigitsPinC_State = (segments & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	109b      	asrs	r3, r3, #2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	753b      	strb	r3, [r7, #20]
    GPIO_PinState FourDigitsPinD_State = (segments & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ae:	7dfb      	ldrb	r3, [r7, #23]
 80005b0:	10db      	asrs	r3, r3, #3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	74fb      	strb	r3, [r7, #19]
    GPIO_PinState FourDigitsPinE_State = (segments & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	111b      	asrs	r3, r3, #4
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	74bb      	strb	r3, [r7, #18]
    GPIO_PinState FourDigitsPinF_State = (segments & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	115b      	asrs	r3, r3, #5
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	747b      	strb	r3, [r7, #17]
    GPIO_PinState FourDigitsPinG_State = (segments & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005d2:	7dfb      	ldrb	r3, [r7, #23]
 80005d4:	119b      	asrs	r3, r3, #6
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	743b      	strb	r3, [r7, #16]
    GPIO_PinState FourDigitsPinDP_State = (segments & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005de:	7dfb      	ldrb	r3, [r7, #23]
 80005e0:	09db      	lsrs	r3, r3, #7
 80005e2:	73fb      	strb	r3, [r7, #15]

    // Corresponding HAL_GPIO_WritePin calls
    HAL_GPIO_WritePin(FourDigitA_GPIO_Port, FourDigitA_Pin, FourDigitsPinA_State);
 80005e4:	7dbb      	ldrb	r3, [r7, #22]
 80005e6:	461a      	mov	r2, r3
 80005e8:	2104      	movs	r1, #4
 80005ea:	481b      	ldr	r0, [pc, #108]	; (8000658 <FourDigitsetSegments+0xdc>)
 80005ec:	f001 fef4 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitB_GPIO_Port, FourDigitB_Pin, FourDigitsPinB_State);
 80005f0:	7d7b      	ldrb	r3, [r7, #21]
 80005f2:	461a      	mov	r2, r3
 80005f4:	2102      	movs	r1, #2
 80005f6:	4818      	ldr	r0, [pc, #96]	; (8000658 <FourDigitsetSegments+0xdc>)
 80005f8:	f001 feee 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitC_GPIO_Port, FourDigitC_Pin, FourDigitsPinC_State);
 80005fc:	7d3b      	ldrb	r3, [r7, #20]
 80005fe:	461a      	mov	r2, r3
 8000600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000604:	4814      	ldr	r0, [pc, #80]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000606:	f001 fee7 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD_GPIO_Port, FourDigitD_Pin, FourDigitsPinD_State);
 800060a:	7cfb      	ldrb	r3, [r7, #19]
 800060c:	461a      	mov	r2, r3
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000614:	f001 fee0 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitE_GPIO_Port, FourDigitE_Pin, FourDigitsPinE_State);
 8000618:	7cbb      	ldrb	r3, [r7, #18]
 800061a:	461a      	mov	r2, r3
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000622:	f001 fed9 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitF_GPIO_Port, FourDigitF_Pin, FourDigitsPinF_State);
 8000626:	7c7b      	ldrb	r3, [r7, #17]
 8000628:	461a      	mov	r2, r3
 800062a:	2110      	movs	r1, #16
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <FourDigitsetSegments+0xe0>)
 800062e:	f001 fed3 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitG_GPIO_Port, FourDigitG_Pin, FourDigitsPinG_State);
 8000632:	7c3b      	ldrb	r3, [r7, #16]
 8000634:	461a      	mov	r2, r3
 8000636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <FourDigitsetSegments+0xe4>)
 800063c:	f001 fecc 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, FourDigitsPinDP_State);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	461a      	mov	r2, r3
 8000644:	2110      	movs	r1, #16
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <FourDigitsetSegments+0xdc>)
 8000648:	f001 fec6 	bl	80023d8 <HAL_GPIO_WritePin>

}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08008ea4 	.word	0x08008ea4
 8000658:	40020400 	.word	0x40020400
 800065c:	40020800 	.word	0x40020800
 8000660:	40020000 	.word	0x40020000

08000664 <FourDigitsSetCathode>:

void FourDigitsSetCathode(uint8_t Digit)
{	//Problem Here
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState FourDigitsCathodeD1_Pin_State = (Digit == 1)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b01      	cmp	r3, #1
 8000672:	bf14      	ite	ne
 8000674:	2301      	movne	r3, #1
 8000676:	2300      	moveq	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState FourDigitsCathodeD2_Pin_State = (Digit == 2)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b02      	cmp	r3, #2
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState FourDigitsCathodeD3_Pin_State = (Digit == 3)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b03      	cmp	r3, #3
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	737b      	strb	r3, [r7, #13]
	GPIO_PinState FourDigitsCathodeD4_Pin_State = (Digit == 4)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf14      	ite	ne
 800069e:	2301      	movne	r3, #1
 80006a0:	2300      	moveq	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	733b      	strb	r3, [r7, #12]



    HAL_GPIO_WritePin(FourDigitD1_GPIO_Port, FourDigitD1_Pin, FourDigitsCathodeD1_Pin_State);
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	461a      	mov	r2, r3
 80006aa:	2120      	movs	r1, #32
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <FourDigitsSetCathode+0x80>)
 80006ae:	f001 fe93 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD2_GPIO_Port, FourDigitD2_Pin, FourDigitsCathodeD2_Pin_State);
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	461a      	mov	r2, r3
 80006b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <FourDigitsSetCathode+0x84>)
 80006bc:	f001 fe8c 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD3_GPIO_Port, FourDigitD3_Pin, FourDigitsCathodeD3_Pin_State);
 80006c0:	7b7b      	ldrb	r3, [r7, #13]
 80006c2:	461a      	mov	r2, r3
 80006c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <FourDigitsSetCathode+0x84>)
 80006ca:	f001 fe85 	bl	80023d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD4_GPIO_Port, FourDigitD4_Pin, FourDigitsCathodeD4_Pin_State);
 80006ce:	7b3b      	ldrb	r3, [r7, #12]
 80006d0:	461a      	mov	r2, r3
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <FourDigitsSetCathode+0x84>)
 80006d6:	f001 fe7f 	bl	80023d8 <HAL_GPIO_WritePin>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020000 	.word	0x40020000

080006ec <FourDigitsWrite>:
void FourDigitsWrite(uint8_t Digit,uint8_t number)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	FourDigitsetSegments(number);
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff3c 	bl	800057c <FourDigitsetSegments>
	FourDigitsSetCathode(Digit);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffac 	bl	8000664 <FourDigitsSetCathode>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <DisplayTime>:
	  FourDigitsSetCathode(3);
	  HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, State);
}

void DisplayTime(RTC_TimeTypeDef Time, RTC_DateTypeDef Date, osMutexId_t UartMutexHandle)
{
 8000714:	b084      	sub	sp, #16
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	f107 0c10 	add.w	ip, r7, #16
 8000720:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000724:	2200      	movs	r2, #0
 8000726:	f107 0110 	add.w	r1, r7, #16
 800072a:	483f      	ldr	r0, [pc, #252]	; (8000828 <DisplayTime+0x114>)
 800072c:	f002 fd5c 	bl	80031e8 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	483b      	ldr	r0, [pc, #236]	; (8000828 <DisplayTime+0x114>)
 800073a:	f002 fdb3 	bl	80032a4 <HAL_RTC_GetDate>


	 uint8_t HoursFirstDigit = Time.Hours / 10;  // Extract the first digit
 800073e:	7c3b      	ldrb	r3, [r7, #16]
 8000740:	4a3a      	ldr	r2, [pc, #232]	; (800082c <DisplayTime+0x118>)
 8000742:	fba2 2303 	umull	r2, r3, r2, r3
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	71fb      	strb	r3, [r7, #7]
	 uint8_t HoursSecondDigit=Time.Hours % 10; // Extract the second digit
 800074a:	7c3a      	ldrb	r2, [r7, #16]
 800074c:	4b37      	ldr	r3, [pc, #220]	; (800082c <DisplayTime+0x118>)
 800074e:	fba3 1302 	umull	r1, r3, r3, r2
 8000752:	08d9      	lsrs	r1, r3, #3
 8000754:	460b      	mov	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	440b      	add	r3, r1
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	71bb      	strb	r3, [r7, #6]

	 uint8_t MinutsFirstDigit = Time.Minutes / 10;  // Extract the first digit
 8000760:	7c7b      	ldrb	r3, [r7, #17]
 8000762:	4a32      	ldr	r2, [pc, #200]	; (800082c <DisplayTime+0x118>)
 8000764:	fba2 2303 	umull	r2, r3, r2, r3
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	717b      	strb	r3, [r7, #5]
	 uint8_t MinutsSecondDigit=Time.Minutes % 10; // Extract the second digit
 800076c:	7c7a      	ldrb	r2, [r7, #17]
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <DisplayTime+0x118>)
 8000770:	fba3 1302 	umull	r1, r3, r3, r2
 8000774:	08d9      	lsrs	r1, r3, #3
 8000776:	460b      	mov	r3, r1
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	713b      	strb	r3, [r7, #4]


	    // Display the first digit
	    FourDigitsWrite(4, HoursFirstDigit);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4619      	mov	r1, r3
 8000786:	2004      	movs	r0, #4
 8000788:	f7ff ffb0 	bl	80006ec <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 800078c:	2001      	movs	r0, #1
 800078e:	f004 fa9a 	bl	8004cc6 <osDelay>

	    // Display the second digit
	    FourDigitsWrite(3, HoursSecondDigit);
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	4619      	mov	r1, r3
 8000796:	2003      	movs	r0, #3
 8000798:	f7ff ffa8 	bl	80006ec <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 800079c:	2001      	movs	r0, #1
 800079e:	f004 fa92 	bl	8004cc6 <osDelay>


	    FourDigitsWrite(2, MinutsFirstDigit);
 80007a2:	797b      	ldrb	r3, [r7, #5]
 80007a4:	4619      	mov	r1, r3
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff ffa0 	bl	80006ec <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 80007ac:	2001      	movs	r0, #1
 80007ae:	f004 fa8a 	bl	8004cc6 <osDelay>

	    FourDigitsWrite(1, MinutsSecondDigit);
 80007b2:	793b      	ldrb	r3, [r7, #4]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff ff98 	bl	80006ec <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 80007bc:	2001      	movs	r0, #1
 80007be:	f004 fa82 	bl	8004cc6 <osDelay>

	    	uint32_t currentTick = osKernelGetTickCount();
 80007c2:	f004 f9d9 	bl	8004b78 <osKernelGetTickCount>
 80007c6:	6038      	str	r0, [r7, #0]
	    	 if (currentTick - lastTick >= 500) {
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <DisplayTime+0x11c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007d4:	d311      	bcc.n	80007fa <DisplayTime+0xe6>
	    		 DpState = !DpState;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <DisplayTime+0x120>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf14      	ite	ne
 80007de:	2301      	movne	r3, #1
 80007e0:	2300      	moveq	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f083 0301 	eor.w	r3, r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <DisplayTime+0x120>)
 80007f2:	701a      	strb	r2, [r3, #0]
	    	       lastTick = currentTick;
 80007f4:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <DisplayTime+0x11c>)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	6013      	str	r3, [r2, #0]
	    	        }
	    if(DpState)
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <DisplayTime+0x120>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <DisplayTime+0xf8>
	    {
	    	FourDigitsWrite(3, 10);
 8000802:	210a      	movs	r1, #10
 8000804:	2003      	movs	r0, #3
 8000806:	f7ff ff71 	bl	80006ec <FourDigitsWrite>
 800080a:	e003      	b.n	8000814 <DisplayTime+0x100>
	    }
	    else
	    {
	    	FourDigitsWrite(3, 11);
 800080c:	210b      	movs	r1, #11
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff ff6c 	bl	80006ec <FourDigitsWrite>
	    }
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000814:	2001      	movs	r0, #1
 8000816:	f004 fa56 	bl	8004cc6 <osDelay>



}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr
 8000828:	200000cc 	.word	0x200000cc
 800082c:	cccccccd 	.word	0xcccccccd
 8000830:	20000088 	.word	0x20000088
 8000834:	2000008c 	.word	0x2000008c

08000838 <DisplaySetMinutes>:

void DisplaySetMinutes(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000838:	b084      	sub	sp, #16
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	f107 0c10 	add.w	ip, r7, #16
 8000844:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000848:	2200      	movs	r2, #0
 800084a:	f107 0110 	add.w	r1, r7, #16
 800084e:	482d      	ldr	r0, [pc, #180]	; (8000904 <DisplaySetMinutes+0xcc>)
 8000850:	f002 fcca 	bl	80031e8 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4829      	ldr	r0, [pc, #164]	; (8000904 <DisplaySetMinutes+0xcc>)
 800085e:	f002 fd21 	bl	80032a4 <HAL_RTC_GetDate>


	 uint8_t MinutsFirstDigit = Time.Minutes / 10;  // Extract the first digit
 8000862:	7c7b      	ldrb	r3, [r7, #17]
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <DisplaySetMinutes+0xd0>)
 8000866:	fba2 2303 	umull	r2, r3, r2, r3
 800086a:	08db      	lsrs	r3, r3, #3
 800086c:	71fb      	strb	r3, [r7, #7]
	 uint8_t MinutsSecondDigit=Time.Minutes % 10; // Extract the second digit
 800086e:	7c7a      	ldrb	r2, [r7, #17]
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <DisplaySetMinutes+0xd0>)
 8000872:	fba3 1302 	umull	r1, r3, r3, r2
 8000876:	08d9      	lsrs	r1, r3, #3
 8000878:	460b      	mov	r3, r1
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	440b      	add	r3, r1
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	71bb      	strb	r3, [r7, #6]

	 uint32_t currentTick = osKernelGetTickCount();
 8000884:	f004 f978 	bl	8004b78 <osKernelGetTickCount>
 8000888:	6038      	str	r0, [r7, #0]

	 if (currentTick - lastTick >= 500) {
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <DisplaySetMinutes+0xd4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000896:	d311      	bcc.n	80008bc <DisplaySetMinutes+0x84>
		 MinutesState = !MinutesState;
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <DisplaySetMinutes+0xd8>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	bf14      	ite	ne
 80008a0:	2301      	movne	r3, #1
 80008a2:	2300      	moveq	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f083 0301 	eor.w	r3, r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <DisplaySetMinutes+0xd8>)
 80008b4:	701a      	strb	r2, [r3, #0]
	 	    	       lastTick = currentTick;
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <DisplaySetMinutes+0xd4>)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	6013      	str	r3, [r2, #0]
	 	    	        }

	    if(MinutesState)
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <DisplaySetMinutes+0xd8>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d010      	beq.n	80008e6 <DisplaySetMinutes+0xae>
	    {
		    FourDigitsWrite(2, MinutsFirstDigit);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4619      	mov	r1, r3
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff ff0f 	bl	80006ec <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 80008ce:	2001      	movs	r0, #1
 80008d0:	f004 f9f9 	bl	8004cc6 <osDelay>

		    FourDigitsWrite(1, MinutsSecondDigit);
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	4619      	mov	r1, r3
 80008d8:	2001      	movs	r0, #1
 80008da:	f7ff ff07 	bl	80006ec <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 80008de:	2001      	movs	r0, #1
 80008e0:	f004 f9f1 	bl	8004cc6 <osDelay>
	    else
	    {
	    	FourDigitsWrite(3, 11);
	    	osDelay(pdMS_TO_TICKS(1));
	    }
}
 80008e4:	e006      	b.n	80008f4 <DisplaySetMinutes+0xbc>
	    	FourDigitsWrite(3, 11);
 80008e6:	210b      	movs	r1, #11
 80008e8:	2003      	movs	r0, #3
 80008ea:	f7ff feff 	bl	80006ec <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1));
 80008ee:	2001      	movs	r0, #1
 80008f0:	f004 f9e9 	bl	8004cc6 <osDelay>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008fe:	b004      	add	sp, #16
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	200000cc 	.word	0x200000cc
 8000908:	cccccccd 	.word	0xcccccccd
 800090c:	20000088 	.word	0x20000088
 8000910:	2000008d 	.word	0x2000008d

08000914 <DisplaySetHours>:


void DisplaySetHours(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000914:	b084      	sub	sp, #16
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	f107 0c10 	add.w	ip, r7, #16
 8000920:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000924:	2200      	movs	r2, #0
 8000926:	f107 0110 	add.w	r1, r7, #16
 800092a:	482d      	ldr	r0, [pc, #180]	; (80009e0 <DisplaySetHours+0xcc>)
 800092c:	f002 fc5c 	bl	80031e8 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	4829      	ldr	r0, [pc, #164]	; (80009e0 <DisplaySetHours+0xcc>)
 800093a:	f002 fcb3 	bl	80032a4 <HAL_RTC_GetDate>


	 uint8_t HoursFirstDigit = Time.Hours / 10;  // Extract the first digit
 800093e:	7c3b      	ldrb	r3, [r7, #16]
 8000940:	4a28      	ldr	r2, [pc, #160]	; (80009e4 <DisplaySetHours+0xd0>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	71fb      	strb	r3, [r7, #7]
	 uint8_t HoursSecondDigit=Time.Hours % 10; // Extract the second digit
 800094a:	7c3a      	ldrb	r2, [r7, #16]
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <DisplaySetHours+0xd0>)
 800094e:	fba3 1302 	umull	r1, r3, r3, r2
 8000952:	08d9      	lsrs	r1, r3, #3
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	71bb      	strb	r3, [r7, #6]

	 uint32_t currentTick = osKernelGetTickCount();
 8000960:	f004 f90a 	bl	8004b78 <osKernelGetTickCount>
 8000964:	6038      	str	r0, [r7, #0]

	 if (currentTick - lastTick >= 500) {
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <DisplaySetHours+0xd4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000972:	d311      	bcc.n	8000998 <DisplaySetHours+0x84>
		 HoursState = !HoursState;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <DisplaySetHours+0xd8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f083 0301 	eor.w	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <DisplaySetHours+0xd8>)
 8000990:	701a      	strb	r2, [r3, #0]
	 	    	       lastTick = currentTick;
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <DisplaySetHours+0xd4>)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	6013      	str	r3, [r2, #0]
	 	    	        }

	    if(HoursState)
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <DisplaySetHours+0xd8>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d010      	beq.n	80009c2 <DisplaySetHours+0xae>
	    {
		    FourDigitsWrite(4, HoursFirstDigit);
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4619      	mov	r1, r3
 80009a4:	2004      	movs	r0, #4
 80009a6:	f7ff fea1 	bl	80006ec <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 80009aa:	2001      	movs	r0, #1
 80009ac:	f004 f98b 	bl	8004cc6 <osDelay>

		    FourDigitsWrite(3, HoursSecondDigit);
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	4619      	mov	r1, r3
 80009b4:	2003      	movs	r0, #3
 80009b6:	f7ff fe99 	bl	80006ec <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 80009ba:	2001      	movs	r0, #1
 80009bc:	f004 f983 	bl	8004cc6 <osDelay>
	    else
	    {
	    	FourDigitsWrite(3, 11);
	    	osDelay(pdMS_TO_TICKS(1));
	    }
}
 80009c0:	e006      	b.n	80009d0 <DisplaySetHours+0xbc>
	    	FourDigitsWrite(3, 11);
 80009c2:	210b      	movs	r1, #11
 80009c4:	2003      	movs	r0, #3
 80009c6:	f7ff fe91 	bl	80006ec <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1));
 80009ca:	2001      	movs	r0, #1
 80009cc:	f004 f97b 	bl	8004cc6 <osDelay>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009da:	b004      	add	sp, #16
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200000cc 	.word	0x200000cc
 80009e4:	cccccccd 	.word	0xcccccccd
 80009e8:	20000088 	.word	0x20000088
 80009ec:	2000008e 	.word	0x2000008e

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_DMA_Init+0x3c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <MX_DMA_Init+0x3c>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_DMA_Init+0x3c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2105      	movs	r1, #5
 8000a16:	200e      	movs	r0, #14
 8000a18:	f000 ffa8 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a1c:	200e      	movs	r0, #14
 8000a1e:	f000 ffc1 	bl	80019a4 <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of UartMutex */
  UartMutexHandle = osMutexNew(&UartMutex_attributes);
 8000a34:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <MX_FREERTOS_Init+0x74>)
 8000a36:	f004 f961 	bl	8004cfc <osMutexNew>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <MX_FREERTOS_Init+0x78>)
 8000a3e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadSpi */
  ReadSpiHandle = osThreadNew(Read_spi, NULL, &ReadSpi_attributes);
 8000a40:	4a1a      	ldr	r2, [pc, #104]	; (8000aac <MX_FREERTOS_Init+0x7c>)
 8000a42:	2100      	movs	r1, #0
 8000a44:	481a      	ldr	r0, [pc, #104]	; (8000ab0 <MX_FREERTOS_Init+0x80>)
 8000a46:	f004 f8ac 	bl	8004ba2 <osThreadNew>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <MX_FREERTOS_Init+0x84>)
 8000a4e:	6013      	str	r3, [r2, #0]

  /* creation of TwoDigitsWrite */
  TwoDigitsWriteHandle = osThreadNew(TwoDigitsWriteTask, NULL, &TwoDigitsWrite_attributes);
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <MX_FREERTOS_Init+0x88>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4819      	ldr	r0, [pc, #100]	; (8000abc <MX_FREERTOS_Init+0x8c>)
 8000a56:	f004 f8a4 	bl	8004ba2 <osThreadNew>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <MX_FREERTOS_Init+0x90>)
 8000a5e:	6013      	str	r3, [r2, #0]

  /* creation of ShowTimeMode */
  ShowTimeModeHandle = osThreadNew(ShowTimeModeTask, NULL, &ShowTimeMode_attributes);
 8000a60:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <MX_FREERTOS_Init+0x94>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <MX_FREERTOS_Init+0x98>)
 8000a66:	f004 f89c 	bl	8004ba2 <osThreadNew>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4a17      	ldr	r2, [pc, #92]	; (8000acc <MX_FREERTOS_Init+0x9c>)
 8000a6e:	6013      	str	r3, [r2, #0]

  /* creation of PushButtons */
  PushButtonsHandle = osThreadNew(PushButtonsTask, NULL, &PushButtons_attributes);
 8000a70:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <MX_FREERTOS_Init+0xa0>)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <MX_FREERTOS_Init+0xa4>)
 8000a76:	f004 f894 	bl	8004ba2 <osThreadNew>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <MX_FREERTOS_Init+0xa8>)
 8000a7e:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(ClockTask, NULL, &Clock_attributes);
 8000a80:	4a16      	ldr	r2, [pc, #88]	; (8000adc <MX_FREERTOS_Init+0xac>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4816      	ldr	r0, [pc, #88]	; (8000ae0 <MX_FREERTOS_Init+0xb0>)
 8000a86:	f004 f88c 	bl	8004ba2 <osThreadNew>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <MX_FREERTOS_Init+0xb4>)
 8000a8e:	6013      	str	r3, [r2, #0]

  /* creation of SetMinutesMode */
  SetMinutesModeHandle = osThreadNew(SetMinutesModeTask, NULL, &SetMinutesMode_attributes);
 8000a90:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <MX_FREERTOS_Init+0xb8>)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4815      	ldr	r0, [pc, #84]	; (8000aec <MX_FREERTOS_Init+0xbc>)
 8000a96:	f004 f884 	bl	8004ba2 <osThreadNew>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <MX_FREERTOS_Init+0xc0>)
 8000a9e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	08008f88 	.word	0x08008f88
 8000aa8:	200000c8 	.word	0x200000c8
 8000aac:	08008eb0 	.word	0x08008eb0
 8000ab0:	08000af5 	.word	0x08000af5
 8000ab4:	200000b0 	.word	0x200000b0
 8000ab8:	08008ed4 	.word	0x08008ed4
 8000abc:	08000b61 	.word	0x08000b61
 8000ac0:	200000b4 	.word	0x200000b4
 8000ac4:	08008ef8 	.word	0x08008ef8
 8000ac8:	08000b71 	.word	0x08000b71
 8000acc:	200000b8 	.word	0x200000b8
 8000ad0:	08008f1c 	.word	0x08008f1c
 8000ad4:	08000c05 	.word	0x08000c05
 8000ad8:	200000bc 	.word	0x200000bc
 8000adc:	08008f40 	.word	0x08008f40
 8000ae0:	08000dd9 	.word	0x08000dd9
 8000ae4:	200000c0 	.word	0x200000c0
 8000ae8:	08008f64 	.word	0x08008f64
 8000aec:	08000de9 	.word	0x08000de9
 8000af0:	200000c4 	.word	0x200000c4

08000af4 <Read_spi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_spi */
void Read_spi(void *argument)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_spi */
	uint16_t reading[1];
	 HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)reading, sizeof(reading));
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2202      	movs	r2, #2
 8000b02:	4619      	mov	r1, r3
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <Read_spi+0x60>)
 8000b06:	f002 fd63 	bl	80035d0 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  number++;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <Read_spi+0x64>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <Read_spi+0x64>)
 8000b14:	801a      	strh	r2, [r3, #0]
	  if (number == 9999) { number = 0;}
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <Read_spi+0x64>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d102      	bne.n	8000b28 <Read_spi+0x34>
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <Read_spi+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	801a      	strh	r2, [r3, #0]
  	  osDelay(20);
 8000b28:	2014      	movs	r0, #20
 8000b2a:	f004 f8cc 	bl	8004cc6 <osDelay>
  		if (osMutexAcquire(UartMutexHandle, 20) == osOK)
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <Read_spi+0x68>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2114      	movs	r1, #20
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 f967 	bl	8004e08 <osMutexAcquire>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1e4      	bne.n	8000b0a <Read_spi+0x16>
  		  	{
  		  	    osDelay(20);
 8000b40:	2014      	movs	r0, #20
 8000b42:	f004 f8c0 	bl	8004cc6 <osDelay>
  		  //	 printf("reading values is: %d\n\r",reading[0]);
  		  	  osMutexRelease(UartMutexHandle);
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <Read_spi+0x68>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 f9a7 	bl	8004e9e <osMutexRelease>
	  number++;
 8000b50:	e7db      	b.n	8000b0a <Read_spi+0x16>
 8000b52:	bf00      	nop
 8000b54:	200000ec 	.word	0x200000ec
 8000b58:	20000090 	.word	0x20000090
 8000b5c:	200000c8 	.word	0x200000c8

08000b60 <TwoDigitsWriteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TwoDigitsWriteTask */
void TwoDigitsWriteTask(void *argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]


//	  SetDP(GPIO_PIN_SET);
//	  osDelay(pdMS_TO_TICKS(2000));
//	  SetDP(GPIO_PIN_RESET);
	  osDelay(pdMS_TO_TICKS(20));
 8000b68:	2014      	movs	r0, #20
 8000b6a:	f004 f8ac 	bl	8004cc6 <osDelay>
 8000b6e:	e7fb      	b.n	8000b68 <TwoDigitsWriteTask+0x8>

08000b70 <ShowTimeModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ShowTimeModeTask */
void ShowTimeModeTask(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af04      	add	r7, sp, #16
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ShowTimeModeTask */
		Time.Hours = 12;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <ShowTimeModeTask+0x80>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	701a      	strb	r2, [r3, #0]
		Time.Minutes = 00;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <ShowTimeModeTask+0x80>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	705a      	strb	r2, [r3, #1]
		Time.Seconds = 0;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <ShowTimeModeTask+0x80>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	709a      	strb	r2, [r3, #2]
		HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4918      	ldr	r1, [pc, #96]	; (8000bf0 <ShowTimeModeTask+0x80>)
 8000b8e:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <ShowTimeModeTask+0x84>)
 8000b90:	f002 fa90 	bl	80030b4 <HAL_RTC_SetTime>
	  /* Infinite loop */
	  for(;;)
	  {
		  if(currentState ==ShowTime)
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <ShowTimeModeTask+0x88>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10b      	bne.n	8000bb6 <ShowTimeModeTask+0x46>
			  DisplayTime(Time,Date,UartMutexHandle);
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <ShowTimeModeTask+0x8c>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <ShowTimeModeTask+0x80>)
 8000ba4:	9202      	str	r2, [sp, #8]
 8000ba6:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <ShowTimeModeTask+0x90>)
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	9201      	str	r2, [sp, #4]
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	9200      	str	r2, [sp, #0]
 8000bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb2:	f7ff fdaf 	bl	8000714 <DisplayTime>
		  if(currentState == SetMinutes)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <ShowTimeModeTask+0x88>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d108      	bne.n	8000bd2 <ShowTimeModeTask+0x62>
		  DisplaySetMinutes(Time, Date);
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <ShowTimeModeTask+0x80>)
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <ShowTimeModeTask+0x90>)
 8000bc4:	6812      	ldr	r2, [r2, #0]
 8000bc6:	9201      	str	r2, [sp, #4]
 8000bc8:	691a      	ldr	r2, [r3, #16]
 8000bca:	9200      	str	r2, [sp, #0]
 8000bcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bce:	f7ff fe33 	bl	8000838 <DisplaySetMinutes>
		  if(currentState == SetHours)
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <ShowTimeModeTask+0x88>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d1db      	bne.n	8000b94 <ShowTimeModeTask+0x24>
		  DisplaySetHours(Time,Date);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <ShowTimeModeTask+0x80>)
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <ShowTimeModeTask+0x90>)
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	9201      	str	r2, [sp, #4]
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	9200      	str	r2, [sp, #0]
 8000be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bea:	f7ff fe93 	bl	8000914 <DisplaySetHours>
		  if(currentState ==ShowTime)
 8000bee:	e7d1      	b.n	8000b94 <ShowTimeModeTask+0x24>
 8000bf0:	20000094 	.word	0x20000094
 8000bf4:	200000cc 	.word	0x200000cc
 8000bf8:	200000ac 	.word	0x200000ac
 8000bfc:	200000c8 	.word	0x200000c8
 8000c00:	200000a8 	.word	0x200000a8

08000c04 <PushButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PushButtonsTask */
void PushButtonsTask(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PushButtonsTask */
  /* Infinite loop */
  GPIO_PinState Mode, ModePrev = GPIO_PIN_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  GPIO_PinState Up, UpPrev = GPIO_PIN_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  GPIO_PinState Down, DownPrev = GPIO_PIN_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint32_t LastTimeMode = 0, LastTimeUp = 0, LastTimeDown = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  const uint32_t debounceDelay = 50; // Debounce time in milliseconds
 8000c2a:	2332      	movs	r3, #50	; 0x32
 8000c2c:	617b      	str	r3, [r7, #20]
  const uint32_t longPressThreshold = 1000; // Long press threshold in milliseconds for Mode button
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(PushButtonGND_GPIO_Port, PushButtonGND_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3a:	485f      	ldr	r0, [pc, #380]	; (8000db8 <PushButtonsTask+0x1b4>)
 8000c3c:	f001 fbcc 	bl	80023d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PushButton3V_GPIO_Port, PushButton3V_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c46:	485c      	ldr	r0, [pc, #368]	; (8000db8 <PushButtonsTask+0x1b4>)
 8000c48:	f001 fbc6 	bl	80023d8 <HAL_GPIO_WritePin>

  for(;;)
  {
    // Read the current state of each button
    Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	485a      	ldr	r0, [pc, #360]	; (8000dbc <PushButtonsTask+0x1b8>)
 8000c52:	f001 fba9 	bl	80023a8 <HAL_GPIO_ReadPin>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    Up = HAL_GPIO_ReadPin(PushButtonUp_GPIO_Port, PushButtonUp_Pin);
 8000c5c:	2140      	movs	r1, #64	; 0x40
 8000c5e:	4856      	ldr	r0, [pc, #344]	; (8000db8 <PushButtonsTask+0x1b4>)
 8000c60:	f001 fba2 	bl	80023a8 <HAL_GPIO_ReadPin>
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]
    Down = HAL_GPIO_ReadPin(PushButtonDown_GPIO_Port, PushButtonDown_Pin);
 8000c68:	2120      	movs	r1, #32
 8000c6a:	4853      	ldr	r0, [pc, #332]	; (8000db8 <PushButtonsTask+0x1b4>)
 8000c6c:	f001 fb9c 	bl	80023a8 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	73bb      	strb	r3, [r7, #14]

    if (osMutexAcquire(UartMutexHandle, 20) == osOK)
 8000c74:	4b52      	ldr	r3, [pc, #328]	; (8000dc0 <PushButtonsTask+0x1bc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2114      	movs	r1, #20
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 f8c4 	bl	8004e08 <osMutexAcquire>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8093 	bne.w	8000dae <PushButtonsTask+0x1aa>
    {
      // Check Mode button for short/long press
      if(Mode != ModePrev && (HAL_GetTick() - LastTimeMode) > debounceDelay)
 8000c88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d051      	beq.n	8000d38 <PushButtonsTask+0x134>
 8000c94:	f000 fda6 	bl	80017e4 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d249      	bcs.n	8000d38 <PushButtonsTask+0x134>
      {
        if(Mode == GPIO_PIN_SET)
 8000ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d142      	bne.n	8000d32 <PushButtonsTask+0x12e>
        {
          uint32_t pressTime = HAL_GetTick();
 8000cac:	f000 fd9a 	bl	80017e4 <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
          while((Mode == GPIO_PIN_SET) && (HAL_GetTick() - pressTime < longPressThreshold))
 8000cb2:	e00a      	b.n	8000cca <PushButtonsTask+0xc6>
          {
            Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 8000cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb8:	4840      	ldr	r0, [pc, #256]	; (8000dbc <PushButtonsTask+0x1b8>)
 8000cba:	f001 fb75 	bl	80023a8 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            osDelay(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f003 fffe 	bl	8004cc6 <osDelay>
          while((Mode == GPIO_PIN_SET) && (HAL_GetTick() - pressTime < longPressThreshold))
 8000cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d107      	bne.n	8000ce2 <PushButtonsTask+0xde>
 8000cd2:	f000 fd87 	bl	80017e4 <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d8e8      	bhi.n	8000cb4 <PushButtonsTask+0xb0>
          }
          if(Mode == GPIO_PIN_SET)
 8000ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d10f      	bne.n	8000d0a <PushButtonsTask+0x106>
          {
        	  if(currentState == ShowTime)
 8000cea:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <PushButtonsTask+0x1c0>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d103      	bne.n	8000cfc <PushButtonsTask+0xf8>
        	  {
        	  currentState = SetMinutes;
 8000cf4:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <PushButtonsTask+0x1c0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
 8000cfa:	e002      	b.n	8000d02 <PushButtonsTask+0xfe>
        	  }
        	  else
        	  {
        		  currentState = ShowTime;
 8000cfc:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <PushButtonsTask+0x1c0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
        	  }
        	  printf("Mode Long Pressed\n\r");
 8000d02:	4831      	ldr	r0, [pc, #196]	; (8000dc8 <PushButtonsTask+0x1c4>)
 8000d04:	f007 f984 	bl	8008010 <iprintf>
 8000d08:	e013      	b.n	8000d32 <PushButtonsTask+0x12e>
          }
          else
          {
            printf("Mode Short Pressed\n\r");
 8000d0a:	4830      	ldr	r0, [pc, #192]	; (8000dcc <PushButtonsTask+0x1c8>)
 8000d0c:	f007 f980 	bl	8008010 <iprintf>
            if (currentState == SetMinutes)
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <PushButtonsTask+0x1c0>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d103      	bne.n	8000d22 <PushButtonsTask+0x11e>
            	currentState = SetHours;
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <PushButtonsTask+0x1c0>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e007      	b.n	8000d32 <PushButtonsTask+0x12e>
            else if (currentState == SetHours)
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <PushButtonsTask+0x1c0>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d102      	bne.n	8000d32 <PushButtonsTask+0x12e>
            	currentState = SetMinutes;
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <PushButtonsTask+0x1c0>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
          }
        }
        LastTimeMode = HAL_GetTick();
 8000d32:	f000 fd57 	bl	80017e4 <HAL_GetTick>
 8000d36:	6238      	str	r0, [r7, #32]
      }

      // Check Up button for short press only
      if(Up != UpPrev && (HAL_GetTick() - LastTimeUp) > debounceDelay)
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d010      	beq.n	8000d64 <PushButtonsTask+0x160>
 8000d42:	f000 fd4f 	bl	80017e4 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d208      	bcs.n	8000d64 <PushButtonsTask+0x160>
      {
        if(Up == GPIO_PIN_SET)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d102      	bne.n	8000d5e <PushButtonsTask+0x15a>
        {
          printf("Up Short Pressed\n\r");
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <PushButtonsTask+0x1cc>)
 8000d5a:	f007 f959 	bl	8008010 <iprintf>
        }
        LastTimeUp = HAL_GetTick();
 8000d5e:	f000 fd41 	bl	80017e4 <HAL_GetTick>
 8000d62:	61f8      	str	r0, [r7, #28]
      }

      // Check Down button for short press only
      if(Down != DownPrev && (HAL_GetTick() - LastTimeDown) > debounceDelay)
 8000d64:	7bba      	ldrb	r2, [r7, #14]
 8000d66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d010      	beq.n	8000d90 <PushButtonsTask+0x18c>
 8000d6e:	f000 fd39 	bl	80017e4 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d208      	bcs.n	8000d90 <PushButtonsTask+0x18c>
      {
        if(Down == GPIO_PIN_SET)
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d102      	bne.n	8000d8a <PushButtonsTask+0x186>
        {
          printf("Down Short Pressed\n\r");
 8000d84:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <PushButtonsTask+0x1d0>)
 8000d86:	f007 f943 	bl	8008010 <iprintf>
        }
        LastTimeDown = HAL_GetTick();
 8000d8a:	f000 fd2b 	bl	80017e4 <HAL_GetTick>
 8000d8e:	61b8      	str	r0, [r7, #24]
      }

      // Update the previous state for each button
      ModePrev = Mode;
 8000d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      UpPrev = Up;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      DownPrev = Down;
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

      osMutexRelease(UartMutexHandle);
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <PushButtonsTask+0x1bc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 f878 	bl	8004e9e <osMutexRelease>
    }
    osDelay(1); // Adjust this delay as per your requirement
 8000dae:	2001      	movs	r0, #1
 8000db0:	f003 ff89 	bl	8004cc6 <osDelay>
    Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 8000db4:	e74a      	b.n	8000c4c <PushButtonsTask+0x48>
 8000db6:	bf00      	nop
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	200000c8 	.word	0x200000c8
 8000dc4:	200000ac 	.word	0x200000ac
 8000dc8:	08008e34 	.word	0x08008e34
 8000dcc:	08008e48 	.word	0x08008e48
 8000dd0:	08008e60 	.word	0x08008e60
 8000dd4:	08008e74 	.word	0x08008e74

08000dd8 <ClockTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ClockTask */
void ClockTask(void *argument)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
//	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
  /* Infinite loop */
  for(;;)
  {
	//DisplayTime(Time,Date,UartMutexHandle);
    osDelay(1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f003 ff70 	bl	8004cc6 <osDelay>
 8000de6:	e7fb      	b.n	8000de0 <ClockTask+0x8>

08000de8 <SetMinutesModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SetMinutesModeTask */
void SetMinutesModeTask(void *argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SetMinutesModeTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f003 ff68 	bl	8004cc6 <osDelay>
 8000df6:	e7fb      	b.n	8000df0 <SetMinutesModeTask+0x8>

08000df8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a54      	ldr	r2, [pc, #336]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b52      	ldr	r3, [pc, #328]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a4d      	ldr	r2, [pc, #308]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a46      	ldr	r2, [pc, #280]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a3f      	ldr	r2, [pc, #252]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f241 7117 	movw	r1, #5911	; 0x1717
 8000e84:	4839      	ldr	r0, [pc, #228]	; (8000f6c <MX_GPIO_Init+0x174>)
 8000e86:	f001 faa7 	bl	80023d8 <HAL_GPIO_WritePin>
                          |PushButtonGND_Pin|PushButton3V_Pin|Cathode_1_Pin|Cathode_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|LD2_Pin
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8000e90:	4837      	ldr	r0, [pc, #220]	; (8000f70 <MX_GPIO_Init+0x178>)
 8000e92:	f001 faa1 	bl	80023d8 <HAL_GPIO_WritePin>
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 8000e96:	2200      	movs	r2, #0
 8000e98:	f24e 0137 	movw	r1, #57399	; 0xe037
 8000e9c:	4835      	ldr	r0, [pc, #212]	; (8000f74 <MX_GPIO_Init+0x17c>)
 8000e9e:	f001 fa9b 	bl	80023d8 <HAL_GPIO_WritePin>
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ea8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	482c      	ldr	r0, [pc, #176]	; (8000f6c <MX_GPIO_Init+0x174>)
 8000eba:	f001 f8f1 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 8000ebe:	f241 7317 	movw	r3, #5911	; 0x1717
 8000ec2:	617b      	str	r3, [r7, #20]
                          |PushButtonGND_Pin|PushButton3V_Pin|Cathode_1_Pin|Cathode_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4825      	ldr	r0, [pc, #148]	; (8000f6c <MX_GPIO_Init+0x174>)
 8000ed8:	f001 f8e2 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|LD2_Pin
 8000edc:	f240 73b3 	movw	r3, #1971	; 0x7b3
 8000ee0:	617b      	str	r3, [r7, #20]
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481e      	ldr	r0, [pc, #120]	; (8000f70 <MX_GPIO_Init+0x178>)
 8000ef6:	f001 f8d3 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PushButtonDown_Pin|PushButtonUp_Pin;
 8000efa:	2360      	movs	r3, #96	; 0x60
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4817      	ldr	r0, [pc, #92]	; (8000f6c <MX_GPIO_Init+0x174>)
 8000f10:	f001 f8c6 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 8000f14:	f24e 0337 	movw	r3, #57399	; 0xe037
 8000f18:	617b      	str	r3, [r7, #20]
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4811      	ldr	r0, [pc, #68]	; (8000f74 <MX_GPIO_Init+0x17c>)
 8000f2e:	f001 f8b7 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PushButtonMode_Pin;
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PushButtonMode_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	480a      	ldr	r0, [pc, #40]	; (8000f74 <MX_GPIO_Init+0x17c>)
 8000f4a:	f001 f8a9 	bl	80020a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2105      	movs	r1, #5
 8000f52:	2017      	movs	r0, #23
 8000f54:	f000 fd0a 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f58:	2017      	movs	r0, #23
 8000f5a:	f000 fd23 	bl	80019a4 <HAL_NVIC_EnableIRQ>

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f000 fbfc 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f812 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f7ff ff38 	bl	8000df8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f88:	f7ff fd32 	bl	80009f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f8c:	f000 fb58 	bl	8001640 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000f90:	f000 f8de 	bl	8001150 <MX_SPI2_Init>
  MX_RTC_Init();
 8000f94:	f000 f88a 	bl	80010ac <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f98:	f003 fda4 	bl	8004ae4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f9c:	f7ff fd48 	bl	8000a30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fa0:	f003 fdc4 	bl	8004b2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <main+0x2c>
	...

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 f87f 	bl	80080ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemClock_Config+0xd0>)
 8000ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001004:	2309      	movs	r3, #9
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800100e:	2301      	movs	r3, #1
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001020:	2364      	movs	r3, #100	; 0x64
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001024:	2302      	movs	r3, #2
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001028:	2304      	movs	r3, #4
 800102a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fa0f 	bl	8002454 <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800103c:	f000 f830 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2302      	movs	r3, #2
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2103      	movs	r1, #3
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fc71 	bl	8002944 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001068:	f000 f81a 	bl	80010a0 <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3750      	adds	r7, #80	; 0x50
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800108e:	f000 fb95 	bl	80017bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40000400 	.word	0x40000400

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_RTC_Init+0x44>)
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <MX_RTC_Init+0x48>)
 80010b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_RTC_Init+0x44>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_RTC_Init+0x44>)
 80010be:	227f      	movs	r2, #127	; 0x7f
 80010c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_RTC_Init+0x44>)
 80010c4:	22ff      	movs	r2, #255	; 0xff
 80010c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_RTC_Init+0x44>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_RTC_Init+0x44>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_RTC_Init+0x44>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_RTC_Init+0x44>)
 80010dc:	f001 ff74 	bl	8002fc8 <HAL_RTC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80010e6:	f7ff ffdb 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000cc 	.word	0x200000cc
 80010f4:	40002800 	.word	0x40002800

080010f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <HAL_RTC_MspInit+0x50>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d111      	bne.n	8001140 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800111c:	2302      	movs	r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fe5c 	bl	8002de8 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001136:	f7ff ffb3 	bl	80010a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_RTC_MspInit+0x54>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40002800 	.word	0x40002800
 800114c:	42470e3c 	.word	0x42470e3c

08001150 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_SPI2_Init+0x60>)
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <MX_SPI2_Init+0x64>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_SPI2_Init+0x60>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_SPI2_Init+0x60>)
 8001162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001166:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_SPI2_Init+0x60>)
 800116a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_SPI2_Init+0x60>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_SPI2_Init+0x60>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SPI2_Init+0x60>)
 800117e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001182:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_SPI2_Init+0x60>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SPI2_Init+0x60>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_SPI2_Init+0x60>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SPI2_Init+0x60>)
 8001198:	220a      	movs	r2, #10
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_SPI2_Init+0x60>)
 800119e:	f002 f98d 	bl	80034bc <HAL_SPI_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f7ff ff7a 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200000ec 	.word	0x200000ec
 80011b4:	40003800 	.word	0x40003800

080011b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a40      	ldr	r2, [pc, #256]	; (80012d8 <HAL_SPI_MspInit+0x120>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d17a      	bne.n	80012d0 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <HAL_SPI_MspInit+0x124>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a3e      	ldr	r2, [pc, #248]	; (80012dc <HAL_SPI_MspInit+0x124>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <HAL_SPI_MspInit+0x124>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b38      	ldr	r3, [pc, #224]	; (80012dc <HAL_SPI_MspInit+0x124>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a37      	ldr	r2, [pc, #220]	; (80012dc <HAL_SPI_MspInit+0x124>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <HAL_SPI_MspInit+0x124>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_SPI_MspInit+0x124>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a30      	ldr	r2, [pc, #192]	; (80012dc <HAL_SPI_MspInit+0x124>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <HAL_SPI_MspInit+0x124>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800122e:	2308      	movs	r3, #8
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800123e:	2305      	movs	r3, #5
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4825      	ldr	r0, [pc, #148]	; (80012e0 <HAL_SPI_MspInit+0x128>)
 800124a:	f000 ff29 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800124e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001260:	2305      	movs	r3, #5
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	481e      	ldr	r0, [pc, #120]	; (80012e4 <HAL_SPI_MspInit+0x12c>)
 800126c:	f000 ff18 	bl	80020a0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_SPI_MspInit+0x134>)
 8001274:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 800128a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 8001292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001296:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 800129a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 80012a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 80012b6:	f000 fb83 	bl	80019c0 <HAL_DMA_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80012c0:	f7ff feee 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 80012c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012ca:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_SPI_MspInit+0x130>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40003800 	.word	0x40003800
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020400 	.word	0x40020400
 80012e8:	20000144 	.word	0x20000144
 80012ec:	40026058 	.word	0x40026058

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_MspInit+0x54>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_MspInit+0x54>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_MspInit+0x54>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_MspInit+0x54>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <HAL_MspInit+0x54>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_MspInit+0x54>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	210f      	movs	r1, #15
 8001332:	f06f 0001 	mvn.w	r0, #1
 8001336:	f000 fb19 	bl	800196c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	; 0x38
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4b33      	ldr	r3, [pc, #204]	; (800142c <HAL_InitTick+0xe4>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a32      	ldr	r2, [pc, #200]	; (800142c <HAL_InitTick+0xe4>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_InitTick+0xe4>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001374:	f107 0210 	add.w	r2, r7, #16
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fd00 	bl	8002d84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	2b00      	cmp	r3, #0
 800138c:	d103      	bne.n	8001396 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800138e:	f001 fcd1 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8001392:	6378      	str	r0, [r7, #52]	; 0x34
 8001394:	e004      	b.n	80013a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001396:	f001 fccd 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 800139a:	4603      	mov	r3, r0
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <HAL_InitTick+0xe8>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9b      	lsrs	r3, r3, #18
 80013aa:	3b01      	subs	r3, #1
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_InitTick+0xec>)
 80013b0:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_InitTick+0xf0>)
 80013b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_InitTick+0xec>)
 80013b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ba:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_InitTick+0xec>)
 80013be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_InitTick+0xec>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_InitTick+0xec>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_InitTick+0xec>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80013d4:	4817      	ldr	r0, [pc, #92]	; (8001434 <HAL_InitTick+0xec>)
 80013d6:	f002 fcff 	bl	8003dd8 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d11b      	bne.n	8001420 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80013e8:	4812      	ldr	r0, [pc, #72]	; (8001434 <HAL_InitTick+0xec>)
 80013ea:	f002 fd4f 	bl	8003e8c <HAL_TIM_Base_Start_IT>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d111      	bne.n	8001420 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013fc:	201d      	movs	r0, #29
 80013fe:	f000 fad1 	bl	80019a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d808      	bhi.n	800141a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	201d      	movs	r0, #29
 800140e:	f000 faad 	bl	800196c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_InitTick+0xf4>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e002      	b.n	8001420 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001420:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001424:	4618      	mov	r0, r3
 8001426:	3738      	adds	r7, #56	; 0x38
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	431bde83 	.word	0x431bde83
 8001434:	200001a4 	.word	0x200001a4
 8001438:	40000400 	.word	0x40000400
 800143c:	20000004 	.word	0x20000004

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <DMA1_Stream3_IRQHandler+0x10>)
 8001472:	f000 fbab 	bl	8001bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000144 	.word	0x20000144

08001480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PushButtonDown_Pin);
 8001484:	2020      	movs	r0, #32
 8001486:	f000 ffc1 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PushButtonUp_Pin);
 800148a:	2040      	movs	r0, #64	; 0x40
 800148c:	f000 ffbe 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PushButtonMode_Pin);
 8001490:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001494:	f000 ffba 	bl	800240c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM3_IRQHandler+0x10>)
 80014a2:	f002 fd55 	bl	8003f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200001a4 	.word	0x200001a4

080014b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e00a      	b.n	80014d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c2:	f3af 8000 	nop.w
 80014c6:	4601      	mov	r1, r0
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	60ba      	str	r2, [r7, #8]
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf0      	blt.n	80014c2 <_read+0x12>
  }

  return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e009      	b.n	8001510 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f889 	bl	800161c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf1      	blt.n	80014fc <_write+0x12>
  }
  return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_close>:

int _close(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154a:	605a      	str	r2, [r3, #4]
  return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f006 fe22 	bl	8008204 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20020000 	.word	0x20020000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	200001ec 	.word	0x200001ec
 80015f4:	20004d70 	.word	0x20004d70

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__io_putchar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 8001624:	1d39      	adds	r1, r7, #4
 8001626:	230a      	movs	r3, #10
 8001628:	2201      	movs	r2, #1
 800162a:	4804      	ldr	r0, [pc, #16]	; (800163c <__io_putchar+0x20>)
 800162c:	f002 fea1 	bl	8004372 <HAL_UART_Transmit>
	return ch;
 8001630:	687b      	ldr	r3, [r7, #4]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200001f0 	.word	0x200001f0

08001640 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <MX_USART2_UART_Init+0x50>)
 8001648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <MX_USART2_UART_Init+0x4c>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_USART2_UART_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_USART2_UART_Init+0x4c>)
 8001678:	f002 fe2e 	bl	80042d8 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001682:	f7ff fd0d 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200001f0 	.word	0x200001f0
 8001690:	40004400 	.word	0x40004400

08001694 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_UART_MspInit+0x84>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12b      	bne.n	800170e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_UART_MspInit+0x88>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_UART_MspInit+0x88>)
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_UART_MspInit+0x88>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_UART_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <HAL_UART_MspInit+0x88>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_UART_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ee:	230c      	movs	r3, #12
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fe:	2307      	movs	r3, #7
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_UART_MspInit+0x8c>)
 800170a:	f000 fcc9 	bl	80020a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40004400 	.word	0x40004400
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800175c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001740:	4c0b      	ldr	r4, [pc, #44]	; (8001770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174e:	f7ff ff53 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f006 fd5d 	bl	8008210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7ff fc0f 	bl	8000f78 <main>
  bx  lr    
 800175a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800175c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001768:	08008ffc 	.word	0x08008ffc
  ldr r2, =_sbss
 800176c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001770:	20004d6c 	.word	0x20004d6c

08001774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC_IRQHandler>
	...

08001778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_Init+0x40>)
 8001782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_Init+0x40>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x40>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 f8d8 	bl	8001956 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f7ff fdce 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fda0 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20000234 	.word	0x20000234

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000234 	.word	0x20000234

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ff4c 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197e:	f7ff ff61 	bl	8001844 <__NVIC_GetPriorityGrouping>
 8001982:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	6978      	ldr	r0, [r7, #20]
 800198a:	f7ff ffb1 	bl	80018f0 <NVIC_EncodePriority>
 800198e:	4602      	mov	r2, r0
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff80 	bl	800189c <__NVIC_SetPriority>
}
 800199c:	bf00      	nop
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff54 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff ff0a 	bl	80017e4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e099      	b.n	8001b10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019fc:	e00f      	b.n	8001a1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019fe:	f7ff fef1 	bl	80017e4 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d908      	bls.n	8001a1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2203      	movs	r2, #3
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e078      	b.n	8001b10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e8      	bne.n	80019fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <HAL_DMA_Init+0x158>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d107      	bne.n	8001a88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4313      	orrs	r3, r2
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f023 0307 	bic.w	r3, r3, #7
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d117      	bne.n	8001ae2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00e      	beq.n	8001ae2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fa6f 	bl	8001fa8 <DMA_CheckFifoParam>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2240      	movs	r2, #64	; 0x40
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e016      	b.n	8001b10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fa26 	bl	8001f3c <DMA_CalcBaseAndBitshift>
 8001af0:	4603      	mov	r3, r0
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	223f      	movs	r2, #63	; 0x3f
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	f010803f 	.word	0xf010803f

08001b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_DMA_Start_IT+0x26>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e040      	b.n	8001bc4 <HAL_DMA_Start_IT+0xa8>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d12f      	bne.n	8001bb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f9b8 	bl	8001ee0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	223f      	movs	r2, #63	; 0x3f
 8001b76:	409a      	lsls	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0216 	orr.w	r2, r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0208 	orr.w	r2, r2, #8
 8001ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e005      	b.n	8001bc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bd8:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <HAL_DMA_IRQHandler+0x248>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a8e      	ldr	r2, [pc, #568]	; (8001e18 <HAL_DMA_IRQHandler+0x24c>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01a      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0204 	bic.w	r2, r2, #4
 8001c1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	2208      	movs	r2, #8
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d012      	beq.n	8001c6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	2204      	movs	r2, #4
 8001c74:	409a      	lsls	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d012      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	2204      	movs	r2, #4
 8001c92:	409a      	lsls	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	2210      	movs	r2, #16
 8001caa:	409a      	lsls	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d043      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03c      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d018      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d024      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	4798      	blx	r3
 8001cfa:	e01f      	b.n	8001d3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01b      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
 8001d0c:	e016      	b.n	8001d3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0208 	bic.w	r2, r2, #8
 8001d2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2220      	movs	r2, #32
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 808f 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8087 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	2220      	movs	r2, #32
 8001d64:	409a      	lsls	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d136      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0216 	bic.w	r2, r2, #22
 8001d84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <HAL_DMA_IRQHandler+0x1da>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0208 	bic.w	r2, r2, #8
 8001db4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	223f      	movs	r2, #63	; 0x3f
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d07e      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	4798      	blx	r3
        }
        return;
 8001de2:	e079      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01d      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10d      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d031      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
 8001e10:	e02c      	b.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000
 8001e18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d023      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e01e      	b.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10f      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0210 	bic.w	r2, r2, #16
 8001e4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d032      	beq.n	8001eda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2205      	movs	r2, #5
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d307      	bcc.n	8001eb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f2      	bne.n	8001e98 <HAL_DMA_IRQHandler+0x2cc>
 8001eb2:	e000      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001eb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4798      	blx	r3
 8001ed6:	e000      	b.n	8001eda <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ed8:	bf00      	nop
    }
  }
}
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001efc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d108      	bne.n	8001f20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f1e:	e007      	b.n	8001f30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3b10      	subs	r3, #16
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d909      	bls.n	8001f7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	1d1a      	adds	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f7c:	e007      	b.n	8001f8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	aaaaaaab 	.word	0xaaaaaaab
 8001fa4:	08008fb0 	.word	0x08008fb0

08001fa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d11f      	bne.n	8002002 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d856      	bhi.n	8002076 <DMA_CheckFifoParam+0xce>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <DMA_CheckFifoParam+0x28>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08001ff3 	.word	0x08001ff3
 8001fd8:	08001fe1 	.word	0x08001fe1
 8001fdc:	08002077 	.word	0x08002077
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d046      	beq.n	800207a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff0:	e043      	b.n	800207a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ffa:	d140      	bne.n	800207e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002000:	e03d      	b.n	800207e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200a:	d121      	bne.n	8002050 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d837      	bhi.n	8002082 <DMA_CheckFifoParam+0xda>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <DMA_CheckFifoParam+0x70>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	08002029 	.word	0x08002029
 800201c:	0800202f 	.word	0x0800202f
 8002020:	08002029 	.word	0x08002029
 8002024:	08002041 	.word	0x08002041
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
      break;
 800202c:	e030      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d025      	beq.n	8002086 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203e:	e022      	b.n	8002086 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002048:	d11f      	bne.n	800208a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800204e:	e01c      	b.n	800208a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d903      	bls.n	800205e <DMA_CheckFifoParam+0xb6>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d003      	beq.n	8002064 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800205c:	e018      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
      break;
 8002062:	e015      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00e      	beq.n	800208e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
      break;
 8002074:	e00b      	b.n	800208e <DMA_CheckFifoParam+0xe6>
      break;
 8002076:	bf00      	nop
 8002078:	e00a      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 800207a:	bf00      	nop
 800207c:	e008      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
 8002080:	e006      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e004      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 8002086:	bf00      	nop
 8002088:	e002      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;   
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 800208e:	bf00      	nop
    }
  } 
  
  return status; 
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e159      	b.n	8002370 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 8148 	bne.w	800236a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d005      	beq.n	80020f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d130      	bne.n	8002154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 0201 	and.w	r2, r3, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b03      	cmp	r3, #3
 800215e:	d017      	beq.n	8002190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d123      	bne.n	80021e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	08da      	lsrs	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3208      	adds	r2, #8
 80021de:	69b9      	ldr	r1, [r7, #24]
 80021e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0203 	and.w	r2, r3, #3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a2 	beq.w	800236a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b57      	ldr	r3, [pc, #348]	; (8002388 <HAL_GPIO_Init+0x2e8>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a56      	ldr	r2, [pc, #344]	; (8002388 <HAL_GPIO_Init+0x2e8>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b54      	ldr	r3, [pc, #336]	; (8002388 <HAL_GPIO_Init+0x2e8>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002242:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_GPIO_Init+0x2ec>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a49      	ldr	r2, [pc, #292]	; (8002390 <HAL_GPIO_Init+0x2f0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d019      	beq.n	80022a2 <HAL_GPIO_Init+0x202>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a48      	ldr	r2, [pc, #288]	; (8002394 <HAL_GPIO_Init+0x2f4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0x1fe>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a47      	ldr	r2, [pc, #284]	; (8002398 <HAL_GPIO_Init+0x2f8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00d      	beq.n	800229a <HAL_GPIO_Init+0x1fa>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a46      	ldr	r2, [pc, #280]	; (800239c <HAL_GPIO_Init+0x2fc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x1f6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a45      	ldr	r2, [pc, #276]	; (80023a0 <HAL_GPIO_Init+0x300>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_GPIO_Init+0x1f2>
 800228e:	2304      	movs	r3, #4
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 8002292:	2307      	movs	r3, #7
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	; (800238c <HAL_GPIO_Init+0x2ec>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_GPIO_Init+0x304>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a2f      	ldr	r2, [pc, #188]	; (80023a4 <HAL_GPIO_Init+0x304>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <HAL_GPIO_Init+0x304>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a24      	ldr	r2, [pc, #144]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002316:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233a:	4a1a      	ldr	r2, [pc, #104]	; (80023a4 <HAL_GPIO_Init+0x304>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f aea2 	bls.w	80020bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40013c00 	.word	0x40013c00

080023a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	e001      	b.n	80023ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
 80023e4:	4613      	mov	r3, r2
 80023e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e8:	787b      	ldrb	r3, [r7, #1]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f4:	e003      	b.n	80023fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	041a      	lsls	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	619a      	str	r2, [r3, #24]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f806 	bl	800243c <HAL_GPIO_EXTI_Callback>
  }
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e267      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d075      	beq.n	800255e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	4b88      	ldr	r3, [pc, #544]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d00c      	beq.n	8002498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002486:	2b08      	cmp	r3, #8
 8002488:	d112      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248a:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d05b      	beq.n	800255c <HAL_RCC_OscConfig+0x108>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d157      	bne.n	800255c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e242      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x74>
 80024ba:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a75      	ldr	r2, [pc, #468]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x98>
 80024d2:	4b70      	ldr	r3, [pc, #448]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6f      	ldr	r2, [pc, #444]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6c      	ldr	r2, [pc, #432]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024ec:	4b69      	ldr	r3, [pc, #420]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a68      	ldr	r2, [pc, #416]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b66      	ldr	r3, [pc, #408]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a65      	ldr	r2, [pc, #404]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff f96a 	bl	80017e4 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff f966 	bl	80017e4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e207      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xc0>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff f956 	bl	80017e4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff f952 	bl	80017e4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1f3      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0xe8>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256a:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b44      	ldr	r3, [pc, #272]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1c7      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4937      	ldr	r1, [pc, #220]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e03a      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCC_OscConfig+0x244>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7ff f90b 	bl	80017e4 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d2:	f7ff f907 	bl	80017e4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1a8      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4925      	ldr	r1, [pc, #148]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_OscConfig+0x244>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff f8ea 	bl	80017e4 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002614:	f7ff f8e6 	bl	80017e4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e187      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d036      	beq.n	80026ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_RCC_OscConfig+0x248>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7ff f8ca 	bl	80017e4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002654:	f7ff f8c6 	bl	80017e4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e167      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_OscConfig+0x240>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x200>
 8002672:	e01b      	b.n	80026ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_OscConfig+0x248>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7ff f8b3 	bl	80017e4 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	e00e      	b.n	80026a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002682:	f7ff f8af 	bl	80017e4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d907      	bls.n	80026a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e150      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
 8002694:	40023800 	.word	0x40023800
 8002698:	42470000 	.word	0x42470000
 800269c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ea      	bne.n	8002682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8097 	beq.w	80027e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026be:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	4b7d      	ldr	r3, [pc, #500]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a7c      	ldr	r2, [pc, #496]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b7a      	ldr	r3, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b77      	ldr	r3, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f6:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a73      	ldr	r2, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7ff f86f 	bl	80017e4 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7ff f86b 	bl	80017e4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e10c      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x474>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x2ea>
 8002730:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a63      	ldr	r2, [pc, #396]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	e01c      	b.n	8002778 <HAL_RCC_OscConfig+0x324>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b05      	cmp	r3, #5
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x30c>
 8002746:	4b5f      	ldr	r3, [pc, #380]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a5e      	ldr	r2, [pc, #376]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a5b      	ldr	r2, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0x324>
 8002760:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
 800276c:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a54      	ldr	r2, [pc, #336]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002772:	f023 0304 	bic.w	r3, r3, #4
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7ff f830 	bl	80017e4 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7ff f82c 	bl	80017e4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0cb      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ee      	beq.n	8002788 <HAL_RCC_OscConfig+0x334>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7ff f81a 	bl	80017e4 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7ff f816 	bl	80017e4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0b5      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ca:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ee      	bne.n	80027b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a1 	beq.w	8002934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d05c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d141      	bne.n	800288a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_RCC_OscConfig+0x478>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe ffea 	bl	80017e4 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe ffe6 	bl	80017e4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e087      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	019b      	lsls	r3, r3, #6
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	491b      	ldr	r1, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x478>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe ffbf 	bl	80017e4 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe ffbb 	bl	80017e4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e05c      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x416>
 8002888:	e054      	b.n	8002934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_RCC_OscConfig+0x478>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe ffa8 	bl	80017e4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe ffa4 	bl	80017e4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e045      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x470>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x444>
 80028b6:	e03d      	b.n	8002934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e038      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x4ec>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d028      	beq.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d121      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d11a      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002900:	4013      	ands	r3, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002908:	4293      	cmp	r3, r2
 800290a:	d111      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	3b01      	subs	r3, #1
 800291a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d107      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0cc      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d90c      	bls.n	8002980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0b8      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002998:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a52      	ldr	r2, [pc, #328]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	494d      	ldr	r1, [pc, #308]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d044      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d119      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e067      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4934      	ldr	r1, [pc, #208]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7fe fed6 	bl	80017e4 <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fe fed2 	bl	80017e4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d20c      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e032      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4916      	ldr	r1, [pc, #88]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	490e      	ldr	r1, [pc, #56]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aca:	f000 f821 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	490a      	ldr	r1, [pc, #40]	; (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	5ccb      	ldrb	r3, [r1, r3]
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fc2c 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08008f98 	.word	0x08008f98
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000004 	.word	0x20000004

08002b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b094      	sub	sp, #80	; 0x50
 8002b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b20:	2300      	movs	r3, #0
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b28:	4b79      	ldr	r3, [pc, #484]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d00d      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x40>
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	f200 80e1 	bhi.w	8002cfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b42:	e0db      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b48:	e0db      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4a:	4b73      	ldr	r3, [pc, #460]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b4e:	e0d8      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b50:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b66:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b82:	4622      	mov	r2, r4
 8002b84:	462b      	mov	r3, r5
 8002b86:	f04f 0000 	mov.w	r0, #0
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	0159      	lsls	r1, r3, #5
 8002b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b94:	0150      	lsls	r0, r2, #5
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	1a51      	subs	r1, r2, r1
 8002b9e:	6139      	str	r1, [r7, #16]
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	018b      	lsls	r3, r1, #6
 8002bb8:	4651      	mov	r1, sl
 8002bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	018a      	lsls	r2, r1, #6
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bc8:	4659      	mov	r1, fp
 8002bca:	eb63 0901 	sbc.w	r9, r3, r1
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be2:	4690      	mov	r8, r2
 8002be4:	4699      	mov	r9, r3
 8002be6:	4623      	mov	r3, r4
 8002be8:	eb18 0303 	adds.w	r3, r8, r3
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	462b      	mov	r3, r5
 8002bf0:	eb49 0303 	adc.w	r3, r9, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c02:	4629      	mov	r1, r5
 8002c04:	024b      	lsls	r3, r1, #9
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	024a      	lsls	r2, r1, #9
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c16:	2200      	movs	r2, #0
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c20:	f7fd fb2e 	bl	8000280 <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4613      	mov	r3, r2
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c2c:	e058      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	4611      	mov	r1, r2
 8002c3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c48:	4642      	mov	r2, r8
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	0159      	lsls	r1, r3, #5
 8002c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5a:	0150      	lsls	r0, r2, #5
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4641      	mov	r1, r8
 8002c62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c66:	4649      	mov	r1, r9
 8002c68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c80:	ebb2 040a 	subs.w	r4, r2, sl
 8002c84:	eb63 050b 	sbc.w	r5, r3, fp
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	00eb      	lsls	r3, r5, #3
 8002c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c96:	00e2      	lsls	r2, r4, #3
 8002c98:	4614      	mov	r4, r2
 8002c9a:	461d      	mov	r5, r3
 8002c9c:	4643      	mov	r3, r8
 8002c9e:	18e3      	adds	r3, r4, r3
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	eb45 0303 	adc.w	r3, r5, r3
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	028b      	lsls	r3, r1, #10
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	028a      	lsls	r2, r1, #10
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	61fa      	str	r2, [r7, #28]
 8002cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd4:	f7fd fad4 	bl	8000280 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cfa:	e002      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3750      	adds	r7, #80	; 0x50
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	007a1200 	.word	0x007a1200

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0a9b      	lsrs	r3, r3, #10
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	08008fa8 	.word	0x08008fa8

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d60:	f7ff ffdc 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0b5b      	lsrs	r3, r3, #13
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	08008fa8 	.word	0x08008fa8

08002d84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	220f      	movs	r2, #15
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0203 	and.w	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_RCC_GetClockConfig+0x5c>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_RCC_GetClockConfig+0x5c>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_GetClockConfig+0x5c>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_RCC_GetClockConfig+0x60>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0207 	and.w	r2, r3, #7
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40023c00 	.word	0x40023c00

08002de8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d038      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e16:	f7fe fce5 	bl	80017e4 <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e1e:	f7fe fce1 	bl	80017e4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e0bd      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	071b      	lsls	r3, r3, #28
 8002e4e:	495a      	ldr	r1, [pc, #360]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e56:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fcc2 	bl	80017e4 <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e64:	f7fe fcbe 	bl	80017e4 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e09a      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e76:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8083 	beq.w	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	4b48      	ldr	r3, [pc, #288]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4a47      	ldr	r2, [pc, #284]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea0:	4b45      	ldr	r3, [pc, #276]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002eac:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a42      	ldr	r2, [pc, #264]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fc94 	bl	80017e4 <HAL_GetTick>
 8002ebc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ec0:	f7fe fc90 	bl	80017e4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e06c      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ede:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02f      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d028      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002efc:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f04:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f12:	4a29      	ldr	r2, [pc, #164]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d114      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fe fc5e 	bl	80017e4 <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fe fc5a 	bl	80017e4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e034      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ee      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f5a:	d10d      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	4911      	ldr	r1, [pc, #68]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
 8002f76:	e005      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f82:	6093      	str	r3, [r2, #8]
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	4909      	ldr	r1, [pc, #36]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7d1a      	ldrb	r2, [r3, #20]
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002fa8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	42470068 	.word	0x42470068
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	42470e40 	.word	0x42470e40
 8002fc4:	424711e0 	.word	0x424711e0

08002fc8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e066      	b.n	80030ac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7f5b      	ldrb	r3, [r3, #29]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fe f882 	bl	80010f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	22ca      	movs	r2, #202	; 0xca
 8003000:	625a      	str	r2, [r3, #36]	; 0x24
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2253      	movs	r2, #83	; 0x53
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f9c1 	bl	8003392 <RTC_EnterInitMode>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d12c      	bne.n	8003074 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800302c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6899      	ldr	r1, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68d2      	ldr	r2, [r2, #12]
 8003054:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6919      	ldr	r1, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f9c8 	bl	8003400 <RTC_ExitInitMode>
 8003070:	4603      	mov	r3, r0
 8003072:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d113      	bne.n	80030a2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	22ff      	movs	r2, #255	; 0xff
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	7f1b      	ldrb	r3, [r3, #28]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_RTC_SetTime+0x1c>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e087      	b.n	80031e0 <HAL_RTC_SetTime+0x12c>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2202      	movs	r2, #2
 80030da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d126      	bne.n	8003130 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f9a5 	bl	800344a <RTC_ByteToBcd2>
 8003100:	4603      	mov	r3, r0
 8003102:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f99e 	bl	800344a <RTC_ByteToBcd2>
 800310e:	4603      	mov	r3, r0
 8003110:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003112:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	789b      	ldrb	r3, [r3, #2]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f996 	bl	800344a <RTC_ByteToBcd2>
 800311e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003120:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	78db      	ldrb	r3, [r3, #3]
 8003128:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e018      	b.n	8003162 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2200      	movs	r2, #0
 8003142:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003150:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003156:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	78db      	ldrb	r3, [r3, #3]
 800315c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	22ca      	movs	r2, #202	; 0xca
 8003168:	625a      	str	r2, [r3, #36]	; 0x24
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2253      	movs	r2, #83	; 0x53
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f90d 	bl	8003392 <RTC_EnterInitMode>
 8003178:	4603      	mov	r3, r0
 800317a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d120      	bne.n	80031c4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800318c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003190:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6899      	ldr	r1, [r3, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f920 	bl	8003400 <RTC_ExitInitMode>
 80031c0:	4603      	mov	r3, r0
 80031c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	22ff      	movs	r2, #255	; 0xff
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	771a      	strb	r2, [r3, #28]

  return status;
 80031de:	7cfb      	ldrb	r3, [r7, #19]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd90      	pop	{r4, r7, pc}

080031e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800321a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800321e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003248:	b2da      	uxtb	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	0d9b      	lsrs	r3, r3, #22
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11a      	bne.n	800329a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f90b 	bl	8003484 <RTC_Bcd2ToByte>
 800326e:	4603      	mov	r3, r0
 8003270:	461a      	mov	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	785b      	ldrb	r3, [r3, #1]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f902 	bl	8003484 <RTC_Bcd2ToByte>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	789b      	ldrb	r3, [r3, #2]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f8f9 	bl	8003484 <RTC_Bcd2ToByte>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	0c1b      	lsrs	r3, r3, #16
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	0b5b      	lsrs	r3, r3, #13
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11a      	bne.n	8003338 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	78db      	ldrb	r3, [r3, #3]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f8bc 	bl	8003484 <RTC_Bcd2ToByte>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f8b3 	bl	8003484 <RTC_Bcd2ToByte>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	789b      	ldrb	r3, [r3, #2]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f8aa 	bl	8003484 <RTC_Bcd2ToByte>
 8003330:	4603      	mov	r3, r0
 8003332:	461a      	mov	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800335c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800335e:	f7fe fa41 	bl	80017e4 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003364:	e009      	b.n	800337a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003366:	f7fe fa3d 	bl	80017e4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003374:	d901      	bls.n	800337a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e007      	b.n	800338a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d122      	bne.n	80033f6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fe fa10 	bl	80017e4 <HAL_GetTick>
 80033c4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80033c6:	e00c      	b.n	80033e2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033c8:	f7fe fa0c 	bl	80017e4 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d6:	d904      	bls.n	80033e2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2204      	movs	r2, #4
 80033dc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <RTC_EnterInitMode+0x64>
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d1e8      	bne.n	80033c8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800341a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff89 	bl	8003342 <HAL_RTC_WaitForSynchro>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2204      	movs	r2, #4
 800343a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003458:	e005      	b.n	8003466 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	3301      	adds	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	3b0a      	subs	r3, #10
 8003464:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	2b09      	cmp	r3, #9
 800346a:	d8f6      	bhi.n	800345a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	b2da      	uxtb	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	4313      	orrs	r3, r2
 8003476:	b2db      	uxtb	r3, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	0092      	lsls	r2, r2, #2
 800349c:	4413      	add	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	4413      	add	r3, r2
 80034ae:	b2db      	uxtb	r3, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e07b      	b.n	80035c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034de:	d009      	beq.n	80034f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]
 80034e6:	e005      	b.n	80034f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd fe52 	bl	80011b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	ea42 0103 	orr.w	r1, r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	f003 0104 	and.w	r1, r3, #4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f003 0210 	and.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d110      	bne.n	800360c <HAL_SPI_Receive_DMA+0x3c>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f2:	d10b      	bne.n	800360c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2204      	movs	r2, #4
 80035f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f8ac 	bl	8003760 <HAL_SPI_TransmitReceive_DMA>
 8003608:	4603      	mov	r3, r0
 800360a:	e09f      	b.n	800374c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_SPI_Receive_DMA+0x4a>
 8003616:	2302      	movs	r3, #2
 8003618:	e098      	b.n	800374c <HAL_SPI_Receive_DMA+0x17c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800362e:	2302      	movs	r3, #2
 8003630:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003632:	e086      	b.n	8003742 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_Receive_DMA+0x70>
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003644:	e07d      	b.n	8003742 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2204      	movs	r2, #4
 800364a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003686:	d10f      	bne.n	80036a8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003696:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ac:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_SPI_Receive_DMA+0x184>)
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	4a28      	ldr	r2, [pc, #160]	; (8003758 <HAL_SPI_Receive_DMA+0x188>)
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <HAL_SPI_Receive_DMA+0x18c>)
 80036be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c4:	2200      	movs	r2, #0
 80036c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	4619      	mov	r1, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80036e0:	f7fe fa1c 	bl	8001b1c <HAL_DMA_Start_IT>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	f043 0210 	orr.w	r2, r3, #16
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003702:	e01e      	b.n	8003742 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d007      	beq.n	8003722 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0220 	orr.w	r2, r2, #32
 8003730:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800374a:	7dfb      	ldrb	r3, [r7, #23]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	08003b01 	.word	0x08003b01
 8003758:	080039c9 	.word	0x080039c9
 800375c:	08003b39 	.word	0x08003b39

08003760 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_SPI_TransmitReceive_DMA+0x20>
 800377c:	2302      	movs	r3, #2
 800377e:	e0e3      	b.n	8003948 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800378e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003796:	7dbb      	ldrb	r3, [r7, #22]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d00d      	beq.n	80037b8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a2:	d106      	bne.n	80037b2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80037ac:	7dbb      	ldrb	r3, [r7, #22]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d002      	beq.n	80037b8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
 80037b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037b6:	e0c2      	b.n	800393e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_SPI_TransmitReceive_DMA+0x6a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_SPI_TransmitReceive_DMA+0x6a>
 80037c4:	887b      	ldrh	r3, [r7, #2]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037ce:	e0b6      	b.n	800393e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d003      	beq.n	80037e4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2205      	movs	r2, #5
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	887a      	ldrh	r2, [r7, #2]
 80037fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	887a      	ldrh	r2, [r7, #2]
 8003806:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b04      	cmp	r3, #4
 8003824:	d108      	bne.n	8003838 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	4a49      	ldr	r2, [pc, #292]	; (8003950 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003832:	4a48      	ldr	r2, [pc, #288]	; (8003954 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003834:	63da      	str	r2, [r3, #60]	; 0x3c
 8003836:	e007      	b.n	8003848 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	4a46      	ldr	r2, [pc, #280]	; (8003958 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	4a45      	ldr	r2, [pc, #276]	; (800395c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003846:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384c:	4a44      	ldr	r2, [pc, #272]	; (8003960 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800384e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003854:	2200      	movs	r2, #0
 8003856:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	4619      	mov	r1, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003870:	f7fe f954 	bl	8001b1c <HAL_DMA_Start_IT>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	f043 0210 	orr.w	r2, r3, #16
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003892:	e054      	b.n	800393e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a8:	2200      	movs	r2, #0
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b0:	2200      	movs	r2, #0
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	2200      	movs	r2, #0
 80038ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c0:	2200      	movs	r2, #0
 80038c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	4619      	mov	r1, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80038dc:	f7fe f91e 	bl	8001b1c <HAL_DMA_Start_IT>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f043 0210 	orr.w	r2, r3, #16
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80038fe:	e01e      	b.n	800393e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d007      	beq.n	800391e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0220 	orr.w	r2, r2, #32
 800392c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0202 	orr.w	r2, r2, #2
 800393c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	08003b01 	.word	0x08003b01
 8003954:	080039c9 	.word	0x080039c9
 8003958:	08003b1d 	.word	0x08003b1d
 800395c:	08003a71 	.word	0x08003a71
 8003960:	08003b39 	.word	0x08003b39

08003964 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039d6:	f7fd ff05 	bl	80017e4 <HAL_GetTick>
 80039da:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ea:	d03b      	beq.n	8003a64 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0220 	bic.w	r2, r2, #32
 80039fa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10d      	bne.n	8003a20 <SPI_DMAReceiveCplt+0x58>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a0c:	d108      	bne.n	8003a20 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0203 	bic.w	r2, r2, #3
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	e007      	b.n	8003a30 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	2164      	movs	r1, #100	; 0x64
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f927 	bl	8003c88 <SPI_EndRxTransaction>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff ffa9 	bl	80039b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003a62:	e002      	b.n	8003a6a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff ff7d 	bl	8003964 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a7e:	f7fd feb1 	bl	80017e4 <HAL_GetTick>
 8003a82:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a92:	d02f      	beq.n	8003af4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0220 	bic.w	r2, r2, #32
 8003aa2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	2164      	movs	r1, #100	; 0x64
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f953 	bl	8003d54 <SPI_EndRxTxTransaction>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0220 	orr.w	r2, r3, #32
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0203 	bic.w	r2, r2, #3
 8003ace:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff ff61 	bl	80039b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003af2:	e002      	b.n	8003afa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff ff3f 	bl	8003978 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f7ff ff3c 	bl	800398c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff ff38 	bl	80039a0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0203 	bic.w	r2, r2, #3
 8003b54:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	f043 0210 	orr.w	r2, r3, #16
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f7ff ff22 	bl	80039b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b88:	f7fd fe2c 	bl	80017e4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b98:	f7fd fe24 	bl	80017e4 <HAL_GetTick>
 8003b9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	015b      	lsls	r3, r3, #5
 8003ba4:	0d1b      	lsrs	r3, r3, #20
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bae:	e054      	b.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d050      	beq.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb8:	f7fd fe14 	bl	80017e4 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d902      	bls.n	8003bce <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d13d      	bne.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be6:	d111      	bne.n	8003c0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	d004      	beq.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfa:	d107      	bne.n	8003c0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c14:	d10f      	bne.n	8003c36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e017      	b.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d19b      	bne.n	8003bb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000000 	.word	0x20000000

08003c88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c9c:	d111      	bne.n	8003cc2 <SPI_EndRxTransaction+0x3a>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca6:	d004      	beq.n	8003cb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb0:	d107      	bne.n	8003cc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cca:	d12a      	bne.n	8003d22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd4:	d012      	beq.n	8003cfc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff ff49 	bl	8003b78 <SPI_WaitFlagStateUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d02d      	beq.n	8003d48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e026      	b.n	8003d4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2200      	movs	r2, #0
 8003d04:	2101      	movs	r1, #1
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f7ff ff36 	bl	8003b78 <SPI_WaitFlagStateUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01a      	beq.n	8003d48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e013      	b.n	8003d4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff ff23 	bl	8003b78 <SPI_WaitFlagStateUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f043 0220 	orr.w	r2, r3, #32
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e000      	b.n	8003d4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <SPI_EndRxTxTransaction+0x7c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1b      	ldr	r2, [pc, #108]	; (8003dd4 <SPI_EndRxTxTransaction+0x80>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	0d5b      	lsrs	r3, r3, #21
 8003d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d7e:	d112      	bne.n	8003da6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2200      	movs	r2, #0
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff fef4 	bl	8003b78 <SPI_WaitFlagStateUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9a:	f043 0220 	orr.w	r2, r3, #32
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e00f      	b.n	8003dc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	2b80      	cmp	r3, #128	; 0x80
 8003dbe:	d0f2      	beq.n	8003da6 <SPI_EndRxTxTransaction+0x52>
 8003dc0:	e000      	b.n	8003dc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003dc2:	bf00      	nop
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	165e9f81 	.word	0x165e9f81

08003dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e041      	b.n	8003e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f839 	bl	8003e76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f000 f9ca 	bl	80041b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d001      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e044      	b.n	8003f2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1e      	ldr	r2, [pc, #120]	; (8003f3c <HAL_TIM_Base_Start_IT+0xb0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d018      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ece:	d013      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1a      	ldr	r2, [pc, #104]	; (8003f40 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a17      	ldr	r2, [pc, #92]	; (8003f48 <HAL_TIM_Base_Start_IT+0xbc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <HAL_TIM_Base_Start_IT+0xc0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d111      	bne.n	8003f1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b06      	cmp	r3, #6
 8003f08:	d010      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1a:	e007      	b.n	8003f2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000

08003f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0202 	mvn.w	r2, #2
 8003f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8ee 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8e0 	bl	8004160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f8f1 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d122      	bne.n	8004000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0204 	mvn.w	r2, #4
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8c4 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8b6 	bl	8004160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8c7 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b08      	cmp	r3, #8
 800400c:	d122      	bne.n	8004054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b08      	cmp	r3, #8
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0208 	mvn.w	r2, #8
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2204      	movs	r2, #4
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f89a 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f88c 	bl	8004160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f89d 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b10      	cmp	r3, #16
 8004060:	d122      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b10      	cmp	r3, #16
 800406e:	d11b      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0210 	mvn.w	r2, #16
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2208      	movs	r2, #8
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f870 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f862 	bl	8004160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f873 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d107      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0201 	mvn.w	r2, #1
 80040cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc ffd4 	bl	800107c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b80      	cmp	r3, #128	; 0x80
 80040e0:	d10e      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b80      	cmp	r3, #128	; 0x80
 80040ee:	d107      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8e2 	bl	80042c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f838 	bl	800419c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b20      	cmp	r3, #32
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b20      	cmp	r3, #32
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0220 	mvn.w	r2, #32
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f8ac 	bl	80042b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a34      	ldr	r2, [pc, #208]	; (8004294 <TIM_Base_SetConfig+0xe4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00f      	beq.n	80041e8 <TIM_Base_SetConfig+0x38>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ce:	d00b      	beq.n	80041e8 <TIM_Base_SetConfig+0x38>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a31      	ldr	r2, [pc, #196]	; (8004298 <TIM_Base_SetConfig+0xe8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d007      	beq.n	80041e8 <TIM_Base_SetConfig+0x38>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a30      	ldr	r2, [pc, #192]	; (800429c <TIM_Base_SetConfig+0xec>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d003      	beq.n	80041e8 <TIM_Base_SetConfig+0x38>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a2f      	ldr	r2, [pc, #188]	; (80042a0 <TIM_Base_SetConfig+0xf0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d108      	bne.n	80041fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a25      	ldr	r2, [pc, #148]	; (8004294 <TIM_Base_SetConfig+0xe4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01b      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004208:	d017      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <TIM_Base_SetConfig+0xe8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a21      	ldr	r2, [pc, #132]	; (800429c <TIM_Base_SetConfig+0xec>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00f      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <TIM_Base_SetConfig+0xf0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00b      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <TIM_Base_SetConfig+0xf4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d007      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <TIM_Base_SetConfig+0xf8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <TIM_Base_SetConfig+0xfc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d108      	bne.n	800424c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a08      	ldr	r2, [pc, #32]	; (8004294 <TIM_Base_SetConfig+0xe4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d103      	bne.n	8004280 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	615a      	str	r2, [r3, #20]
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40014400 	.word	0x40014400
 80042ac:	40014800 	.word	0x40014800

080042b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e03f      	b.n	800436a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd f9c8 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	; 0x24
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f929 	bl	8004574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b08a      	sub	sp, #40	; 0x28
 8004376:	af02      	add	r7, sp, #8
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b20      	cmp	r3, #32
 8004390:	d17c      	bne.n	800448c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_UART_Transmit+0x2c>
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e075      	b.n	800448e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_UART_Transmit+0x3e>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e06e      	b.n	800448e <HAL_UART_Transmit+0x11c>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2221      	movs	r2, #33	; 0x21
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c6:	f7fd fa0d 	bl	80017e4 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e0:	d108      	bne.n	80043f4 <HAL_UART_Transmit+0x82>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	e003      	b.n	80043fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004404:	e02a      	b.n	800445c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	2180      	movs	r1, #128	; 0x80
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f840 	bl	8004496 <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e036      	b.n	800448e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3302      	adds	r3, #2
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e007      	b.n	800444e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3301      	adds	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1cf      	bne.n	8004406 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2140      	movs	r1, #64	; 0x40
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f810 	bl	8004496 <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e006      	b.n	800448e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b090      	sub	sp, #64	; 0x40
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a6:	e050      	b.n	800454a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	d04c      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044b6:	f7fd f995 	bl	80017e4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d241      	bcs.n	800454a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044e6:	637a      	str	r2, [r7, #52]	; 0x34
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e5      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	613b      	str	r3, [r7, #16]
   return(result);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800451a:	623a      	str	r2, [r7, #32]
 800451c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	69f9      	ldr	r1, [r7, #28]
 8004520:	6a3a      	ldr	r2, [r7, #32]
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	61bb      	str	r3, [r7, #24]
   return(result);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e5      	bne.n	80044fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e00f      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	429a      	cmp	r2, r3
 8004566:	d09f      	beq.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3740      	adds	r7, #64	; 0x40
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004578:	b0c0      	sub	sp, #256	; 0x100
 800457a:	af00      	add	r7, sp, #0
 800457c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	68d9      	ldr	r1, [r3, #12]
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	ea40 0301 	orr.w	r3, r0, r1
 800459c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045cc:	f021 010c 	bic.w	r1, r1, #12
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045da:	430b      	orrs	r3, r1
 80045dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ee:	6999      	ldr	r1, [r3, #24]
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	ea40 0301 	orr.w	r3, r0, r1
 80045fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b8f      	ldr	r3, [pc, #572]	; (8004840 <UART_SetConfig+0x2cc>)
 8004604:	429a      	cmp	r2, r3
 8004606:	d005      	beq.n	8004614 <UART_SetConfig+0xa0>
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b8d      	ldr	r3, [pc, #564]	; (8004844 <UART_SetConfig+0x2d0>)
 8004610:	429a      	cmp	r2, r3
 8004612:	d104      	bne.n	800461e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7fe fba2 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8004618:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800461c:	e003      	b.n	8004626 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800461e:	f7fe fb89 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8004622:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004630:	f040 810c 	bne.w	800484c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004638:	2200      	movs	r2, #0
 800463a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800463e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004646:	4622      	mov	r2, r4
 8004648:	462b      	mov	r3, r5
 800464a:	1891      	adds	r1, r2, r2
 800464c:	65b9      	str	r1, [r7, #88]	; 0x58
 800464e:	415b      	adcs	r3, r3
 8004650:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004656:	4621      	mov	r1, r4
 8004658:	eb12 0801 	adds.w	r8, r2, r1
 800465c:	4629      	mov	r1, r5
 800465e:	eb43 0901 	adc.w	r9, r3, r1
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800466e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004676:	4690      	mov	r8, r2
 8004678:	4699      	mov	r9, r3
 800467a:	4623      	mov	r3, r4
 800467c:	eb18 0303 	adds.w	r3, r8, r3
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004684:	462b      	mov	r3, r5
 8004686:	eb49 0303 	adc.w	r3, r9, r3
 800468a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800469a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800469e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046a2:	460b      	mov	r3, r1
 80046a4:	18db      	adds	r3, r3, r3
 80046a6:	653b      	str	r3, [r7, #80]	; 0x50
 80046a8:	4613      	mov	r3, r2
 80046aa:	eb42 0303 	adc.w	r3, r2, r3
 80046ae:	657b      	str	r3, [r7, #84]	; 0x54
 80046b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046b8:	f7fb fde2 	bl	8000280 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4b61      	ldr	r3, [pc, #388]	; (8004848 <UART_SetConfig+0x2d4>)
 80046c2:	fba3 2302 	umull	r2, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	011c      	lsls	r4, r3, #4
 80046ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	1891      	adds	r1, r2, r2
 80046e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80046e4:	415b      	adcs	r3, r3
 80046e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046ec:	4641      	mov	r1, r8
 80046ee:	eb12 0a01 	adds.w	sl, r2, r1
 80046f2:	4649      	mov	r1, r9
 80046f4:	eb43 0b01 	adc.w	fp, r3, r1
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004704:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800470c:	4692      	mov	sl, r2
 800470e:	469b      	mov	fp, r3
 8004710:	4643      	mov	r3, r8
 8004712:	eb1a 0303 	adds.w	r3, sl, r3
 8004716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800471a:	464b      	mov	r3, r9
 800471c:	eb4b 0303 	adc.w	r3, fp, r3
 8004720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004730:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004734:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004738:	460b      	mov	r3, r1
 800473a:	18db      	adds	r3, r3, r3
 800473c:	643b      	str	r3, [r7, #64]	; 0x40
 800473e:	4613      	mov	r3, r2
 8004740:	eb42 0303 	adc.w	r3, r2, r3
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
 8004746:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800474a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800474e:	f7fb fd97 	bl	8000280 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4611      	mov	r1, r2
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <UART_SetConfig+0x2d4>)
 800475a:	fba3 2301 	umull	r2, r3, r3, r1
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2264      	movs	r2, #100	; 0x64
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	1acb      	subs	r3, r1, r3
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <UART_SetConfig+0x2d4>)
 8004770:	fba3 2302 	umull	r2, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800477c:	441c      	add	r4, r3
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004788:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800478c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	63b9      	str	r1, [r7, #56]	; 0x38
 8004798:	415b      	adcs	r3, r3
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800479c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047a0:	4641      	mov	r1, r8
 80047a2:	1851      	adds	r1, r2, r1
 80047a4:	6339      	str	r1, [r7, #48]	; 0x30
 80047a6:	4649      	mov	r1, r9
 80047a8:	414b      	adcs	r3, r1
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047b8:	4659      	mov	r1, fp
 80047ba:	00cb      	lsls	r3, r1, #3
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c2:	4651      	mov	r1, sl
 80047c4:	00ca      	lsls	r2, r1, #3
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	4642      	mov	r2, r8
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047d4:	464b      	mov	r3, r9
 80047d6:	460a      	mov	r2, r1
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047f4:	460b      	mov	r3, r1
 80047f6:	18db      	adds	r3, r3, r3
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fa:	4613      	mov	r3, r2
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004806:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800480a:	f7fb fd39 	bl	8000280 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <UART_SetConfig+0x2d4>)
 8004814:	fba3 1302 	umull	r1, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2164      	movs	r1, #100	; 0x64
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	3332      	adds	r3, #50	; 0x32
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <UART_SetConfig+0x2d4>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f003 0207 	and.w	r2, r3, #7
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4422      	add	r2, r4
 800483a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800483c:	e106      	b.n	8004a4c <UART_SetConfig+0x4d8>
 800483e:	bf00      	nop
 8004840:	40011000 	.word	0x40011000
 8004844:	40011400 	.word	0x40011400
 8004848:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004850:	2200      	movs	r2, #0
 8004852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004856:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800485a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800485e:	4642      	mov	r2, r8
 8004860:	464b      	mov	r3, r9
 8004862:	1891      	adds	r1, r2, r2
 8004864:	6239      	str	r1, [r7, #32]
 8004866:	415b      	adcs	r3, r3
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
 800486a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800486e:	4641      	mov	r1, r8
 8004870:	1854      	adds	r4, r2, r1
 8004872:	4649      	mov	r1, r9
 8004874:	eb43 0501 	adc.w	r5, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004894:	464b      	mov	r3, r9
 8004896:	eb45 0303 	adc.w	r3, r5, r3
 800489a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048ba:	4629      	mov	r1, r5
 80048bc:	008b      	lsls	r3, r1, #2
 80048be:	4621      	mov	r1, r4
 80048c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c4:	4621      	mov	r1, r4
 80048c6:	008a      	lsls	r2, r1, #2
 80048c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048cc:	f7fb fcd8 	bl	8000280 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4b60      	ldr	r3, [pc, #384]	; (8004a58 <UART_SetConfig+0x4e4>)
 80048d6:	fba3 2302 	umull	r2, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	011c      	lsls	r4, r3, #4
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	61b9      	str	r1, [r7, #24]
 80048f8:	415b      	adcs	r3, r3
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004900:	4641      	mov	r1, r8
 8004902:	1851      	adds	r1, r2, r1
 8004904:	6139      	str	r1, [r7, #16]
 8004906:	4649      	mov	r1, r9
 8004908:	414b      	adcs	r3, r1
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004918:	4659      	mov	r1, fp
 800491a:	00cb      	lsls	r3, r1, #3
 800491c:	4651      	mov	r1, sl
 800491e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004922:	4651      	mov	r1, sl
 8004924:	00ca      	lsls	r2, r1, #3
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	4603      	mov	r3, r0
 800492c:	4642      	mov	r2, r8
 800492e:	189b      	adds	r3, r3, r2
 8004930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	67bb      	str	r3, [r7, #120]	; 0x78
 800494a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004958:	4649      	mov	r1, r9
 800495a:	008b      	lsls	r3, r1, #2
 800495c:	4641      	mov	r1, r8
 800495e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004962:	4641      	mov	r1, r8
 8004964:	008a      	lsls	r2, r1, #2
 8004966:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800496a:	f7fb fc89 	bl	8000280 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4611      	mov	r1, r2
 8004974:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004976:	fba3 2301 	umull	r2, r3, r3, r1
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2264      	movs	r2, #100	; 0x64
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	1acb      	subs	r3, r1, r3
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	3332      	adds	r3, #50	; 0x32
 8004988:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <UART_SetConfig+0x4e4>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004994:	441c      	add	r4, r3
 8004996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800499a:	2200      	movs	r2, #0
 800499c:	673b      	str	r3, [r7, #112]	; 0x70
 800499e:	677a      	str	r2, [r7, #116]	; 0x74
 80049a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	415b      	adcs	r3, r3
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b4:	4641      	mov	r1, r8
 80049b6:	1851      	adds	r1, r2, r1
 80049b8:	6039      	str	r1, [r7, #0]
 80049ba:	4649      	mov	r1, r9
 80049bc:	414b      	adcs	r3, r1
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049cc:	4659      	mov	r1, fp
 80049ce:	00cb      	lsls	r3, r1, #3
 80049d0:	4651      	mov	r1, sl
 80049d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d6:	4651      	mov	r1, sl
 80049d8:	00ca      	lsls	r2, r1, #3
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	4642      	mov	r2, r8
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e6:	464b      	mov	r3, r9
 80049e8:	460a      	mov	r2, r1
 80049ea:	eb42 0303 	adc.w	r3, r2, r3
 80049ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	663b      	str	r3, [r7, #96]	; 0x60
 80049fa:	667a      	str	r2, [r7, #100]	; 0x64
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a08:	4649      	mov	r1, r9
 8004a0a:	008b      	lsls	r3, r1, #2
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a12:	4641      	mov	r1, r8
 8004a14:	008a      	lsls	r2, r1, #2
 8004a16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a1a:	f7fb fc31 	bl	8000280 <__aeabi_uldivmod>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004a24:	fba3 1302 	umull	r1, r3, r3, r2
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	2164      	movs	r1, #100	; 0x64
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	3332      	adds	r3, #50	; 0x32
 8004a36:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <UART_SetConfig+0x4e4>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	f003 020f 	and.w	r2, r3, #15
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4422      	add	r2, r4
 8004a4a:	609a      	str	r2, [r3, #8]
}
 8004a4c:	bf00      	nop
 8004a4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a52:	46bd      	mov	sp, r7
 8004a54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a58:	51eb851f 	.word	0x51eb851f

08004a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	6039      	str	r1, [r7, #0]
 8004a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	db0a      	blt.n	8004a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	490c      	ldr	r1, [pc, #48]	; (8004aa8 <__NVIC_SetPriority+0x4c>)
 8004a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7a:	0112      	lsls	r2, r2, #4
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	440b      	add	r3, r1
 8004a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a84:	e00a      	b.n	8004a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4908      	ldr	r1, [pc, #32]	; (8004aac <__NVIC_SetPriority+0x50>)
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	3b04      	subs	r3, #4
 8004a94:	0112      	lsls	r2, r2, #4
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	440b      	add	r3, r1
 8004a9a:	761a      	strb	r2, [r3, #24]
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	e000e100 	.word	0xe000e100
 8004aac:	e000ed00 	.word	0xe000ed00

08004ab0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <SysTick_Handler+0x1c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ab8:	f002 f880 	bl	8006bbc <xTaskGetSchedulerState>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ac2:	f002 ff69 	bl	8007998 <xPortSysTickHandler>
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	e000e010 	.word	0xe000e010

08004ad0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f06f 0004 	mvn.w	r0, #4
 8004ada:	f7ff ffbf 	bl	8004a5c <__NVIC_SetPriority>
#endif
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aea:	f3ef 8305 	mrs	r3, IPSR
 8004aee:	603b      	str	r3, [r7, #0]
  return(result);
 8004af0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004af6:	f06f 0305 	mvn.w	r3, #5
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	e00c      	b.n	8004b18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004afe:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <osKernelInitialize+0x44>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d105      	bne.n	8004b12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <osKernelInitialize+0x44>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	607b      	str	r3, [r7, #4]
 8004b10:	e002      	b.n	8004b18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b18:	687b      	ldr	r3, [r7, #4]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000238 	.word	0x20000238

08004b2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b32:	f3ef 8305 	mrs	r3, IPSR
 8004b36:	603b      	str	r3, [r7, #0]
  return(result);
 8004b38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b3e:	f06f 0305 	mvn.w	r3, #5
 8004b42:	607b      	str	r3, [r7, #4]
 8004b44:	e010      	b.n	8004b68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <osKernelStart+0x48>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d109      	bne.n	8004b62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b4e:	f7ff ffbf 	bl	8004ad0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <osKernelStart+0x48>)
 8004b54:	2202      	movs	r2, #2
 8004b56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b58:	f001 fbb2 	bl	80062c0 <vTaskStartScheduler>
      stat = osOK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	e002      	b.n	8004b68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
 8004b66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b68:	687b      	ldr	r3, [r7, #4]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000238 	.word	0x20000238

08004b78 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b7e:	f3ef 8305 	mrs	r3, IPSR
 8004b82:	603b      	str	r3, [r7, #0]
  return(result);
 8004b84:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004b8a:	f001 fcc5 	bl	8006518 <xTaskGetTickCountFromISR>
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	e002      	b.n	8004b98 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004b92:	f001 fcb1 	bl	80064f8 <xTaskGetTickCount>
 8004b96:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004b98:	687b      	ldr	r3, [r7, #4]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b08e      	sub	sp, #56	; 0x38
 8004ba6:	af04      	add	r7, sp, #16
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bb2:	f3ef 8305 	mrs	r3, IPSR
 8004bb6:	617b      	str	r3, [r7, #20]
  return(result);
 8004bb8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d17e      	bne.n	8004cbc <osThreadNew+0x11a>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d07b      	beq.n	8004cbc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004bc8:	2318      	movs	r3, #24
 8004bca:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d045      	beq.n	8004c68 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <osThreadNew+0x48>
        name = attr->name;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <osThreadNew+0x6e>
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b38      	cmp	r3, #56	; 0x38
 8004c02:	d805      	bhi.n	8004c10 <osThreadNew+0x6e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <osThreadNew+0x72>
        return (NULL);
 8004c10:	2300      	movs	r3, #0
 8004c12:	e054      	b.n	8004cbe <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <osThreadNew+0xa8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2ba7      	cmp	r3, #167	; 0xa7
 8004c32:	d90a      	bls.n	8004c4a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d006      	beq.n	8004c4a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <osThreadNew+0xa8>
        mem = 1;
 8004c44:	2301      	movs	r3, #1
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	e010      	b.n	8004c6c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10c      	bne.n	8004c6c <osThreadNew+0xca>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d108      	bne.n	8004c6c <osThreadNew+0xca>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <osThreadNew+0xca>
          mem = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	e001      	b.n	8004c6c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d110      	bne.n	8004c94 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c7a:	9202      	str	r2, [sp, #8]
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f001 f92d 	bl	8005ee8 <xTaskCreateStatic>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e013      	b.n	8004cbc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d110      	bne.n	8004cbc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	f107 0310 	add.w	r3, r7, #16
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f001 f978 	bl	8005fa2 <xTaskCreate>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d001      	beq.n	8004cbc <osThreadNew+0x11a>
            hTask = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cbc:	693b      	ldr	r3, [r7, #16]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3728      	adds	r7, #40	; 0x28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cce:	f3ef 8305 	mrs	r3, IPSR
 8004cd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <osDelay+0x1c>
    stat = osErrorISR;
 8004cda:	f06f 0305 	mvn.w	r3, #5
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	e007      	b.n	8004cf2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f001 fab3 	bl	8006258 <vTaskDelay>
    }
  }

  return (stat);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d08:	f3ef 8305 	mrs	r3, IPSR
 8004d0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d0e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d174      	bne.n	8004dfe <osMutexNew+0x102>
    if (attr != NULL) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	e001      	b.n	8004d26 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <osMutexNew+0x3a>
      rmtx = 1U;
 8004d30:	2301      	movs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e001      	b.n	8004d3a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d15c      	bne.n	8004dfe <osMutexNew+0x102>
      mem = -1;
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295
 8004d48:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d015      	beq.n	8004d7c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d006      	beq.n	8004d66 <osMutexNew+0x6a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b4f      	cmp	r3, #79	; 0x4f
 8004d5e:	d902      	bls.n	8004d66 <osMutexNew+0x6a>
          mem = 1;
 8004d60:	2301      	movs	r3, #1
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	e00c      	b.n	8004d80 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d108      	bne.n	8004d80 <osMutexNew+0x84>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d104      	bne.n	8004d80 <osMutexNew+0x84>
            mem = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	e001      	b.n	8004d80 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d112      	bne.n	8004dac <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4619      	mov	r1, r3
 8004d92:	2004      	movs	r0, #4
 8004d94:	f000 fb17 	bl	80053c6 <xQueueCreateMutexStatic>
 8004d98:	61f8      	str	r0, [r7, #28]
 8004d9a:	e016      	b.n	8004dca <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	4619      	mov	r1, r3
 8004da2:	2001      	movs	r0, #1
 8004da4:	f000 fb0f 	bl	80053c6 <xQueueCreateMutexStatic>
 8004da8:	61f8      	str	r0, [r7, #28]
 8004daa:	e00e      	b.n	8004dca <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004db8:	2004      	movs	r0, #4
 8004dba:	f000 faec 	bl	8005396 <xQueueCreateMutex>
 8004dbe:	61f8      	str	r0, [r7, #28]
 8004dc0:	e003      	b.n	8004dca <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	f000 fae7 	bl	8005396 <xQueueCreateMutex>
 8004dc8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <osMutexNew+0xee>
        if (attr != NULL) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <osMutexNew+0xe2>
          name = attr->name;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e001      	b.n	8004de2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004de2:	68f9      	ldr	r1, [r7, #12]
 8004de4:	69f8      	ldr	r0, [r7, #28]
 8004de6:	f001 f821 	bl	8005e2c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d006      	beq.n	8004dfe <osMutexNew+0x102>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004dfe:	69fb      	ldr	r3, [r7, #28]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f023 0301 	bic.w	r3, r3, #1
 8004e18:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e26:	f3ef 8305 	mrs	r3, IPSR
 8004e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e2c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004e32:	f06f 0305 	mvn.w	r3, #5
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e02c      	b.n	8004e94 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d103      	bne.n	8004e48 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004e40:	f06f 0303 	mvn.w	r3, #3
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e025      	b.n	8004e94 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d011      	beq.n	8004e72 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	6938      	ldr	r0, [r7, #16]
 8004e52:	f000 fb07 	bl	8005464 <xQueueTakeMutexRecursive>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d01b      	beq.n	8004e94 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004e62:	f06f 0301 	mvn.w	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e014      	b.n	8004e94 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004e6a:	f06f 0302 	mvn.w	r3, #2
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	e010      	b.n	8004e94 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	6938      	ldr	r0, [r7, #16]
 8004e76:	f000 fda5 	bl	80059c4 <xQueueSemaphoreTake>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d009      	beq.n	8004e94 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004e86:	f06f 0301 	mvn.w	r3, #1
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e002      	b.n	8004e94 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004e8e:	f06f 0302 	mvn.w	r3, #2
 8004e92:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004e94:	697b      	ldr	r3, [r7, #20]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b086      	sub	sp, #24
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eba:	f3ef 8305 	mrs	r3, IPSR
 8004ebe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ec0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <osMutexRelease+0x30>
    stat = osErrorISR;
 8004ec6:	f06f 0305 	mvn.w	r3, #5
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e01f      	b.n	8004f0e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004ed4:	f06f 0303 	mvn.w	r3, #3
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e018      	b.n	8004f0e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004ee2:	6938      	ldr	r0, [r7, #16]
 8004ee4:	f000 fa8a 	bl	80053fc <xQueueGiveMutexRecursive>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d00f      	beq.n	8004f0e <osMutexRelease+0x70>
        stat = osErrorResource;
 8004eee:	f06f 0302 	mvn.w	r3, #2
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e00b      	b.n	8004f0e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2100      	movs	r1, #0
 8004efc:	6938      	ldr	r0, [r7, #16]
 8004efe:	f000 fae7 	bl	80054d0 <xQueueGenericSend>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d002      	beq.n	8004f0e <osMutexRelease+0x70>
        stat = osErrorResource;
 8004f08:	f06f 0302 	mvn.w	r3, #2
 8004f0c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004f0e:	697b      	ldr	r3, [r7, #20]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4a06      	ldr	r2, [pc, #24]	; (8004f48 <vApplicationGetIdleTaskMemory+0x30>)
 8004f2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	601a      	str	r2, [r3, #0]
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	2000023c 	.word	0x2000023c
 8004f48:	200002e4 	.word	0x200002e4

08004f4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4a06      	ldr	r2, [pc, #24]	; (8004f7c <vApplicationGetTimerTaskMemory+0x30>)
 8004f62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f6a:	601a      	str	r2, [r3, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	200004e4 	.word	0x200004e4
 8004f7c:	2000058c 	.word	0x2000058c

08004f80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f103 0208 	add.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f103 0208 	add.w	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f103 0208 	add.w	r2, r3, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d103      	bne.n	8005042 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	e00c      	b.n	800505c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3308      	adds	r3, #8
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	e002      	b.n	8005050 <vListInsert+0x2e>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	d2f6      	bcs.n	800504a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	601a      	str	r2, [r3, #0]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6892      	ldr	r2, [r2, #8]
 80050aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6852      	ldr	r2, [r2, #4]
 80050b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d103      	bne.n	80050c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	1e5a      	subs	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005112:	f002 fbaf 	bl	8007874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	441a      	add	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	3b01      	subs	r3, #1
 8005144:	68f9      	ldr	r1, [r7, #12]
 8005146:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	22ff      	movs	r2, #255	; 0xff
 8005156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	; 0xff
 800515e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d114      	bne.n	8005192 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01a      	beq.n	80051a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3310      	adds	r3, #16
 8005174:	4618      	mov	r0, r3
 8005176:	f001 fb4f 	bl	8006818 <xTaskRemoveFromEventList>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d012      	beq.n	80051a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <xQueueGenericReset+0xcc>)
 8005182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	e009      	b.n	80051a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3310      	adds	r3, #16
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fef2 	bl	8004f80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3324      	adds	r3, #36	; 0x24
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff feed 	bl	8004f80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051a6:	f002 fb95 	bl	80078d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051aa:	2301      	movs	r3, #1
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	e000ed04 	.word	0xe000ed04

080051b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08e      	sub	sp, #56	; 0x38
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <xQueueGenericCreateStatic+0x52>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <xQueueGenericCreateStatic+0x56>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueGenericCreateStatic+0x58>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	623b      	str	r3, [r7, #32]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <xQueueGenericCreateStatic+0x7e>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <xQueueGenericCreateStatic+0x82>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <xQueueGenericCreateStatic+0x84>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	61fb      	str	r3, [r7, #28]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005256:	2350      	movs	r3, #80	; 0x50
 8005258:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d00a      	beq.n	8005276 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	61bb      	str	r3, [r7, #24]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005276:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800528a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	4613      	mov	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f83f 	bl	800531c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3730      	adds	r7, #48	; 0x30
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	613b      	str	r3, [r7, #16]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	3350      	adds	r3, #80	; 0x50
 80052e0:	4618      	mov	r0, r3
 80052e2:	f002 fbe9 	bl	8007ab8 <pvPortMalloc>
 80052e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d011      	beq.n	8005312 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3350      	adds	r3, #80	; 0x50
 80052f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005300:	79fa      	ldrb	r2, [r7, #7]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f805 	bl	800531c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005312:	69bb      	ldr	r3, [r7, #24]
	}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e002      	b.n	800533e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800534a:	2101      	movs	r1, #1
 800534c:	69b8      	ldr	r0, [r7, #24]
 800534e:	f7ff fecb 	bl	80050e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005382:	2300      	movs	r3, #0
 8005384:	2200      	movs	r2, #0
 8005386:	2100      	movs	r1, #0
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f8a1 	bl	80054d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	4603      	mov	r3, r0
 800539e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053a0:	2301      	movs	r3, #1
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6939      	ldr	r1, [r7, #16]
 80053ae:	6978      	ldr	r0, [r7, #20]
 80053b0:	f7ff ff7a 	bl	80052a8 <xQueueGenericCreate>
 80053b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff ffd3 	bl	8005362 <prvInitialiseMutex>

		return xNewQueue;
 80053bc:	68fb      	ldr	r3, [r7, #12]
	}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b088      	sub	sp, #32
 80053ca:	af02      	add	r7, sp, #8
 80053cc:	4603      	mov	r3, r0
 80053ce:	6039      	str	r1, [r7, #0]
 80053d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053d2:	2301      	movs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2200      	movs	r2, #0
 80053e2:	6939      	ldr	r1, [r7, #16]
 80053e4:	6978      	ldr	r0, [r7, #20]
 80053e6:	f7ff fee7 	bl	80051b8 <xQueueGenericCreateStatic>
 80053ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff ffb8 	bl	8005362 <prvInitialiseMutex>

		return xNewQueue;
 80053f2:	68fb      	ldr	r3, [r7, #12]
	}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60fb      	str	r3, [r7, #12]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	689c      	ldr	r4, [r3, #8]
 8005428:	f001 fbb8 	bl	8006b9c <xTaskGetCurrentTaskHandle>
 800542c:	4603      	mov	r3, r0
 800542e:	429c      	cmp	r4, r3
 8005430:	d111      	bne.n	8005456 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	1e5a      	subs	r2, r3, #1
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005444:	2300      	movs	r3, #0
 8005446:	2200      	movs	r2, #0
 8005448:	2100      	movs	r1, #0
 800544a:	6938      	ldr	r0, [r7, #16]
 800544c:	f000 f840 	bl	80054d0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005450:	2301      	movs	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e001      	b.n	800545a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800545a:	697b      	ldr	r3, [r7, #20]
	}
 800545c:	4618      	mov	r0, r3
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd90      	pop	{r4, r7, pc}

08005464 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60fb      	str	r3, [r7, #12]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	689c      	ldr	r4, [r3, #8]
 8005492:	f001 fb83 	bl	8006b9c <xTaskGetCurrentTaskHandle>
 8005496:	4603      	mov	r3, r0
 8005498:	429c      	cmp	r4, r3
 800549a:	d107      	bne.n	80054ac <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80054a6:	2301      	movs	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	e00c      	b.n	80054c6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6938      	ldr	r0, [r7, #16]
 80054b0:	f000 fa88 	bl	80059c4 <xQueueSemaphoreTake>
 80054b4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d004      	beq.n	80054c6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80054c6:	697b      	ldr	r3, [r7, #20]
	}
 80054c8:	4618      	mov	r0, r3
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd90      	pop	{r4, r7, pc}

080054d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	; 0x38
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054de:	2300      	movs	r3, #0
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xQueueGenericSend+0x32>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <xQueueGenericSend+0x40>
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <xQueueGenericSend+0x44>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <xQueueGenericSend+0x46>
 8005514:	2300      	movs	r3, #0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <xQueueGenericSend+0x60>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d103      	bne.n	800553e <xQueueGenericSend+0x6e>
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <xQueueGenericSend+0x72>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <xQueueGenericSend+0x74>
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <xQueueGenericSend+0x8e>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	623b      	str	r3, [r7, #32]
}
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800555e:	f001 fb2d 	bl	8006bbc <xTaskGetSchedulerState>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d102      	bne.n	800556e <xQueueGenericSend+0x9e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <xQueueGenericSend+0xa2>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <xQueueGenericSend+0xa4>
 8005572:	2300      	movs	r3, #0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueGenericSend+0xbe>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	61fb      	str	r3, [r7, #28]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800558e:	f002 f971 	bl	8007874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <xQueueGenericSend+0xd4>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d129      	bne.n	80055f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055aa:	f000 fb2f 	bl	8005c0c <prvCopyDataToQueue>
 80055ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d010      	beq.n	80055da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	3324      	adds	r3, #36	; 0x24
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f92b 	bl	8006818 <xTaskRemoveFromEventList>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d013      	beq.n	80055f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055c8:	4b3f      	ldr	r3, [pc, #252]	; (80056c8 <xQueueGenericSend+0x1f8>)
 80055ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	e00a      	b.n	80055f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055e0:	4b39      	ldr	r3, [pc, #228]	; (80056c8 <xQueueGenericSend+0x1f8>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055f0:	f002 f970 	bl	80078d4 <vPortExitCritical>
				return pdPASS;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e063      	b.n	80056c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d103      	bne.n	8005606 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055fe:	f002 f969 	bl	80078d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005602:	2300      	movs	r3, #0
 8005604:	e05c      	b.n	80056c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800560c:	f107 0314 	add.w	r3, r7, #20
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f965 	bl	80068e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005616:	2301      	movs	r3, #1
 8005618:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800561a:	f002 f95b 	bl	80078d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800561e:	f000 febf 	bl	80063a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005622:	f002 f927 	bl	8007874 <vPortEnterCritical>
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800562c:	b25b      	sxtb	r3, r3
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d103      	bne.n	800563c <xQueueGenericSend+0x16c>
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005642:	b25b      	sxtb	r3, r3
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d103      	bne.n	8005652 <xQueueGenericSend+0x182>
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005652:	f002 f93f 	bl	80078d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005656:	1d3a      	adds	r2, r7, #4
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	4611      	mov	r1, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f001 f954 	bl	800690c <xTaskCheckForTimeOut>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d124      	bne.n	80056b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800566a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800566c:	f000 fbc6 	bl	8005dfc <prvIsQueueFull>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d018      	beq.n	80056a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	3310      	adds	r3, #16
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4611      	mov	r1, r2
 800567e:	4618      	mov	r0, r3
 8005680:	f001 f87a 	bl	8006778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005686:	f000 fb51 	bl	8005d2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800568a:	f000 fe97 	bl	80063bc <xTaskResumeAll>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f af7c 	bne.w	800558e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <xQueueGenericSend+0x1f8>)
 8005698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	e772      	b.n	800558e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056aa:	f000 fb3f 	bl	8005d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056ae:	f000 fe85 	bl	80063bc <xTaskResumeAll>
 80056b2:	e76c      	b.n	800558e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056b6:	f000 fb39 	bl	8005d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ba:	f000 fe7f 	bl	80063bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3738      	adds	r7, #56	; 0x38
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b090      	sub	sp, #64	; 0x40
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d103      	bne.n	8005708 <xQueueGenericSendFromISR+0x3c>
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <xQueueGenericSendFromISR+0x40>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <xQueueGenericSendFromISR+0x42>
 800570c:	2300      	movs	r3, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d103      	bne.n	8005736 <xQueueGenericSendFromISR+0x6a>
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <xQueueGenericSendFromISR+0x6e>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <xQueueGenericSendFromISR+0x70>
 800573a:	2300      	movs	r3, #0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	623b      	str	r3, [r7, #32]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005756:	f002 f96f 	bl	8007a38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800575a:	f3ef 8211 	mrs	r2, BASEPRI
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	61fa      	str	r2, [r7, #28]
 8005770:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005772:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <xQueueGenericSendFromISR+0xbc>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d12f      	bne.n	80057e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800578e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800579e:	f000 fa35 	bl	8005c0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d112      	bne.n	80057d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d016      	beq.n	80057e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	3324      	adds	r3, #36	; 0x24
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 f82d 	bl	8006818 <xTaskRemoveFromEventList>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00e      	beq.n	80057e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e007      	b.n	80057e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057d6:	3301      	adds	r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	b25a      	sxtb	r2, r3
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057e2:	2301      	movs	r3, #1
 80057e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80057e6:	e001      	b.n	80057ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3740      	adds	r7, #64	; 0x40
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	; 0x30
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005810:	2300      	movs	r3, #0
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <xQueueReceive+0x30>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	623b      	str	r3, [r7, #32]
}
 8005830:	bf00      	nop
 8005832:	e7fe      	b.n	8005832 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <xQueueReceive+0x3e>
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <xQueueReceive+0x42>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <xQueueReceive+0x44>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xQueueReceive+0x5e>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	61fb      	str	r3, [r7, #28]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005862:	f001 f9ab 	bl	8006bbc <xTaskGetSchedulerState>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <xQueueReceive+0x6e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <xQueueReceive+0x72>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <xQueueReceive+0x74>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <xQueueReceive+0x8e>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	61bb      	str	r3, [r7, #24]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005892:	f001 ffef 	bl	8007874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01f      	beq.n	80058e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a6:	f000 fa1b 	bl	8005ce0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1e5a      	subs	r2, r3, #1
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00f      	beq.n	80058da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	3310      	adds	r3, #16
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 ffaa 	bl	8006818 <xTaskRemoveFromEventList>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058ca:	4b3d      	ldr	r3, [pc, #244]	; (80059c0 <xQueueReceive+0x1bc>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058da:	f001 fffb 	bl	80078d4 <vPortExitCritical>
				return pdPASS;
 80058de:	2301      	movs	r3, #1
 80058e0:	e069      	b.n	80059b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d103      	bne.n	80058f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058e8:	f001 fff4 	bl	80078d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e062      	b.n	80059b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058f6:	f107 0310 	add.w	r3, r7, #16
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fff0 	bl	80068e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005900:	2301      	movs	r3, #1
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005904:	f001 ffe6 	bl	80078d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005908:	f000 fd4a 	bl	80063a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800590c:	f001 ffb2 	bl	8007874 <vPortEnterCritical>
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005916:	b25b      	sxtb	r3, r3
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d103      	bne.n	8005926 <xQueueReceive+0x122>
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800592c:	b25b      	sxtb	r3, r3
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d103      	bne.n	800593c <xQueueReceive+0x138>
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800593c:	f001 ffca 	bl	80078d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005940:	1d3a      	adds	r2, r7, #4
 8005942:	f107 0310 	add.w	r3, r7, #16
 8005946:	4611      	mov	r1, r2
 8005948:	4618      	mov	r0, r3
 800594a:	f000 ffdf 	bl	800690c <xTaskCheckForTimeOut>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d123      	bne.n	800599c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005956:	f000 fa3b 	bl	8005dd0 <prvIsQueueEmpty>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d017      	beq.n	8005990 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	3324      	adds	r3, #36	; 0x24
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f000 ff05 	bl	8006778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800596e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005970:	f000 f9dc 	bl	8005d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005974:	f000 fd22 	bl	80063bc <xTaskResumeAll>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d189      	bne.n	8005892 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800597e:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <xQueueReceive+0x1bc>)
 8005980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	e780      	b.n	8005892 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005992:	f000 f9cb 	bl	8005d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005996:	f000 fd11 	bl	80063bc <xTaskResumeAll>
 800599a:	e77a      	b.n	8005892 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800599c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599e:	f000 f9c5 	bl	8005d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059a2:	f000 fd0b 	bl	80063bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a8:	f000 fa12 	bl	8005dd0 <prvIsQueueEmpty>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f43f af6f 	beq.w	8005892 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3730      	adds	r7, #48	; 0x30
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08e      	sub	sp, #56	; 0x38
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	623b      	str	r3, [r7, #32]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	61fb      	str	r3, [r7, #28]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a14:	f001 f8d2 	bl	8006bbc <xTaskGetSchedulerState>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <xQueueSemaphoreTake+0x60>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <xQueueSemaphoreTake+0x64>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <xQueueSemaphoreTake+0x66>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	61bb      	str	r3, [r7, #24]
}
 8005a40:	bf00      	nop
 8005a42:	e7fe      	b.n	8005a42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a44:	f001 ff16 	bl	8007874 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d024      	beq.n	8005a9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	1e5a      	subs	r2, r3, #1
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a64:	f001 fa20 	bl	8006ea8 <pvTaskIncrementMutexHeldCount>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00f      	beq.n	8005a96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	3310      	adds	r3, #16
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fecc 	bl	8006818 <xTaskRemoveFromEventList>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a86:	4b54      	ldr	r3, [pc, #336]	; (8005bd8 <xQueueSemaphoreTake+0x214>)
 8005a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a96:	f001 ff1d 	bl	80078d4 <vPortExitCritical>
				return pdPASS;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e097      	b.n	8005bce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d111      	bne.n	8005ac8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	617b      	str	r3, [r7, #20]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ac0:	f001 ff08 	bl	80078d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e082      	b.n	8005bce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 ff04 	bl	80068e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005adc:	f001 fefa 	bl	80078d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ae0:	f000 fc5e 	bl	80063a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ae4:	f001 fec6 	bl	8007874 <vPortEnterCritical>
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aee:	b25b      	sxtb	r3, r3
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d103      	bne.n	8005afe <xQueueSemaphoreTake+0x13a>
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b04:	b25b      	sxtb	r3, r3
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d103      	bne.n	8005b14 <xQueueSemaphoreTake+0x150>
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b14:	f001 fede 	bl	80078d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b18:	463a      	mov	r2, r7
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fef3 	bl	800690c <xTaskCheckForTimeOut>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d132      	bne.n	8005b92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b2e:	f000 f94f 	bl	8005dd0 <prvIsQueueEmpty>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d026      	beq.n	8005b86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005b40:	f001 fe98 	bl	8007874 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f001 f855 	bl	8006bf8 <xTaskPriorityInherit>
 8005b4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b50:	f001 fec0 	bl	80078d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	3324      	adds	r3, #36	; 0x24
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fe0b 	bl	8006778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b64:	f000 f8e2 	bl	8005d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b68:	f000 fc28 	bl	80063bc <xTaskResumeAll>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f47f af68 	bne.w	8005a44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005b74:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <xQueueSemaphoreTake+0x214>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	e75e      	b.n	8005a44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b88:	f000 f8d0 	bl	8005d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8c:	f000 fc16 	bl	80063bc <xTaskResumeAll>
 8005b90:	e758      	b.n	8005a44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b94:	f000 f8ca 	bl	8005d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b98:	f000 fc10 	bl	80063bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b9e:	f000 f917 	bl	8005dd0 <prvIsQueueEmpty>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f43f af4d 	beq.w	8005a44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00d      	beq.n	8005bcc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005bb0:	f001 fe60 	bl	8007874 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bb6:	f000 f811 	bl	8005bdc <prvGetDisinheritPriorityAfterTimeout>
 8005bba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f8ee 	bl	8006da4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005bc8:	f001 fe84 	bl	80078d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3738      	adds	r7, #56	; 0x38
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d006      	beq.n	8005bfa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e001      	b.n	8005bfe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
	}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10d      	bne.n	8005c46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d14d      	bne.n	8005cce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 f846 	bl	8006cc8 <xTaskPriorityDisinherit>
 8005c3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	e043      	b.n	8005cce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d119      	bne.n	8005c80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6858      	ldr	r0, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	461a      	mov	r2, r3
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	f002 fb01 	bl	800825e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d32b      	bcc.n	8005cce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	e026      	b.n	8005cce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68d8      	ldr	r0, [r3, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	f002 fae7 	bl	800825e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	425b      	negs	r3, r3
 8005c9a:	441a      	add	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d207      	bcs.n	8005cbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	441a      	add	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d105      	bne.n	8005cce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cd6:	697b      	ldr	r3, [r7, #20]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	441a      	add	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d303      	bcc.n	8005d14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68d9      	ldr	r1, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6838      	ldr	r0, [r7, #0]
 8005d20:	f002 fa9d 	bl	800825e <memcpy>
	}
}
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d34:	f001 fd9e 	bl	8007874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d40:	e011      	b.n	8005d66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d012      	beq.n	8005d70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3324      	adds	r3, #36	; 0x24
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fd62 	bl	8006818 <xTaskRemoveFromEventList>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d5a:	f000 fe39 	bl	80069d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	dce9      	bgt.n	8005d42 <prvUnlockQueue+0x16>
 8005d6e:	e000      	b.n	8005d72 <prvUnlockQueue+0x46>
					break;
 8005d70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	22ff      	movs	r2, #255	; 0xff
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d7a:	f001 fdab 	bl	80078d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d7e:	f001 fd79 	bl	8007874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d8a:	e011      	b.n	8005db0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d012      	beq.n	8005dba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3310      	adds	r3, #16
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fd3d 	bl	8006818 <xTaskRemoveFromEventList>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005da4:	f000 fe14 	bl	80069d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dce9      	bgt.n	8005d8c <prvUnlockQueue+0x60>
 8005db8:	e000      	b.n	8005dbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	22ff      	movs	r2, #255	; 0xff
 8005dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005dc4:	f001 fd86 	bl	80078d4 <vPortExitCritical>
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dd8:	f001 fd4c 	bl	8007874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e001      	b.n	8005dee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dee:	f001 fd71 	bl	80078d4 <vPortExitCritical>

	return xReturn;
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e04:	f001 fd36 	bl	8007874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d102      	bne.n	8005e1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e001      	b.n	8005e1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e1e:	f001 fd59 	bl	80078d4 <vPortExitCritical>

	return xReturn;
 8005e22:	68fb      	ldr	r3, [r7, #12]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	e014      	b.n	8005e66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e3c:	4a0f      	ldr	r2, [pc, #60]	; (8005e7c <vQueueAddToRegistry+0x50>)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10b      	bne.n	8005e60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e48:	490c      	ldr	r1, [pc, #48]	; (8005e7c <vQueueAddToRegistry+0x50>)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e52:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <vQueueAddToRegistry+0x50>)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e5e:	e006      	b.n	8005e6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b07      	cmp	r3, #7
 8005e6a:	d9e7      	bls.n	8005e3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	2000098c 	.word	0x2000098c

08005e80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e90:	f001 fcf0 	bl	8007874 <vPortEnterCritical>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d103      	bne.n	8005eaa <vQueueWaitForMessageRestricted+0x2a>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d103      	bne.n	8005ec0 <vQueueWaitForMessageRestricted+0x40>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec0:	f001 fd08 	bl	80078d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	3324      	adds	r3, #36	; 0x24
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fc73 	bl	80067c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eda:	6978      	ldr	r0, [r7, #20]
 8005edc:	f7ff ff26 	bl	8005d2c <prvUnlockQueue>
	}
 8005ee0:	bf00      	nop
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08e      	sub	sp, #56	; 0x38
 8005eec:	af04      	add	r7, sp, #16
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	623b      	str	r3, [r7, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xTaskCreateStatic+0x46>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	61fb      	str	r3, [r7, #28]
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f2e:	23a8      	movs	r3, #168	; 0xa8
 8005f30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2ba8      	cmp	r3, #168	; 0xa8
 8005f36:	d00a      	beq.n	8005f4e <xTaskCreateStatic+0x66>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61bb      	str	r3, [r7, #24]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01e      	beq.n	8005f94 <xTaskCreateStatic+0xac>
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01b      	beq.n	8005f94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	2202      	movs	r2, #2
 8005f6a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9303      	str	r3, [sp, #12]
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	9302      	str	r3, [sp, #8]
 8005f76:	f107 0314 	add.w	r3, r7, #20
 8005f7a:	9301      	str	r3, [sp, #4]
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f850 	bl	800602c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f8e:	f000 f8f3 	bl	8006178 <prvAddNewTaskToReadyList>
 8005f92:	e001      	b.n	8005f98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f98:	697b      	ldr	r3, [r7, #20]
	}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3728      	adds	r7, #40	; 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b08c      	sub	sp, #48	; 0x30
 8005fa6:	af04      	add	r7, sp, #16
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 fd7e 	bl	8007ab8 <pvPortMalloc>
 8005fbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00e      	beq.n	8005fe2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fc4:	20a8      	movs	r0, #168	; 0xa8
 8005fc6:	f001 fd77 	bl	8007ab8 <pvPortMalloc>
 8005fca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8005fd8:	e005      	b.n	8005fe6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f001 fe38 	bl	8007c50 <vPortFree>
 8005fe0:	e001      	b.n	8005fe6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d017      	beq.n	800601c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9303      	str	r3, [sp, #12]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	9302      	str	r3, [sp, #8]
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f80e 	bl	800602c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006010:	69f8      	ldr	r0, [r7, #28]
 8006012:	f000 f8b1 	bl	8006178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006016:	2301      	movs	r3, #1
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e002      	b.n	8006022 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800601c:	f04f 33ff 	mov.w	r3, #4294967295
 8006020:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006022:	69bb      	ldr	r3, [r7, #24]
	}
 8006024:	4618      	mov	r0, r3
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	461a      	mov	r2, r3
 8006044:	21a5      	movs	r1, #165	; 0xa5
 8006046:	f002 f838 	bl	80080ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006054:	3b01      	subs	r3, #1
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f023 0307 	bic.w	r3, r3, #7
 8006062:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <prvInitialiseNewTask+0x58>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	617b      	str	r3, [r7, #20]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01f      	beq.n	80060ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
 800608e:	e012      	b.n	80060b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	7819      	ldrb	r1, [r3, #0]
 8006098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	3334      	adds	r3, #52	; 0x34
 80060a0:	460a      	mov	r2, r1
 80060a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d006      	beq.n	80060be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	3301      	adds	r3, #1
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	2b0f      	cmp	r3, #15
 80060ba:	d9e9      	bls.n	8006090 <prvInitialiseNewTask+0x64>
 80060bc:	e000      	b.n	80060c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80060be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c8:	e003      	b.n	80060d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	2b37      	cmp	r3, #55	; 0x37
 80060d6:	d901      	bls.n	80060dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060d8:	2337      	movs	r3, #55	; 0x37
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	2200      	movs	r2, #0
 80060ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	3304      	adds	r3, #4
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe ff64 	bl	8004fc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	3318      	adds	r3, #24
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe ff5f 	bl	8004fc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006106:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006116:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	2200      	movs	r2, #0
 8006124:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	3354      	adds	r3, #84	; 0x54
 800612c:	224c      	movs	r2, #76	; 0x4c
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f001 ffc2 	bl	80080ba <memset>
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	4a0c      	ldr	r2, [pc, #48]	; (800616c <prvInitialiseNewTask+0x140>)
 800613a:	659a      	str	r2, [r3, #88]	; 0x58
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <prvInitialiseNewTask+0x144>)
 8006140:	65da      	str	r2, [r3, #92]	; 0x5c
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	4a0b      	ldr	r2, [pc, #44]	; (8006174 <prvInitialiseNewTask+0x148>)
 8006146:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	69b8      	ldr	r0, [r7, #24]
 800614e:	f001 fa61 	bl	8007614 <pxPortInitialiseStack>
 8006152:	4602      	mov	r2, r0
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006162:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006164:	bf00      	nop
 8006166:	3720      	adds	r7, #32
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20004c20 	.word	0x20004c20
 8006170:	20004c88 	.word	0x20004c88
 8006174:	20004cf0 	.word	0x20004cf0

08006178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006180:	f001 fb78 	bl	8007874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006184:	4b2d      	ldr	r3, [pc, #180]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	4a2c      	ldr	r2, [pc, #176]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 800618c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800618e:	4b2c      	ldr	r3, [pc, #176]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006196:	4a2a      	ldr	r2, [pc, #168]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d110      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061a4:	f000 fc38 	bl	8006a18 <prvInitialiseTaskLists>
 80061a8:	e00d      	b.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061aa:	4b26      	ldr	r3, [pc, #152]	; (8006244 <prvAddNewTaskToReadyList+0xcc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061b2:	4b23      	ldr	r3, [pc, #140]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d802      	bhi.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061c0:	4a1f      	ldr	r2, [pc, #124]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4b1b      	ldr	r3, [pc, #108]	; (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <prvAddNewTaskToReadyList+0x74>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a18      	ldr	r2, [pc, #96]	; (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4a15      	ldr	r2, [pc, #84]	; (8006250 <prvAddNewTaskToReadyList+0xd8>)
 80061fa:	441a      	add	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7fe fee9 	bl	8004fda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006208:	f001 fb64 	bl	80078d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800620c:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <prvAddNewTaskToReadyList+0xcc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00e      	beq.n	8006232 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	429a      	cmp	r2, r3
 8006220:	d207      	bcs.n	8006232 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <prvAddNewTaskToReadyList+0xdc>)
 8006224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000ea0 	.word	0x20000ea0
 8006240:	200009cc 	.word	0x200009cc
 8006244:	20000eac 	.word	0x20000eac
 8006248:	20000ebc 	.word	0x20000ebc
 800624c:	20000ea8 	.word	0x20000ea8
 8006250:	200009d0 	.word	0x200009d0
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d017      	beq.n	800629a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800626a:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <vTaskDelay+0x60>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <vTaskDelay+0x30>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60bb      	str	r3, [r7, #8]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006288:	f000 f88a 	bl	80063a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800628c:	2100      	movs	r1, #0
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fe1e 	bl	8006ed0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006294:	f000 f892 	bl	80063bc <xTaskResumeAll>
 8006298:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d107      	bne.n	80062b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <vTaskDelay+0x64>)
 80062a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20000ec8 	.word	0x20000ec8
 80062bc:	e000ed04 	.word	0xe000ed04

080062c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062ce:	463a      	mov	r2, r7
 80062d0:	1d39      	adds	r1, r7, #4
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe fe1e 	bl	8004f18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	9202      	str	r2, [sp, #8]
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	2300      	movs	r3, #0
 80062ec:	460a      	mov	r2, r1
 80062ee:	4924      	ldr	r1, [pc, #144]	; (8006380 <vTaskStartScheduler+0xc0>)
 80062f0:	4824      	ldr	r0, [pc, #144]	; (8006384 <vTaskStartScheduler+0xc4>)
 80062f2:	f7ff fdf9 	bl	8005ee8 <xTaskCreateStatic>
 80062f6:	4603      	mov	r3, r0
 80062f8:	4a23      	ldr	r2, [pc, #140]	; (8006388 <vTaskStartScheduler+0xc8>)
 80062fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062fc:	4b22      	ldr	r3, [pc, #136]	; (8006388 <vTaskStartScheduler+0xc8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006304:	2301      	movs	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e001      	b.n	800630e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d102      	bne.n	800631a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006314:	f000 fe30 	bl	8006f78 <xTimerCreateTimerTask>
 8006318:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d11b      	bne.n	8006358 <vTaskStartScheduler+0x98>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006334:	4b15      	ldr	r3, [pc, #84]	; (800638c <vTaskStartScheduler+0xcc>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3354      	adds	r3, #84	; 0x54
 800633a:	4a15      	ldr	r2, [pc, #84]	; (8006390 <vTaskStartScheduler+0xd0>)
 800633c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800633e:	4b15      	ldr	r3, [pc, #84]	; (8006394 <vTaskStartScheduler+0xd4>)
 8006340:	f04f 32ff 	mov.w	r2, #4294967295
 8006344:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006346:	4b14      	ldr	r3, [pc, #80]	; (8006398 <vTaskStartScheduler+0xd8>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800634c:	4b13      	ldr	r3, [pc, #76]	; (800639c <vTaskStartScheduler+0xdc>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006352:	f001 f9ed 	bl	8007730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006356:	e00e      	b.n	8006376 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d10a      	bne.n	8006376 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	60fb      	str	r3, [r7, #12]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <vTaskStartScheduler+0xb4>
}
 8006376:	bf00      	nop
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	08008e8c 	.word	0x08008e8c
 8006384:	080069e9 	.word	0x080069e9
 8006388:	20000ec4 	.word	0x20000ec4
 800638c:	200009cc 	.word	0x200009cc
 8006390:	20000068 	.word	0x20000068
 8006394:	20000ec0 	.word	0x20000ec0
 8006398:	20000eac 	.word	0x20000eac
 800639c:	20000ea4 	.word	0x20000ea4

080063a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063a4:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <vTaskSuspendAll+0x18>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	4a03      	ldr	r2, [pc, #12]	; (80063b8 <vTaskSuspendAll+0x18>)
 80063ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063ae:	bf00      	nop
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	20000ec8 	.word	0x20000ec8

080063bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063ca:	4b42      	ldr	r3, [pc, #264]	; (80064d4 <xTaskResumeAll+0x118>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	603b      	str	r3, [r7, #0]
}
 80063e4:	bf00      	nop
 80063e6:	e7fe      	b.n	80063e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063e8:	f001 fa44 	bl	8007874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063ec:	4b39      	ldr	r3, [pc, #228]	; (80064d4 <xTaskResumeAll+0x118>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	4a38      	ldr	r2, [pc, #224]	; (80064d4 <xTaskResumeAll+0x118>)
 80063f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f6:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <xTaskResumeAll+0x118>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d162      	bne.n	80064c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063fe:	4b36      	ldr	r3, [pc, #216]	; (80064d8 <xTaskResumeAll+0x11c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d05e      	beq.n	80064c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006406:	e02f      	b.n	8006468 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006408:	4b34      	ldr	r3, [pc, #208]	; (80064dc <xTaskResumeAll+0x120>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3318      	adds	r3, #24
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe fe3d 	bl	8005094 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3304      	adds	r3, #4
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe fe38 	bl	8005094 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4b2d      	ldr	r3, [pc, #180]	; (80064e0 <xTaskResumeAll+0x124>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d903      	bls.n	8006438 <xTaskResumeAll+0x7c>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a2a      	ldr	r2, [pc, #168]	; (80064e0 <xTaskResumeAll+0x124>)
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4a27      	ldr	r2, [pc, #156]	; (80064e4 <xTaskResumeAll+0x128>)
 8006446:	441a      	add	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f7fe fdc3 	bl	8004fda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	4b23      	ldr	r3, [pc, #140]	; (80064e8 <xTaskResumeAll+0x12c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	429a      	cmp	r2, r3
 8006460:	d302      	bcc.n	8006468 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006462:	4b22      	ldr	r3, [pc, #136]	; (80064ec <xTaskResumeAll+0x130>)
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006468:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <xTaskResumeAll+0x120>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1cb      	bne.n	8006408 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006476:	f000 fb71 	bl	8006b5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800647a:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <xTaskResumeAll+0x134>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d010      	beq.n	80064a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006486:	f000 f859 	bl	800653c <xTaskIncrementTick>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006490:	4b16      	ldr	r3, [pc, #88]	; (80064ec <xTaskResumeAll+0x130>)
 8006492:	2201      	movs	r2, #1
 8006494:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3b01      	subs	r3, #1
 800649a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f1      	bne.n	8006486 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <xTaskResumeAll+0x134>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064a8:	4b10      	ldr	r3, [pc, #64]	; (80064ec <xTaskResumeAll+0x130>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d009      	beq.n	80064c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064b4:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <xTaskResumeAll+0x138>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064c4:	f001 fa06 	bl	80078d4 <vPortExitCritical>

	return xAlreadyYielded;
 80064c8:	68bb      	ldr	r3, [r7, #8]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000ec8 	.word	0x20000ec8
 80064d8:	20000ea0 	.word	0x20000ea0
 80064dc:	20000e60 	.word	0x20000e60
 80064e0:	20000ea8 	.word	0x20000ea8
 80064e4:	200009d0 	.word	0x200009d0
 80064e8:	200009cc 	.word	0x200009cc
 80064ec:	20000eb4 	.word	0x20000eb4
 80064f0:	20000eb0 	.word	0x20000eb0
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <xTaskGetTickCount+0x1c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006504:	687b      	ldr	r3, [r7, #4]
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000ea4 	.word	0x20000ea4

08006518 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800651e:	f001 fa8b 	bl	8007a38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006522:	2300      	movs	r3, #0
 8006524:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006526:	4b04      	ldr	r3, [pc, #16]	; (8006538 <xTaskGetTickCountFromISR+0x20>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800652c:	683b      	ldr	r3, [r7, #0]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000ea4 	.word	0x20000ea4

0800653c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006546:	4b4f      	ldr	r3, [pc, #316]	; (8006684 <xTaskIncrementTick+0x148>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f040 808f 	bne.w	800666e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006550:	4b4d      	ldr	r3, [pc, #308]	; (8006688 <xTaskIncrementTick+0x14c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006558:	4a4b      	ldr	r2, [pc, #300]	; (8006688 <xTaskIncrementTick+0x14c>)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d120      	bne.n	80065a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006564:	4b49      	ldr	r3, [pc, #292]	; (800668c <xTaskIncrementTick+0x150>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <xTaskIncrementTick+0x48>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	603b      	str	r3, [r7, #0]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <xTaskIncrementTick+0x46>
 8006584:	4b41      	ldr	r3, [pc, #260]	; (800668c <xTaskIncrementTick+0x150>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	4b41      	ldr	r3, [pc, #260]	; (8006690 <xTaskIncrementTick+0x154>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a3f      	ldr	r2, [pc, #252]	; (800668c <xTaskIncrementTick+0x150>)
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	4a3f      	ldr	r2, [pc, #252]	; (8006690 <xTaskIncrementTick+0x154>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	4b3e      	ldr	r3, [pc, #248]	; (8006694 <xTaskIncrementTick+0x158>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3301      	adds	r3, #1
 800659e:	4a3d      	ldr	r2, [pc, #244]	; (8006694 <xTaskIncrementTick+0x158>)
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	f000 fadb 	bl	8006b5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065a6:	4b3c      	ldr	r3, [pc, #240]	; (8006698 <xTaskIncrementTick+0x15c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d349      	bcc.n	8006644 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065b0:	4b36      	ldr	r3, [pc, #216]	; (800668c <xTaskIncrementTick+0x150>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ba:	4b37      	ldr	r3, [pc, #220]	; (8006698 <xTaskIncrementTick+0x15c>)
 80065bc:	f04f 32ff 	mov.w	r2, #4294967295
 80065c0:	601a      	str	r2, [r3, #0]
					break;
 80065c2:	e03f      	b.n	8006644 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c4:	4b31      	ldr	r3, [pc, #196]	; (800668c <xTaskIncrementTick+0x150>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d203      	bcs.n	80065e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065dc:	4a2e      	ldr	r2, [pc, #184]	; (8006698 <xTaskIncrementTick+0x15c>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065e2:	e02f      	b.n	8006644 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe fd53 	bl	8005094 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	3318      	adds	r3, #24
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fd4a 	bl	8005094 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4b25      	ldr	r3, [pc, #148]	; (800669c <xTaskIncrementTick+0x160>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d903      	bls.n	8006614 <xTaskIncrementTick+0xd8>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	4a22      	ldr	r2, [pc, #136]	; (800669c <xTaskIncrementTick+0x160>)
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <xTaskIncrementTick+0x164>)
 8006622:	441a      	add	r2, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	3304      	adds	r3, #4
 8006628:	4619      	mov	r1, r3
 800662a:	4610      	mov	r0, r2
 800662c:	f7fe fcd5 	bl	8004fda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <xTaskIncrementTick+0x168>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	429a      	cmp	r2, r3
 800663c:	d3b8      	bcc.n	80065b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800663e:	2301      	movs	r3, #1
 8006640:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006642:	e7b5      	b.n	80065b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006644:	4b17      	ldr	r3, [pc, #92]	; (80066a4 <xTaskIncrementTick+0x168>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664a:	4915      	ldr	r1, [pc, #84]	; (80066a0 <xTaskIncrementTick+0x164>)
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	440b      	add	r3, r1
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d901      	bls.n	8006660 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006660:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <xTaskIncrementTick+0x16c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	e004      	b.n	8006678 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <xTaskIncrementTick+0x170>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3301      	adds	r3, #1
 8006674:	4a0d      	ldr	r2, [pc, #52]	; (80066ac <xTaskIncrementTick+0x170>)
 8006676:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006678:	697b      	ldr	r3, [r7, #20]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000ec8 	.word	0x20000ec8
 8006688:	20000ea4 	.word	0x20000ea4
 800668c:	20000e58 	.word	0x20000e58
 8006690:	20000e5c 	.word	0x20000e5c
 8006694:	20000eb8 	.word	0x20000eb8
 8006698:	20000ec0 	.word	0x20000ec0
 800669c:	20000ea8 	.word	0x20000ea8
 80066a0:	200009d0 	.word	0x200009d0
 80066a4:	200009cc 	.word	0x200009cc
 80066a8:	20000eb4 	.word	0x20000eb4
 80066ac:	20000eb0 	.word	0x20000eb0

080066b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066b6:	4b2a      	ldr	r3, [pc, #168]	; (8006760 <vTaskSwitchContext+0xb0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066be:	4b29      	ldr	r3, [pc, #164]	; (8006764 <vTaskSwitchContext+0xb4>)
 80066c0:	2201      	movs	r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066c4:	e046      	b.n	8006754 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80066c6:	4b27      	ldr	r3, [pc, #156]	; (8006764 <vTaskSwitchContext+0xb4>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066cc:	4b26      	ldr	r3, [pc, #152]	; (8006768 <vTaskSwitchContext+0xb8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	e010      	b.n	80066f6 <vTaskSwitchContext+0x46>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	607b      	str	r3, [r7, #4]
}
 80066ec:	bf00      	nop
 80066ee:	e7fe      	b.n	80066ee <vTaskSwitchContext+0x3e>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	491d      	ldr	r1, [pc, #116]	; (800676c <vTaskSwitchContext+0xbc>)
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0e4      	beq.n	80066d4 <vTaskSwitchContext+0x24>
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4a15      	ldr	r2, [pc, #84]	; (800676c <vTaskSwitchContext+0xbc>)
 8006716:	4413      	add	r3, r2
 8006718:	60bb      	str	r3, [r7, #8]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	605a      	str	r2, [r3, #4]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	3308      	adds	r3, #8
 800672c:	429a      	cmp	r2, r3
 800672e:	d104      	bne.n	800673a <vTaskSwitchContext+0x8a>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	4a0b      	ldr	r2, [pc, #44]	; (8006770 <vTaskSwitchContext+0xc0>)
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	4a08      	ldr	r2, [pc, #32]	; (8006768 <vTaskSwitchContext+0xb8>)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800674a:	4b09      	ldr	r3, [pc, #36]	; (8006770 <vTaskSwitchContext+0xc0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3354      	adds	r3, #84	; 0x54
 8006750:	4a08      	ldr	r2, [pc, #32]	; (8006774 <vTaskSwitchContext+0xc4>)
 8006752:	6013      	str	r3, [r2, #0]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	20000ec8 	.word	0x20000ec8
 8006764:	20000eb4 	.word	0x20000eb4
 8006768:	20000ea8 	.word	0x20000ea8
 800676c:	200009d0 	.word	0x200009d0
 8006770:	200009cc 	.word	0x200009cc
 8006774:	20000068 	.word	0x20000068

08006778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	60fb      	str	r3, [r7, #12]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <vTaskPlaceOnEventList+0x44>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3318      	adds	r3, #24
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fe fc3b 	bl	8005022 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067ac:	2101      	movs	r1, #1
 80067ae:	6838      	ldr	r0, [r7, #0]
 80067b0:	f000 fb8e 	bl	8006ed0 <prvAddCurrentTaskToDelayedList>
}
 80067b4:	bf00      	nop
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	200009cc 	.word	0x200009cc

080067c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	617b      	str	r3, [r7, #20]
}
 80067e4:	bf00      	nop
 80067e6:	e7fe      	b.n	80067e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067e8:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <vTaskPlaceOnEventListRestricted+0x54>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3318      	adds	r3, #24
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7fe fbf2 	bl	8004fda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006800:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	68b8      	ldr	r0, [r7, #8]
 8006806:	f000 fb63 	bl	8006ed0 <prvAddCurrentTaskToDelayedList>
	}
 800680a:	bf00      	nop
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	200009cc 	.word	0x200009cc

08006818 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60fb      	str	r3, [r7, #12]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	3318      	adds	r3, #24
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fc23 	bl	8005094 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800684e:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <xTaskRemoveFromEventList+0xb0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d11d      	bne.n	8006892 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fc1a 	bl	8005094 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4b19      	ldr	r3, [pc, #100]	; (80068cc <xTaskRemoveFromEventList+0xb4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d903      	bls.n	8006874 <xTaskRemoveFromEventList+0x5c>
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	4a16      	ldr	r2, [pc, #88]	; (80068cc <xTaskRemoveFromEventList+0xb4>)
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <xTaskRemoveFromEventList+0xb8>)
 8006882:	441a      	add	r2, r3
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7fe fba5 	bl	8004fda <vListInsertEnd>
 8006890:	e005      	b.n	800689e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3318      	adds	r3, #24
 8006896:	4619      	mov	r1, r3
 8006898:	480e      	ldr	r0, [pc, #56]	; (80068d4 <xTaskRemoveFromEventList+0xbc>)
 800689a:	f7fe fb9e 	bl	8004fda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <xTaskRemoveFromEventList+0xc0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d905      	bls.n	80068b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <xTaskRemoveFromEventList+0xc4>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e001      	b.n	80068bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068bc:	697b      	ldr	r3, [r7, #20]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000ec8 	.word	0x20000ec8
 80068cc:	20000ea8 	.word	0x20000ea8
 80068d0:	200009d0 	.word	0x200009d0
 80068d4:	20000e60 	.word	0x20000e60
 80068d8:	200009cc 	.word	0x200009cc
 80068dc:	20000eb4 	.word	0x20000eb4

080068e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <vTaskInternalSetTimeOutState+0x24>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <vTaskInternalSetTimeOutState+0x28>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20000eb8 	.word	0x20000eb8
 8006908:	20000ea4 	.word	0x20000ea4

0800690c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	613b      	str	r3, [r7, #16]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60fb      	str	r3, [r7, #12]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800694e:	f000 ff91 	bl	8007874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006952:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <xTaskCheckForTimeOut+0xbc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d102      	bne.n	8006972 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800696c:	2300      	movs	r3, #0
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	e023      	b.n	80069ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	4b15      	ldr	r3, [pc, #84]	; (80069cc <xTaskCheckForTimeOut+0xc0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d007      	beq.n	800698e <xTaskCheckForTimeOut+0x82>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006988:	2301      	movs	r3, #1
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e015      	b.n	80069ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	429a      	cmp	r2, r3
 8006996:	d20b      	bcs.n	80069b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff ff9b 	bl	80068e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	e004      	b.n	80069ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069b6:	2301      	movs	r3, #1
 80069b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069ba:	f000 ff8b 	bl	80078d4 <vPortExitCritical>

	return xReturn;
 80069be:	69fb      	ldr	r3, [r7, #28]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000ea4 	.word	0x20000ea4
 80069cc:	20000eb8 	.word	0x20000eb8

080069d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069d4:	4b03      	ldr	r3, [pc, #12]	; (80069e4 <vTaskMissedYield+0x14>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
}
 80069da:	bf00      	nop
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	20000eb4 	.word	0x20000eb4

080069e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069f0:	f000 f852 	bl	8006a98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <prvIdleTask+0x28>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d9f9      	bls.n	80069f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <prvIdleTask+0x2c>)
 80069fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a0c:	e7f0      	b.n	80069f0 <prvIdleTask+0x8>
 8006a0e:	bf00      	nop
 8006a10:	200009d0 	.word	0x200009d0
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	e00c      	b.n	8006a3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4a12      	ldr	r2, [pc, #72]	; (8006a78 <prvInitialiseTaskLists+0x60>)
 8006a30:	4413      	add	r3, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fe faa4 	bl	8004f80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b37      	cmp	r3, #55	; 0x37
 8006a42:	d9ef      	bls.n	8006a24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a44:	480d      	ldr	r0, [pc, #52]	; (8006a7c <prvInitialiseTaskLists+0x64>)
 8006a46:	f7fe fa9b 	bl	8004f80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a4a:	480d      	ldr	r0, [pc, #52]	; (8006a80 <prvInitialiseTaskLists+0x68>)
 8006a4c:	f7fe fa98 	bl	8004f80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a50:	480c      	ldr	r0, [pc, #48]	; (8006a84 <prvInitialiseTaskLists+0x6c>)
 8006a52:	f7fe fa95 	bl	8004f80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a56:	480c      	ldr	r0, [pc, #48]	; (8006a88 <prvInitialiseTaskLists+0x70>)
 8006a58:	f7fe fa92 	bl	8004f80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a5c:	480b      	ldr	r0, [pc, #44]	; (8006a8c <prvInitialiseTaskLists+0x74>)
 8006a5e:	f7fe fa8f 	bl	8004f80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <prvInitialiseTaskLists+0x78>)
 8006a64:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <prvInitialiseTaskLists+0x64>)
 8006a66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <prvInitialiseTaskLists+0x7c>)
 8006a6a:	4a05      	ldr	r2, [pc, #20]	; (8006a80 <prvInitialiseTaskLists+0x68>)
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	200009d0 	.word	0x200009d0
 8006a7c:	20000e30 	.word	0x20000e30
 8006a80:	20000e44 	.word	0x20000e44
 8006a84:	20000e60 	.word	0x20000e60
 8006a88:	20000e74 	.word	0x20000e74
 8006a8c:	20000e8c 	.word	0x20000e8c
 8006a90:	20000e58 	.word	0x20000e58
 8006a94:	20000e5c 	.word	0x20000e5c

08006a98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a9e:	e019      	b.n	8006ad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006aa0:	f000 fee8 	bl	8007874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <prvCheckTasksWaitingTermination+0x50>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe faef 	bl	8005094 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <prvCheckTasksWaitingTermination+0x54>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <prvCheckTasksWaitingTermination+0x54>)
 8006abe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <prvCheckTasksWaitingTermination+0x58>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <prvCheckTasksWaitingTermination+0x58>)
 8006ac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aca:	f000 ff03 	bl	80078d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f810 	bl	8006af4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <prvCheckTasksWaitingTermination+0x58>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e1      	bne.n	8006aa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000e74 	.word	0x20000e74
 8006aec:	20000ea0 	.word	0x20000ea0
 8006af0:	20000e88 	.word	0x20000e88

08006af4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3354      	adds	r3, #84	; 0x54
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 faf3 	bl	80080ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d108      	bne.n	8006b22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 f89b 	bl	8007c50 <vPortFree>
				vPortFree( pxTCB );
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 f898 	bl	8007c50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b20:	e018      	b.n	8006b54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d103      	bne.n	8006b34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 f88f 	bl	8007c50 <vPortFree>
	}
 8006b32:	e00f      	b.n	8006b54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d00a      	beq.n	8006b54 <prvDeleteTCB+0x60>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	60fb      	str	r3, [r7, #12]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <prvDeleteTCB+0x5e>
	}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b62:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <prvResetNextTaskUnblockTime+0x38>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b6c:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <prvResetNextTaskUnblockTime+0x3c>)
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b74:	e008      	b.n	8006b88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b76:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <prvResetNextTaskUnblockTime+0x38>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <prvResetNextTaskUnblockTime+0x3c>)
 8006b86:	6013      	str	r3, [r2, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	20000e58 	.word	0x20000e58
 8006b98:	20000ec0 	.word	0x20000ec0

08006b9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <xTaskGetCurrentTaskHandle+0x1c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006ba8:	687b      	ldr	r3, [r7, #4]
	}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	200009cc 	.word	0x200009cc

08006bbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <xTaskGetSchedulerState+0x34>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d102      	bne.n	8006bd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	e008      	b.n	8006be2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd0:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <xTaskGetSchedulerState+0x38>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d102      	bne.n	8006bde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	607b      	str	r3, [r7, #4]
 8006bdc:	e001      	b.n	8006be2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bde:	2300      	movs	r3, #0
 8006be0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006be2:	687b      	ldr	r3, [r7, #4]
	}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	20000eac 	.word	0x20000eac
 8006bf4:	20000ec8 	.word	0x20000ec8

08006bf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d051      	beq.n	8006cb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	4b2a      	ldr	r3, [pc, #168]	; (8006cbc <xTaskPriorityInherit+0xc4>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d241      	bcs.n	8006ca0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	db06      	blt.n	8006c32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c24:	4b25      	ldr	r3, [pc, #148]	; (8006cbc <xTaskPriorityInherit+0xc4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6959      	ldr	r1, [r3, #20]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4a1f      	ldr	r2, [pc, #124]	; (8006cc0 <xTaskPriorityInherit+0xc8>)
 8006c44:	4413      	add	r3, r2
 8006c46:	4299      	cmp	r1, r3
 8006c48:	d122      	bne.n	8006c90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe fa20 	bl	8005094 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c54:	4b19      	ldr	r3, [pc, #100]	; (8006cbc <xTaskPriorityInherit+0xc4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c62:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <xTaskPriorityInherit+0xcc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d903      	bls.n	8006c72 <xTaskPriorityInherit+0x7a>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	4a15      	ldr	r2, [pc, #84]	; (8006cc4 <xTaskPriorityInherit+0xcc>)
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4a10      	ldr	r2, [pc, #64]	; (8006cc0 <xTaskPriorityInherit+0xc8>)
 8006c80:	441a      	add	r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f7fe f9a6 	bl	8004fda <vListInsertEnd>
 8006c8e:	e004      	b.n	8006c9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <xTaskPriorityInherit+0xc4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	e008      	b.n	8006cb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <xTaskPriorityInherit+0xc4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d201      	bcs.n	8006cb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
	}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	200009cc 	.word	0x200009cc
 8006cc0:	200009d0 	.word	0x200009d0
 8006cc4:	20000ea8 	.word	0x20000ea8

08006cc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d056      	beq.n	8006d8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cde:	4b2e      	ldr	r3, [pc, #184]	; (8006d98 <xTaskPriorityDisinherit+0xd0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d00a      	beq.n	8006cfe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	60fb      	str	r3, [r7, #12]
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	60bb      	str	r3, [r7, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d20:	1e5a      	subs	r2, r3, #1
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d02c      	beq.n	8006d8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d128      	bne.n	8006d8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe f9a8 	bl	8005094 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <xTaskPriorityDisinherit+0xd4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d903      	bls.n	8006d6c <xTaskPriorityDisinherit+0xa4>
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	4a0c      	ldr	r2, [pc, #48]	; (8006d9c <xTaskPriorityDisinherit+0xd4>)
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <xTaskPriorityDisinherit+0xd8>)
 8006d7a:	441a      	add	r2, r3
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f7fe f929 	bl	8004fda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d8c:	697b      	ldr	r3, [r7, #20]
	}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200009cc 	.word	0x200009cc
 8006d9c:	20000ea8 	.word	0x20000ea8
 8006da0:	200009d0 	.word	0x200009d0

08006da4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006db2:	2301      	movs	r3, #1
 8006db4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d06a      	beq.n	8006e92 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60fb      	str	r3, [r7, #12]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d902      	bls.n	8006dea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	e002      	b.n	8006df0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d04b      	beq.n	8006e92 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d146      	bne.n	8006e92 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e04:	4b25      	ldr	r3, [pc, #148]	; (8006e9c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d10a      	bne.n	8006e24 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	60bb      	str	r3, [r7, #8]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	db04      	blt.n	8006e42 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	6959      	ldr	r1, [r3, #20]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4a13      	ldr	r2, [pc, #76]	; (8006ea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e52:	4413      	add	r3, r2
 8006e54:	4299      	cmp	r1, r3
 8006e56:	d11c      	bne.n	8006e92 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe f919 	bl	8005094 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d903      	bls.n	8006e76 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	4a0c      	ldr	r2, [pc, #48]	; (8006ea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4a07      	ldr	r2, [pc, #28]	; (8006ea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e84:	441a      	add	r2, r3
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	f7fe f8a4 	bl	8004fda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e92:	bf00      	nop
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200009cc 	.word	0x200009cc
 8006ea0:	200009d0 	.word	0x200009d0
 8006ea4:	20000ea8 	.word	0x20000ea8

08006ea8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006eac:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <pvTaskIncrementMutexHeldCount+0x24>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006eb4:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <pvTaskIncrementMutexHeldCount+0x24>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eba:	3201      	adds	r2, #1
 8006ebc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006ebe:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <pvTaskIncrementMutexHeldCount+0x24>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
	}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	200009cc 	.word	0x200009cc

08006ed0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eda:	4b21      	ldr	r3, [pc, #132]	; (8006f60 <prvAddCurrentTaskToDelayedList+0x90>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee0:	4b20      	ldr	r3, [pc, #128]	; (8006f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe f8d4 	bl	8005094 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d10a      	bne.n	8006f0a <prvAddCurrentTaskToDelayedList+0x3a>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efa:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4819      	ldr	r0, [pc, #100]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f04:	f7fe f869 	bl	8004fda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f08:	e026      	b.n	8006f58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4413      	add	r3, r2
 8006f10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f12:	4b14      	ldr	r3, [pc, #80]	; (8006f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d209      	bcs.n	8006f36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f22:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4610      	mov	r0, r2
 8006f30:	f7fe f877 	bl	8005022 <vListInsert>
}
 8006f34:	e010      	b.n	8006f58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f36:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3304      	adds	r3, #4
 8006f40:	4619      	mov	r1, r3
 8006f42:	4610      	mov	r0, r2
 8006f44:	f7fe f86d 	bl	8005022 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d202      	bcs.n	8006f58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f52:	4a08      	ldr	r2, [pc, #32]	; (8006f74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6013      	str	r3, [r2, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000ea4 	.word	0x20000ea4
 8006f64:	200009cc 	.word	0x200009cc
 8006f68:	20000e8c 	.word	0x20000e8c
 8006f6c:	20000e5c 	.word	0x20000e5c
 8006f70:	20000e58 	.word	0x20000e58
 8006f74:	20000ec0 	.word	0x20000ec0

08006f78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08a      	sub	sp, #40	; 0x28
 8006f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f82:	f000 fb07 	bl	8007594 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f86:	4b1c      	ldr	r3, [pc, #112]	; (8006ff8 <xTimerCreateTimerTask+0x80>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d021      	beq.n	8006fd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f96:	1d3a      	adds	r2, r7, #4
 8006f98:	f107 0108 	add.w	r1, r7, #8
 8006f9c:	f107 030c 	add.w	r3, r7, #12
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fd ffd3 	bl	8004f4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	9202      	str	r2, [sp, #8]
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	460a      	mov	r2, r1
 8006fb8:	4910      	ldr	r1, [pc, #64]	; (8006ffc <xTimerCreateTimerTask+0x84>)
 8006fba:	4811      	ldr	r0, [pc, #68]	; (8007000 <xTimerCreateTimerTask+0x88>)
 8006fbc:	f7fe ff94 	bl	8005ee8 <xTaskCreateStatic>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	4a10      	ldr	r2, [pc, #64]	; (8007004 <xTimerCreateTimerTask+0x8c>)
 8006fc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fc6:	4b0f      	ldr	r3, [pc, #60]	; (8007004 <xTimerCreateTimerTask+0x8c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	613b      	str	r3, [r7, #16]
}
 8006fea:	bf00      	nop
 8006fec:	e7fe      	b.n	8006fec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fee:	697b      	ldr	r3, [r7, #20]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000efc 	.word	0x20000efc
 8006ffc:	08008e94 	.word	0x08008e94
 8007000:	0800713d 	.word	0x0800713d
 8007004:	20000f00 	.word	0x20000f00

08007008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	; 0x28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007016:	2300      	movs	r3, #0
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	623b      	str	r3, [r7, #32]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007036:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <xTimerGenericCommand+0x98>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02a      	beq.n	8007094 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b05      	cmp	r3, #5
 800704e:	dc18      	bgt.n	8007082 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007050:	f7ff fdb4 	bl	8006bbc <xTaskGetSchedulerState>
 8007054:	4603      	mov	r3, r0
 8007056:	2b02      	cmp	r3, #2
 8007058:	d109      	bne.n	800706e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800705a:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <xTimerGenericCommand+0x98>)
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	f107 0110 	add.w	r1, r7, #16
 8007062:	2300      	movs	r3, #0
 8007064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007066:	f7fe fa33 	bl	80054d0 <xQueueGenericSend>
 800706a:	6278      	str	r0, [r7, #36]	; 0x24
 800706c:	e012      	b.n	8007094 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <xTimerGenericCommand+0x98>)
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	f107 0110 	add.w	r1, r7, #16
 8007076:	2300      	movs	r3, #0
 8007078:	2200      	movs	r2, #0
 800707a:	f7fe fa29 	bl	80054d0 <xQueueGenericSend>
 800707e:	6278      	str	r0, [r7, #36]	; 0x24
 8007080:	e008      	b.n	8007094 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007082:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <xTimerGenericCommand+0x98>)
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f107 0110 	add.w	r1, r7, #16
 800708a:	2300      	movs	r3, #0
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	f7fe fb1d 	bl	80056cc <xQueueGenericSendFromISR>
 8007092:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007096:	4618      	mov	r0, r3
 8007098:	3728      	adds	r7, #40	; 0x28
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000efc 	.word	0x20000efc

080070a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ae:	4b22      	ldr	r3, [pc, #136]	; (8007138 <prvProcessExpiredTimer+0x94>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	3304      	adds	r3, #4
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fd ffe9 	bl	8005094 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d022      	beq.n	8007116 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	699a      	ldr	r2, [r3, #24]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	18d1      	adds	r1, r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	6978      	ldr	r0, [r7, #20]
 80070de:	f000 f8d1 	bl	8007284 <prvInsertTimerInActiveList>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01f      	beq.n	8007128 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070e8:	2300      	movs	r3, #0
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	2300      	movs	r3, #0
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	2100      	movs	r1, #0
 80070f2:	6978      	ldr	r0, [r7, #20]
 80070f4:	f7ff ff88 	bl	8007008 <xTimerGenericCommand>
 80070f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d113      	bne.n	8007128 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60fb      	str	r3, [r7, #12]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	6978      	ldr	r0, [r7, #20]
 800712e:	4798      	blx	r3
}
 8007130:	bf00      	nop
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000ef4 	.word	0x20000ef4

0800713c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007144:	f107 0308 	add.w	r3, r7, #8
 8007148:	4618      	mov	r0, r3
 800714a:	f000 f857 	bl	80071fc <prvGetNextExpireTime>
 800714e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4619      	mov	r1, r3
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f803 	bl	8007160 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800715a:	f000 f8d5 	bl	8007308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800715e:	e7f1      	b.n	8007144 <prvTimerTask+0x8>

08007160 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800716a:	f7ff f919 	bl	80063a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800716e:	f107 0308 	add.w	r3, r7, #8
 8007172:	4618      	mov	r0, r3
 8007174:	f000 f866 	bl	8007244 <prvSampleTimeNow>
 8007178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d130      	bne.n	80071e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <prvProcessTimerOrBlockTask+0x3c>
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	429a      	cmp	r2, r3
 800718c:	d806      	bhi.n	800719c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800718e:	f7ff f915 	bl	80063bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff ff85 	bl	80070a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800719a:	e024      	b.n	80071e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071a2:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <prvProcessTimerOrBlockTask+0x90>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <prvProcessTimerOrBlockTask+0x50>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <prvProcessTimerOrBlockTask+0x52>
 80071b0:	2300      	movs	r3, #0
 80071b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071b4:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <prvProcessTimerOrBlockTask+0x94>)
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	4619      	mov	r1, r3
 80071c2:	f7fe fe5d 	bl	8005e80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071c6:	f7ff f8f9 	bl	80063bc <xTaskResumeAll>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071d0:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <prvProcessTimerOrBlockTask+0x98>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
}
 80071e0:	e001      	b.n	80071e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071e2:	f7ff f8eb 	bl	80063bc <xTaskResumeAll>
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000ef8 	.word	0x20000ef8
 80071f4:	20000efc 	.word	0x20000efc
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007204:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <prvGetNextExpireTime+0x44>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <prvGetNextExpireTime+0x16>
 800720e:	2201      	movs	r2, #1
 8007210:	e000      	b.n	8007214 <prvGetNextExpireTime+0x18>
 8007212:	2200      	movs	r2, #0
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007220:	4b07      	ldr	r3, [pc, #28]	; (8007240 <prvGetNextExpireTime+0x44>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	e001      	b.n	8007230 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007230:	68fb      	ldr	r3, [r7, #12]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20000ef4 	.word	0x20000ef4

08007244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800724c:	f7ff f954 	bl	80064f8 <xTaskGetTickCount>
 8007250:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <prvSampleTimeNow+0x3c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	429a      	cmp	r2, r3
 800725a:	d205      	bcs.n	8007268 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800725c:	f000 f936 	bl	80074cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e002      	b.n	800726e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800726e:	4a04      	ldr	r2, [pc, #16]	; (8007280 <prvSampleTimeNow+0x3c>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007274:	68fb      	ldr	r3, [r7, #12]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000f04 	.word	0x20000f04

08007284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007292:	2300      	movs	r3, #0
 8007294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d812      	bhi.n	80072d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d302      	bcc.n	80072be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072b8:	2301      	movs	r3, #1
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	e01b      	b.n	80072f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072be:	4b10      	ldr	r3, [pc, #64]	; (8007300 <prvInsertTimerInActiveList+0x7c>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4619      	mov	r1, r3
 80072c8:	4610      	mov	r0, r2
 80072ca:	f7fd feaa 	bl	8005022 <vListInsert>
 80072ce:	e012      	b.n	80072f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d206      	bcs.n	80072e6 <prvInsertTimerInActiveList+0x62>
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d302      	bcc.n	80072e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e007      	b.n	80072f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072e6:	4b07      	ldr	r3, [pc, #28]	; (8007304 <prvInsertTimerInActiveList+0x80>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7fd fe96 	bl	8005022 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072f6:	697b      	ldr	r3, [r7, #20]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000ef8 	.word	0x20000ef8
 8007304:	20000ef4 	.word	0x20000ef4

08007308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08e      	sub	sp, #56	; 0x38
 800730c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800730e:	e0ca      	b.n	80074a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	da18      	bge.n	8007348 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007316:	1d3b      	adds	r3, r7, #4
 8007318:	3304      	adds	r3, #4
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	61fb      	str	r3, [r7, #28]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800733e:	6850      	ldr	r0, [r2, #4]
 8007340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007342:	6892      	ldr	r2, [r2, #8]
 8007344:	4611      	mov	r1, r2
 8007346:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f2c0 80ab 	blt.w	80074a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	3304      	adds	r3, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7fd fe97 	bl	8005094 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007366:	463b      	mov	r3, r7
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff ff6b 	bl	8007244 <prvSampleTimeNow>
 800736e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b09      	cmp	r3, #9
 8007374:	f200 8096 	bhi.w	80074a4 <prvProcessReceivedCommands+0x19c>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <prvProcessReceivedCommands+0x78>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	080073a9 	.word	0x080073a9
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073a9 	.word	0x080073a9
 800738c:	0800741d 	.word	0x0800741d
 8007390:	08007431 	.word	0x08007431
 8007394:	0800747b 	.word	0x0800747b
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073a9 	.word	0x080073a9
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	08007431 	.word	0x08007431
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	18d1      	adds	r1, r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c8:	f7ff ff5c 	bl	8007284 <prvInsertTimerInActiveList>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d069      	beq.n	80074a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d05e      	beq.n	80074a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	441a      	add	r2, r3
 80073f0:	2300      	movs	r3, #0
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	2300      	movs	r3, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fa:	f7ff fe05 	bl	8007008 <xTimerGenericCommand>
 80073fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d14f      	bne.n	80074a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	61bb      	str	r3, [r7, #24]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007422:	f023 0301 	bic.w	r3, r3, #1
 8007426:	b2da      	uxtb	r2, r3
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800742e:	e03a      	b.n	80074a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	b2da      	uxtb	r2, r3
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10a      	bne.n	8007466 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	617b      	str	r3, [r7, #20]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	18d1      	adds	r1, r2, r3
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007474:	f7ff ff06 	bl	8007284 <prvInsertTimerInActiveList>
					break;
 8007478:	e015      	b.n	80074a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d103      	bne.n	8007490 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748a:	f000 fbe1 	bl	8007c50 <vPortFree>
 800748e:	e00a      	b.n	80074a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074a2:	e000      	b.n	80074a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80074a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074a6:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <prvProcessReceivedCommands+0x1c0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	1d39      	adds	r1, r7, #4
 80074ac:	2200      	movs	r2, #0
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe f9a8 	bl	8005804 <xQueueReceive>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f47f af2a 	bne.w	8007310 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	3730      	adds	r7, #48	; 0x30
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000efc 	.word	0x20000efc

080074cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074d2:	e048      	b.n	8007566 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074d4:	4b2d      	ldr	r3, [pc, #180]	; (800758c <prvSwitchTimerLists+0xc0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074de:	4b2b      	ldr	r3, [pc, #172]	; (800758c <prvSwitchTimerLists+0xc0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fd fdd1 	bl	8005094 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d02e      	beq.n	8007566 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4413      	add	r3, r2
 8007510:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	429a      	cmp	r2, r3
 8007518:	d90e      	bls.n	8007538 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007526:	4b19      	ldr	r3, [pc, #100]	; (800758c <prvSwitchTimerLists+0xc0>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3304      	adds	r3, #4
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f7fd fd76 	bl	8005022 <vListInsert>
 8007536:	e016      	b.n	8007566 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007538:	2300      	movs	r3, #0
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	2300      	movs	r3, #0
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	2100      	movs	r1, #0
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7ff fd60 	bl	8007008 <xTimerGenericCommand>
 8007548:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	603b      	str	r3, [r7, #0]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007566:	4b09      	ldr	r3, [pc, #36]	; (800758c <prvSwitchTimerLists+0xc0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1b1      	bne.n	80074d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007570:	4b06      	ldr	r3, [pc, #24]	; (800758c <prvSwitchTimerLists+0xc0>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007576:	4b06      	ldr	r3, [pc, #24]	; (8007590 <prvSwitchTimerLists+0xc4>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a04      	ldr	r2, [pc, #16]	; (800758c <prvSwitchTimerLists+0xc0>)
 800757c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800757e:	4a04      	ldr	r2, [pc, #16]	; (8007590 <prvSwitchTimerLists+0xc4>)
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	6013      	str	r3, [r2, #0]
}
 8007584:	bf00      	nop
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20000ef4 	.word	0x20000ef4
 8007590:	20000ef8 	.word	0x20000ef8

08007594 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800759a:	f000 f96b 	bl	8007874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800759e:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <prvCheckForValidListAndQueue+0x60>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d120      	bne.n	80075e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075a6:	4814      	ldr	r0, [pc, #80]	; (80075f8 <prvCheckForValidListAndQueue+0x64>)
 80075a8:	f7fd fcea 	bl	8004f80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075ac:	4813      	ldr	r0, [pc, #76]	; (80075fc <prvCheckForValidListAndQueue+0x68>)
 80075ae:	f7fd fce7 	bl	8004f80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <prvCheckForValidListAndQueue+0x6c>)
 80075b4:	4a10      	ldr	r2, [pc, #64]	; (80075f8 <prvCheckForValidListAndQueue+0x64>)
 80075b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075b8:	4b12      	ldr	r3, [pc, #72]	; (8007604 <prvCheckForValidListAndQueue+0x70>)
 80075ba:	4a10      	ldr	r2, [pc, #64]	; (80075fc <prvCheckForValidListAndQueue+0x68>)
 80075bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075be:	2300      	movs	r3, #0
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4b11      	ldr	r3, [pc, #68]	; (8007608 <prvCheckForValidListAndQueue+0x74>)
 80075c4:	4a11      	ldr	r2, [pc, #68]	; (800760c <prvCheckForValidListAndQueue+0x78>)
 80075c6:	2110      	movs	r1, #16
 80075c8:	200a      	movs	r0, #10
 80075ca:	f7fd fdf5 	bl	80051b8 <xQueueGenericCreateStatic>
 80075ce:	4603      	mov	r3, r0
 80075d0:	4a08      	ldr	r2, [pc, #32]	; (80075f4 <prvCheckForValidListAndQueue+0x60>)
 80075d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075d4:	4b07      	ldr	r3, [pc, #28]	; (80075f4 <prvCheckForValidListAndQueue+0x60>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <prvCheckForValidListAndQueue+0x60>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	490b      	ldr	r1, [pc, #44]	; (8007610 <prvCheckForValidListAndQueue+0x7c>)
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe fc22 	bl	8005e2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075e8:	f000 f974 	bl	80078d4 <vPortExitCritical>
}
 80075ec:	bf00      	nop
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000efc 	.word	0x20000efc
 80075f8:	20000ecc 	.word	0x20000ecc
 80075fc:	20000ee0 	.word	0x20000ee0
 8007600:	20000ef4 	.word	0x20000ef4
 8007604:	20000ef8 	.word	0x20000ef8
 8007608:	20000fa8 	.word	0x20000fa8
 800760c:	20000f08 	.word	0x20000f08
 8007610:	08008e9c 	.word	0x08008e9c

08007614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3b04      	subs	r3, #4
 8007624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800762c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3b04      	subs	r3, #4
 8007632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f023 0201 	bic.w	r2, r3, #1
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3b04      	subs	r3, #4
 8007642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007644:	4a0c      	ldr	r2, [pc, #48]	; (8007678 <pxPortInitialiseStack+0x64>)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3b14      	subs	r3, #20
 800764e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3b04      	subs	r3, #4
 800765a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f06f 0202 	mvn.w	r2, #2
 8007662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3b20      	subs	r3, #32
 8007668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800766a:	68fb      	ldr	r3, [r7, #12]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	0800767d 	.word	0x0800767d

0800767c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007686:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <prvTaskExitError+0x54>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768e:	d00a      	beq.n	80076a6 <prvTaskExitError+0x2a>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	60fb      	str	r3, [r7, #12]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <prvTaskExitError+0x28>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	60bb      	str	r3, [r7, #8]
}
 80076b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076ba:	bf00      	nop
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0fc      	beq.n	80076bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076c2:	bf00      	nop
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	2000000c 	.word	0x2000000c
	...

080076e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <pxCurrentTCBConst2>)
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	6808      	ldr	r0, [r1, #0]
 80076e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	f380 8809 	msr	PSP, r0
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	f380 8811 	msr	BASEPRI, r0
 80076fa:	4770      	bx	lr
 80076fc:	f3af 8000 	nop.w

08007700 <pxCurrentTCBConst2>:
 8007700:	200009cc 	.word	0x200009cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop

08007708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007708:	4808      	ldr	r0, [pc, #32]	; (800772c <prvPortStartFirstTask+0x24>)
 800770a:	6800      	ldr	r0, [r0, #0]
 800770c:	6800      	ldr	r0, [r0, #0]
 800770e:	f380 8808 	msr	MSP, r0
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f380 8814 	msr	CONTROL, r0
 800771a:	b662      	cpsie	i
 800771c:	b661      	cpsie	f
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	df00      	svc	0
 8007728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800772a:	bf00      	nop
 800772c:	e000ed08 	.word	0xe000ed08

08007730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007736:	4b46      	ldr	r3, [pc, #280]	; (8007850 <xPortStartScheduler+0x120>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a46      	ldr	r2, [pc, #280]	; (8007854 <xPortStartScheduler+0x124>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d10a      	bne.n	8007756 <xPortStartScheduler+0x26>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	613b      	str	r3, [r7, #16]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007756:	4b3e      	ldr	r3, [pc, #248]	; (8007850 <xPortStartScheduler+0x120>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a3f      	ldr	r2, [pc, #252]	; (8007858 <xPortStartScheduler+0x128>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10a      	bne.n	8007776 <xPortStartScheduler+0x46>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60fb      	str	r3, [r7, #12]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007776:	4b39      	ldr	r3, [pc, #228]	; (800785c <xPortStartScheduler+0x12c>)
 8007778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007798:	b2da      	uxtb	r2, r3
 800779a:	4b31      	ldr	r3, [pc, #196]	; (8007860 <xPortStartScheduler+0x130>)
 800779c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800779e:	4b31      	ldr	r3, [pc, #196]	; (8007864 <xPortStartScheduler+0x134>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077a4:	e009      	b.n	80077ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077a6:	4b2f      	ldr	r3, [pc, #188]	; (8007864 <xPortStartScheduler+0x134>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	4a2d      	ldr	r2, [pc, #180]	; (8007864 <xPortStartScheduler+0x134>)
 80077ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d0ef      	beq.n	80077a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077c6:	4b27      	ldr	r3, [pc, #156]	; (8007864 <xPortStartScheduler+0x134>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f1c3 0307 	rsb	r3, r3, #7
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d00a      	beq.n	80077e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60bb      	str	r3, [r7, #8]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077e8:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <xPortStartScheduler+0x134>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	4a1d      	ldr	r2, [pc, #116]	; (8007864 <xPortStartScheduler+0x134>)
 80077f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077f2:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <xPortStartScheduler+0x134>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077fa:	4a1a      	ldr	r2, [pc, #104]	; (8007864 <xPortStartScheduler+0x134>)
 80077fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	b2da      	uxtb	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007806:	4b18      	ldr	r3, [pc, #96]	; (8007868 <xPortStartScheduler+0x138>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a17      	ldr	r2, [pc, #92]	; (8007868 <xPortStartScheduler+0x138>)
 800780c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007812:	4b15      	ldr	r3, [pc, #84]	; (8007868 <xPortStartScheduler+0x138>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a14      	ldr	r2, [pc, #80]	; (8007868 <xPortStartScheduler+0x138>)
 8007818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800781c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800781e:	f000 f8dd 	bl	80079dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <xPortStartScheduler+0x13c>)
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007828:	f000 f8fc 	bl	8007a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800782c:	4b10      	ldr	r3, [pc, #64]	; (8007870 <xPortStartScheduler+0x140>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a0f      	ldr	r2, [pc, #60]	; (8007870 <xPortStartScheduler+0x140>)
 8007832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007838:	f7ff ff66 	bl	8007708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800783c:	f7fe ff38 	bl	80066b0 <vTaskSwitchContext>
	prvTaskExitError();
 8007840:	f7ff ff1c 	bl	800767c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	e000ed00 	.word	0xe000ed00
 8007854:	410fc271 	.word	0x410fc271
 8007858:	410fc270 	.word	0x410fc270
 800785c:	e000e400 	.word	0xe000e400
 8007860:	20000ff8 	.word	0x20000ff8
 8007864:	20000ffc 	.word	0x20000ffc
 8007868:	e000ed20 	.word	0xe000ed20
 800786c:	2000000c 	.word	0x2000000c
 8007870:	e000ef34 	.word	0xe000ef34

08007874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	607b      	str	r3, [r7, #4]
}
 800788c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <vPortEnterCritical+0x58>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3301      	adds	r3, #1
 8007894:	4a0d      	ldr	r2, [pc, #52]	; (80078cc <vPortEnterCritical+0x58>)
 8007896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <vPortEnterCritical+0x58>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d10f      	bne.n	80078c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078a0:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <vPortEnterCritical+0x5c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	603b      	str	r3, [r7, #0]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <vPortEnterCritical+0x4a>
	}
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	2000000c 	.word	0x2000000c
 80078d0:	e000ed04 	.word	0xe000ed04

080078d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078da:	4b12      	ldr	r3, [pc, #72]	; (8007924 <vPortExitCritical+0x50>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <vPortExitCritical+0x24>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	607b      	str	r3, [r7, #4]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078f8:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <vPortExitCritical+0x50>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	4a09      	ldr	r2, [pc, #36]	; (8007924 <vPortExitCritical+0x50>)
 8007900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007902:	4b08      	ldr	r3, [pc, #32]	; (8007924 <vPortExitCritical+0x50>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <vPortExitCritical+0x42>
 800790a:	2300      	movs	r3, #0
 800790c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	f383 8811 	msr	BASEPRI, r3
}
 8007914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	2000000c 	.word	0x2000000c
	...

08007930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007930:	f3ef 8009 	mrs	r0, PSP
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	4b15      	ldr	r3, [pc, #84]	; (8007990 <pxCurrentTCBConst>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	f01e 0f10 	tst.w	lr, #16
 8007940:	bf08      	it	eq
 8007942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794a:	6010      	str	r0, [r2, #0]
 800794c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007954:	f380 8811 	msr	BASEPRI, r0
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f7fe fea6 	bl	80066b0 <vTaskSwitchContext>
 8007964:	f04f 0000 	mov.w	r0, #0
 8007968:	f380 8811 	msr	BASEPRI, r0
 800796c:	bc09      	pop	{r0, r3}
 800796e:	6819      	ldr	r1, [r3, #0]
 8007970:	6808      	ldr	r0, [r1, #0]
 8007972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007976:	f01e 0f10 	tst.w	lr, #16
 800797a:	bf08      	it	eq
 800797c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007980:	f380 8809 	msr	PSP, r0
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	f3af 8000 	nop.w

08007990 <pxCurrentTCBConst>:
 8007990:	200009cc 	.word	0x200009cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop

08007998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	607b      	str	r3, [r7, #4]
}
 80079b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079b2:	f7fe fdc3 	bl	800653c <xTaskIncrementTick>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079bc:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <xPortSysTickHandler+0x40>)
 80079be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	2300      	movs	r3, #0
 80079c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f383 8811 	msr	BASEPRI, r3
}
 80079ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	e000ed04 	.word	0xe000ed04

080079dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <vPortSetupTimerInterrupt+0x34>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079e6:	4b0b      	ldr	r3, [pc, #44]	; (8007a14 <vPortSetupTimerInterrupt+0x38>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079ec:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <vPortSetupTimerInterrupt+0x3c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <vPortSetupTimerInterrupt+0x40>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	099b      	lsrs	r3, r3, #6
 80079f8:	4a09      	ldr	r2, [pc, #36]	; (8007a20 <vPortSetupTimerInterrupt+0x44>)
 80079fa:	3b01      	subs	r3, #1
 80079fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079fe:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <vPortSetupTimerInterrupt+0x34>)
 8007a00:	2207      	movs	r2, #7
 8007a02:	601a      	str	r2, [r3, #0]
}
 8007a04:	bf00      	nop
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	e000e010 	.word	0xe000e010
 8007a14:	e000e018 	.word	0xe000e018
 8007a18:	20000000 	.word	0x20000000
 8007a1c:	10624dd3 	.word	0x10624dd3
 8007a20:	e000e014 	.word	0xe000e014

08007a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a34 <vPortEnableVFP+0x10>
 8007a28:	6801      	ldr	r1, [r0, #0]
 8007a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a2e:	6001      	str	r1, [r0, #0]
 8007a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a32:	bf00      	nop
 8007a34:	e000ed88 	.word	0xe000ed88

08007a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a3e:	f3ef 8305 	mrs	r3, IPSR
 8007a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b0f      	cmp	r3, #15
 8007a48:	d914      	bls.n	8007a74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a4a:	4a17      	ldr	r2, [pc, #92]	; (8007aa8 <vPortValidateInterruptPriority+0x70>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a54:	4b15      	ldr	r3, [pc, #84]	; (8007aac <vPortValidateInterruptPriority+0x74>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	7afa      	ldrb	r2, [r7, #11]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d20a      	bcs.n	8007a74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a74:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <vPortValidateInterruptPriority+0x78>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <vPortValidateInterruptPriority+0x7c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d90a      	bls.n	8007a9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	603b      	str	r3, [r7, #0]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <vPortValidateInterruptPriority+0x60>
	}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	e000e3f0 	.word	0xe000e3f0
 8007aac:	20000ff8 	.word	0x20000ff8
 8007ab0:	e000ed0c 	.word	0xe000ed0c
 8007ab4:	20000ffc 	.word	0x20000ffc

08007ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ac4:	f7fe fc6c 	bl	80063a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ac8:	4b5b      	ldr	r3, [pc, #364]	; (8007c38 <pvPortMalloc+0x180>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ad0:	f000 f920 	bl	8007d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ad4:	4b59      	ldr	r3, [pc, #356]	; (8007c3c <pvPortMalloc+0x184>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f040 8093 	bne.w	8007c08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01d      	beq.n	8007b24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ae8:	2208      	movs	r2, #8
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d014      	beq.n	8007b24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f023 0307 	bic.w	r3, r3, #7
 8007b00:	3308      	adds	r3, #8
 8007b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <pvPortMalloc+0x6c>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	617b      	str	r3, [r7, #20]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d06e      	beq.n	8007c08 <pvPortMalloc+0x150>
 8007b2a:	4b45      	ldr	r3, [pc, #276]	; (8007c40 <pvPortMalloc+0x188>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d869      	bhi.n	8007c08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b34:	4b43      	ldr	r3, [pc, #268]	; (8007c44 <pvPortMalloc+0x18c>)
 8007b36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b38:	4b42      	ldr	r3, [pc, #264]	; (8007c44 <pvPortMalloc+0x18c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b3e:	e004      	b.n	8007b4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d903      	bls.n	8007b5c <pvPortMalloc+0xa4>
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1f1      	bne.n	8007b40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b5c:	4b36      	ldr	r3, [pc, #216]	; (8007c38 <pvPortMalloc+0x180>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d050      	beq.n	8007c08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	4413      	add	r3, r2
 8007b6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	2308      	movs	r3, #8
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d91f      	bls.n	8007bc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <pvPortMalloc+0xf8>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	613b      	str	r3, [r7, #16]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bc2:	69b8      	ldr	r0, [r7, #24]
 8007bc4:	f000 f908 	bl	8007dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bc8:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <pvPortMalloc+0x188>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <pvPortMalloc+0x188>)
 8007bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bd6:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <pvPortMalloc+0x188>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <pvPortMalloc+0x190>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d203      	bcs.n	8007bea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007be2:	4b17      	ldr	r3, [pc, #92]	; (8007c40 <pvPortMalloc+0x188>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <pvPortMalloc+0x190>)
 8007be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <pvPortMalloc+0x184>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <pvPortMalloc+0x194>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <pvPortMalloc+0x194>)
 8007c06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c08:	f7fe fbd8 	bl	80063bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f003 0307 	and.w	r3, r3, #7
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <pvPortMalloc+0x174>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	60fb      	str	r3, [r7, #12]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <pvPortMalloc+0x172>
	return pvReturn;
 8007c2c:	69fb      	ldr	r3, [r7, #28]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3728      	adds	r7, #40	; 0x28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20004c08 	.word	0x20004c08
 8007c3c:	20004c1c 	.word	0x20004c1c
 8007c40:	20004c0c 	.word	0x20004c0c
 8007c44:	20004c00 	.word	0x20004c00
 8007c48:	20004c10 	.word	0x20004c10
 8007c4c:	20004c14 	.word	0x20004c14

08007c50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d04d      	beq.n	8007cfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c62:	2308      	movs	r3, #8
 8007c64:	425b      	negs	r3, r3
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4413      	add	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <vPortFree+0xb8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <vPortFree+0x44>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60fb      	str	r3, [r7, #12]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <vPortFree+0x62>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	60bb      	str	r3, [r7, #8]
}
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <vPortFree+0xb8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01e      	beq.n	8007cfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d11a      	bne.n	8007cfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <vPortFree+0xb8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cd8:	f7fe fb62 	bl	80063a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <vPortFree+0xbc>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <vPortFree+0xbc>)
 8007ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cea:	6938      	ldr	r0, [r7, #16]
 8007cec:	f000 f874 	bl	8007dd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <vPortFree+0xc0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	4a06      	ldr	r2, [pc, #24]	; (8007d10 <vPortFree+0xc0>)
 8007cf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cfa:	f7fe fb5f 	bl	80063bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cfe:	bf00      	nop
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20004c1c 	.word	0x20004c1c
 8007d0c:	20004c0c 	.word	0x20004c0c
 8007d10:	20004c18 	.word	0x20004c18

08007d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d20:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <prvHeapInit+0xac>)
 8007d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00c      	beq.n	8007d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3307      	adds	r3, #7
 8007d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	4a1f      	ldr	r2, [pc, #124]	; (8007dc0 <prvHeapInit+0xac>)
 8007d44:	4413      	add	r3, r2
 8007d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d4c:	4a1d      	ldr	r2, [pc, #116]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d52:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d60:	2208      	movs	r2, #8
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0307 	bic.w	r3, r3, #7
 8007d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d7e:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d94:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <prvHeapInit+0xb8>)
 8007da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	4a09      	ldr	r2, [pc, #36]	; (8007dd0 <prvHeapInit+0xbc>)
 8007daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <prvHeapInit+0xc0>)
 8007dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007db2:	601a      	str	r2, [r3, #0]
}
 8007db4:	bf00      	nop
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	20001000 	.word	0x20001000
 8007dc4:	20004c00 	.word	0x20004c00
 8007dc8:	20004c08 	.word	0x20004c08
 8007dcc:	20004c10 	.word	0x20004c10
 8007dd0:	20004c0c 	.word	0x20004c0c
 8007dd4:	20004c1c 	.word	0x20004c1c

08007dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007de0:	4b28      	ldr	r3, [pc, #160]	; (8007e84 <prvInsertBlockIntoFreeList+0xac>)
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e002      	b.n	8007dec <prvInsertBlockIntoFreeList+0x14>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d8f7      	bhi.n	8007de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	4413      	add	r3, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d108      	bne.n	8007e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	441a      	add	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	441a      	add	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d118      	bne.n	8007e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <prvInsertBlockIntoFreeList+0xb0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d00d      	beq.n	8007e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	441a      	add	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e008      	b.n	8007e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e56:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <prvInsertBlockIntoFreeList+0xb0>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	e003      	b.n	8007e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d002      	beq.n	8007e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20004c00 	.word	0x20004c00
 8007e88:	20004c08 	.word	0x20004c08

08007e8c <std>:
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	4604      	mov	r4, r0
 8007e92:	e9c0 3300 	strd	r3, r3, [r0]
 8007e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e9a:	6083      	str	r3, [r0, #8]
 8007e9c:	8181      	strh	r1, [r0, #12]
 8007e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007ea0:	81c2      	strh	r2, [r0, #14]
 8007ea2:	6183      	str	r3, [r0, #24]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	2208      	movs	r2, #8
 8007ea8:	305c      	adds	r0, #92	; 0x5c
 8007eaa:	f000 f906 	bl	80080ba <memset>
 8007eae:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <std+0x58>)
 8007eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <std+0x5c>)
 8007eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <std+0x60>)
 8007eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eba:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <std+0x64>)
 8007ebc:	6323      	str	r3, [r4, #48]	; 0x30
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <std+0x68>)
 8007ec0:	6224      	str	r4, [r4, #32]
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	d006      	beq.n	8007ed4 <std+0x48>
 8007ec6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007eca:	4294      	cmp	r4, r2
 8007ecc:	d002      	beq.n	8007ed4 <std+0x48>
 8007ece:	33d0      	adds	r3, #208	; 0xd0
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	d105      	bne.n	8007ee0 <std+0x54>
 8007ed4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007edc:	f000 b9bc 	b.w	8008258 <__retarget_lock_init_recursive>
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08008035 	.word	0x08008035
 8007ee8:	08008057 	.word	0x08008057
 8007eec:	0800808f 	.word	0x0800808f
 8007ef0:	080080b3 	.word	0x080080b3
 8007ef4:	20004c20 	.word	0x20004c20

08007ef8 <stdio_exit_handler>:
 8007ef8:	4a02      	ldr	r2, [pc, #8]	; (8007f04 <stdio_exit_handler+0xc>)
 8007efa:	4903      	ldr	r1, [pc, #12]	; (8007f08 <stdio_exit_handler+0x10>)
 8007efc:	4803      	ldr	r0, [pc, #12]	; (8007f0c <stdio_exit_handler+0x14>)
 8007efe:	f000 b869 	b.w	8007fd4 <_fwalk_sglue>
 8007f02:	bf00      	nop
 8007f04:	20000010 	.word	0x20000010
 8007f08:	08008b21 	.word	0x08008b21
 8007f0c:	2000001c 	.word	0x2000001c

08007f10 <cleanup_stdio>:
 8007f10:	6841      	ldr	r1, [r0, #4]
 8007f12:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <cleanup_stdio+0x34>)
 8007f14:	4299      	cmp	r1, r3
 8007f16:	b510      	push	{r4, lr}
 8007f18:	4604      	mov	r4, r0
 8007f1a:	d001      	beq.n	8007f20 <cleanup_stdio+0x10>
 8007f1c:	f000 fe00 	bl	8008b20 <_fflush_r>
 8007f20:	68a1      	ldr	r1, [r4, #8]
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <cleanup_stdio+0x38>)
 8007f24:	4299      	cmp	r1, r3
 8007f26:	d002      	beq.n	8007f2e <cleanup_stdio+0x1e>
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fdf9 	bl	8008b20 <_fflush_r>
 8007f2e:	68e1      	ldr	r1, [r4, #12]
 8007f30:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <cleanup_stdio+0x3c>)
 8007f32:	4299      	cmp	r1, r3
 8007f34:	d004      	beq.n	8007f40 <cleanup_stdio+0x30>
 8007f36:	4620      	mov	r0, r4
 8007f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f3c:	f000 bdf0 	b.w	8008b20 <_fflush_r>
 8007f40:	bd10      	pop	{r4, pc}
 8007f42:	bf00      	nop
 8007f44:	20004c20 	.word	0x20004c20
 8007f48:	20004c88 	.word	0x20004c88
 8007f4c:	20004cf0 	.word	0x20004cf0

08007f50 <global_stdio_init.part.0>:
 8007f50:	b510      	push	{r4, lr}
 8007f52:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <global_stdio_init.part.0+0x30>)
 8007f54:	4c0b      	ldr	r4, [pc, #44]	; (8007f84 <global_stdio_init.part.0+0x34>)
 8007f56:	4a0c      	ldr	r2, [pc, #48]	; (8007f88 <global_stdio_init.part.0+0x38>)
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2104      	movs	r1, #4
 8007f60:	f7ff ff94 	bl	8007e8c <std>
 8007f64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f68:	2201      	movs	r2, #1
 8007f6a:	2109      	movs	r1, #9
 8007f6c:	f7ff ff8e 	bl	8007e8c <std>
 8007f70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f74:	2202      	movs	r2, #2
 8007f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f7a:	2112      	movs	r1, #18
 8007f7c:	f7ff bf86 	b.w	8007e8c <std>
 8007f80:	20004d58 	.word	0x20004d58
 8007f84:	20004c20 	.word	0x20004c20
 8007f88:	08007ef9 	.word	0x08007ef9

08007f8c <__sfp_lock_acquire>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__sfp_lock_acquire+0x8>)
 8007f8e:	f000 b964 	b.w	800825a <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	20004d61 	.word	0x20004d61

08007f98 <__sfp_lock_release>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__sfp_lock_release+0x8>)
 8007f9a:	f000 b95f 	b.w	800825c <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	20004d61 	.word	0x20004d61

08007fa4 <__sinit>:
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	f7ff fff0 	bl	8007f8c <__sfp_lock_acquire>
 8007fac:	6a23      	ldr	r3, [r4, #32]
 8007fae:	b11b      	cbz	r3, 8007fb8 <__sinit+0x14>
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb4:	f7ff bff0 	b.w	8007f98 <__sfp_lock_release>
 8007fb8:	4b04      	ldr	r3, [pc, #16]	; (8007fcc <__sinit+0x28>)
 8007fba:	6223      	str	r3, [r4, #32]
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <__sinit+0x2c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1f5      	bne.n	8007fb0 <__sinit+0xc>
 8007fc4:	f7ff ffc4 	bl	8007f50 <global_stdio_init.part.0>
 8007fc8:	e7f2      	b.n	8007fb0 <__sinit+0xc>
 8007fca:	bf00      	nop
 8007fcc:	08007f11 	.word	0x08007f11
 8007fd0:	20004d58 	.word	0x20004d58

08007fd4 <_fwalk_sglue>:
 8007fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd8:	4607      	mov	r7, r0
 8007fda:	4688      	mov	r8, r1
 8007fdc:	4614      	mov	r4, r2
 8007fde:	2600      	movs	r6, #0
 8007fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8007fe8:	d505      	bpl.n	8007ff6 <_fwalk_sglue+0x22>
 8007fea:	6824      	ldr	r4, [r4, #0]
 8007fec:	2c00      	cmp	r4, #0
 8007fee:	d1f7      	bne.n	8007fe0 <_fwalk_sglue+0xc>
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff6:	89ab      	ldrh	r3, [r5, #12]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d907      	bls.n	800800c <_fwalk_sglue+0x38>
 8007ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008000:	3301      	adds	r3, #1
 8008002:	d003      	beq.n	800800c <_fwalk_sglue+0x38>
 8008004:	4629      	mov	r1, r5
 8008006:	4638      	mov	r0, r7
 8008008:	47c0      	blx	r8
 800800a:	4306      	orrs	r6, r0
 800800c:	3568      	adds	r5, #104	; 0x68
 800800e:	e7e9      	b.n	8007fe4 <_fwalk_sglue+0x10>

08008010 <iprintf>:
 8008010:	b40f      	push	{r0, r1, r2, r3}
 8008012:	b507      	push	{r0, r1, r2, lr}
 8008014:	4906      	ldr	r1, [pc, #24]	; (8008030 <iprintf+0x20>)
 8008016:	ab04      	add	r3, sp, #16
 8008018:	6808      	ldr	r0, [r1, #0]
 800801a:	f853 2b04 	ldr.w	r2, [r3], #4
 800801e:	6881      	ldr	r1, [r0, #8]
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	f000 fa4d 	bl	80084c0 <_vfiprintf_r>
 8008026:	b003      	add	sp, #12
 8008028:	f85d eb04 	ldr.w	lr, [sp], #4
 800802c:	b004      	add	sp, #16
 800802e:	4770      	bx	lr
 8008030:	20000068 	.word	0x20000068

08008034 <__sread>:
 8008034:	b510      	push	{r4, lr}
 8008036:	460c      	mov	r4, r1
 8008038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803c:	f000 f8be 	bl	80081bc <_read_r>
 8008040:	2800      	cmp	r0, #0
 8008042:	bfab      	itete	ge
 8008044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008046:	89a3      	ldrhlt	r3, [r4, #12]
 8008048:	181b      	addge	r3, r3, r0
 800804a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800804e:	bfac      	ite	ge
 8008050:	6563      	strge	r3, [r4, #84]	; 0x54
 8008052:	81a3      	strhlt	r3, [r4, #12]
 8008054:	bd10      	pop	{r4, pc}

08008056 <__swrite>:
 8008056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805a:	461f      	mov	r7, r3
 800805c:	898b      	ldrh	r3, [r1, #12]
 800805e:	05db      	lsls	r3, r3, #23
 8008060:	4605      	mov	r5, r0
 8008062:	460c      	mov	r4, r1
 8008064:	4616      	mov	r6, r2
 8008066:	d505      	bpl.n	8008074 <__swrite+0x1e>
 8008068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806c:	2302      	movs	r3, #2
 800806e:	2200      	movs	r2, #0
 8008070:	f000 f892 	bl	8008198 <_lseek_r>
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800807a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800807e:	81a3      	strh	r3, [r4, #12]
 8008080:	4632      	mov	r2, r6
 8008082:	463b      	mov	r3, r7
 8008084:	4628      	mov	r0, r5
 8008086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800808a:	f000 b8a9 	b.w	80081e0 <_write_r>

0800808e <__sseek>:
 800808e:	b510      	push	{r4, lr}
 8008090:	460c      	mov	r4, r1
 8008092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008096:	f000 f87f 	bl	8008198 <_lseek_r>
 800809a:	1c43      	adds	r3, r0, #1
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	bf15      	itete	ne
 80080a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80080a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080aa:	81a3      	strheq	r3, [r4, #12]
 80080ac:	bf18      	it	ne
 80080ae:	81a3      	strhne	r3, [r4, #12]
 80080b0:	bd10      	pop	{r4, pc}

080080b2 <__sclose>:
 80080b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b6:	f000 b809 	b.w	80080cc <_close_r>

080080ba <memset>:
 80080ba:	4402      	add	r2, r0
 80080bc:	4603      	mov	r3, r0
 80080be:	4293      	cmp	r3, r2
 80080c0:	d100      	bne.n	80080c4 <memset+0xa>
 80080c2:	4770      	bx	lr
 80080c4:	f803 1b01 	strb.w	r1, [r3], #1
 80080c8:	e7f9      	b.n	80080be <memset+0x4>
	...

080080cc <_close_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d06      	ldr	r5, [pc, #24]	; (80080e8 <_close_r+0x1c>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	f7f9 fa23 	bl	8001522 <_close>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_close_r+0x1a>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_close_r+0x1a>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	20004d5c 	.word	0x20004d5c

080080ec <_reclaim_reent>:
 80080ec:	4b29      	ldr	r3, [pc, #164]	; (8008194 <_reclaim_reent+0xa8>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4283      	cmp	r3, r0
 80080f2:	b570      	push	{r4, r5, r6, lr}
 80080f4:	4604      	mov	r4, r0
 80080f6:	d04b      	beq.n	8008190 <_reclaim_reent+0xa4>
 80080f8:	69c3      	ldr	r3, [r0, #28]
 80080fa:	b143      	cbz	r3, 800810e <_reclaim_reent+0x22>
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d144      	bne.n	800818c <_reclaim_reent+0xa0>
 8008102:	69e3      	ldr	r3, [r4, #28]
 8008104:	6819      	ldr	r1, [r3, #0]
 8008106:	b111      	cbz	r1, 800810e <_reclaim_reent+0x22>
 8008108:	4620      	mov	r0, r4
 800810a:	f000 f8b7 	bl	800827c <_free_r>
 800810e:	6961      	ldr	r1, [r4, #20]
 8008110:	b111      	cbz	r1, 8008118 <_reclaim_reent+0x2c>
 8008112:	4620      	mov	r0, r4
 8008114:	f000 f8b2 	bl	800827c <_free_r>
 8008118:	69e1      	ldr	r1, [r4, #28]
 800811a:	b111      	cbz	r1, 8008122 <_reclaim_reent+0x36>
 800811c:	4620      	mov	r0, r4
 800811e:	f000 f8ad 	bl	800827c <_free_r>
 8008122:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008124:	b111      	cbz	r1, 800812c <_reclaim_reent+0x40>
 8008126:	4620      	mov	r0, r4
 8008128:	f000 f8a8 	bl	800827c <_free_r>
 800812c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800812e:	b111      	cbz	r1, 8008136 <_reclaim_reent+0x4a>
 8008130:	4620      	mov	r0, r4
 8008132:	f000 f8a3 	bl	800827c <_free_r>
 8008136:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008138:	b111      	cbz	r1, 8008140 <_reclaim_reent+0x54>
 800813a:	4620      	mov	r0, r4
 800813c:	f000 f89e 	bl	800827c <_free_r>
 8008140:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008142:	b111      	cbz	r1, 800814a <_reclaim_reent+0x5e>
 8008144:	4620      	mov	r0, r4
 8008146:	f000 f899 	bl	800827c <_free_r>
 800814a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800814c:	b111      	cbz	r1, 8008154 <_reclaim_reent+0x68>
 800814e:	4620      	mov	r0, r4
 8008150:	f000 f894 	bl	800827c <_free_r>
 8008154:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008156:	b111      	cbz	r1, 800815e <_reclaim_reent+0x72>
 8008158:	4620      	mov	r0, r4
 800815a:	f000 f88f 	bl	800827c <_free_r>
 800815e:	6a23      	ldr	r3, [r4, #32]
 8008160:	b1b3      	cbz	r3, 8008190 <_reclaim_reent+0xa4>
 8008162:	4620      	mov	r0, r4
 8008164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008168:	4718      	bx	r3
 800816a:	5949      	ldr	r1, [r1, r5]
 800816c:	b941      	cbnz	r1, 8008180 <_reclaim_reent+0x94>
 800816e:	3504      	adds	r5, #4
 8008170:	69e3      	ldr	r3, [r4, #28]
 8008172:	2d80      	cmp	r5, #128	; 0x80
 8008174:	68d9      	ldr	r1, [r3, #12]
 8008176:	d1f8      	bne.n	800816a <_reclaim_reent+0x7e>
 8008178:	4620      	mov	r0, r4
 800817a:	f000 f87f 	bl	800827c <_free_r>
 800817e:	e7c0      	b.n	8008102 <_reclaim_reent+0x16>
 8008180:	680e      	ldr	r6, [r1, #0]
 8008182:	4620      	mov	r0, r4
 8008184:	f000 f87a 	bl	800827c <_free_r>
 8008188:	4631      	mov	r1, r6
 800818a:	e7ef      	b.n	800816c <_reclaim_reent+0x80>
 800818c:	2500      	movs	r5, #0
 800818e:	e7ef      	b.n	8008170 <_reclaim_reent+0x84>
 8008190:	bd70      	pop	{r4, r5, r6, pc}
 8008192:	bf00      	nop
 8008194:	20000068 	.word	0x20000068

08008198 <_lseek_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d07      	ldr	r5, [pc, #28]	; (80081b8 <_lseek_r+0x20>)
 800819c:	4604      	mov	r4, r0
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	f7f9 f9e2 	bl	8001570 <_lseek>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_lseek_r+0x1e>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_lseek_r+0x1e>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20004d5c 	.word	0x20004d5c

080081bc <_read_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d07      	ldr	r5, [pc, #28]	; (80081dc <_read_r+0x20>)
 80081c0:	4604      	mov	r4, r0
 80081c2:	4608      	mov	r0, r1
 80081c4:	4611      	mov	r1, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	602a      	str	r2, [r5, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f7f9 f970 	bl	80014b0 <_read>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_read_r+0x1e>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_read_r+0x1e>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	20004d5c 	.word	0x20004d5c

080081e0 <_write_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d07      	ldr	r5, [pc, #28]	; (8008200 <_write_r+0x20>)
 80081e4:	4604      	mov	r4, r0
 80081e6:	4608      	mov	r0, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	2200      	movs	r2, #0
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f7f9 f97b 	bl	80014ea <_write>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_write_r+0x1e>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_write_r+0x1e>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	20004d5c 	.word	0x20004d5c

08008204 <__errno>:
 8008204:	4b01      	ldr	r3, [pc, #4]	; (800820c <__errno+0x8>)
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	20000068 	.word	0x20000068

08008210 <__libc_init_array>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	4d0d      	ldr	r5, [pc, #52]	; (8008248 <__libc_init_array+0x38>)
 8008214:	4c0d      	ldr	r4, [pc, #52]	; (800824c <__libc_init_array+0x3c>)
 8008216:	1b64      	subs	r4, r4, r5
 8008218:	10a4      	asrs	r4, r4, #2
 800821a:	2600      	movs	r6, #0
 800821c:	42a6      	cmp	r6, r4
 800821e:	d109      	bne.n	8008234 <__libc_init_array+0x24>
 8008220:	4d0b      	ldr	r5, [pc, #44]	; (8008250 <__libc_init_array+0x40>)
 8008222:	4c0c      	ldr	r4, [pc, #48]	; (8008254 <__libc_init_array+0x44>)
 8008224:	f000 fdce 	bl	8008dc4 <_init>
 8008228:	1b64      	subs	r4, r4, r5
 800822a:	10a4      	asrs	r4, r4, #2
 800822c:	2600      	movs	r6, #0
 800822e:	42a6      	cmp	r6, r4
 8008230:	d105      	bne.n	800823e <__libc_init_array+0x2e>
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	f855 3b04 	ldr.w	r3, [r5], #4
 8008238:	4798      	blx	r3
 800823a:	3601      	adds	r6, #1
 800823c:	e7ee      	b.n	800821c <__libc_init_array+0xc>
 800823e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008242:	4798      	blx	r3
 8008244:	3601      	adds	r6, #1
 8008246:	e7f2      	b.n	800822e <__libc_init_array+0x1e>
 8008248:	08008ff4 	.word	0x08008ff4
 800824c:	08008ff4 	.word	0x08008ff4
 8008250:	08008ff4 	.word	0x08008ff4
 8008254:	08008ff8 	.word	0x08008ff8

08008258 <__retarget_lock_init_recursive>:
 8008258:	4770      	bx	lr

0800825a <__retarget_lock_acquire_recursive>:
 800825a:	4770      	bx	lr

0800825c <__retarget_lock_release_recursive>:
 800825c:	4770      	bx	lr

0800825e <memcpy>:
 800825e:	440a      	add	r2, r1
 8008260:	4291      	cmp	r1, r2
 8008262:	f100 33ff 	add.w	r3, r0, #4294967295
 8008266:	d100      	bne.n	800826a <memcpy+0xc>
 8008268:	4770      	bx	lr
 800826a:	b510      	push	{r4, lr}
 800826c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008274:	4291      	cmp	r1, r2
 8008276:	d1f9      	bne.n	800826c <memcpy+0xe>
 8008278:	bd10      	pop	{r4, pc}
	...

0800827c <_free_r>:
 800827c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800827e:	2900      	cmp	r1, #0
 8008280:	d044      	beq.n	800830c <_free_r+0x90>
 8008282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008286:	9001      	str	r0, [sp, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f1a1 0404 	sub.w	r4, r1, #4
 800828e:	bfb8      	it	lt
 8008290:	18e4      	addlt	r4, r4, r3
 8008292:	f000 f8df 	bl	8008454 <__malloc_lock>
 8008296:	4a1e      	ldr	r2, [pc, #120]	; (8008310 <_free_r+0x94>)
 8008298:	9801      	ldr	r0, [sp, #4]
 800829a:	6813      	ldr	r3, [r2, #0]
 800829c:	b933      	cbnz	r3, 80082ac <_free_r+0x30>
 800829e:	6063      	str	r3, [r4, #4]
 80082a0:	6014      	str	r4, [r2, #0]
 80082a2:	b003      	add	sp, #12
 80082a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082a8:	f000 b8da 	b.w	8008460 <__malloc_unlock>
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	d908      	bls.n	80082c2 <_free_r+0x46>
 80082b0:	6825      	ldr	r5, [r4, #0]
 80082b2:	1961      	adds	r1, r4, r5
 80082b4:	428b      	cmp	r3, r1
 80082b6:	bf01      	itttt	eq
 80082b8:	6819      	ldreq	r1, [r3, #0]
 80082ba:	685b      	ldreq	r3, [r3, #4]
 80082bc:	1949      	addeq	r1, r1, r5
 80082be:	6021      	streq	r1, [r4, #0]
 80082c0:	e7ed      	b.n	800829e <_free_r+0x22>
 80082c2:	461a      	mov	r2, r3
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	b10b      	cbz	r3, 80082cc <_free_r+0x50>
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	d9fa      	bls.n	80082c2 <_free_r+0x46>
 80082cc:	6811      	ldr	r1, [r2, #0]
 80082ce:	1855      	adds	r5, r2, r1
 80082d0:	42a5      	cmp	r5, r4
 80082d2:	d10b      	bne.n	80082ec <_free_r+0x70>
 80082d4:	6824      	ldr	r4, [r4, #0]
 80082d6:	4421      	add	r1, r4
 80082d8:	1854      	adds	r4, r2, r1
 80082da:	42a3      	cmp	r3, r4
 80082dc:	6011      	str	r1, [r2, #0]
 80082de:	d1e0      	bne.n	80082a2 <_free_r+0x26>
 80082e0:	681c      	ldr	r4, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	6053      	str	r3, [r2, #4]
 80082e6:	440c      	add	r4, r1
 80082e8:	6014      	str	r4, [r2, #0]
 80082ea:	e7da      	b.n	80082a2 <_free_r+0x26>
 80082ec:	d902      	bls.n	80082f4 <_free_r+0x78>
 80082ee:	230c      	movs	r3, #12
 80082f0:	6003      	str	r3, [r0, #0]
 80082f2:	e7d6      	b.n	80082a2 <_free_r+0x26>
 80082f4:	6825      	ldr	r5, [r4, #0]
 80082f6:	1961      	adds	r1, r4, r5
 80082f8:	428b      	cmp	r3, r1
 80082fa:	bf04      	itt	eq
 80082fc:	6819      	ldreq	r1, [r3, #0]
 80082fe:	685b      	ldreq	r3, [r3, #4]
 8008300:	6063      	str	r3, [r4, #4]
 8008302:	bf04      	itt	eq
 8008304:	1949      	addeq	r1, r1, r5
 8008306:	6021      	streq	r1, [r4, #0]
 8008308:	6054      	str	r4, [r2, #4]
 800830a:	e7ca      	b.n	80082a2 <_free_r+0x26>
 800830c:	b003      	add	sp, #12
 800830e:	bd30      	pop	{r4, r5, pc}
 8008310:	20004d64 	.word	0x20004d64

08008314 <sbrk_aligned>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	4e0e      	ldr	r6, [pc, #56]	; (8008350 <sbrk_aligned+0x3c>)
 8008318:	460c      	mov	r4, r1
 800831a:	6831      	ldr	r1, [r6, #0]
 800831c:	4605      	mov	r5, r0
 800831e:	b911      	cbnz	r1, 8008326 <sbrk_aligned+0x12>
 8008320:	f000 fcbc 	bl	8008c9c <_sbrk_r>
 8008324:	6030      	str	r0, [r6, #0]
 8008326:	4621      	mov	r1, r4
 8008328:	4628      	mov	r0, r5
 800832a:	f000 fcb7 	bl	8008c9c <_sbrk_r>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d00a      	beq.n	8008348 <sbrk_aligned+0x34>
 8008332:	1cc4      	adds	r4, r0, #3
 8008334:	f024 0403 	bic.w	r4, r4, #3
 8008338:	42a0      	cmp	r0, r4
 800833a:	d007      	beq.n	800834c <sbrk_aligned+0x38>
 800833c:	1a21      	subs	r1, r4, r0
 800833e:	4628      	mov	r0, r5
 8008340:	f000 fcac 	bl	8008c9c <_sbrk_r>
 8008344:	3001      	adds	r0, #1
 8008346:	d101      	bne.n	800834c <sbrk_aligned+0x38>
 8008348:	f04f 34ff 	mov.w	r4, #4294967295
 800834c:	4620      	mov	r0, r4
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	20004d68 	.word	0x20004d68

08008354 <_malloc_r>:
 8008354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008358:	1ccd      	adds	r5, r1, #3
 800835a:	f025 0503 	bic.w	r5, r5, #3
 800835e:	3508      	adds	r5, #8
 8008360:	2d0c      	cmp	r5, #12
 8008362:	bf38      	it	cc
 8008364:	250c      	movcc	r5, #12
 8008366:	2d00      	cmp	r5, #0
 8008368:	4607      	mov	r7, r0
 800836a:	db01      	blt.n	8008370 <_malloc_r+0x1c>
 800836c:	42a9      	cmp	r1, r5
 800836e:	d905      	bls.n	800837c <_malloc_r+0x28>
 8008370:	230c      	movs	r3, #12
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	2600      	movs	r6, #0
 8008376:	4630      	mov	r0, r6
 8008378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800837c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008450 <_malloc_r+0xfc>
 8008380:	f000 f868 	bl	8008454 <__malloc_lock>
 8008384:	f8d8 3000 	ldr.w	r3, [r8]
 8008388:	461c      	mov	r4, r3
 800838a:	bb5c      	cbnz	r4, 80083e4 <_malloc_r+0x90>
 800838c:	4629      	mov	r1, r5
 800838e:	4638      	mov	r0, r7
 8008390:	f7ff ffc0 	bl	8008314 <sbrk_aligned>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	4604      	mov	r4, r0
 8008398:	d155      	bne.n	8008446 <_malloc_r+0xf2>
 800839a:	f8d8 4000 	ldr.w	r4, [r8]
 800839e:	4626      	mov	r6, r4
 80083a0:	2e00      	cmp	r6, #0
 80083a2:	d145      	bne.n	8008430 <_malloc_r+0xdc>
 80083a4:	2c00      	cmp	r4, #0
 80083a6:	d048      	beq.n	800843a <_malloc_r+0xe6>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	4631      	mov	r1, r6
 80083ac:	4638      	mov	r0, r7
 80083ae:	eb04 0903 	add.w	r9, r4, r3
 80083b2:	f000 fc73 	bl	8008c9c <_sbrk_r>
 80083b6:	4581      	cmp	r9, r0
 80083b8:	d13f      	bne.n	800843a <_malloc_r+0xe6>
 80083ba:	6821      	ldr	r1, [r4, #0]
 80083bc:	1a6d      	subs	r5, r5, r1
 80083be:	4629      	mov	r1, r5
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff ffa7 	bl	8008314 <sbrk_aligned>
 80083c6:	3001      	adds	r0, #1
 80083c8:	d037      	beq.n	800843a <_malloc_r+0xe6>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	442b      	add	r3, r5
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	f8d8 3000 	ldr.w	r3, [r8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d038      	beq.n	800844a <_malloc_r+0xf6>
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	42a2      	cmp	r2, r4
 80083dc:	d12b      	bne.n	8008436 <_malloc_r+0xe2>
 80083de:	2200      	movs	r2, #0
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	e00f      	b.n	8008404 <_malloc_r+0xb0>
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	1b52      	subs	r2, r2, r5
 80083e8:	d41f      	bmi.n	800842a <_malloc_r+0xd6>
 80083ea:	2a0b      	cmp	r2, #11
 80083ec:	d917      	bls.n	800841e <_malloc_r+0xca>
 80083ee:	1961      	adds	r1, r4, r5
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	6025      	str	r5, [r4, #0]
 80083f4:	bf18      	it	ne
 80083f6:	6059      	strne	r1, [r3, #4]
 80083f8:	6863      	ldr	r3, [r4, #4]
 80083fa:	bf08      	it	eq
 80083fc:	f8c8 1000 	streq.w	r1, [r8]
 8008400:	5162      	str	r2, [r4, r5]
 8008402:	604b      	str	r3, [r1, #4]
 8008404:	4638      	mov	r0, r7
 8008406:	f104 060b 	add.w	r6, r4, #11
 800840a:	f000 f829 	bl	8008460 <__malloc_unlock>
 800840e:	f026 0607 	bic.w	r6, r6, #7
 8008412:	1d23      	adds	r3, r4, #4
 8008414:	1af2      	subs	r2, r6, r3
 8008416:	d0ae      	beq.n	8008376 <_malloc_r+0x22>
 8008418:	1b9b      	subs	r3, r3, r6
 800841a:	50a3      	str	r3, [r4, r2]
 800841c:	e7ab      	b.n	8008376 <_malloc_r+0x22>
 800841e:	42a3      	cmp	r3, r4
 8008420:	6862      	ldr	r2, [r4, #4]
 8008422:	d1dd      	bne.n	80083e0 <_malloc_r+0x8c>
 8008424:	f8c8 2000 	str.w	r2, [r8]
 8008428:	e7ec      	b.n	8008404 <_malloc_r+0xb0>
 800842a:	4623      	mov	r3, r4
 800842c:	6864      	ldr	r4, [r4, #4]
 800842e:	e7ac      	b.n	800838a <_malloc_r+0x36>
 8008430:	4634      	mov	r4, r6
 8008432:	6876      	ldr	r6, [r6, #4]
 8008434:	e7b4      	b.n	80083a0 <_malloc_r+0x4c>
 8008436:	4613      	mov	r3, r2
 8008438:	e7cc      	b.n	80083d4 <_malloc_r+0x80>
 800843a:	230c      	movs	r3, #12
 800843c:	603b      	str	r3, [r7, #0]
 800843e:	4638      	mov	r0, r7
 8008440:	f000 f80e 	bl	8008460 <__malloc_unlock>
 8008444:	e797      	b.n	8008376 <_malloc_r+0x22>
 8008446:	6025      	str	r5, [r4, #0]
 8008448:	e7dc      	b.n	8008404 <_malloc_r+0xb0>
 800844a:	605b      	str	r3, [r3, #4]
 800844c:	deff      	udf	#255	; 0xff
 800844e:	bf00      	nop
 8008450:	20004d64 	.word	0x20004d64

08008454 <__malloc_lock>:
 8008454:	4801      	ldr	r0, [pc, #4]	; (800845c <__malloc_lock+0x8>)
 8008456:	f7ff bf00 	b.w	800825a <__retarget_lock_acquire_recursive>
 800845a:	bf00      	nop
 800845c:	20004d60 	.word	0x20004d60

08008460 <__malloc_unlock>:
 8008460:	4801      	ldr	r0, [pc, #4]	; (8008468 <__malloc_unlock+0x8>)
 8008462:	f7ff befb 	b.w	800825c <__retarget_lock_release_recursive>
 8008466:	bf00      	nop
 8008468:	20004d60 	.word	0x20004d60

0800846c <__sfputc_r>:
 800846c:	6893      	ldr	r3, [r2, #8]
 800846e:	3b01      	subs	r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	b410      	push	{r4}
 8008474:	6093      	str	r3, [r2, #8]
 8008476:	da08      	bge.n	800848a <__sfputc_r+0x1e>
 8008478:	6994      	ldr	r4, [r2, #24]
 800847a:	42a3      	cmp	r3, r4
 800847c:	db01      	blt.n	8008482 <__sfputc_r+0x16>
 800847e:	290a      	cmp	r1, #10
 8008480:	d103      	bne.n	800848a <__sfputc_r+0x1e>
 8008482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008486:	f000 bb73 	b.w	8008b70 <__swbuf_r>
 800848a:	6813      	ldr	r3, [r2, #0]
 800848c:	1c58      	adds	r0, r3, #1
 800848e:	6010      	str	r0, [r2, #0]
 8008490:	7019      	strb	r1, [r3, #0]
 8008492:	4608      	mov	r0, r1
 8008494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008498:	4770      	bx	lr

0800849a <__sfputs_r>:
 800849a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849c:	4606      	mov	r6, r0
 800849e:	460f      	mov	r7, r1
 80084a0:	4614      	mov	r4, r2
 80084a2:	18d5      	adds	r5, r2, r3
 80084a4:	42ac      	cmp	r4, r5
 80084a6:	d101      	bne.n	80084ac <__sfputs_r+0x12>
 80084a8:	2000      	movs	r0, #0
 80084aa:	e007      	b.n	80084bc <__sfputs_r+0x22>
 80084ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b0:	463a      	mov	r2, r7
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7ff ffda 	bl	800846c <__sfputc_r>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d1f3      	bne.n	80084a4 <__sfputs_r+0xa>
 80084bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084c0 <_vfiprintf_r>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	460d      	mov	r5, r1
 80084c6:	b09d      	sub	sp, #116	; 0x74
 80084c8:	4614      	mov	r4, r2
 80084ca:	4698      	mov	r8, r3
 80084cc:	4606      	mov	r6, r0
 80084ce:	b118      	cbz	r0, 80084d8 <_vfiprintf_r+0x18>
 80084d0:	6a03      	ldr	r3, [r0, #32]
 80084d2:	b90b      	cbnz	r3, 80084d8 <_vfiprintf_r+0x18>
 80084d4:	f7ff fd66 	bl	8007fa4 <__sinit>
 80084d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084da:	07d9      	lsls	r1, r3, #31
 80084dc:	d405      	bmi.n	80084ea <_vfiprintf_r+0x2a>
 80084de:	89ab      	ldrh	r3, [r5, #12]
 80084e0:	059a      	lsls	r2, r3, #22
 80084e2:	d402      	bmi.n	80084ea <_vfiprintf_r+0x2a>
 80084e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084e6:	f7ff feb8 	bl	800825a <__retarget_lock_acquire_recursive>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	071b      	lsls	r3, r3, #28
 80084ee:	d501      	bpl.n	80084f4 <_vfiprintf_r+0x34>
 80084f0:	692b      	ldr	r3, [r5, #16]
 80084f2:	b99b      	cbnz	r3, 800851c <_vfiprintf_r+0x5c>
 80084f4:	4629      	mov	r1, r5
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 fb78 	bl	8008bec <__swsetup_r>
 80084fc:	b170      	cbz	r0, 800851c <_vfiprintf_r+0x5c>
 80084fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008500:	07dc      	lsls	r4, r3, #31
 8008502:	d504      	bpl.n	800850e <_vfiprintf_r+0x4e>
 8008504:	f04f 30ff 	mov.w	r0, #4294967295
 8008508:	b01d      	add	sp, #116	; 0x74
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850e:	89ab      	ldrh	r3, [r5, #12]
 8008510:	0598      	lsls	r0, r3, #22
 8008512:	d4f7      	bmi.n	8008504 <_vfiprintf_r+0x44>
 8008514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008516:	f7ff fea1 	bl	800825c <__retarget_lock_release_recursive>
 800851a:	e7f3      	b.n	8008504 <_vfiprintf_r+0x44>
 800851c:	2300      	movs	r3, #0
 800851e:	9309      	str	r3, [sp, #36]	; 0x24
 8008520:	2320      	movs	r3, #32
 8008522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008526:	f8cd 800c 	str.w	r8, [sp, #12]
 800852a:	2330      	movs	r3, #48	; 0x30
 800852c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80086e0 <_vfiprintf_r+0x220>
 8008530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008534:	f04f 0901 	mov.w	r9, #1
 8008538:	4623      	mov	r3, r4
 800853a:	469a      	mov	sl, r3
 800853c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008540:	b10a      	cbz	r2, 8008546 <_vfiprintf_r+0x86>
 8008542:	2a25      	cmp	r2, #37	; 0x25
 8008544:	d1f9      	bne.n	800853a <_vfiprintf_r+0x7a>
 8008546:	ebba 0b04 	subs.w	fp, sl, r4
 800854a:	d00b      	beq.n	8008564 <_vfiprintf_r+0xa4>
 800854c:	465b      	mov	r3, fp
 800854e:	4622      	mov	r2, r4
 8008550:	4629      	mov	r1, r5
 8008552:	4630      	mov	r0, r6
 8008554:	f7ff ffa1 	bl	800849a <__sfputs_r>
 8008558:	3001      	adds	r0, #1
 800855a:	f000 80a9 	beq.w	80086b0 <_vfiprintf_r+0x1f0>
 800855e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008560:	445a      	add	r2, fp
 8008562:	9209      	str	r2, [sp, #36]	; 0x24
 8008564:	f89a 3000 	ldrb.w	r3, [sl]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 80a1 	beq.w	80086b0 <_vfiprintf_r+0x1f0>
 800856e:	2300      	movs	r3, #0
 8008570:	f04f 32ff 	mov.w	r2, #4294967295
 8008574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008578:	f10a 0a01 	add.w	sl, sl, #1
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	9307      	str	r3, [sp, #28]
 8008580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008584:	931a      	str	r3, [sp, #104]	; 0x68
 8008586:	4654      	mov	r4, sl
 8008588:	2205      	movs	r2, #5
 800858a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858e:	4854      	ldr	r0, [pc, #336]	; (80086e0 <_vfiprintf_r+0x220>)
 8008590:	f7f7 fe26 	bl	80001e0 <memchr>
 8008594:	9a04      	ldr	r2, [sp, #16]
 8008596:	b9d8      	cbnz	r0, 80085d0 <_vfiprintf_r+0x110>
 8008598:	06d1      	lsls	r1, r2, #27
 800859a:	bf44      	itt	mi
 800859c:	2320      	movmi	r3, #32
 800859e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a2:	0713      	lsls	r3, r2, #28
 80085a4:	bf44      	itt	mi
 80085a6:	232b      	movmi	r3, #43	; 0x2b
 80085a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ac:	f89a 3000 	ldrb.w	r3, [sl]
 80085b0:	2b2a      	cmp	r3, #42	; 0x2a
 80085b2:	d015      	beq.n	80085e0 <_vfiprintf_r+0x120>
 80085b4:	9a07      	ldr	r2, [sp, #28]
 80085b6:	4654      	mov	r4, sl
 80085b8:	2000      	movs	r0, #0
 80085ba:	f04f 0c0a 	mov.w	ip, #10
 80085be:	4621      	mov	r1, r4
 80085c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c4:	3b30      	subs	r3, #48	; 0x30
 80085c6:	2b09      	cmp	r3, #9
 80085c8:	d94d      	bls.n	8008666 <_vfiprintf_r+0x1a6>
 80085ca:	b1b0      	cbz	r0, 80085fa <_vfiprintf_r+0x13a>
 80085cc:	9207      	str	r2, [sp, #28]
 80085ce:	e014      	b.n	80085fa <_vfiprintf_r+0x13a>
 80085d0:	eba0 0308 	sub.w	r3, r0, r8
 80085d4:	fa09 f303 	lsl.w	r3, r9, r3
 80085d8:	4313      	orrs	r3, r2
 80085da:	9304      	str	r3, [sp, #16]
 80085dc:	46a2      	mov	sl, r4
 80085de:	e7d2      	b.n	8008586 <_vfiprintf_r+0xc6>
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	1d19      	adds	r1, r3, #4
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	9103      	str	r1, [sp, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	bfbb      	ittet	lt
 80085ec:	425b      	neglt	r3, r3
 80085ee:	f042 0202 	orrlt.w	r2, r2, #2
 80085f2:	9307      	strge	r3, [sp, #28]
 80085f4:	9307      	strlt	r3, [sp, #28]
 80085f6:	bfb8      	it	lt
 80085f8:	9204      	strlt	r2, [sp, #16]
 80085fa:	7823      	ldrb	r3, [r4, #0]
 80085fc:	2b2e      	cmp	r3, #46	; 0x2e
 80085fe:	d10c      	bne.n	800861a <_vfiprintf_r+0x15a>
 8008600:	7863      	ldrb	r3, [r4, #1]
 8008602:	2b2a      	cmp	r3, #42	; 0x2a
 8008604:	d134      	bne.n	8008670 <_vfiprintf_r+0x1b0>
 8008606:	9b03      	ldr	r3, [sp, #12]
 8008608:	1d1a      	adds	r2, r3, #4
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	9203      	str	r2, [sp, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	bfb8      	it	lt
 8008612:	f04f 33ff 	movlt.w	r3, #4294967295
 8008616:	3402      	adds	r4, #2
 8008618:	9305      	str	r3, [sp, #20]
 800861a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80086f0 <_vfiprintf_r+0x230>
 800861e:	7821      	ldrb	r1, [r4, #0]
 8008620:	2203      	movs	r2, #3
 8008622:	4650      	mov	r0, sl
 8008624:	f7f7 fddc 	bl	80001e0 <memchr>
 8008628:	b138      	cbz	r0, 800863a <_vfiprintf_r+0x17a>
 800862a:	9b04      	ldr	r3, [sp, #16]
 800862c:	eba0 000a 	sub.w	r0, r0, sl
 8008630:	2240      	movs	r2, #64	; 0x40
 8008632:	4082      	lsls	r2, r0
 8008634:	4313      	orrs	r3, r2
 8008636:	3401      	adds	r4, #1
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863e:	4829      	ldr	r0, [pc, #164]	; (80086e4 <_vfiprintf_r+0x224>)
 8008640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008644:	2206      	movs	r2, #6
 8008646:	f7f7 fdcb 	bl	80001e0 <memchr>
 800864a:	2800      	cmp	r0, #0
 800864c:	d03f      	beq.n	80086ce <_vfiprintf_r+0x20e>
 800864e:	4b26      	ldr	r3, [pc, #152]	; (80086e8 <_vfiprintf_r+0x228>)
 8008650:	bb1b      	cbnz	r3, 800869a <_vfiprintf_r+0x1da>
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	3307      	adds	r3, #7
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	3308      	adds	r3, #8
 800865c:	9303      	str	r3, [sp, #12]
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	443b      	add	r3, r7
 8008662:	9309      	str	r3, [sp, #36]	; 0x24
 8008664:	e768      	b.n	8008538 <_vfiprintf_r+0x78>
 8008666:	fb0c 3202 	mla	r2, ip, r2, r3
 800866a:	460c      	mov	r4, r1
 800866c:	2001      	movs	r0, #1
 800866e:	e7a6      	b.n	80085be <_vfiprintf_r+0xfe>
 8008670:	2300      	movs	r3, #0
 8008672:	3401      	adds	r4, #1
 8008674:	9305      	str	r3, [sp, #20]
 8008676:	4619      	mov	r1, r3
 8008678:	f04f 0c0a 	mov.w	ip, #10
 800867c:	4620      	mov	r0, r4
 800867e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008682:	3a30      	subs	r2, #48	; 0x30
 8008684:	2a09      	cmp	r2, #9
 8008686:	d903      	bls.n	8008690 <_vfiprintf_r+0x1d0>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0c6      	beq.n	800861a <_vfiprintf_r+0x15a>
 800868c:	9105      	str	r1, [sp, #20]
 800868e:	e7c4      	b.n	800861a <_vfiprintf_r+0x15a>
 8008690:	fb0c 2101 	mla	r1, ip, r1, r2
 8008694:	4604      	mov	r4, r0
 8008696:	2301      	movs	r3, #1
 8008698:	e7f0      	b.n	800867c <_vfiprintf_r+0x1bc>
 800869a:	ab03      	add	r3, sp, #12
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	462a      	mov	r2, r5
 80086a0:	4b12      	ldr	r3, [pc, #72]	; (80086ec <_vfiprintf_r+0x22c>)
 80086a2:	a904      	add	r1, sp, #16
 80086a4:	4630      	mov	r0, r6
 80086a6:	f3af 8000 	nop.w
 80086aa:	4607      	mov	r7, r0
 80086ac:	1c78      	adds	r0, r7, #1
 80086ae:	d1d6      	bne.n	800865e <_vfiprintf_r+0x19e>
 80086b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086b2:	07d9      	lsls	r1, r3, #31
 80086b4:	d405      	bmi.n	80086c2 <_vfiprintf_r+0x202>
 80086b6:	89ab      	ldrh	r3, [r5, #12]
 80086b8:	059a      	lsls	r2, r3, #22
 80086ba:	d402      	bmi.n	80086c2 <_vfiprintf_r+0x202>
 80086bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086be:	f7ff fdcd 	bl	800825c <__retarget_lock_release_recursive>
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	065b      	lsls	r3, r3, #25
 80086c6:	f53f af1d 	bmi.w	8008504 <_vfiprintf_r+0x44>
 80086ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086cc:	e71c      	b.n	8008508 <_vfiprintf_r+0x48>
 80086ce:	ab03      	add	r3, sp, #12
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	462a      	mov	r2, r5
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <_vfiprintf_r+0x22c>)
 80086d6:	a904      	add	r1, sp, #16
 80086d8:	4630      	mov	r0, r6
 80086da:	f000 f879 	bl	80087d0 <_printf_i>
 80086de:	e7e4      	b.n	80086aa <_vfiprintf_r+0x1ea>
 80086e0:	08008fb8 	.word	0x08008fb8
 80086e4:	08008fc2 	.word	0x08008fc2
 80086e8:	00000000 	.word	0x00000000
 80086ec:	0800849b 	.word	0x0800849b
 80086f0:	08008fbe 	.word	0x08008fbe

080086f4 <_printf_common>:
 80086f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	4616      	mov	r6, r2
 80086fa:	4699      	mov	r9, r3
 80086fc:	688a      	ldr	r2, [r1, #8]
 80086fe:	690b      	ldr	r3, [r1, #16]
 8008700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008704:	4293      	cmp	r3, r2
 8008706:	bfb8      	it	lt
 8008708:	4613      	movlt	r3, r2
 800870a:	6033      	str	r3, [r6, #0]
 800870c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008710:	4607      	mov	r7, r0
 8008712:	460c      	mov	r4, r1
 8008714:	b10a      	cbz	r2, 800871a <_printf_common+0x26>
 8008716:	3301      	adds	r3, #1
 8008718:	6033      	str	r3, [r6, #0]
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	0699      	lsls	r1, r3, #26
 800871e:	bf42      	ittt	mi
 8008720:	6833      	ldrmi	r3, [r6, #0]
 8008722:	3302      	addmi	r3, #2
 8008724:	6033      	strmi	r3, [r6, #0]
 8008726:	6825      	ldr	r5, [r4, #0]
 8008728:	f015 0506 	ands.w	r5, r5, #6
 800872c:	d106      	bne.n	800873c <_printf_common+0x48>
 800872e:	f104 0a19 	add.w	sl, r4, #25
 8008732:	68e3      	ldr	r3, [r4, #12]
 8008734:	6832      	ldr	r2, [r6, #0]
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	42ab      	cmp	r3, r5
 800873a:	dc26      	bgt.n	800878a <_printf_common+0x96>
 800873c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008740:	1e13      	subs	r3, r2, #0
 8008742:	6822      	ldr	r2, [r4, #0]
 8008744:	bf18      	it	ne
 8008746:	2301      	movne	r3, #1
 8008748:	0692      	lsls	r2, r2, #26
 800874a:	d42b      	bmi.n	80087a4 <_printf_common+0xb0>
 800874c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008750:	4649      	mov	r1, r9
 8008752:	4638      	mov	r0, r7
 8008754:	47c0      	blx	r8
 8008756:	3001      	adds	r0, #1
 8008758:	d01e      	beq.n	8008798 <_printf_common+0xa4>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	6922      	ldr	r2, [r4, #16]
 800875e:	f003 0306 	and.w	r3, r3, #6
 8008762:	2b04      	cmp	r3, #4
 8008764:	bf02      	ittt	eq
 8008766:	68e5      	ldreq	r5, [r4, #12]
 8008768:	6833      	ldreq	r3, [r6, #0]
 800876a:	1aed      	subeq	r5, r5, r3
 800876c:	68a3      	ldr	r3, [r4, #8]
 800876e:	bf0c      	ite	eq
 8008770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008774:	2500      	movne	r5, #0
 8008776:	4293      	cmp	r3, r2
 8008778:	bfc4      	itt	gt
 800877a:	1a9b      	subgt	r3, r3, r2
 800877c:	18ed      	addgt	r5, r5, r3
 800877e:	2600      	movs	r6, #0
 8008780:	341a      	adds	r4, #26
 8008782:	42b5      	cmp	r5, r6
 8008784:	d11a      	bne.n	80087bc <_printf_common+0xc8>
 8008786:	2000      	movs	r0, #0
 8008788:	e008      	b.n	800879c <_printf_common+0xa8>
 800878a:	2301      	movs	r3, #1
 800878c:	4652      	mov	r2, sl
 800878e:	4649      	mov	r1, r9
 8008790:	4638      	mov	r0, r7
 8008792:	47c0      	blx	r8
 8008794:	3001      	adds	r0, #1
 8008796:	d103      	bne.n	80087a0 <_printf_common+0xac>
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a0:	3501      	adds	r5, #1
 80087a2:	e7c6      	b.n	8008732 <_printf_common+0x3e>
 80087a4:	18e1      	adds	r1, r4, r3
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	2030      	movs	r0, #48	; 0x30
 80087aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087ae:	4422      	add	r2, r4
 80087b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087b8:	3302      	adds	r3, #2
 80087ba:	e7c7      	b.n	800874c <_printf_common+0x58>
 80087bc:	2301      	movs	r3, #1
 80087be:	4622      	mov	r2, r4
 80087c0:	4649      	mov	r1, r9
 80087c2:	4638      	mov	r0, r7
 80087c4:	47c0      	blx	r8
 80087c6:	3001      	adds	r0, #1
 80087c8:	d0e6      	beq.n	8008798 <_printf_common+0xa4>
 80087ca:	3601      	adds	r6, #1
 80087cc:	e7d9      	b.n	8008782 <_printf_common+0x8e>
	...

080087d0 <_printf_i>:
 80087d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d4:	7e0f      	ldrb	r7, [r1, #24]
 80087d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087d8:	2f78      	cmp	r7, #120	; 0x78
 80087da:	4691      	mov	r9, r2
 80087dc:	4680      	mov	r8, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	469a      	mov	sl, r3
 80087e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087e6:	d807      	bhi.n	80087f8 <_printf_i+0x28>
 80087e8:	2f62      	cmp	r7, #98	; 0x62
 80087ea:	d80a      	bhi.n	8008802 <_printf_i+0x32>
 80087ec:	2f00      	cmp	r7, #0
 80087ee:	f000 80d4 	beq.w	800899a <_printf_i+0x1ca>
 80087f2:	2f58      	cmp	r7, #88	; 0x58
 80087f4:	f000 80c0 	beq.w	8008978 <_printf_i+0x1a8>
 80087f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008800:	e03a      	b.n	8008878 <_printf_i+0xa8>
 8008802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008806:	2b15      	cmp	r3, #21
 8008808:	d8f6      	bhi.n	80087f8 <_printf_i+0x28>
 800880a:	a101      	add	r1, pc, #4	; (adr r1, 8008810 <_printf_i+0x40>)
 800880c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008810:	08008869 	.word	0x08008869
 8008814:	0800887d 	.word	0x0800887d
 8008818:	080087f9 	.word	0x080087f9
 800881c:	080087f9 	.word	0x080087f9
 8008820:	080087f9 	.word	0x080087f9
 8008824:	080087f9 	.word	0x080087f9
 8008828:	0800887d 	.word	0x0800887d
 800882c:	080087f9 	.word	0x080087f9
 8008830:	080087f9 	.word	0x080087f9
 8008834:	080087f9 	.word	0x080087f9
 8008838:	080087f9 	.word	0x080087f9
 800883c:	08008981 	.word	0x08008981
 8008840:	080088a9 	.word	0x080088a9
 8008844:	0800893b 	.word	0x0800893b
 8008848:	080087f9 	.word	0x080087f9
 800884c:	080087f9 	.word	0x080087f9
 8008850:	080089a3 	.word	0x080089a3
 8008854:	080087f9 	.word	0x080087f9
 8008858:	080088a9 	.word	0x080088a9
 800885c:	080087f9 	.word	0x080087f9
 8008860:	080087f9 	.word	0x080087f9
 8008864:	08008943 	.word	0x08008943
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	1d1a      	adds	r2, r3, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	602a      	str	r2, [r5, #0]
 8008870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008878:	2301      	movs	r3, #1
 800887a:	e09f      	b.n	80089bc <_printf_i+0x1ec>
 800887c:	6820      	ldr	r0, [r4, #0]
 800887e:	682b      	ldr	r3, [r5, #0]
 8008880:	0607      	lsls	r7, r0, #24
 8008882:	f103 0104 	add.w	r1, r3, #4
 8008886:	6029      	str	r1, [r5, #0]
 8008888:	d501      	bpl.n	800888e <_printf_i+0xbe>
 800888a:	681e      	ldr	r6, [r3, #0]
 800888c:	e003      	b.n	8008896 <_printf_i+0xc6>
 800888e:	0646      	lsls	r6, r0, #25
 8008890:	d5fb      	bpl.n	800888a <_printf_i+0xba>
 8008892:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008896:	2e00      	cmp	r6, #0
 8008898:	da03      	bge.n	80088a2 <_printf_i+0xd2>
 800889a:	232d      	movs	r3, #45	; 0x2d
 800889c:	4276      	negs	r6, r6
 800889e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a2:	485a      	ldr	r0, [pc, #360]	; (8008a0c <_printf_i+0x23c>)
 80088a4:	230a      	movs	r3, #10
 80088a6:	e012      	b.n	80088ce <_printf_i+0xfe>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	6820      	ldr	r0, [r4, #0]
 80088ac:	1d19      	adds	r1, r3, #4
 80088ae:	6029      	str	r1, [r5, #0]
 80088b0:	0605      	lsls	r5, r0, #24
 80088b2:	d501      	bpl.n	80088b8 <_printf_i+0xe8>
 80088b4:	681e      	ldr	r6, [r3, #0]
 80088b6:	e002      	b.n	80088be <_printf_i+0xee>
 80088b8:	0641      	lsls	r1, r0, #25
 80088ba:	d5fb      	bpl.n	80088b4 <_printf_i+0xe4>
 80088bc:	881e      	ldrh	r6, [r3, #0]
 80088be:	4853      	ldr	r0, [pc, #332]	; (8008a0c <_printf_i+0x23c>)
 80088c0:	2f6f      	cmp	r7, #111	; 0x6f
 80088c2:	bf0c      	ite	eq
 80088c4:	2308      	moveq	r3, #8
 80088c6:	230a      	movne	r3, #10
 80088c8:	2100      	movs	r1, #0
 80088ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ce:	6865      	ldr	r5, [r4, #4]
 80088d0:	60a5      	str	r5, [r4, #8]
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	bfa2      	ittt	ge
 80088d6:	6821      	ldrge	r1, [r4, #0]
 80088d8:	f021 0104 	bicge.w	r1, r1, #4
 80088dc:	6021      	strge	r1, [r4, #0]
 80088de:	b90e      	cbnz	r6, 80088e4 <_printf_i+0x114>
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	d04b      	beq.n	800897c <_printf_i+0x1ac>
 80088e4:	4615      	mov	r5, r2
 80088e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80088ea:	fb03 6711 	mls	r7, r3, r1, r6
 80088ee:	5dc7      	ldrb	r7, [r0, r7]
 80088f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088f4:	4637      	mov	r7, r6
 80088f6:	42bb      	cmp	r3, r7
 80088f8:	460e      	mov	r6, r1
 80088fa:	d9f4      	bls.n	80088e6 <_printf_i+0x116>
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d10b      	bne.n	8008918 <_printf_i+0x148>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	07de      	lsls	r6, r3, #31
 8008904:	d508      	bpl.n	8008918 <_printf_i+0x148>
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	6861      	ldr	r1, [r4, #4]
 800890a:	4299      	cmp	r1, r3
 800890c:	bfde      	ittt	le
 800890e:	2330      	movle	r3, #48	; 0x30
 8008910:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008914:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008918:	1b52      	subs	r2, r2, r5
 800891a:	6122      	str	r2, [r4, #16]
 800891c:	f8cd a000 	str.w	sl, [sp]
 8008920:	464b      	mov	r3, r9
 8008922:	aa03      	add	r2, sp, #12
 8008924:	4621      	mov	r1, r4
 8008926:	4640      	mov	r0, r8
 8008928:	f7ff fee4 	bl	80086f4 <_printf_common>
 800892c:	3001      	adds	r0, #1
 800892e:	d14a      	bne.n	80089c6 <_printf_i+0x1f6>
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	b004      	add	sp, #16
 8008936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	f043 0320 	orr.w	r3, r3, #32
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	4833      	ldr	r0, [pc, #204]	; (8008a10 <_printf_i+0x240>)
 8008944:	2778      	movs	r7, #120	; 0x78
 8008946:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	6829      	ldr	r1, [r5, #0]
 800894e:	061f      	lsls	r7, r3, #24
 8008950:	f851 6b04 	ldr.w	r6, [r1], #4
 8008954:	d402      	bmi.n	800895c <_printf_i+0x18c>
 8008956:	065f      	lsls	r7, r3, #25
 8008958:	bf48      	it	mi
 800895a:	b2b6      	uxthmi	r6, r6
 800895c:	07df      	lsls	r7, r3, #31
 800895e:	bf48      	it	mi
 8008960:	f043 0320 	orrmi.w	r3, r3, #32
 8008964:	6029      	str	r1, [r5, #0]
 8008966:	bf48      	it	mi
 8008968:	6023      	strmi	r3, [r4, #0]
 800896a:	b91e      	cbnz	r6, 8008974 <_printf_i+0x1a4>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	f023 0320 	bic.w	r3, r3, #32
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	2310      	movs	r3, #16
 8008976:	e7a7      	b.n	80088c8 <_printf_i+0xf8>
 8008978:	4824      	ldr	r0, [pc, #144]	; (8008a0c <_printf_i+0x23c>)
 800897a:	e7e4      	b.n	8008946 <_printf_i+0x176>
 800897c:	4615      	mov	r5, r2
 800897e:	e7bd      	b.n	80088fc <_printf_i+0x12c>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	6826      	ldr	r6, [r4, #0]
 8008984:	6961      	ldr	r1, [r4, #20]
 8008986:	1d18      	adds	r0, r3, #4
 8008988:	6028      	str	r0, [r5, #0]
 800898a:	0635      	lsls	r5, r6, #24
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	d501      	bpl.n	8008994 <_printf_i+0x1c4>
 8008990:	6019      	str	r1, [r3, #0]
 8008992:	e002      	b.n	800899a <_printf_i+0x1ca>
 8008994:	0670      	lsls	r0, r6, #25
 8008996:	d5fb      	bpl.n	8008990 <_printf_i+0x1c0>
 8008998:	8019      	strh	r1, [r3, #0]
 800899a:	2300      	movs	r3, #0
 800899c:	6123      	str	r3, [r4, #16]
 800899e:	4615      	mov	r5, r2
 80089a0:	e7bc      	b.n	800891c <_printf_i+0x14c>
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	1d1a      	adds	r2, r3, #4
 80089a6:	602a      	str	r2, [r5, #0]
 80089a8:	681d      	ldr	r5, [r3, #0]
 80089aa:	6862      	ldr	r2, [r4, #4]
 80089ac:	2100      	movs	r1, #0
 80089ae:	4628      	mov	r0, r5
 80089b0:	f7f7 fc16 	bl	80001e0 <memchr>
 80089b4:	b108      	cbz	r0, 80089ba <_printf_i+0x1ea>
 80089b6:	1b40      	subs	r0, r0, r5
 80089b8:	6060      	str	r0, [r4, #4]
 80089ba:	6863      	ldr	r3, [r4, #4]
 80089bc:	6123      	str	r3, [r4, #16]
 80089be:	2300      	movs	r3, #0
 80089c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c4:	e7aa      	b.n	800891c <_printf_i+0x14c>
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4649      	mov	r1, r9
 80089cc:	4640      	mov	r0, r8
 80089ce:	47d0      	blx	sl
 80089d0:	3001      	adds	r0, #1
 80089d2:	d0ad      	beq.n	8008930 <_printf_i+0x160>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	079b      	lsls	r3, r3, #30
 80089d8:	d413      	bmi.n	8008a02 <_printf_i+0x232>
 80089da:	68e0      	ldr	r0, [r4, #12]
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	4298      	cmp	r0, r3
 80089e0:	bfb8      	it	lt
 80089e2:	4618      	movlt	r0, r3
 80089e4:	e7a6      	b.n	8008934 <_printf_i+0x164>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4632      	mov	r2, r6
 80089ea:	4649      	mov	r1, r9
 80089ec:	4640      	mov	r0, r8
 80089ee:	47d0      	blx	sl
 80089f0:	3001      	adds	r0, #1
 80089f2:	d09d      	beq.n	8008930 <_printf_i+0x160>
 80089f4:	3501      	adds	r5, #1
 80089f6:	68e3      	ldr	r3, [r4, #12]
 80089f8:	9903      	ldr	r1, [sp, #12]
 80089fa:	1a5b      	subs	r3, r3, r1
 80089fc:	42ab      	cmp	r3, r5
 80089fe:	dcf2      	bgt.n	80089e6 <_printf_i+0x216>
 8008a00:	e7eb      	b.n	80089da <_printf_i+0x20a>
 8008a02:	2500      	movs	r5, #0
 8008a04:	f104 0619 	add.w	r6, r4, #25
 8008a08:	e7f5      	b.n	80089f6 <_printf_i+0x226>
 8008a0a:	bf00      	nop
 8008a0c:	08008fc9 	.word	0x08008fc9
 8008a10:	08008fda 	.word	0x08008fda

08008a14 <__sflush_r>:
 8008a14:	898a      	ldrh	r2, [r1, #12]
 8008a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	0710      	lsls	r0, r2, #28
 8008a1e:	460c      	mov	r4, r1
 8008a20:	d458      	bmi.n	8008ad4 <__sflush_r+0xc0>
 8008a22:	684b      	ldr	r3, [r1, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dc05      	bgt.n	8008a34 <__sflush_r+0x20>
 8008a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	dc02      	bgt.n	8008a34 <__sflush_r+0x20>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	d0f9      	beq.n	8008a2e <__sflush_r+0x1a>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a40:	682f      	ldr	r7, [r5, #0]
 8008a42:	6a21      	ldr	r1, [r4, #32]
 8008a44:	602b      	str	r3, [r5, #0]
 8008a46:	d032      	beq.n	8008aae <__sflush_r+0x9a>
 8008a48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	075a      	lsls	r2, r3, #29
 8008a4e:	d505      	bpl.n	8008a5c <__sflush_r+0x48>
 8008a50:	6863      	ldr	r3, [r4, #4]
 8008a52:	1ac0      	subs	r0, r0, r3
 8008a54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a56:	b10b      	cbz	r3, 8008a5c <__sflush_r+0x48>
 8008a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a5a:	1ac0      	subs	r0, r0, r3
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4602      	mov	r2, r0
 8008a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a62:	6a21      	ldr	r1, [r4, #32]
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b0      	blx	r6
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	d106      	bne.n	8008a7c <__sflush_r+0x68>
 8008a6e:	6829      	ldr	r1, [r5, #0]
 8008a70:	291d      	cmp	r1, #29
 8008a72:	d82b      	bhi.n	8008acc <__sflush_r+0xb8>
 8008a74:	4a29      	ldr	r2, [pc, #164]	; (8008b1c <__sflush_r+0x108>)
 8008a76:	410a      	asrs	r2, r1
 8008a78:	07d6      	lsls	r6, r2, #31
 8008a7a:	d427      	bmi.n	8008acc <__sflush_r+0xb8>
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	6062      	str	r2, [r4, #4]
 8008a80:	04d9      	lsls	r1, r3, #19
 8008a82:	6922      	ldr	r2, [r4, #16]
 8008a84:	6022      	str	r2, [r4, #0]
 8008a86:	d504      	bpl.n	8008a92 <__sflush_r+0x7e>
 8008a88:	1c42      	adds	r2, r0, #1
 8008a8a:	d101      	bne.n	8008a90 <__sflush_r+0x7c>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b903      	cbnz	r3, 8008a92 <__sflush_r+0x7e>
 8008a90:	6560      	str	r0, [r4, #84]	; 0x54
 8008a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a94:	602f      	str	r7, [r5, #0]
 8008a96:	2900      	cmp	r1, #0
 8008a98:	d0c9      	beq.n	8008a2e <__sflush_r+0x1a>
 8008a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a9e:	4299      	cmp	r1, r3
 8008aa0:	d002      	beq.n	8008aa8 <__sflush_r+0x94>
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f7ff fbea 	bl	800827c <_free_r>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	6360      	str	r0, [r4, #52]	; 0x34
 8008aac:	e7c0      	b.n	8008a30 <__sflush_r+0x1c>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	47b0      	blx	r6
 8008ab4:	1c41      	adds	r1, r0, #1
 8008ab6:	d1c8      	bne.n	8008a4a <__sflush_r+0x36>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0c5      	beq.n	8008a4a <__sflush_r+0x36>
 8008abe:	2b1d      	cmp	r3, #29
 8008ac0:	d001      	beq.n	8008ac6 <__sflush_r+0xb2>
 8008ac2:	2b16      	cmp	r3, #22
 8008ac4:	d101      	bne.n	8008aca <__sflush_r+0xb6>
 8008ac6:	602f      	str	r7, [r5, #0]
 8008ac8:	e7b1      	b.n	8008a2e <__sflush_r+0x1a>
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	e7ad      	b.n	8008a30 <__sflush_r+0x1c>
 8008ad4:	690f      	ldr	r7, [r1, #16]
 8008ad6:	2f00      	cmp	r7, #0
 8008ad8:	d0a9      	beq.n	8008a2e <__sflush_r+0x1a>
 8008ada:	0793      	lsls	r3, r2, #30
 8008adc:	680e      	ldr	r6, [r1, #0]
 8008ade:	bf08      	it	eq
 8008ae0:	694b      	ldreq	r3, [r1, #20]
 8008ae2:	600f      	str	r7, [r1, #0]
 8008ae4:	bf18      	it	ne
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	eba6 0807 	sub.w	r8, r6, r7
 8008aec:	608b      	str	r3, [r1, #8]
 8008aee:	f1b8 0f00 	cmp.w	r8, #0
 8008af2:	dd9c      	ble.n	8008a2e <__sflush_r+0x1a>
 8008af4:	6a21      	ldr	r1, [r4, #32]
 8008af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008af8:	4643      	mov	r3, r8
 8008afa:	463a      	mov	r2, r7
 8008afc:	4628      	mov	r0, r5
 8008afe:	47b0      	blx	r6
 8008b00:	2800      	cmp	r0, #0
 8008b02:	dc06      	bgt.n	8008b12 <__sflush_r+0xfe>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b0a:	81a3      	strh	r3, [r4, #12]
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	e78e      	b.n	8008a30 <__sflush_r+0x1c>
 8008b12:	4407      	add	r7, r0
 8008b14:	eba8 0800 	sub.w	r8, r8, r0
 8008b18:	e7e9      	b.n	8008aee <__sflush_r+0xda>
 8008b1a:	bf00      	nop
 8008b1c:	dfbffffe 	.word	0xdfbffffe

08008b20 <_fflush_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	690b      	ldr	r3, [r1, #16]
 8008b24:	4605      	mov	r5, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	b913      	cbnz	r3, 8008b30 <_fflush_r+0x10>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	b118      	cbz	r0, 8008b3a <_fflush_r+0x1a>
 8008b32:	6a03      	ldr	r3, [r0, #32]
 8008b34:	b90b      	cbnz	r3, 8008b3a <_fflush_r+0x1a>
 8008b36:	f7ff fa35 	bl	8007fa4 <__sinit>
 8008b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f3      	beq.n	8008b2a <_fflush_r+0xa>
 8008b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b44:	07d0      	lsls	r0, r2, #31
 8008b46:	d404      	bmi.n	8008b52 <_fflush_r+0x32>
 8008b48:	0599      	lsls	r1, r3, #22
 8008b4a:	d402      	bmi.n	8008b52 <_fflush_r+0x32>
 8008b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b4e:	f7ff fb84 	bl	800825a <__retarget_lock_acquire_recursive>
 8008b52:	4628      	mov	r0, r5
 8008b54:	4621      	mov	r1, r4
 8008b56:	f7ff ff5d 	bl	8008a14 <__sflush_r>
 8008b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b5c:	07da      	lsls	r2, r3, #31
 8008b5e:	4605      	mov	r5, r0
 8008b60:	d4e4      	bmi.n	8008b2c <_fflush_r+0xc>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	059b      	lsls	r3, r3, #22
 8008b66:	d4e1      	bmi.n	8008b2c <_fflush_r+0xc>
 8008b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b6a:	f7ff fb77 	bl	800825c <__retarget_lock_release_recursive>
 8008b6e:	e7dd      	b.n	8008b2c <_fflush_r+0xc>

08008b70 <__swbuf_r>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	460e      	mov	r6, r1
 8008b74:	4614      	mov	r4, r2
 8008b76:	4605      	mov	r5, r0
 8008b78:	b118      	cbz	r0, 8008b82 <__swbuf_r+0x12>
 8008b7a:	6a03      	ldr	r3, [r0, #32]
 8008b7c:	b90b      	cbnz	r3, 8008b82 <__swbuf_r+0x12>
 8008b7e:	f7ff fa11 	bl	8007fa4 <__sinit>
 8008b82:	69a3      	ldr	r3, [r4, #24]
 8008b84:	60a3      	str	r3, [r4, #8]
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	071a      	lsls	r2, r3, #28
 8008b8a:	d525      	bpl.n	8008bd8 <__swbuf_r+0x68>
 8008b8c:	6923      	ldr	r3, [r4, #16]
 8008b8e:	b31b      	cbz	r3, 8008bd8 <__swbuf_r+0x68>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	6922      	ldr	r2, [r4, #16]
 8008b94:	1a98      	subs	r0, r3, r2
 8008b96:	6963      	ldr	r3, [r4, #20]
 8008b98:	b2f6      	uxtb	r6, r6
 8008b9a:	4283      	cmp	r3, r0
 8008b9c:	4637      	mov	r7, r6
 8008b9e:	dc04      	bgt.n	8008baa <__swbuf_r+0x3a>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7ff ffbc 	bl	8008b20 <_fflush_r>
 8008ba8:	b9e0      	cbnz	r0, 8008be4 <__swbuf_r+0x74>
 8008baa:	68a3      	ldr	r3, [r4, #8]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	60a3      	str	r3, [r4, #8]
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	6022      	str	r2, [r4, #0]
 8008bb6:	701e      	strb	r6, [r3, #0]
 8008bb8:	6962      	ldr	r2, [r4, #20]
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d004      	beq.n	8008bca <__swbuf_r+0x5a>
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	07db      	lsls	r3, r3, #31
 8008bc4:	d506      	bpl.n	8008bd4 <__swbuf_r+0x64>
 8008bc6:	2e0a      	cmp	r6, #10
 8008bc8:	d104      	bne.n	8008bd4 <__swbuf_r+0x64>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f7ff ffa7 	bl	8008b20 <_fflush_r>
 8008bd2:	b938      	cbnz	r0, 8008be4 <__swbuf_r+0x74>
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f000 f806 	bl	8008bec <__swsetup_r>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d0d5      	beq.n	8008b90 <__swbuf_r+0x20>
 8008be4:	f04f 37ff 	mov.w	r7, #4294967295
 8008be8:	e7f4      	b.n	8008bd4 <__swbuf_r+0x64>
	...

08008bec <__swsetup_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4b2a      	ldr	r3, [pc, #168]	; (8008c98 <__swsetup_r+0xac>)
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	b118      	cbz	r0, 8008c00 <__swsetup_r+0x14>
 8008bf8:	6a03      	ldr	r3, [r0, #32]
 8008bfa:	b90b      	cbnz	r3, 8008c00 <__swsetup_r+0x14>
 8008bfc:	f7ff f9d2 	bl	8007fa4 <__sinit>
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c06:	0718      	lsls	r0, r3, #28
 8008c08:	d422      	bmi.n	8008c50 <__swsetup_r+0x64>
 8008c0a:	06d9      	lsls	r1, r3, #27
 8008c0c:	d407      	bmi.n	8008c1e <__swsetup_r+0x32>
 8008c0e:	2309      	movs	r3, #9
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1c:	e034      	b.n	8008c88 <__swsetup_r+0x9c>
 8008c1e:	0758      	lsls	r0, r3, #29
 8008c20:	d512      	bpl.n	8008c48 <__swsetup_r+0x5c>
 8008c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c24:	b141      	cbz	r1, 8008c38 <__swsetup_r+0x4c>
 8008c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	d002      	beq.n	8008c34 <__swsetup_r+0x48>
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f7ff fb24 	bl	800827c <_free_r>
 8008c34:	2300      	movs	r3, #0
 8008c36:	6363      	str	r3, [r4, #52]	; 0x34
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	2300      	movs	r3, #0
 8008c42:	6063      	str	r3, [r4, #4]
 8008c44:	6923      	ldr	r3, [r4, #16]
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	f043 0308 	orr.w	r3, r3, #8
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	b94b      	cbnz	r3, 8008c68 <__swsetup_r+0x7c>
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c5e:	d003      	beq.n	8008c68 <__swsetup_r+0x7c>
 8008c60:	4621      	mov	r1, r4
 8008c62:	4628      	mov	r0, r5
 8008c64:	f000 f850 	bl	8008d08 <__smakebuf_r>
 8008c68:	89a0      	ldrh	r0, [r4, #12]
 8008c6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c6e:	f010 0301 	ands.w	r3, r0, #1
 8008c72:	d00a      	beq.n	8008c8a <__swsetup_r+0x9e>
 8008c74:	2300      	movs	r3, #0
 8008c76:	60a3      	str	r3, [r4, #8]
 8008c78:	6963      	ldr	r3, [r4, #20]
 8008c7a:	425b      	negs	r3, r3
 8008c7c:	61a3      	str	r3, [r4, #24]
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	b943      	cbnz	r3, 8008c94 <__swsetup_r+0xa8>
 8008c82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c86:	d1c4      	bne.n	8008c12 <__swsetup_r+0x26>
 8008c88:	bd38      	pop	{r3, r4, r5, pc}
 8008c8a:	0781      	lsls	r1, r0, #30
 8008c8c:	bf58      	it	pl
 8008c8e:	6963      	ldrpl	r3, [r4, #20]
 8008c90:	60a3      	str	r3, [r4, #8]
 8008c92:	e7f4      	b.n	8008c7e <__swsetup_r+0x92>
 8008c94:	2000      	movs	r0, #0
 8008c96:	e7f7      	b.n	8008c88 <__swsetup_r+0x9c>
 8008c98:	20000068 	.word	0x20000068

08008c9c <_sbrk_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	4d06      	ldr	r5, [pc, #24]	; (8008cb8 <_sbrk_r+0x1c>)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	602b      	str	r3, [r5, #0]
 8008ca8:	f7f8 fc70 	bl	800158c <_sbrk>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_sbrk_r+0x1a>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_sbrk_r+0x1a>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	20004d5c 	.word	0x20004d5c

08008cbc <__swhatbuf_r>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	b096      	sub	sp, #88	; 0x58
 8008cc8:	4615      	mov	r5, r2
 8008cca:	461e      	mov	r6, r3
 8008ccc:	da0d      	bge.n	8008cea <__swhatbuf_r+0x2e>
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cd4:	f04f 0100 	mov.w	r1, #0
 8008cd8:	bf0c      	ite	eq
 8008cda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008cde:	2340      	movne	r3, #64	; 0x40
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	6031      	str	r1, [r6, #0]
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	b016      	add	sp, #88	; 0x58
 8008ce8:	bd70      	pop	{r4, r5, r6, pc}
 8008cea:	466a      	mov	r2, sp
 8008cec:	f000 f848 	bl	8008d80 <_fstat_r>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	dbec      	blt.n	8008cce <__swhatbuf_r+0x12>
 8008cf4:	9901      	ldr	r1, [sp, #4]
 8008cf6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008cfa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008cfe:	4259      	negs	r1, r3
 8008d00:	4159      	adcs	r1, r3
 8008d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d06:	e7eb      	b.n	8008ce0 <__swhatbuf_r+0x24>

08008d08 <__smakebuf_r>:
 8008d08:	898b      	ldrh	r3, [r1, #12]
 8008d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d0c:	079d      	lsls	r5, r3, #30
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	d507      	bpl.n	8008d24 <__smakebuf_r+0x1c>
 8008d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	6123      	str	r3, [r4, #16]
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	6163      	str	r3, [r4, #20]
 8008d20:	b002      	add	sp, #8
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	ab01      	add	r3, sp, #4
 8008d26:	466a      	mov	r2, sp
 8008d28:	f7ff ffc8 	bl	8008cbc <__swhatbuf_r>
 8008d2c:	9900      	ldr	r1, [sp, #0]
 8008d2e:	4605      	mov	r5, r0
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7ff fb0f 	bl	8008354 <_malloc_r>
 8008d36:	b948      	cbnz	r0, 8008d4c <__smakebuf_r+0x44>
 8008d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d3c:	059a      	lsls	r2, r3, #22
 8008d3e:	d4ef      	bmi.n	8008d20 <__smakebuf_r+0x18>
 8008d40:	f023 0303 	bic.w	r3, r3, #3
 8008d44:	f043 0302 	orr.w	r3, r3, #2
 8008d48:	81a3      	strh	r3, [r4, #12]
 8008d4a:	e7e3      	b.n	8008d14 <__smakebuf_r+0xc>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	6020      	str	r0, [r4, #0]
 8008d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d54:	81a3      	strh	r3, [r4, #12]
 8008d56:	9b00      	ldr	r3, [sp, #0]
 8008d58:	6163      	str	r3, [r4, #20]
 8008d5a:	9b01      	ldr	r3, [sp, #4]
 8008d5c:	6120      	str	r0, [r4, #16]
 8008d5e:	b15b      	cbz	r3, 8008d78 <__smakebuf_r+0x70>
 8008d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d64:	4630      	mov	r0, r6
 8008d66:	f000 f81d 	bl	8008da4 <_isatty_r>
 8008d6a:	b128      	cbz	r0, 8008d78 <__smakebuf_r+0x70>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f023 0303 	bic.w	r3, r3, #3
 8008d72:	f043 0301 	orr.w	r3, r3, #1
 8008d76:	81a3      	strh	r3, [r4, #12]
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	431d      	orrs	r5, r3
 8008d7c:	81a5      	strh	r5, [r4, #12]
 8008d7e:	e7cf      	b.n	8008d20 <__smakebuf_r+0x18>

08008d80 <_fstat_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d07      	ldr	r5, [pc, #28]	; (8008da0 <_fstat_r+0x20>)
 8008d84:	2300      	movs	r3, #0
 8008d86:	4604      	mov	r4, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	f7f8 fbd4 	bl	800153a <_fstat>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d102      	bne.n	8008d9c <_fstat_r+0x1c>
 8008d96:	682b      	ldr	r3, [r5, #0]
 8008d98:	b103      	cbz	r3, 8008d9c <_fstat_r+0x1c>
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	bd38      	pop	{r3, r4, r5, pc}
 8008d9e:	bf00      	nop
 8008da0:	20004d5c 	.word	0x20004d5c

08008da4 <_isatty_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d06      	ldr	r5, [pc, #24]	; (8008dc0 <_isatty_r+0x1c>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	f7f8 fbd3 	bl	800155a <_isatty>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_isatty_r+0x1a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_isatty_r+0x1a>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	20004d5c 	.word	0x20004d5c

08008dc4 <_init>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	bf00      	nop
 8008dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dca:	bc08      	pop	{r3}
 8008dcc:	469e      	mov	lr, r3
 8008dce:	4770      	bx	lr

08008dd0 <_fini>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr
