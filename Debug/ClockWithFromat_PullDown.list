
ClockWithFromat_PullDown.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000937c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009740  08009740  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009740  08009740  00019740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009748  08009748  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800974c  0800974c  0001974c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d04  2000006c  080097bc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d70  080097bc  00024d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e2e2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004816  00000000  00000000  0003e3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  00042bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013cd  00000000  00000000  00044580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bdbb  00000000  00000000  0004594d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f58b  00000000  00000000  00061708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2b04  00000000  00000000  00080c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071ec  00000000  00000000  00123798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0012a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009504 	.word	0x08009504

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08009504 	.word	0x08009504

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <setSegments>:
typedef enum {
    AM,PM,Format24
} TimeFormatType;


void setSegments(uint8_t number) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
        0b00000111, // 7
        0b01111111, // 8
        0b01101111  // 9
    };

    uint8_t segments = segmentMap[number];
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a2c      	ldr	r2, [pc, #176]	; (800063c <setSegments+0xc0>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	73fb      	strb	r3, [r7, #15]

    GPIO_PinState PinA_State = (segments & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState PinB_State = (segments & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	105b      	asrs	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	737b      	strb	r3, [r7, #13]
    GPIO_PinState PinC_State = (segments & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	109b      	asrs	r3, r3, #2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	733b      	strb	r3, [r7, #12]
    GPIO_PinState PinD_State = (segments & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	10db      	asrs	r3, r3, #3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	72fb      	strb	r3, [r7, #11]
    GPIO_PinState PinE_State = (segments & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	111b      	asrs	r3, r3, #4
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	72bb      	strb	r3, [r7, #10]
    GPIO_PinState PinF_State = (segments & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	115b      	asrs	r3, r3, #5
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	727b      	strb	r3, [r7, #9]
    GPIO_PinState PinG_State = (segments & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	119b      	asrs	r3, r3, #6
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	723b      	strb	r3, [r7, #8]

    // Corresponding HAL_GPIO_WritePin calls
    HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, PinA_State);
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	461a      	mov	r2, r3
 80005e2:	2101      	movs	r1, #1
 80005e4:	4816      	ldr	r0, [pc, #88]	; (8000640 <setSegments+0xc4>)
 80005e6:	f002 fa15 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, PinB_State);
 80005ea:	7b7b      	ldrb	r3, [r7, #13]
 80005ec:	461a      	mov	r2, r3
 80005ee:	2102      	movs	r1, #2
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <setSegments+0xc4>)
 80005f2:	f002 fa0f 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, PinC_State);
 80005f6:	7b3b      	ldrb	r3, [r7, #12]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2110      	movs	r1, #16
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <setSegments+0xc4>)
 80005fe:	f002 fa09 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, PinD_State);
 8000602:	7afb      	ldrb	r3, [r7, #11]
 8000604:	461a      	mov	r2, r3
 8000606:	2101      	movs	r1, #1
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <setSegments+0xc8>)
 800060a:	f002 fa03 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, PinE_State);
 800060e:	7abb      	ldrb	r3, [r7, #10]
 8000610:	461a      	mov	r2, r3
 8000612:	2102      	movs	r1, #2
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <setSegments+0xcc>)
 8000616:	f002 f9fd 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, PinF_State);
 800061a:	7a7b      	ldrb	r3, [r7, #9]
 800061c:	461a      	mov	r2, r3
 800061e:	2101      	movs	r1, #1
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <setSegments+0xcc>)
 8000622:	f002 f9f7 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, PinG_State);
 8000626:	7a3b      	ldrb	r3, [r7, #8]
 8000628:	461a      	mov	r2, r3
 800062a:	2104      	movs	r1, #4
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <setSegments+0xcc>)
 800062e:	f002 f9f1 	bl	8002a14 <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	080095e4 	.word	0x080095e4
 8000640:	40020000 	.word	0x40020000
 8000644:	40020400 	.word	0x40020400
 8000648:	40020800 	.word	0x40020800

0800064c <SetCathode>:

void SetCathode(uint8_t Digit)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState Cathode1_Pin_State = (Digit & 0b00000001)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf0c      	ite	eq
 8000660:	2301      	moveq	r3, #1
 8000662:	2300      	movne	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState Cathode2_Pin_State = (Digit & 0b00000010)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(Cathode_1_GPIO_Port, Cathode_1_Pin, Cathode1_Pin_State);
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	461a      	mov	r2, r3
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <SetCathode+0x54>)
 8000684:	f002 f9c6 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Cathode_2_GPIO_Port, Cathode_2_Pin, Cathode2_Pin_State);
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	461a      	mov	r2, r3
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <SetCathode+0x54>)
 8000692:	f002 f9bf 	bl	8002a14 <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020800 	.word	0x40020800

080006a4 <WriteDigit>:

void WriteDigit(uint8_t Digit,uint8_t number)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
	setSegments(number);
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff60 	bl	800057c <setSegments>
	SetCathode(Digit);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffc4 	bl	800064c <SetCathode>

}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <WriteNumber>:

void WriteNumber(uint8_t number)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
    // Ensure the number is within the range of two digits (0-99)
    if (number > 99) {
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b63      	cmp	r3, #99	; 0x63
 80006da:	d821      	bhi.n	8000720 <WriteNumber+0x54>
        return; // Or handle the error as needed
    }

    uint8_t firstDigit = number / 10;  // Extract the first digit
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <WriteNumber+0x5c>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	73fb      	strb	r3, [r7, #15]
    uint8_t secondDigit = number % 10; // Extract the second digit
 80006e8:	79fa      	ldrb	r2, [r7, #7]
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <WriteNumber+0x5c>)
 80006ec:	fba3 1302 	umull	r1, r3, r3, r2
 80006f0:	08d9      	lsrs	r1, r3, #3
 80006f2:	460b      	mov	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	73bb      	strb	r3, [r7, #14]
  //  for(uint8_t counter = 0; counter <20; counter++ )
   //{
    // Display the first digit
    WriteDigit(1, firstDigit);
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	4619      	mov	r1, r3
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ffce 	bl	80006a4 <WriteDigit>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 8000708:	2005      	movs	r0, #5
 800070a:	f004 fe7e 	bl	800540a <osDelay>

    // Display the second digit
    WriteDigit(2, secondDigit);
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	4619      	mov	r1, r3
 8000712:	2002      	movs	r0, #2
 8000714:	f7ff ffc6 	bl	80006a4 <WriteDigit>
    osDelay(pdMS_TO_TICKS(5)); // Wait for 50ms
 8000718:	2005      	movs	r0, #5
 800071a:	f004 fe76 	bl	800540a <osDelay>
 800071e:	e000      	b.n	8000722 <WriteNumber+0x56>
        return; // Or handle the error as needed
 8000720:	bf00      	nop
}
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	cccccccd 	.word	0xcccccccd

0800072c <FourDigitsetSegments>:

void FourDigitsetSegments(uint8_t number) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
        0b00110111, // 15 (M, simplified representation)
        0b01110011  // 16 (P)
    };


    uint8_t segments = segmentMap[number];
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4a32      	ldr	r2, [pc, #200]	; (8000804 <FourDigitsetSegments+0xd8>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	75fb      	strb	r3, [r7, #23]

    GPIO_PinState FourDigitsPinA_State = (segments & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	75bb      	strb	r3, [r7, #22]
    GPIO_PinState FourDigitsPinB_State = (segments & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	105b      	asrs	r3, r3, #1
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	757b      	strb	r3, [r7, #21]
    GPIO_PinState FourDigitsPinC_State = (segments & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	109b      	asrs	r3, r3, #2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	753b      	strb	r3, [r7, #20]
    GPIO_PinState FourDigitsPinD_State = (segments & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800075e:	7dfb      	ldrb	r3, [r7, #23]
 8000760:	10db      	asrs	r3, r3, #3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	74fb      	strb	r3, [r7, #19]
    GPIO_PinState FourDigitsPinE_State = (segments & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	111b      	asrs	r3, r3, #4
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	74bb      	strb	r3, [r7, #18]
    GPIO_PinState FourDigitsPinF_State = (segments & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	115b      	asrs	r3, r3, #5
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	747b      	strb	r3, [r7, #17]
    GPIO_PinState FourDigitsPinG_State = (segments & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000782:	7dfb      	ldrb	r3, [r7, #23]
 8000784:	119b      	asrs	r3, r3, #6
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	743b      	strb	r3, [r7, #16]
    GPIO_PinState FourDigitsPinDP_State = (segments & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	09db      	lsrs	r3, r3, #7
 8000792:	73fb      	strb	r3, [r7, #15]

    // Corresponding HAL_GPIO_WritePin calls
    HAL_GPIO_WritePin(FourDigitA_GPIO_Port, FourDigitA_Pin, FourDigitsPinA_State);
 8000794:	7dbb      	ldrb	r3, [r7, #22]
 8000796:	461a      	mov	r2, r3
 8000798:	2104      	movs	r1, #4
 800079a:	481b      	ldr	r0, [pc, #108]	; (8000808 <FourDigitsetSegments+0xdc>)
 800079c:	f002 f93a 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitB_GPIO_Port, FourDigitB_Pin, FourDigitsPinB_State);
 80007a0:	7d7b      	ldrb	r3, [r7, #21]
 80007a2:	461a      	mov	r2, r3
 80007a4:	2102      	movs	r1, #2
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007a8:	f002 f934 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitC_GPIO_Port, FourDigitC_Pin, FourDigitsPinC_State);
 80007ac:	7d3b      	ldrb	r3, [r7, #20]
 80007ae:	461a      	mov	r2, r3
 80007b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b4:	4814      	ldr	r0, [pc, #80]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007b6:	f002 f92d 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD_GPIO_Port, FourDigitD_Pin, FourDigitsPinD_State);
 80007ba:	7cfb      	ldrb	r3, [r7, #19]
 80007bc:	461a      	mov	r2, r3
 80007be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007c4:	f002 f926 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitE_GPIO_Port, FourDigitE_Pin, FourDigitsPinE_State);
 80007c8:	7cbb      	ldrb	r3, [r7, #18]
 80007ca:	461a      	mov	r2, r3
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007d2:	f002 f91f 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitF_GPIO_Port, FourDigitF_Pin, FourDigitsPinF_State);
 80007d6:	7c7b      	ldrb	r3, [r7, #17]
 80007d8:	461a      	mov	r2, r3
 80007da:	2110      	movs	r1, #16
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <FourDigitsetSegments+0xe0>)
 80007de:	f002 f919 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitG_GPIO_Port, FourDigitG_Pin, FourDigitsPinG_State);
 80007e2:	7c3b      	ldrb	r3, [r7, #16]
 80007e4:	461a      	mov	r2, r3
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <FourDigitsetSegments+0xe4>)
 80007ec:	f002 f912 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, FourDigitsPinDP_State);
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	461a      	mov	r2, r3
 80007f4:	2110      	movs	r1, #16
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <FourDigitsetSegments+0xdc>)
 80007f8:	f002 f90c 	bl	8002a14 <HAL_GPIO_WritePin>

}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	080095f0 	.word	0x080095f0
 8000808:	40020400 	.word	0x40020400
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <FourDigitsSetCathode>:

void FourDigitsSetCathode(uint8_t Digit)
{	//Problem Here
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState FourDigitsCathodeD1_Pin_State = (Digit == 1)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b01      	cmp	r3, #1
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState FourDigitsCathodeD2_Pin_State = (Digit == 2)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b02      	cmp	r3, #2
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState FourDigitsCathodeD3_Pin_State = (Digit == 3)? GPIO_PIN_RESET : GPIO_PIN_SET;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b03      	cmp	r3, #3
 800083e:	bf14      	ite	ne
 8000840:	2301      	movne	r3, #1
 8000842:	2300      	moveq	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	737b      	strb	r3, [r7, #13]
	GPIO_PinState FourDigitsCathodeD4_Pin_State = (Digit == 4)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b04      	cmp	r3, #4
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	733b      	strb	r3, [r7, #12]



    HAL_GPIO_WritePin(FourDigitD1_GPIO_Port, FourDigitD1_Pin, FourDigitsCathodeD1_Pin_State);
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	461a      	mov	r2, r3
 800085a:	2120      	movs	r1, #32
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <FourDigitsSetCathode+0x80>)
 800085e:	f002 f8d9 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD2_GPIO_Port, FourDigitD2_Pin, FourDigitsCathodeD2_Pin_State);
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	461a      	mov	r2, r3
 8000866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <FourDigitsSetCathode+0x84>)
 800086c:	f002 f8d2 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD3_GPIO_Port, FourDigitD3_Pin, FourDigitsCathodeD3_Pin_State);
 8000870:	7b7b      	ldrb	r3, [r7, #13]
 8000872:	461a      	mov	r2, r3
 8000874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <FourDigitsSetCathode+0x84>)
 800087a:	f002 f8cb 	bl	8002a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD4_GPIO_Port, FourDigitD4_Pin, FourDigitsCathodeD4_Pin_State);
 800087e:	7b3b      	ldrb	r3, [r7, #12]
 8000880:	461a      	mov	r2, r3
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <FourDigitsSetCathode+0x84>)
 8000886:	f002 f8c5 	bl	8002a14 <HAL_GPIO_WritePin>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40020400 	.word	0x40020400
 8000898:	40020000 	.word	0x40020000

0800089c <FourDigitsWrite>:
void FourDigitsWrite(uint8_t Digit,uint8_t number)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
	FourDigitsetSegments(number);
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff3c 	bl	800072c <FourDigitsetSegments>
	FourDigitsSetCathode(Digit);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffac 	bl	8000814 <FourDigitsSetCathode>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <DisplayTime>:
	  FourDigitsSetCathode(3);
	  HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, State);
}

void DisplayTime(RTC_TimeTypeDef Time, RTC_DateTypeDef Date, osMutexId_t UartMutexHandle)
{
 80008c4:	b084      	sub	sp, #16
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	f107 0c10 	add.w	ip, r7, #16
 80008d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f107 0110 	add.w	r1, r7, #16
 80008da:	4845      	ldr	r0, [pc, #276]	; (80009f0 <DisplayTime+0x12c>)
 80008dc:	f002 ffa2 	bl	8003824 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	2200      	movs	r2, #0
 80008e6:	4619      	mov	r1, r3
 80008e8:	4841      	ldr	r0, [pc, #260]	; (80009f0 <DisplayTime+0x12c>)
 80008ea:	f003 f87d 	bl	80039e8 <HAL_RTC_GetDate>


	  HoursFirstDigit = Time.Hours / 10;  // Extract the first digit
 80008ee:	7c3b      	ldrb	r3, [r7, #16]
 80008f0:	4a40      	ldr	r2, [pc, #256]	; (80009f4 <DisplayTime+0x130>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <DisplayTime+0x134>)
 80008fc:	701a      	strb	r2, [r3, #0]
	  HoursSecondDigit=Time.Hours % 10; // Extract the second digit
 80008fe:	7c3a      	ldrb	r2, [r7, #16]
 8000900:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <DisplayTime+0x130>)
 8000902:	fba3 1302 	umull	r1, r3, r3, r2
 8000906:	08d9      	lsrs	r1, r3, #3
 8000908:	460b      	mov	r3, r1
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	440b      	add	r3, r1
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b39      	ldr	r3, [pc, #228]	; (80009fc <DisplayTime+0x138>)
 8000916:	701a      	strb	r2, [r3, #0]

	  MinutsFirstDigit = Time.Minutes / 10;  // Extract the first digit
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	4a36      	ldr	r2, [pc, #216]	; (80009f4 <DisplayTime+0x130>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	08db      	lsrs	r3, r3, #3
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <DisplayTime+0x13c>)
 8000926:	701a      	strb	r2, [r3, #0]
	  MinutsSecondDigit=Time.Minutes % 10; // Extract the second digit
 8000928:	7c7a      	ldrb	r2, [r7, #17]
 800092a:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <DisplayTime+0x130>)
 800092c:	fba3 1302 	umull	r1, r3, r3, r2
 8000930:	08d9      	lsrs	r1, r3, #3
 8000932:	460b      	mov	r3, r1
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	440b      	add	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <DisplayTime+0x140>)
 8000940:	701a      	strb	r2, [r3, #0]


	    // Display the first digit
	    FourDigitsWrite(4, HoursFirstDigit);
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <DisplayTime+0x134>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	2004      	movs	r0, #4
 800094a:	f7ff ffa7 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 800094e:	2001      	movs	r0, #1
 8000950:	f004 fd5b 	bl	800540a <osDelay>

	    // Display the second digit
	    FourDigitsWrite(3, HoursSecondDigit);
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <DisplayTime+0x138>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	2003      	movs	r0, #3
 800095c:	f7ff ff9e 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000960:	2001      	movs	r0, #1
 8000962:	f004 fd52 	bl	800540a <osDelay>


	    FourDigitsWrite(2, MinutsFirstDigit);
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <DisplayTime+0x13c>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff ff95 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000972:	2001      	movs	r0, #1
 8000974:	f004 fd49 	bl	800540a <osDelay>

	    FourDigitsWrite(1, MinutsSecondDigit);
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <DisplayTime+0x140>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff ff8c 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000984:	2001      	movs	r0, #1
 8000986:	f004 fd40 	bl	800540a <osDelay>

	    	uint32_t currentTick = osKernelGetTickCount();
 800098a:	f004 fc97 	bl	80052bc <osKernelGetTickCount>
 800098e:	6078      	str	r0, [r7, #4]
	    	 if (currentTick - lastTick >= 500) {
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <DisplayTime+0x144>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800099c:	d311      	bcc.n	80009c2 <DisplayTime+0xfe>
	    		 DpState = !DpState;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <DisplayTime+0x148>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f083 0301 	eor.w	r3, r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <DisplayTime+0x148>)
 80009ba:	701a      	strb	r2, [r3, #0]
	    	       lastTick = currentTick;
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <DisplayTime+0x144>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
	    	        }
	    if(DpState)
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <DisplayTime+0x148>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d004      	beq.n	80009d4 <DisplayTime+0x110>
	    {
	    	FourDigitsWrite(3, 10);
 80009ca:	210a      	movs	r1, #10
 80009cc:	2003      	movs	r0, #3
 80009ce:	f7ff ff65 	bl	800089c <FourDigitsWrite>
 80009d2:	e003      	b.n	80009dc <DisplayTime+0x118>
	    }
	    else
	    {
	    	FourDigitsWrite(3, 11);
 80009d4:	210b      	movs	r1, #11
 80009d6:	2003      	movs	r0, #3
 80009d8:	f7ff ff60 	bl	800089c <FourDigitsWrite>
	    }
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 80009dc:	2001      	movs	r0, #1
 80009de:	f004 fd14 	bl	800540a <osDelay>



}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009ec:	b004      	add	sp, #16
 80009ee:	4770      	bx	lr
 80009f0:	200000d0 	.word	0x200000d0
 80009f4:	cccccccd 	.word	0xcccccccd
 80009f8:	2000008f 	.word	0x2000008f
 80009fc:	20000090 	.word	0x20000090
 8000a00:	20000091 	.word	0x20000091
 8000a04:	20000092 	.word	0x20000092
 8000a08:	20000088 	.word	0x20000088
 8000a0c:	2000008c 	.word	0x2000008c

08000a10 <DisplaySetMinutes>:

void DisplaySetMinutes(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000a10:	b084      	sub	sp, #16
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	f107 0c10 	add.w	ip, r7, #16
 8000a1c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f107 0110 	add.w	r1, r7, #16
 8000a26:	4843      	ldr	r0, [pc, #268]	; (8000b34 <DisplaySetMinutes+0x124>)
 8000a28:	f002 fefc 	bl	8003824 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	483f      	ldr	r0, [pc, #252]	; (8000b34 <DisplaySetMinutes+0x124>)
 8000a36:	f002 ffd7 	bl	80039e8 <HAL_RTC_GetDate>

	  HoursFirstDigit = Time.Hours / 10;  // Extract the first digit
 8000a3a:	7c3b      	ldrb	r3, [r7, #16]
 8000a3c:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <DisplaySetMinutes+0x128>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b3d      	ldr	r3, [pc, #244]	; (8000b3c <DisplaySetMinutes+0x12c>)
 8000a48:	701a      	strb	r2, [r3, #0]
	  HoursSecondDigit=Time.Hours % 10; // Extract the second digit
 8000a4a:	7c3a      	ldrb	r2, [r7, #16]
 8000a4c:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <DisplaySetMinutes+0x128>)
 8000a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a52:	08d9      	lsrs	r1, r3, #3
 8000a54:	460b      	mov	r3, r1
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	440b      	add	r3, r1
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <DisplaySetMinutes+0x130>)
 8000a62:	701a      	strb	r2, [r3, #0]

	  MinutsFirstDigit = Time.Minutes / 10;  // Extract the first digit
 8000a64:	7c7b      	ldrb	r3, [r7, #17]
 8000a66:	4a34      	ldr	r2, [pc, #208]	; (8000b38 <DisplaySetMinutes+0x128>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	08db      	lsrs	r3, r3, #3
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <DisplaySetMinutes+0x134>)
 8000a72:	701a      	strb	r2, [r3, #0]
	  MinutsSecondDigit=Time.Minutes % 10; // Extract the second digit
 8000a74:	7c7a      	ldrb	r2, [r7, #17]
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <DisplaySetMinutes+0x128>)
 8000a78:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7c:	08d9      	lsrs	r1, r3, #3
 8000a7e:	460b      	mov	r3, r1
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <DisplaySetMinutes+0x138>)
 8000a8c:	701a      	strb	r2, [r3, #0]

	 uint32_t currentTick = osKernelGetTickCount();
 8000a8e:	f004 fc15 	bl	80052bc <osKernelGetTickCount>
 8000a92:	6078      	str	r0, [r7, #4]

	 if (currentTick - lastTick >= 500) {
 8000a94:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <DisplaySetMinutes+0x13c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000aa0:	d311      	bcc.n	8000ac6 <DisplaySetMinutes+0xb6>
		 MinutesState = !MinutesState;
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <DisplaySetMinutes+0x140>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <DisplaySetMinutes+0x140>)
 8000abe:	701a      	strb	r2, [r3, #0]
	 	    	       lastTick = currentTick;
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <DisplaySetMinutes+0x13c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
	 	    	        }


	    FourDigitsWrite(4, HoursFirstDigit);
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <DisplaySetMinutes+0x12c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	4619      	mov	r1, r3
 8000acc:	2004      	movs	r0, #4
 8000ace:	f7ff fee5 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f004 fc99 	bl	800540a <osDelay>

	    // Display the second digit
	    FourDigitsWrite(3, HoursSecondDigit);
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <DisplaySetMinutes+0x130>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f7ff fedc 	bl	800089c <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f004 fc90 	bl	800540a <osDelay>





	    if(MinutesState)
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <DisplaySetMinutes+0x140>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d012      	beq.n	8000b18 <DisplaySetMinutes+0x108>
	    {
		    FourDigitsWrite(2, MinutsFirstDigit);
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <DisplaySetMinutes+0x134>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	2002      	movs	r0, #2
 8000afa:	f7ff fecf 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000afe:	2001      	movs	r0, #1
 8000b00:	f004 fc83 	bl	800540a <osDelay>

		    FourDigitsWrite(1, MinutsSecondDigit);
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <DisplaySetMinutes+0x138>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff fec6 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000b10:	2001      	movs	r0, #1
 8000b12:	f004 fc7a 	bl	800540a <osDelay>
	    {
	    	FourDigitsWrite(3, 11);
	    	osDelay(pdMS_TO_TICKS(1));
	    }

}
 8000b16:	e006      	b.n	8000b26 <DisplaySetMinutes+0x116>
	    	FourDigitsWrite(3, 11);
 8000b18:	210b      	movs	r1, #11
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f7ff febe 	bl	800089c <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1));
 8000b20:	2001      	movs	r0, #1
 8000b22:	f004 fc72 	bl	800540a <osDelay>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr
 8000b34:	200000d0 	.word	0x200000d0
 8000b38:	cccccccd 	.word	0xcccccccd
 8000b3c:	2000008f 	.word	0x2000008f
 8000b40:	20000090 	.word	0x20000090
 8000b44:	20000091 	.word	0x20000091
 8000b48:	20000092 	.word	0x20000092
 8000b4c:	20000088 	.word	0x20000088
 8000b50:	2000008d 	.word	0x2000008d

08000b54 <DisplaySetHours>:


void DisplaySetHours(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000b54:	b084      	sub	sp, #16
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	f107 0c10 	add.w	ip, r7, #16
 8000b60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f107 0110 	add.w	r1, r7, #16
 8000b6a:	4843      	ldr	r0, [pc, #268]	; (8000c78 <DisplaySetHours+0x124>)
 8000b6c:	f002 fe5a 	bl	8003824 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	483f      	ldr	r0, [pc, #252]	; (8000c78 <DisplaySetHours+0x124>)
 8000b7a:	f002 ff35 	bl	80039e8 <HAL_RTC_GetDate>


	  HoursFirstDigit = Time.Hours / 10;  // Extract the first digit
 8000b7e:	7c3b      	ldrb	r3, [r7, #16]
 8000b80:	4a3e      	ldr	r2, [pc, #248]	; (8000c7c <DisplaySetHours+0x128>)
 8000b82:	fba2 2303 	umull	r2, r3, r2, r3
 8000b86:	08db      	lsrs	r3, r3, #3
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <DisplaySetHours+0x12c>)
 8000b8c:	701a      	strb	r2, [r3, #0]
	  HoursSecondDigit=Time.Hours % 10; // Extract the second digit
 8000b8e:	7c3a      	ldrb	r2, [r7, #16]
 8000b90:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <DisplaySetHours+0x128>)
 8000b92:	fba3 1302 	umull	r1, r3, r3, r2
 8000b96:	08d9      	lsrs	r1, r3, #3
 8000b98:	460b      	mov	r3, r1
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <DisplaySetHours+0x130>)
 8000ba6:	701a      	strb	r2, [r3, #0]

	  MinutsFirstDigit = Time.Minutes / 10;  // Extract the first digit
 8000ba8:	7c7b      	ldrb	r3, [r7, #17]
 8000baa:	4a34      	ldr	r2, [pc, #208]	; (8000c7c <DisplaySetHours+0x128>)
 8000bac:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <DisplaySetHours+0x134>)
 8000bb6:	701a      	strb	r2, [r3, #0]
	  MinutsSecondDigit=Time.Minutes % 10; // Extract the second digit
 8000bb8:	7c7a      	ldrb	r2, [r7, #17]
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <DisplaySetHours+0x128>)
 8000bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc0:	08d9      	lsrs	r1, r3, #3
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <DisplaySetHours+0x138>)
 8000bd0:	701a      	strb	r2, [r3, #0]

	 uint32_t currentTick = osKernelGetTickCount();
 8000bd2:	f004 fb73 	bl	80052bc <osKernelGetTickCount>
 8000bd6:	6078      	str	r0, [r7, #4]

	 if (currentTick - lastTick >= 500) {
 8000bd8:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <DisplaySetHours+0x13c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000be4:	d311      	bcc.n	8000c0a <DisplaySetHours+0xb6>
		 HoursState = !HoursState;
 8000be6:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <DisplaySetHours+0x140>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	bf14      	ite	ne
 8000bee:	2301      	movne	r3, #1
 8000bf0:	2300      	moveq	r3, #0
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f083 0301 	eor.w	r3, r3, #1
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <DisplaySetHours+0x140>)
 8000c02:	701a      	strb	r2, [r3, #0]
	 	    	       lastTick = currentTick;
 8000c04:	4a22      	ldr	r2, [pc, #136]	; (8000c90 <DisplaySetHours+0x13c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
	 	    	        }
	 	 	 	FourDigitsWrite(2, MinutsFirstDigit);
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <DisplaySetHours+0x134>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2002      	movs	r0, #2
 8000c12:	f7ff fe43 	bl	800089c <FourDigitsWrite>
	 		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000c16:	2001      	movs	r0, #1
 8000c18:	f004 fbf7 	bl	800540a <osDelay>

	 		    FourDigitsWrite(1, MinutsSecondDigit);
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <DisplaySetHours+0x138>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fe3a 	bl	800089c <FourDigitsWrite>
	 		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f004 fbee 	bl	800540a <osDelay>
	    if(HoursState)
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <DisplaySetHours+0x140>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d012      	beq.n	8000c5c <DisplaySetHours+0x108>
	    {
		    FourDigitsWrite(4, HoursFirstDigit);
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <DisplaySetHours+0x12c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f7ff fe2d 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000c42:	2001      	movs	r0, #1
 8000c44:	f004 fbe1 	bl	800540a <osDelay>

		    FourDigitsWrite(3, HoursSecondDigit);
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <DisplaySetHours+0x130>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f7ff fe24 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000c54:	2001      	movs	r0, #1
 8000c56:	f004 fbd8 	bl	800540a <osDelay>
	    else
	    {
	    	FourDigitsWrite(3, 11);
	    	osDelay(pdMS_TO_TICKS(1));
	    }
}
 8000c5a:	e006      	b.n	8000c6a <DisplaySetHours+0x116>
	    	FourDigitsWrite(3, 11);
 8000c5c:	210b      	movs	r1, #11
 8000c5e:	2003      	movs	r0, #3
 8000c60:	f7ff fe1c 	bl	800089c <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1));
 8000c64:	2001      	movs	r0, #1
 8000c66:	f004 fbd0 	bl	800540a <osDelay>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr
 8000c78:	200000d0 	.word	0x200000d0
 8000c7c:	cccccccd 	.word	0xcccccccd
 8000c80:	2000008f 	.word	0x2000008f
 8000c84:	20000090 	.word	0x20000090
 8000c88:	20000091 	.word	0x20000091
 8000c8c:	20000092 	.word	0x20000092
 8000c90:	20000088 	.word	0x20000088
 8000c94:	2000008e 	.word	0x2000008e

08000c98 <AddOneMinuteToRTC>:


void AddOneMinuteToRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000c98:	b084      	sub	sp, #16
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	f107 0c08 	add.w	ip, r7, #8
 8000ca2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f107 0108 	add.w	r1, r7, #8
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <AddOneMinuteToRTC+0x60>)
 8000cae:	f002 fdb9 	bl	8003824 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This line is necessary due to the RTC hardware design
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <AddOneMinuteToRTC+0x60>)
 8000cbc:	f002 fe94 	bl	80039e8 <HAL_RTC_GetDate>

    // Add one minute
    Time.Minutes++;
 8000cc0:	7a7b      	ldrb	r3, [r7, #9]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	727b      	strb	r3, [r7, #9]

    // Handle minute overflow (if it goes beyond 59, reset to 0)
    if (Time.Minutes >= 60)
 8000cc8:	7a7b      	ldrb	r3, [r7, #9]
 8000cca:	2b3b      	cmp	r3, #59	; 0x3b
 8000ccc:	d901      	bls.n	8000cd2 <AddOneMinuteToRTC+0x3a>
    {
        Time.Minutes = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	727b      	strb	r3, [r7, #9]
        // No change to the hours
    }

    // Set the new time
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f107 0108 	add.w	r1, r7, #8
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <AddOneMinuteToRTC+0x60>)
 8000cda:	f002 fd09 	bl	80036f0 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Set the date again due to the RTC hardware design
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <AddOneMinuteToRTC+0x60>)
 8000ce8:	f002 fdfa 	bl	80038e0 <HAL_RTC_SetDate>
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr
 8000cf8:	200000d0 	.word	0x200000d0

08000cfc <SubtractOneMinuteFromRTC>:

void SubtractOneMinuteFromRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	f107 0c08 	add.w	ip, r7, #8
 8000d06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f107 0108 	add.w	r1, r7, #8
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <SubtractOneMinuteFromRTC+0x64>)
 8000d12:	f002 fd87 	bl	8003824 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This line is necessary due to the RTC hardware design
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4810      	ldr	r0, [pc, #64]	; (8000d60 <SubtractOneMinuteFromRTC+0x64>)
 8000d20:	f002 fe62 	bl	80039e8 <HAL_RTC_GetDate>

    // Check if the minutes are at 0, and if so, wrap around to 59
    if (Time.Minutes == 0) {
 8000d24:	7a7b      	ldrb	r3, [r7, #9]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <SubtractOneMinuteFromRTC+0x34>
        Time.Minutes = 59;
 8000d2a:	233b      	movs	r3, #59	; 0x3b
 8000d2c:	727b      	strb	r3, [r7, #9]
 8000d2e:	e003      	b.n	8000d38 <SubtractOneMinuteFromRTC+0x3c>
        // No change to the hours
    } else {
        // Subtract one minute
        Time.Minutes--;
 8000d30:	7a7b      	ldrb	r3, [r7, #9]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	727b      	strb	r3, [r7, #9]
    }

    // Set the new time
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f107 0108 	add.w	r1, r7, #8
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <SubtractOneMinuteFromRTC+0x64>)
 8000d40:	f002 fcd6 	bl	80036f0 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Set the date again due to the RTC hardware design
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <SubtractOneMinuteFromRTC+0x64>)
 8000d4e:	f002 fdc7 	bl	80038e0 <HAL_RTC_SetDate>
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d5a:	b004      	add	sp, #16
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200000d0 	.word	0x200000d0

08000d64 <AddOneHourToRTC>:

void AddOneHourToRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000d64:	b084      	sub	sp, #16
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	f107 0c08 	add.w	ip, r7, #8
 8000d6e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <AddOneHourToRTC+0x94>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	22ca      	movs	r2, #202	; 0xca
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <AddOneHourToRTC+0x94>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2253      	movs	r2, #83	; 0x53
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24




    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f107 0108 	add.w	r1, r7, #8
 8000d88:	481b      	ldr	r0, [pc, #108]	; (8000df8 <AddOneHourToRTC+0x94>)
 8000d8a:	f002 fd4b 	bl	8003824 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This is necessary due to the RTC hardware design
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	4818      	ldr	r0, [pc, #96]	; (8000df8 <AddOneHourToRTC+0x94>)
 8000d98:	f002 fe26 	bl	80039e8 <HAL_RTC_GetDate>

    // Add one hour
    Time.Hours++;
 8000d9c:	7a3b      	ldrb	r3, [r7, #8]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	723b      	strb	r3, [r7, #8]

    // Handle hour overflow (if it goes beyond 23, reset to 0)
    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <AddOneHourToRTC+0x94>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b40      	cmp	r3, #64	; 0x40
 8000daa:	d105      	bne.n	8000db8 <AddOneHourToRTC+0x54>
        if (Time.Hours >= 13)
 8000dac:	7a3b      	ldrb	r3, [r7, #8]
 8000dae:	2b0c      	cmp	r3, #12
 8000db0:	d90b      	bls.n	8000dca <AddOneHourToRTC+0x66>
        {
            Time.Hours = 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	723b      	strb	r3, [r7, #8]
 8000db6:	e008      	b.n	8000dca <AddOneHourToRTC+0x66>
        }
    }
    else if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <AddOneHourToRTC+0x94>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <AddOneHourToRTC+0x66>
    {
			if (Time.Hours >= 24)
 8000dc0:	7a3b      	ldrb	r3, [r7, #8]
 8000dc2:	2b17      	cmp	r3, #23
 8000dc4:	d901      	bls.n	8000dca <AddOneHourToRTC+0x66>
			{
				Time.Hours = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	723b      	strb	r3, [r7, #8]
			}
    }
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f107 0108 	add.w	r1, r7, #8
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <AddOneHourToRTC+0x94>)
 8000dd2:	f002 fc8d 	bl	80036f0 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <AddOneHourToRTC+0x94>)
 8000de0:	f002 fd7e 	bl	80038e0 <HAL_RTC_SetDate>
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <AddOneHourToRTC+0x94>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	22ff      	movs	r2, #255	; 0xff
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000df4:	b004      	add	sp, #16
 8000df6:	4770      	bx	lr
 8000df8:	200000d0 	.word	0x200000d0

08000dfc <SubtractOneHourFromRTC>:

void SubtractOneHourFromRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	f107 0c08 	add.w	ip, r7, #8
 8000e06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <SubtractOneHourFromRTC+0xa0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	22ca      	movs	r2, #202	; 0xca
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <SubtractOneHourFromRTC+0xa0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2253      	movs	r2, #83	; 0x53
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f107 0108 	add.w	r1, r7, #8
 8000e20:	481e      	ldr	r0, [pc, #120]	; (8000e9c <SubtractOneHourFromRTC+0xa0>)
 8000e22:	f002 fcff 	bl	8003824 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This is necessary due to the RTC hardware design
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481b      	ldr	r0, [pc, #108]	; (8000e9c <SubtractOneHourFromRTC+0xa0>)
 8000e30:	f002 fdda 	bl	80039e8 <HAL_RTC_GetDate>



    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <SubtractOneHourFromRTC+0xa0>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b40      	cmp	r3, #64	; 0x40
 8000e3a:	d10a      	bne.n	8000e52 <SubtractOneHourFromRTC+0x56>
    	  	  if (Time.Hours == 1)
 8000e3c:	7a3b      	ldrb	r3, [r7, #8]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d102      	bne.n	8000e48 <SubtractOneHourFromRTC+0x4c>
    	  	  {
    	  		  Time.Hours = 12;
 8000e42:	230c      	movs	r3, #12
 8000e44:	723b      	strb	r3, [r7, #8]
 8000e46:	e012      	b.n	8000e6e <SubtractOneHourFromRTC+0x72>
    	  	  }
    	    else
    	    {

              Time.Hours--;
 8000e48:	7a3b      	ldrb	r3, [r7, #8]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	723b      	strb	r3, [r7, #8]
 8000e50:	e00d      	b.n	8000e6e <SubtractOneHourFromRTC+0x72>
    	     }
       }

       else if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <SubtractOneHourFromRTC+0xa0>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <SubtractOneHourFromRTC+0x72>
       {
    	   if (Time.Hours == 0) {
 8000e5a:	7a3b      	ldrb	r3, [r7, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <SubtractOneHourFromRTC+0x6a>
    	           Time.Hours = 23;
 8000e60:	2317      	movs	r3, #23
 8000e62:	723b      	strb	r3, [r7, #8]
 8000e64:	e003      	b.n	8000e6e <SubtractOneHourFromRTC+0x72>
    	           // No change to the date
    	       } else {
    	           // Subtract one hour
    	           Time.Hours--;
 8000e66:	7a3b      	ldrb	r3, [r7, #8]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	723b      	strb	r3, [r7, #8]
    	       }
       }
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f107 0108 	add.w	r1, r7, #8
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <SubtractOneHourFromRTC+0xa0>)
 8000e76:	f002 fc3b 	bl	80036f0 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <SubtractOneHourFromRTC+0xa0>)
 8000e84:	f002 fd2c 	bl	80038e0 <HAL_RTC_SetDate>
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SubtractOneHourFromRTC+0xa0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	22ff      	movs	r2, #255	; 0xff
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e98:	b004      	add	sp, #16
 8000e9a:	4770      	bx	lr
 8000e9c:	200000d0 	.word	0x200000d0

08000ea0 <ShowTimeFormat>:

void ShowTimeFormat(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	f107 0c08 	add.w	ip, r7, #8
 8000eaa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <ShowTimeFormat+0x98>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	22ca      	movs	r2, #202	; 0xca
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <ShowTimeFormat+0x98>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2253      	movs	r2, #83	; 0x53
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
			FourDigitsWrite(1, 13);
 8000ebe:	210d      	movs	r1, #13
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fceb 	bl	800089c <FourDigitsWrite>
			osDelay(pdMS_TO_TICKS(5));
 8000ec6:	2005      	movs	r0, #5
 8000ec8:	f004 fa9f 	bl	800540a <osDelay>


			FourDigitsWrite(2, 12);
 8000ecc:	210c      	movs	r1, #12
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fce4 	bl	800089c <FourDigitsWrite>
			osDelay(pdMS_TO_TICKS(5));
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f004 fa98 	bl	800540a <osDelay>


		if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <ShowTimeFormat+0x98>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10d      	bne.n	8000efe <ShowTimeFormat+0x5e>
		{
		    FourDigitsWrite(3, 4);
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f7ff fcd9 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(5));
 8000eea:	2005      	movs	r0, #5
 8000eec:	f004 fa8d 	bl	800540a <osDelay>

		    FourDigitsWrite(4, 2);
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f7ff fcd2 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(5));
 8000ef8:	2005      	movs	r0, #5
 8000efa:	f004 fa86 	bl	800540a <osDelay>
		}
		if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <ShowTimeFormat+0x98>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b40      	cmp	r3, #64	; 0x40
 8000f04:	d10d      	bne.n	8000f22 <ShowTimeFormat+0x82>
		{
		    FourDigitsWrite(3, 2);
 8000f06:	2102      	movs	r1, #2
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f7ff fcc7 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(5));
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f004 fa7b 	bl	800540a <osDelay>

		    FourDigitsWrite(4, 1);
 8000f14:	2101      	movs	r1, #1
 8000f16:	2004      	movs	r0, #4
 8000f18:	f7ff fcc0 	bl	800089c <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(5));
 8000f1c:	2005      	movs	r0, #5
 8000f1e:	f004 fa74 	bl	800540a <osDelay>
		}
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <ShowTimeFormat+0x98>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	22ff      	movs	r2, #255	; 0xff
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f32:	b004      	add	sp, #16
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200000d0 	.word	0x200000d0

08000f3c <ChangeTimeFormat>:

void ChangeTimeFormat(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    // Unlock the RTC
    __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <ChangeTimeFormat+0x3c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	22ca      	movs	r2, #202	; 0xca
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <ChangeTimeFormat+0x3c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2253      	movs	r2, #83	; 0x53
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24

    // Change the hour format
    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <ChangeTimeFormat+0x3c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b40      	cmp	r3, #64	; 0x40
 8000f56:	d103      	bne.n	8000f60 <ChangeTimeFormat+0x24>
        hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <ChangeTimeFormat+0x3c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	e002      	b.n	8000f66 <ChangeTimeFormat+0x2a>
    } else {
        hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <ChangeTimeFormat+0x3c>)
 8000f62:	2240      	movs	r2, #64	; 0x40
 8000f64:	605a      	str	r2, [r3, #4]
    }

    // Re-initialize the RTC with the new settings
    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <ChangeTimeFormat+0x3c>)
 8000f68:	f002 fb4c 	bl	8003604 <HAL_RTC_Init>
        // Handle initialization error
    }

    // Lock the RTC
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <ChangeTimeFormat+0x3c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	22ff      	movs	r2, #255	; 0xff
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000d0 	.word	0x200000d0

08000f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_DMA_Init+0x3c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <MX_DMA_Init+0x3c>)
 8000f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_DMA_Init+0x3c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f001 f800 	bl	8001fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fa8:	200e      	movs	r0, #14
 8000faa:	f001 f819 	bl	8001fe0 <HAL_NVIC_EnableIRQ>

}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of UartMutex */
  UartMutexHandle = osMutexNew(&UartMutex_attributes);
 8000fc0:	481b      	ldr	r0, [pc, #108]	; (8001030 <MX_FREERTOS_Init+0x74>)
 8000fc2:	f004 fa3d 	bl	8005440 <osMutexNew>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <MX_FREERTOS_Init+0x78>)
 8000fca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadSpi */
  ReadSpiHandle = osThreadNew(Read_spi, NULL, &ReadSpi_attributes);
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <MX_FREERTOS_Init+0x7c>)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	481a      	ldr	r0, [pc, #104]	; (800103c <MX_FREERTOS_Init+0x80>)
 8000fd2:	f004 f988 	bl	80052e6 <osThreadNew>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <MX_FREERTOS_Init+0x84>)
 8000fda:	6013      	str	r3, [r2, #0]

  /* creation of TwoDigitsWrite */
  TwoDigitsWriteHandle = osThreadNew(TwoDigitsWriteTask, NULL, &TwoDigitsWrite_attributes);
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <MX_FREERTOS_Init+0x88>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4819      	ldr	r0, [pc, #100]	; (8001048 <MX_FREERTOS_Init+0x8c>)
 8000fe2:	f004 f980 	bl	80052e6 <osThreadNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a18      	ldr	r2, [pc, #96]	; (800104c <MX_FREERTOS_Init+0x90>)
 8000fea:	6013      	str	r3, [r2, #0]

  /* creation of ShowTimeMode */
  ShowTimeModeHandle = osThreadNew(ShowTimeModeTask, NULL, &ShowTimeMode_attributes);
 8000fec:	4a18      	ldr	r2, [pc, #96]	; (8001050 <MX_FREERTOS_Init+0x94>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4818      	ldr	r0, [pc, #96]	; (8001054 <MX_FREERTOS_Init+0x98>)
 8000ff2:	f004 f978 	bl	80052e6 <osThreadNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <MX_FREERTOS_Init+0x9c>)
 8000ffa:	6013      	str	r3, [r2, #0]

  /* creation of PushButtons */
  PushButtonsHandle = osThreadNew(PushButtonsTask, NULL, &PushButtons_attributes);
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <MX_FREERTOS_Init+0xa0>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4817      	ldr	r0, [pc, #92]	; (8001060 <MX_FREERTOS_Init+0xa4>)
 8001002:	f004 f970 	bl	80052e6 <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a16      	ldr	r2, [pc, #88]	; (8001064 <MX_FREERTOS_Init+0xa8>)
 800100a:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(ClockTask, NULL, &Clock_attributes);
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <MX_FREERTOS_Init+0xac>)
 800100e:	2100      	movs	r1, #0
 8001010:	4816      	ldr	r0, [pc, #88]	; (800106c <MX_FREERTOS_Init+0xb0>)
 8001012:	f004 f968 	bl	80052e6 <osThreadNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <MX_FREERTOS_Init+0xb4>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of SetMinutesMode */
  SetMinutesModeHandle = osThreadNew(SetMinutesModeTask, NULL, &SetMinutesMode_attributes);
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <MX_FREERTOS_Init+0xb8>)
 800101e:	2100      	movs	r1, #0
 8001020:	4815      	ldr	r0, [pc, #84]	; (8001078 <MX_FREERTOS_Init+0xbc>)
 8001022:	f004 f960 	bl	80052e6 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <MX_FREERTOS_Init+0xc0>)
 800102a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	080096dc 	.word	0x080096dc
 8001034:	200000cc 	.word	0x200000cc
 8001038:	08009604 	.word	0x08009604
 800103c:	08001081 	.word	0x08001081
 8001040:	200000b4 	.word	0x200000b4
 8001044:	08009628 	.word	0x08009628
 8001048:	080010e9 	.word	0x080010e9
 800104c:	200000b8 	.word	0x200000b8
 8001050:	0800964c 	.word	0x0800964c
 8001054:	08001105 	.word	0x08001105
 8001058:	200000bc 	.word	0x200000bc
 800105c:	08009670 	.word	0x08009670
 8001060:	080011b5 	.word	0x080011b5
 8001064:	200000c0 	.word	0x200000c0
 8001068:	08009694 	.word	0x08009694
 800106c:	08001415 	.word	0x08001415
 8001070:	200000c4 	.word	0x200000c4
 8001074:	080096b8 	.word	0x080096b8
 8001078:	08001425 	.word	0x08001425
 800107c:	200000c8 	.word	0x200000c8

08001080 <Read_spi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_spi */
void Read_spi(void *argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_spi */
	uint16_t reading[1];
	 HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)reading, sizeof(reading));
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2202      	movs	r2, #2
 800108e:	4619      	mov	r1, r3
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <Read_spi+0x5c>)
 8001092:	f002 fe3f 	bl	8003d14 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
  for(;;)
  {
	  number++;
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <Read_spi+0x60>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <Read_spi+0x60>)
 80010a0:	801a      	strh	r2, [r3, #0]
	  if (number == 100) { number = 0;}
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <Read_spi+0x60>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d102      	bne.n	80010b0 <Read_spi+0x30>
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <Read_spi+0x60>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	801a      	strh	r2, [r3, #0]
  	  osDelay(20);
 80010b0:	2014      	movs	r0, #20
 80010b2:	f004 f9aa 	bl	800540a <osDelay>
  		if (osMutexAcquire(UartMutexHandle, 20) == osOK)
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <Read_spi+0x64>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2114      	movs	r1, #20
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 fa45 	bl	800554c <osMutexAcquire>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1e6      	bne.n	8001096 <Read_spi+0x16>
  		  	{
  		  	    osDelay(20);
 80010c8:	2014      	movs	r0, #20
 80010ca:	f004 f99e 	bl	800540a <osDelay>
  		  //	 printf("reading values is: %d\n\r",reading[0]);
  		  	  osMutexRelease(UartMutexHandle);
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <Read_spi+0x64>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 fa85 	bl	80055e2 <osMutexRelease>
	  number++;
 80010d8:	e7dd      	b.n	8001096 <Read_spi+0x16>
 80010da:	bf00      	nop
 80010dc:	200000f0 	.word	0x200000f0
 80010e0:	20000094 	.word	0x20000094
 80010e4:	200000cc 	.word	0x200000cc

080010e8 <TwoDigitsWriteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TwoDigitsWriteTask */
void TwoDigitsWriteTask(void *argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TwoDigitsWriteTask */
  /* Infinite loop */
  for(;;)
  {
	  //WriteDigit(2, 8);
	  WriteNumber(number);
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <TwoDigitsWriteTask+0x18>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fae8 	bl	80006cc <WriteNumber>
 80010fc:	e7f8      	b.n	80010f0 <TwoDigitsWriteTask+0x8>
 80010fe:	bf00      	nop
 8001100:	20000094 	.word	0x20000094

08001104 <ShowTimeModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ShowTimeModeTask */
void ShowTimeModeTask(void *argument)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af04      	add	r7, sp, #16
 800110a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ShowTimeModeTask */
		Time.Hours = 12;
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <ShowTimeModeTask+0x9c>)
 800110e:	220c      	movs	r2, #12
 8001110:	701a      	strb	r2, [r3, #0]
		Time.Minutes = 00;
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <ShowTimeModeTask+0x9c>)
 8001114:	2200      	movs	r2, #0
 8001116:	705a      	strb	r2, [r3, #1]
		Time.Seconds = 0;
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <ShowTimeModeTask+0x9c>)
 800111a:	2200      	movs	r2, #0
 800111c:	709a      	strb	r2, [r3, #2]
		HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800111e:	2200      	movs	r2, #0
 8001120:	491f      	ldr	r1, [pc, #124]	; (80011a0 <ShowTimeModeTask+0x9c>)
 8001122:	4820      	ldr	r0, [pc, #128]	; (80011a4 <ShowTimeModeTask+0xa0>)
 8001124:	f002 fae4 	bl	80036f0 <HAL_RTC_SetTime>
	  /* Infinite loop */
	  for(;;)
	  {
		  if(currentState ==ShowTime)
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <ShowTimeModeTask+0xa4>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10b      	bne.n	800114a <ShowTimeModeTask+0x46>
			  DisplayTime(Time,Date,UartMutexHandle);
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <ShowTimeModeTask+0xa8>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <ShowTimeModeTask+0x9c>)
 8001138:	9202      	str	r2, [sp, #8]
 800113a:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <ShowTimeModeTask+0xac>)
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	9201      	str	r2, [sp, #4]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001146:	f7ff fbbd 	bl	80008c4 <DisplayTime>
		  if(currentState == SetMinutes)
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <ShowTimeModeTask+0xa4>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d108      	bne.n	8001166 <ShowTimeModeTask+0x62>
		  DisplaySetMinutes(Time, Date);
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <ShowTimeModeTask+0x9c>)
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <ShowTimeModeTask+0xac>)
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	9200      	str	r2, [sp, #0]
 8001160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001162:	f7ff fc55 	bl	8000a10 <DisplaySetMinutes>
		  if(currentState == SetHours)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <ShowTimeModeTask+0xa4>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d108      	bne.n	8001182 <ShowTimeModeTask+0x7e>
		  DisplaySetHours(Time,Date);
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <ShowTimeModeTask+0x9c>)
 8001172:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <ShowTimeModeTask+0xac>)
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	9201      	str	r2, [sp, #4]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	9200      	str	r2, [sp, #0]
 800117c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117e:	f7ff fce9 	bl	8000b54 <DisplaySetHours>
		  if(currentState == Set24or12)
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <ShowTimeModeTask+0xa4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b03      	cmp	r3, #3
 800118a:	d1cd      	bne.n	8001128 <ShowTimeModeTask+0x24>
			  ShowTimeFormat(Time,Date);
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <ShowTimeModeTask+0x9c>)
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <ShowTimeModeTask+0xac>)
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	9201      	str	r2, [sp, #4]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119a:	f7ff fe81 	bl	8000ea0 <ShowTimeFormat>
		  if(currentState ==ShowTime)
 800119e:	e7c3      	b.n	8001128 <ShowTimeModeTask+0x24>
 80011a0:	20000098 	.word	0x20000098
 80011a4:	200000d0 	.word	0x200000d0
 80011a8:	200000b0 	.word	0x200000b0
 80011ac:	200000cc 	.word	0x200000cc
 80011b0:	200000ac 	.word	0x200000ac

080011b4 <PushButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PushButtonsTask */
void PushButtonsTask(void *argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PushButtonsTask */
  /* Infinite loop */
  GPIO_PinState Mode, ModePrev = GPIO_PIN_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  GPIO_PinState Up, UpPrev = GPIO_PIN_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  GPIO_PinState Down, DownPrev = GPIO_PIN_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint32_t LastTimeMode = 0, LastTimeUp = 0, LastTimeDown = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  const uint32_t debounceDelay = 50; // Debounce time in milliseconds
 80011da:	2332      	movs	r3, #50	; 0x32
 80011dc:	617b      	str	r3, [r7, #20]
  const uint32_t longPressThreshold = 1000; // Long press threshold in milliseconds for Mode button
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	613b      	str	r3, [r7, #16]


  for(;;)
  {
    // Read the current state of each button
    Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 80011e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e8:	4880      	ldr	r0, [pc, #512]	; (80013ec <PushButtonsTask+0x238>)
 80011ea:	f001 fbfb 	bl	80029e4 <HAL_GPIO_ReadPin>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    Up = HAL_GPIO_ReadPin(PushButtonUp_GPIO_Port, PushButtonUp_Pin);
 80011f4:	2140      	movs	r1, #64	; 0x40
 80011f6:	487e      	ldr	r0, [pc, #504]	; (80013f0 <PushButtonsTask+0x23c>)
 80011f8:	f001 fbf4 	bl	80029e4 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
    Down = HAL_GPIO_ReadPin(PushButtonDown_GPIO_Port, PushButtonDown_Pin);
 8001200:	2120      	movs	r1, #32
 8001202:	487b      	ldr	r0, [pc, #492]	; (80013f0 <PushButtonsTask+0x23c>)
 8001204:	f001 fbee 	bl	80029e4 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]

    if (osMutexAcquire(UartMutexHandle, 20) == osOK)
 800120c:	4b79      	ldr	r3, [pc, #484]	; (80013f4 <PushButtonsTask+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2114      	movs	r1, #20
 8001212:	4618      	mov	r0, r3
 8001214:	f004 f99a 	bl	800554c <osMutexAcquire>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 80e1 	bne.w	80013e2 <PushButtonsTask+0x22e>
    {
      // Check Mode button for short/long press
      if(Mode != ModePrev && (HAL_GetTick() - LastTimeMode) > debounceDelay)
 8001220:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001224:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001228:	429a      	cmp	r2, r3
 800122a:	d055      	beq.n	80012d8 <PushButtonsTask+0x124>
 800122c:	f000 fdf8 	bl	8001e20 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	d24d      	bcs.n	80012d8 <PushButtonsTask+0x124>
      {
        if(Mode == GPIO_PIN_SET)
 800123c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001240:	2b01      	cmp	r3, #1
 8001242:	d146      	bne.n	80012d2 <PushButtonsTask+0x11e>
        {
          uint32_t pressTime = HAL_GetTick();
 8001244:	f000 fdec 	bl	8001e20 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
          while((Mode == GPIO_PIN_SET) && (HAL_GetTick() - pressTime < longPressThreshold))
 800124a:	e00a      	b.n	8001262 <PushButtonsTask+0xae>
          {
            Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	4866      	ldr	r0, [pc, #408]	; (80013ec <PushButtonsTask+0x238>)
 8001252:	f001 fbc7 	bl	80029e4 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            osDelay(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f004 f8d4 	bl	800540a <osDelay>
          while((Mode == GPIO_PIN_SET) && (HAL_GetTick() - pressTime < longPressThreshold))
 8001262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <PushButtonsTask+0xc6>
 800126a:	f000 fdd9 	bl	8001e20 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	429a      	cmp	r2, r3
 8001278:	d8e8      	bhi.n	800124c <PushButtonsTask+0x98>
          }
          if(Mode == GPIO_PIN_SET)
 800127a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10f      	bne.n	80012a2 <PushButtonsTask+0xee>
          {
        	  if(currentState == ShowTime)
 8001282:	4b5d      	ldr	r3, [pc, #372]	; (80013f8 <PushButtonsTask+0x244>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d103      	bne.n	8001294 <PushButtonsTask+0xe0>
        	  {
        	  currentState = SetMinutes;
 800128c:	4b5a      	ldr	r3, [pc, #360]	; (80013f8 <PushButtonsTask+0x244>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	e002      	b.n	800129a <PushButtonsTask+0xe6>
        	  }
        	  else
        	  {
        		  currentState = ShowTime;
 8001294:	4b58      	ldr	r3, [pc, #352]	; (80013f8 <PushButtonsTask+0x244>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
        	  }
        	  printf("Mode Long Pressed\n\r");
 800129a:	4858      	ldr	r0, [pc, #352]	; (80013fc <PushButtonsTask+0x248>)
 800129c:	f007 fa58 	bl	8008750 <iprintf>
 80012a0:	e017      	b.n	80012d2 <PushButtonsTask+0x11e>
          }
          else
          {
            printf("Mode Short Pressed\n\r");
 80012a2:	4857      	ldr	r0, [pc, #348]	; (8001400 <PushButtonsTask+0x24c>)
 80012a4:	f007 fa54 	bl	8008750 <iprintf>
            if (currentState == SetMinutes)
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <PushButtonsTask+0x244>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d103      	bne.n	80012ba <PushButtonsTask+0x106>
            	currentState = SetHours;
 80012b2:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <PushButtonsTask+0x244>)
 80012b4:	2202      	movs	r2, #2
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	e00b      	b.n	80012d2 <PushButtonsTask+0x11e>
            else if (currentState == SetHours)
 80012ba:	4b4f      	ldr	r3, [pc, #316]	; (80013f8 <PushButtonsTask+0x244>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d103      	bne.n	80012cc <PushButtonsTask+0x118>
            	currentState = Set24or12;
 80012c4:	4b4c      	ldr	r3, [pc, #304]	; (80013f8 <PushButtonsTask+0x244>)
 80012c6:	2203      	movs	r2, #3
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e002      	b.n	80012d2 <PushButtonsTask+0x11e>
            else
            	currentState = SetMinutes;
 80012cc:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <PushButtonsTask+0x244>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
          }
        }
        LastTimeMode = HAL_GetTick();
 80012d2:	f000 fda5 	bl	8001e20 <HAL_GetTick>
 80012d6:	6238      	str	r0, [r7, #32]
      }

      // Check Up button for short press only
      if(Up != UpPrev && (HAL_GetTick() - LastTimeUp) > debounceDelay)
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012de:	429a      	cmp	r2, r3
 80012e0:	d035      	beq.n	800134e <PushButtonsTask+0x19a>
 80012e2:	f000 fd9d 	bl	8001e20 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d22d      	bcs.n	800134e <PushButtonsTask+0x19a>
      {
        if(Up == GPIO_PIN_SET)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d127      	bne.n	8001348 <PushButtonsTask+0x194>
        {
        		if(currentState == SetMinutes)
 80012f8:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <PushButtonsTask+0x244>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d109      	bne.n	8001316 <PushButtonsTask+0x162>
        		AddOneMinuteToRTC(Time,Date);
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <PushButtonsTask+0x250>)
 8001304:	4a40      	ldr	r2, [pc, #256]	; (8001408 <PushButtonsTask+0x254>)
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	9201      	str	r2, [sp, #4]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	9200      	str	r2, [sp, #0]
 800130e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001310:	f7ff fcc2 	bl	8000c98 <AddOneMinuteToRTC>
 8001314:	e015      	b.n	8001342 <PushButtonsTask+0x18e>
        		else if(currentState == SetHours)
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <PushButtonsTask+0x244>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d109      	bne.n	8001334 <PushButtonsTask+0x180>
        		{
        			AddOneHourToRTC(Time,Date);
 8001320:	4b38      	ldr	r3, [pc, #224]	; (8001404 <PushButtonsTask+0x250>)
 8001322:	4a39      	ldr	r2, [pc, #228]	; (8001408 <PushButtonsTask+0x254>)
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	9201      	str	r2, [sp, #4]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800132e:	f7ff fd19 	bl	8000d64 <AddOneHourToRTC>
 8001332:	e006      	b.n	8001342 <PushButtonsTask+0x18e>
        		}
         		else if (currentState == Set24or12)
 8001334:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <PushButtonsTask+0x244>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b03      	cmp	r3, #3
 800133c:	d101      	bne.n	8001342 <PushButtonsTask+0x18e>
         			ChangeTimeFormat();
 800133e:	f7ff fdfd 	bl	8000f3c <ChangeTimeFormat>
          printf("Up Short Pressed\n\r");
 8001342:	4832      	ldr	r0, [pc, #200]	; (800140c <PushButtonsTask+0x258>)
 8001344:	f007 fa04 	bl	8008750 <iprintf>
        }
        LastTimeUp = HAL_GetTick();
 8001348:	f000 fd6a 	bl	8001e20 <HAL_GetTick>
 800134c:	61f8      	str	r0, [r7, #28]
      }

      // Check Down button for short press only
      if(Down != DownPrev && (HAL_GetTick() - LastTimeDown) > debounceDelay)
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001354:	429a      	cmp	r2, r3
 8001356:	d035      	beq.n	80013c4 <PushButtonsTask+0x210>
 8001358:	f000 fd62 	bl	8001e20 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	d22d      	bcs.n	80013c4 <PushButtonsTask+0x210>
      {
        if(Down == GPIO_PIN_SET)
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d127      	bne.n	80013be <PushButtonsTask+0x20a>
        {
        	     	 if(currentState == SetMinutes)
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <PushButtonsTask+0x244>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d109      	bne.n	800138c <PushButtonsTask+0x1d8>
        	     	 {
        	 		 SubtractOneMinuteFromRTC(Time, Date);
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <PushButtonsTask+0x250>)
 800137a:	4a23      	ldr	r2, [pc, #140]	; (8001408 <PushButtonsTask+0x254>)
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	9201      	str	r2, [sp, #4]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	9200      	str	r2, [sp, #0]
 8001384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001386:	f7ff fcb9 	bl	8000cfc <SubtractOneMinuteFromRTC>
 800138a:	e015      	b.n	80013b8 <PushButtonsTask+0x204>
        	     	 }
        	     	 else if(currentState == SetHours)
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <PushButtonsTask+0x244>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d109      	bne.n	80013aa <PushButtonsTask+0x1f6>
        	     	 {
        	     		SubtractOneHourFromRTC(Time, Date);
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <PushButtonsTask+0x250>)
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <PushButtonsTask+0x254>)
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	9200      	str	r2, [sp, #0]
 80013a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a4:	f7ff fd2a 	bl	8000dfc <SubtractOneHourFromRTC>
 80013a8:	e006      	b.n	80013b8 <PushButtonsTask+0x204>
        	     	 }
             		else if (currentState == Set24or12)
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <PushButtonsTask+0x244>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d101      	bne.n	80013b8 <PushButtonsTask+0x204>
             			ChangeTimeFormat();
 80013b4:	f7ff fdc2 	bl	8000f3c <ChangeTimeFormat>
          printf("Down Short Pressed\n\r");
 80013b8:	4815      	ldr	r0, [pc, #84]	; (8001410 <PushButtonsTask+0x25c>)
 80013ba:	f007 f9c9 	bl	8008750 <iprintf>
        }
        LastTimeDown = HAL_GetTick();
 80013be:	f000 fd2f 	bl	8001e20 <HAL_GetTick>
 80013c2:	61b8      	str	r0, [r7, #24]
      }

      // Update the previous state for each button
      ModePrev = Mode;
 80013c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      UpPrev = Up;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      DownPrev = Down;
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
 80013d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

      osMutexRelease(UartMutexHandle);
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <PushButtonsTask+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 f900 	bl	80055e2 <osMutexRelease>
    }
    osDelay(1); // Adjust this delay as per your requirement
 80013e2:	2001      	movs	r0, #1
 80013e4:	f004 f811 	bl	800540a <osDelay>
    Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 80013e8:	e6fc      	b.n	80011e4 <PushButtonsTask+0x30>
 80013ea:	bf00      	nop
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	200000cc 	.word	0x200000cc
 80013f8:	200000b0 	.word	0x200000b0
 80013fc:	08009574 	.word	0x08009574
 8001400:	08009588 	.word	0x08009588
 8001404:	20000098 	.word	0x20000098
 8001408:	200000ac 	.word	0x200000ac
 800140c:	080095a0 	.word	0x080095a0
 8001410:	080095b4 	.word	0x080095b4

08001414 <ClockTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ClockTask */
void ClockTask(void *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
//	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
  /* Infinite loop */
  for(;;)
  {
	//DisplayTime(Time,Date,UartMutexHandle);
    osDelay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f003 fff4 	bl	800540a <osDelay>
 8001422:	e7fb      	b.n	800141c <ClockTask+0x8>

08001424 <SetMinutesModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SetMinutesModeTask */
void SetMinutesModeTask(void *argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SetMinutesModeTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f003 ffec 	bl	800540a <osDelay>
 8001432:	e7fb      	b.n	800142c <SetMinutesModeTask+0x8>

08001434 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <MX_GPIO_Init+0x170>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a54      	ldr	r2, [pc, #336]	; (80015a4 <MX_GPIO_Init+0x170>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b52      	ldr	r3, [pc, #328]	; (80015a4 <MX_GPIO_Init+0x170>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <MX_GPIO_Init+0x170>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a4d      	ldr	r2, [pc, #308]	; (80015a4 <MX_GPIO_Init+0x170>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <MX_GPIO_Init+0x170>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <MX_GPIO_Init+0x170>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a46      	ldr	r2, [pc, #280]	; (80015a4 <MX_GPIO_Init+0x170>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <MX_GPIO_Init+0x170>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <MX_GPIO_Init+0x170>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <MX_GPIO_Init+0x170>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <MX_GPIO_Init+0x170>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 80014ba:	2200      	movs	r2, #0
 80014bc:	f241 4117 	movw	r1, #5143	; 0x1417
 80014c0:	4839      	ldr	r0, [pc, #228]	; (80015a8 <MX_GPIO_Init+0x174>)
 80014c2:	f001 faa7 	bl	8002a14 <HAL_GPIO_WritePin>
                          |Cathode_1_Pin|Cathode_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|LD2_Pin
 80014c6:	2200      	movs	r2, #0
 80014c8:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80014cc:	4837      	ldr	r0, [pc, #220]	; (80015ac <MX_GPIO_Init+0x178>)
 80014ce:	f001 faa1 	bl	8002a14 <HAL_GPIO_WritePin>
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 80014d2:	2200      	movs	r2, #0
 80014d4:	f24e 0137 	movw	r1, #57399	; 0xe037
 80014d8:	4835      	ldr	r0, [pc, #212]	; (80015b0 <MX_GPIO_Init+0x17c>)
 80014da:	f001 fa9b 	bl	8002a14 <HAL_GPIO_WritePin>
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	482c      	ldr	r0, [pc, #176]	; (80015a8 <MX_GPIO_Init+0x174>)
 80014f6:	f001 f8f1 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 80014fa:	f241 4317 	movw	r3, #5143	; 0x1417
 80014fe:	617b      	str	r3, [r7, #20]
                          |Cathode_1_Pin|Cathode_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4825      	ldr	r0, [pc, #148]	; (80015a8 <MX_GPIO_Init+0x174>)
 8001514:	f001 f8e2 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|LD2_Pin
 8001518:	f240 73b3 	movw	r3, #1971	; 0x7b3
 800151c:	617b      	str	r3, [r7, #20]
                          |FourDigitD4_Pin|FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	481e      	ldr	r0, [pc, #120]	; (80015ac <MX_GPIO_Init+0x178>)
 8001532:	f001 f8d3 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PushButtonDown_Pin|PushButtonUp_Pin;
 8001536:	2360      	movs	r3, #96	; 0x60
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001540:	2302      	movs	r3, #2
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4817      	ldr	r0, [pc, #92]	; (80015a8 <MX_GPIO_Init+0x174>)
 800154c:	f001 f8c6 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 8001550:	f24e 0337 	movw	r3, #57399	; 0xe037
 8001554:	617b      	str	r3, [r7, #20]
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4811      	ldr	r0, [pc, #68]	; (80015b0 <MX_GPIO_Init+0x17c>)
 800156a:	f001 f8b7 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PushButtonMode_Pin;
 800156e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001574:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800157a:	2302      	movs	r3, #2
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PushButtonMode_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <MX_GPIO_Init+0x17c>)
 8001586:	f001 f8a9 	bl	80026dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2105      	movs	r1, #5
 800158e:	2017      	movs	r0, #23
 8001590:	f000 fd0a 	bl	8001fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001594:	2017      	movs	r0, #23
 8001596:	f000 fd23 	bl	8001fe0 <HAL_NVIC_EnableIRQ>

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f000 fbfc 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f812 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f7ff ff38 	bl	8001434 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c4:	f7ff fcda 	bl	8000f7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015c8:	f000 fb58 	bl	8001c7c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80015cc:	f000 f8de 	bl	800178c <MX_SPI2_Init>
  MX_RTC_Init();
 80015d0:	f000 f88a 	bl	80016e8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80015d4:	f003 fe28 	bl	8005228 <osKernelInitialize>
  MX_FREERTOS_Init();
 80015d8:	f7ff fcf0 	bl	8000fbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015dc:	f003 fe48 	bl	8005270 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80015e0:	e7fe      	b.n	80015e0 <main+0x2c>
	...

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	; 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	2230      	movs	r2, #48	; 0x30
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 f901 	bl	80087fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <SystemClock_Config+0xcc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <SystemClock_Config+0xcc>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <SystemClock_Config+0xcc>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <SystemClock_Config+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <SystemClock_Config+0xd0>)
 800162e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <SystemClock_Config+0xd0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001640:	2309      	movs	r3, #9
 8001642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800164a:	2301      	movs	r3, #1
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164e:	2302      	movs	r3, #2
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001658:	2304      	movs	r3, #4
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001660:	2302      	movs	r3, #2
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001664:	2304      	movs	r3, #4
 8001666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	4618      	mov	r0, r3
 800166e:	f001 fa0f 	bl	8002a90 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001678:	f000 f830 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167c:	230f      	movs	r3, #15
 800167e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001680:	2302      	movs	r3, #2
 8001682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2103      	movs	r1, #3
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fc71 	bl	8002f80 <HAL_RCC_ClockConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016a4:	f000 f81a 	bl	80016dc <Error_Handler>
  }
}
 80016a8:	bf00      	nop
 80016aa:	3750      	adds	r7, #80	; 0x50
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000

080016b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ca:	f000 fb95 	bl	8001df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40000400 	.word	0x40000400

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <Error_Handler+0x8>
	...

080016e8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_RTC_Init+0x44>)
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <MX_RTC_Init+0x48>)
 80016f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_RTC_Init+0x44>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_RTC_Init+0x44>)
 80016fa:	227f      	movs	r2, #127	; 0x7f
 80016fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_RTC_Init+0x44>)
 8001700:	22ff      	movs	r2, #255	; 0xff
 8001702:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_RTC_Init+0x44>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_RTC_Init+0x44>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_RTC_Init+0x44>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_RTC_Init+0x44>)
 8001718:	f001 ff74 	bl	8003604 <HAL_RTC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001722:	f7ff ffdb 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200000d0 	.word	0x200000d0
 8001730:	40002800 	.word	0x40002800

08001734 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_RTC_MspInit+0x50>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d111      	bne.n	800177c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001758:	2302      	movs	r3, #2
 800175a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800175c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001760:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fe5c 	bl	8003424 <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001772:	f7ff ffb3 	bl	80016dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <HAL_RTC_MspInit+0x54>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40002800 	.word	0x40002800
 8001788:	42470e3c 	.word	0x42470e3c

0800178c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MX_SPI2_Init+0x60>)
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <MX_SPI2_Init+0x64>)
 8001794:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_SPI2_Init+0x60>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_SPI2_Init+0x60>)
 800179e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_SPI2_Init+0x60>)
 80017a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_SPI2_Init+0x60>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_SPI2_Init+0x60>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_SPI2_Init+0x60>)
 80017ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017be:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_SPI2_Init+0x60>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_SPI2_Init+0x60>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_SPI2_Init+0x60>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_SPI2_Init+0x60>)
 80017d4:	220a      	movs	r2, #10
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_SPI2_Init+0x60>)
 80017da:	f002 fa11 	bl	8003c00 <HAL_SPI_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 80017e4:	f7ff ff7a 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200000f0 	.word	0x200000f0
 80017f0:	40003800 	.word	0x40003800

080017f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_SPI_MspInit+0x120>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d17a      	bne.n	800190c <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_SPI_MspInit+0x124>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a3e      	ldr	r2, [pc, #248]	; (8001918 <HAL_SPI_MspInit+0x124>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_SPI_MspInit+0x124>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_SPI_MspInit+0x124>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a37      	ldr	r2, [pc, #220]	; (8001918 <HAL_SPI_MspInit+0x124>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b35      	ldr	r3, [pc, #212]	; (8001918 <HAL_SPI_MspInit+0x124>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_SPI_MspInit+0x124>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a30      	ldr	r2, [pc, #192]	; (8001918 <HAL_SPI_MspInit+0x124>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_SPI_MspInit+0x124>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800186a:	2308      	movs	r3, #8
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800187a:	2305      	movs	r3, #5
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4825      	ldr	r0, [pc, #148]	; (800191c <HAL_SPI_MspInit+0x128>)
 8001886:	f000 ff29 	bl	80026dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800188a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800189c:	2305      	movs	r3, #5
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	481e      	ldr	r0, [pc, #120]	; (8001920 <HAL_SPI_MspInit+0x12c>)
 80018a8:	f000 ff18 	bl	80026dc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018ae:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <HAL_SPI_MspInit+0x134>)
 80018b0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ca:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018da:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <HAL_SPI_MspInit+0x130>)
 80018f2:	f000 fb83 	bl	8001ffc <HAL_DMA_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80018fc:	f7ff feee 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_SPI_MspInit+0x130>)
 8001904:	64da      	str	r2, [r3, #76]	; 0x4c
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_SPI_MspInit+0x130>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40003800 	.word	0x40003800
 8001918:	40023800 	.word	0x40023800
 800191c:	40020800 	.word	0x40020800
 8001920:	40020400 	.word	0x40020400
 8001924:	20000148 	.word	0x20000148
 8001928:	40026058 	.word	0x40026058

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_MspInit+0x54>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_MspInit+0x54>)
 800193c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001940:	6453      	str	r3, [r2, #68]	; 0x44
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x54>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_MspInit+0x54>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_MspInit+0x54>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_MspInit+0x54>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	210f      	movs	r1, #15
 800196e:	f06f 0001 	mvn.w	r0, #1
 8001972:	f000 fb19 	bl	8001fa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08e      	sub	sp, #56	; 0x38
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_InitTick+0xe4>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <HAL_InitTick+0xe4>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
 80019a4:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_InitTick+0xe4>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b0:	f107 0210 	add.w	r2, r7, #16
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fd00 	bl	80033c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ca:	f001 fcd1 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 80019ce:	6378      	str	r0, [r7, #52]	; 0x34
 80019d0:	e004      	b.n	80019dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019d2:	f001 fccd 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 80019d6:	4603      	mov	r3, r0
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_InitTick+0xe8>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9b      	lsrs	r3, r3, #18
 80019e6:	3b01      	subs	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_InitTick+0xec>)
 80019ec:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_InitTick+0xf0>)
 80019ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_InitTick+0xec>)
 80019f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019f6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_InitTick+0xec>)
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_InitTick+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_InitTick+0xec>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_InitTick+0xec>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001a10:	4817      	ldr	r0, [pc, #92]	; (8001a70 <HAL_InitTick+0xec>)
 8001a12:	f002 fd83 	bl	800451c <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11b      	bne.n	8001a5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <HAL_InitTick+0xec>)
 8001a26:	f002 fdd3 	bl	80045d0 <HAL_TIM_Base_Start_IT>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d111      	bne.n	8001a5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a38:	201d      	movs	r0, #29
 8001a3a:	f000 fad1 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d808      	bhi.n	8001a56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	201d      	movs	r0, #29
 8001a4a:	f000 faad 	bl	8001fa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_InitTick+0xf4>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e002      	b.n	8001a5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3738      	adds	r7, #56	; 0x38
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	200001a8 	.word	0x200001a8
 8001a74:	40000400 	.word	0x40000400
 8001a78:	20000004 	.word	0x20000004

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA1_Stream3_IRQHandler+0x10>)
 8001aae:	f000 fbab 	bl	8002208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000148 	.word	0x20000148

08001abc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PushButtonDown_Pin);
 8001ac0:	2020      	movs	r0, #32
 8001ac2:	f000 ffc1 	bl	8002a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PushButtonUp_Pin);
 8001ac6:	2040      	movs	r0, #64	; 0x40
 8001ac8:	f000 ffbe 	bl	8002a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PushButtonMode_Pin);
 8001acc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ad0:	f000 ffba 	bl	8002a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM3_IRQHandler+0x10>)
 8001ade:	f002 fdd9 	bl	8004694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200001a8 	.word	0x200001a8

08001aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e00a      	b.n	8001b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001afe:	f3af 8000 	nop.w
 8001b02:	4601      	mov	r1, r0
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	b2ca      	uxtb	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf0      	blt.n	8001afe <_read+0x12>
  }

  return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e009      	b.n	8001b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 f889 	bl	8001c58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dbf1      	blt.n	8001b38 <_write+0x12>
  }
  return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_close>:

int _close(int file)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b86:	605a      	str	r2, [r3, #4]
  return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_isatty>:

int _isatty(int file)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f006 fea4 	bl	8008944 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20020000 	.word	0x20020000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	200001f0 	.word	0x200001f0
 8001c30:	20004d70 	.word	0x20004d70

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__io_putchar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 8001c60:	1d39      	adds	r1, r7, #4
 8001c62:	230a      	movs	r3, #10
 8001c64:	2201      	movs	r2, #1
 8001c66:	4804      	ldr	r0, [pc, #16]	; (8001c78 <__io_putchar+0x20>)
 8001c68:	f002 ff25 	bl	8004ab6 <HAL_UART_Transmit>
	return ch;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200001f4 	.word	0x200001f4

08001c7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <MX_USART2_UART_Init+0x50>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001cb4:	f002 feb2 	bl	8004a1c <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cbe:	f7ff fd0d 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200001f4 	.word	0x200001f4
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_UART_MspInit+0x84>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d12b      	bne.n	8001d4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_UART_MspInit+0x88>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_UART_MspInit+0x88>)
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_UART_MspInit+0x88>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_UART_MspInit+0x88>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_UART_MspInit+0x88>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_UART_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <HAL_UART_MspInit+0x8c>)
 8001d46:	f000 fcc9 	bl	80026dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40004400 	.word	0x40004400
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000

08001d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d66:	490e      	ldr	r1, [pc, #56]	; (8001da0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d7c:	4c0b      	ldr	r4, [pc, #44]	; (8001dac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d8a:	f7ff ff53 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f006 fddf 	bl	8008950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d92:	f7ff fc0f 	bl	80015b4 <main>
  bx  lr    
 8001d96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001da4:	08009750 	.word	0x08009750
  ldr r2, =_sbss
 8001da8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001dac:	20004d70 	.word	0x20004d70

08001db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_Init+0x40>)
 8001dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_Init+0x40>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_Init+0x40>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 f8d8 	bl	8001f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	200f      	movs	r0, #15
 8001de4:	f7ff fdce 	bl	8001984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff fda0 	bl	800192c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000238 	.word	0x20000238

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000238 	.word	0x20000238

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff4c 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fba:	f7ff ff61 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8001fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f7ff ffb1 	bl	8001f2c <NVIC_EncodePriority>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff80 	bl	8001ed8 <__NVIC_SetPriority>
}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff54 	bl	8001e9c <__NVIC_EnableIRQ>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ff0a 	bl	8001e20 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e099      	b.n	800214c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002038:	e00f      	b.n	800205a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800203a:	f7ff fef1 	bl	8001e20 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b05      	cmp	r3, #5
 8002046:	d908      	bls.n	800205a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e078      	b.n	800214c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e8      	bne.n	800203a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_DMA_Init+0x158>)
 8002074:	4013      	ands	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4313      	orrs	r3, r2
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f023 0307 	bic.w	r3, r3, #7
 80020da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d117      	bne.n	800211e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00e      	beq.n	800211e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fa6f 	bl	80025e4 <DMA_CheckFifoParam>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800211a:	2301      	movs	r3, #1
 800211c:	e016      	b.n	800214c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa26 	bl	8002578 <DMA_CalcBaseAndBitshift>
 800212c:	4603      	mov	r3, r0
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	223f      	movs	r2, #63	; 0x3f
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	f010803f 	.word	0xf010803f

08002158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_DMA_Start_IT+0x26>
 800217a:	2302      	movs	r3, #2
 800217c:	e040      	b.n	8002200 <HAL_DMA_Start_IT+0xa8>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d12f      	bne.n	80021f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f9b8 	bl	800251c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	223f      	movs	r2, #63	; 0x3f
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0216 	orr.w	r2, r2, #22
 80021c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0208 	orr.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e005      	b.n	80021fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
 80021fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002214:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <HAL_DMA_IRQHandler+0x248>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a8e      	ldr	r2, [pc, #568]	; (8002454 <HAL_DMA_IRQHandler+0x24c>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0a9b      	lsrs	r3, r3, #10
 8002220:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2208      	movs	r2, #8
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01a      	beq.n	8002274 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0204 	bic.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	2208      	movs	r2, #8
 8002262:	409a      	lsls	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	2201      	movs	r2, #1
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d012      	beq.n	80022aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	2201      	movs	r2, #1
 8002298:	409a      	lsls	r2, r3
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	f043 0202 	orr.w	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	2204      	movs	r2, #4
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d012      	beq.n	80022e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00b      	beq.n	80022e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	2204      	movs	r2, #4
 80022ce:	409a      	lsls	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	f043 0204 	orr.w	r2, r3, #4
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	2210      	movs	r2, #16
 80022e6:	409a      	lsls	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d043      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03c      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	2210      	movs	r2, #16
 8002304:	409a      	lsls	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d018      	beq.n	800234a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d024      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
 8002336:	e01f      	b.n	8002378 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	4798      	blx	r3
 8002348:	e016      	b.n	8002378 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0208 	bic.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	2220      	movs	r2, #32
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 808f 	beq.w	80024a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8087 	beq.w	80024a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239e:	2220      	movs	r2, #32
 80023a0:	409a      	lsls	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d136      	bne.n	8002420 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0216 	bic.w	r2, r2, #22
 80023c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <HAL_DMA_IRQHandler+0x1da>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0208 	bic.w	r2, r2, #8
 80023f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	223f      	movs	r2, #63	; 0x3f
 80023f8:	409a      	lsls	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002412:	2b00      	cmp	r3, #0
 8002414:	d07e      	beq.n	8002514 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4798      	blx	r3
        }
        return;
 800241e:	e079      	b.n	8002514 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01d      	beq.n	800246a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10d      	bne.n	8002458 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	2b00      	cmp	r3, #0
 8002442:	d031      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
 800244c:	e02c      	b.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
 800244e:	bf00      	nop
 8002450:	20000000 	.word	0x20000000
 8002454:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d023      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
 8002468:	e01e      	b.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10f      	bne.n	8002498 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0210 	bic.w	r2, r2, #16
 8002486:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d032      	beq.n	8002516 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d022      	beq.n	8002502 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2205      	movs	r2, #5
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3301      	adds	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d307      	bcc.n	80024f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f2      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x2cc>
 80024ee:	e000      	b.n	80024f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
 8002512:	e000      	b.n	8002516 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002514:	bf00      	nop
    }
  }
}
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002538:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b40      	cmp	r3, #64	; 0x40
 8002548:	d108      	bne.n	800255c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800255a:	e007      	b.n	800256c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3b10      	subs	r3, #16
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <DMA_CalcBaseAndBitshift+0x64>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002592:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d909      	bls.n	80025ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	1d1a      	adds	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	659a      	str	r2, [r3, #88]	; 0x58
 80025b8:	e007      	b.n	80025ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	aaaaaaab 	.word	0xaaaaaaab
 80025e0:	08009704 	.word	0x08009704

080025e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11f      	bne.n	800263e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d856      	bhi.n	80026b2 <DMA_CheckFifoParam+0xce>
 8002604:	a201      	add	r2, pc, #4	; (adr r2, 800260c <DMA_CheckFifoParam+0x28>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	0800261d 	.word	0x0800261d
 8002610:	0800262f 	.word	0x0800262f
 8002614:	0800261d 	.word	0x0800261d
 8002618:	080026b3 	.word	0x080026b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d046      	beq.n	80026b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262c:	e043      	b.n	80026b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002636:	d140      	bne.n	80026ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263c:	e03d      	b.n	80026ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002646:	d121      	bne.n	800268c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d837      	bhi.n	80026be <DMA_CheckFifoParam+0xda>
 800264e:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <DMA_CheckFifoParam+0x70>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002665 	.word	0x08002665
 8002658:	0800266b 	.word	0x0800266b
 800265c:	08002665 	.word	0x08002665
 8002660:	0800267d 	.word	0x0800267d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e030      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d025      	beq.n	80026c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267a:	e022      	b.n	80026c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002684:	d11f      	bne.n	80026c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800268a:	e01c      	b.n	80026c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d903      	bls.n	800269a <DMA_CheckFifoParam+0xb6>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d003      	beq.n	80026a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002698:	e018      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
      break;
 800269e:	e015      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      break;
 80026b0:	e00b      	b.n	80026ca <DMA_CheckFifoParam+0xe6>
      break;
 80026b2:	bf00      	nop
 80026b4:	e00a      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e008      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e006      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
 80026c0:	e004      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026c2:	bf00      	nop
 80026c4:	e002      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;   
 80026c6:	bf00      	nop
 80026c8:	e000      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026ca:	bf00      	nop
    }
  } 
  
  return status; 
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

080026dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	e159      	b.n	80029ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f8:	2201      	movs	r2, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	f040 8148 	bne.w	80029a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d005      	beq.n	800272e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272a:	2b02      	cmp	r3, #2
 800272c:	d130      	bne.n	8002790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	2203      	movs	r2, #3
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 0201 	and.w	r2, r3, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b03      	cmp	r3, #3
 800279a:	d017      	beq.n	80027cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d123      	bne.n	8002820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	08da      	lsrs	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3208      	adds	r2, #8
 800281a:	69b9      	ldr	r1, [r7, #24]
 800281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80a2 	beq.w	80029a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b57      	ldr	r3, [pc, #348]	; (80029c4 <HAL_GPIO_Init+0x2e8>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	4a56      	ldr	r2, [pc, #344]	; (80029c4 <HAL_GPIO_Init+0x2e8>)
 800286c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002870:	6453      	str	r3, [r2, #68]	; 0x44
 8002872:	4b54      	ldr	r3, [pc, #336]	; (80029c4 <HAL_GPIO_Init+0x2e8>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800287e:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_GPIO_Init+0x2ec>)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3302      	adds	r3, #2
 8002886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a49      	ldr	r2, [pc, #292]	; (80029cc <HAL_GPIO_Init+0x2f0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <HAL_GPIO_Init+0x202>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a48      	ldr	r2, [pc, #288]	; (80029d0 <HAL_GPIO_Init+0x2f4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_Init+0x1fe>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a47      	ldr	r2, [pc, #284]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00d      	beq.n	80028d6 <HAL_GPIO_Init+0x1fa>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a46      	ldr	r2, [pc, #280]	; (80029d8 <HAL_GPIO_Init+0x2fc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <HAL_GPIO_Init+0x1f6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a45      	ldr	r2, [pc, #276]	; (80029dc <HAL_GPIO_Init+0x300>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_GPIO_Init+0x1f2>
 80028ca:	2304      	movs	r3, #4
 80028cc:	e008      	b.n	80028e0 <HAL_GPIO_Init+0x204>
 80028ce:	2307      	movs	r3, #7
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x204>
 80028d2:	2303      	movs	r3, #3
 80028d4:	e004      	b.n	80028e0 <HAL_GPIO_Init+0x204>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e002      	b.n	80028e0 <HAL_GPIO_Init+0x204>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_GPIO_Init+0x204>
 80028de:	2300      	movs	r3, #0
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	f002 0203 	and.w	r2, r2, #3
 80028e6:	0092      	lsls	r2, r2, #2
 80028e8:	4093      	lsls	r3, r2
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f0:	4935      	ldr	r1, [pc, #212]	; (80029c8 <HAL_GPIO_Init+0x2ec>)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_GPIO_Init+0x304>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002922:	4a2f      	ldr	r2, [pc, #188]	; (80029e0 <HAL_GPIO_Init+0x304>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002928:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_GPIO_Init+0x304>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800294c:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <HAL_GPIO_Init+0x304>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002952:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_GPIO_Init+0x304>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002976:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_GPIO_Init+0x304>)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_GPIO_Init+0x304>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a0:	4a0f      	ldr	r2, [pc, #60]	; (80029e0 <HAL_GPIO_Init+0x304>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3301      	adds	r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b0f      	cmp	r3, #15
 80029b0:	f67f aea2 	bls.w	80026f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3724      	adds	r7, #36	; 0x24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40013800 	.word	0x40013800
 80029cc:	40020000 	.word	0x40020000
 80029d0:	40020400 	.word	0x40020400
 80029d4:	40020800 	.word	0x40020800
 80029d8:	40020c00 	.word	0x40020c00
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e001      	b.n	8002a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
 8002a20:	4613      	mov	r3, r2
 8002a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a30:	e003      	b.n	8002a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	041a      	lsls	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	619a      	str	r2, [r3, #24]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f806 	bl	8002a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e267      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d075      	beq.n	8002b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aae:	4b88      	ldr	r3, [pc, #544]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aba:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d112      	bne.n	8002aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac6:	4b82      	ldr	r3, [pc, #520]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad2:	d10b      	bne.n	8002aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	4b7e      	ldr	r3, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d05b      	beq.n	8002b98 <HAL_RCC_OscConfig+0x108>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d157      	bne.n	8002b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e242      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCC_OscConfig+0x74>
 8002af6:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a75      	ldr	r2, [pc, #468]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xb0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x98>
 8002b0e:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6f      	ldr	r2, [pc, #444]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6c      	ldr	r2, [pc, #432]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xb0>
 8002b28:	4b69      	ldr	r3, [pc, #420]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a68      	ldr	r2, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7ff f96a 	bl	8001e20 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b50:	f7ff f966 	bl	8001e20 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e207      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b5b      	ldr	r3, [pc, #364]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xc0>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff f956 	bl	8001e20 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b78:	f7ff f952 	bl	8001e20 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1f3      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0xe8>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb2:	4b47      	ldr	r3, [pc, #284]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d11c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bbe:	4b44      	ldr	r3, [pc, #272]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_RCC_OscConfig+0x152>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1c7      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4937      	ldr	r1, [pc, #220]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	e03a      	b.n	8002c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c00:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7ff f90b 	bl	8001e20 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7ff f907 	bl	8001e20 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1a8      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4925      	ldr	r1, [pc, #148]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_RCC_OscConfig+0x244>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7ff f8ea 	bl	8001e20 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c50:	f7ff f8e6 	bl	8001e20 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e187      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d036      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <HAL_RCC_OscConfig+0x248>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7ff f8ca 	bl	8001e20 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c90:	f7ff f8c6 	bl	8001e20 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e167      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x200>
 8002cae:	e01b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_OscConfig+0x248>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7ff f8b3 	bl	8001e20 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	e00e      	b.n	8002cdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7ff f8af 	bl	8001e20 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d907      	bls.n	8002cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e150      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	42470000 	.word	0x42470000
 8002cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ea      	bne.n	8002cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8097 	beq.w	8002e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfa:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a7c      	ldr	r2, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	4b77      	ldr	r3, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x474>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d118      	bne.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d32:	4b74      	ldr	r3, [pc, #464]	; (8002f04 <HAL_RCC_OscConfig+0x474>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a73      	ldr	r2, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x474>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3e:	f7ff f86f 	bl	8001e20 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7ff f86b 	bl	8001e20 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e10c      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCC_OscConfig+0x474>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x2ea>
 8002d6c:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a63      	ldr	r2, [pc, #396]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x324>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x30c>
 8002d82:	4b5f      	ldr	r3, [pc, #380]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a5e      	ldr	r2, [pc, #376]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8e:	4b5c      	ldr	r3, [pc, #368]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	4a5b      	ldr	r2, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0x324>
 8002d9c:	4b58      	ldr	r3, [pc, #352]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a57      	ldr	r2, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a54      	ldr	r2, [pc, #336]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7ff f830 	bl	8001e20 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc4:	f7ff f82c 	bl	8001e20 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0cb      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ee      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x334>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7ff f81a 	bl	8001e20 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7ff f816 	bl	8001e20 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0b5      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e06:	4b3e      	ldr	r3, [pc, #248]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ee      	bne.n	8002df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a1 	beq.w	8002f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d05c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d141      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_RCC_OscConfig+0x478>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe ffea 	bl	8001e20 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe ffe6 	bl	8001e20 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e087      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	3b01      	subs	r3, #1
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	491b      	ldr	r1, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_RCC_OscConfig+0x478>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fe ffbf 	bl	8001e20 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fe ffbb 	bl	8001e20 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e05c      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x416>
 8002ec4:	e054      	b.n	8002f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_RCC_OscConfig+0x478>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe ffa8 	bl	8001e20 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fe ffa4 	bl	8001e20 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e045      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x444>
 8002ef2:	e03d      	b.n	8002f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e038      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40007000 	.word	0x40007000
 8002f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x4ec>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d028      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d121      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d11a      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d111      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	3b01      	subs	r3, #1
 8002f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800

08002f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0cc      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b68      	ldr	r3, [pc, #416]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d90c      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd4:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	494d      	ldr	r1, [pc, #308]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d044      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d119      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d003      	beq.n	800303e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303a:	2b03      	cmp	r3, #3
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304e:	4b3b      	ldr	r3, [pc, #236]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e067      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4b37      	ldr	r3, [pc, #220]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4934      	ldr	r1, [pc, #208]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003070:	f7fe fed6 	bl	8001e20 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fe fed2 	bl	8001e20 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e04f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a0:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d20c      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e032      	b.n	800312e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4916      	ldr	r1, [pc, #88]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490e      	ldr	r1, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003106:	f000 f821 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490a      	ldr	r1, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fc2c 	bl	8001984 <HAL_InitTick>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023c00 	.word	0x40023c00
 800313c:	40023800 	.word	0x40023800
 8003140:	080096ec 	.word	0x080096ec
 8003144:	20000000 	.word	0x20000000
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003150:	b094      	sub	sp, #80	; 0x50
 8003152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	647b      	str	r3, [r7, #68]	; 0x44
 8003158:	2300      	movs	r3, #0
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800315c:	2300      	movs	r3, #0
 800315e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003164:	4b79      	ldr	r3, [pc, #484]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b08      	cmp	r3, #8
 800316e:	d00d      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x40>
 8003170:	2b08      	cmp	r3, #8
 8003172:	f200 80e1 	bhi.w	8003338 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x34>
 800317a:	2b04      	cmp	r3, #4
 800317c:	d003      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x3a>
 800317e:	e0db      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b73      	ldr	r3, [pc, #460]	; (8003350 <HAL_RCC_GetSysClockFreq+0x204>)
 8003182:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003184:	e0db      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003186:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCC_GetSysClockFreq+0x208>)
 8003188:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800318a:	e0d8      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800318c:	4b6f      	ldr	r3, [pc, #444]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003196:	4b6d      	ldr	r3, [pc, #436]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d063      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a2:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	2200      	movs	r2, #0
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b4:	633b      	str	r3, [r7, #48]	; 0x30
 80031b6:	2300      	movs	r3, #0
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031be:	4622      	mov	r2, r4
 80031c0:	462b      	mov	r3, r5
 80031c2:	f04f 0000 	mov.w	r0, #0
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	0159      	lsls	r1, r3, #5
 80031cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d0:	0150      	lsls	r0, r2, #5
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4621      	mov	r1, r4
 80031d8:	1a51      	subs	r1, r2, r1
 80031da:	6139      	str	r1, [r7, #16]
 80031dc:	4629      	mov	r1, r5
 80031de:	eb63 0301 	sbc.w	r3, r3, r1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f0:	4659      	mov	r1, fp
 80031f2:	018b      	lsls	r3, r1, #6
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031fa:	4651      	mov	r1, sl
 80031fc:	018a      	lsls	r2, r1, #6
 80031fe:	4651      	mov	r1, sl
 8003200:	ebb2 0801 	subs.w	r8, r2, r1
 8003204:	4659      	mov	r1, fp
 8003206:	eb63 0901 	sbc.w	r9, r3, r1
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800321a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800321e:	4690      	mov	r8, r2
 8003220:	4699      	mov	r9, r3
 8003222:	4623      	mov	r3, r4
 8003224:	eb18 0303 	adds.w	r3, r8, r3
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	462b      	mov	r3, r5
 800322c:	eb49 0303 	adc.w	r3, r9, r3
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800323e:	4629      	mov	r1, r5
 8003240:	024b      	lsls	r3, r1, #9
 8003242:	4621      	mov	r1, r4
 8003244:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003248:	4621      	mov	r1, r4
 800324a:	024a      	lsls	r2, r1, #9
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003252:	2200      	movs	r2, #0
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
 8003256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003258:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800325c:	f7fd f810 	bl	8000280 <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4613      	mov	r3, r2
 8003266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003268:	e058      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326a:	4b38      	ldr	r3, [pc, #224]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	099b      	lsrs	r3, r3, #6
 8003270:	2200      	movs	r2, #0
 8003272:	4618      	mov	r0, r3
 8003274:	4611      	mov	r1, r2
 8003276:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800327a:	623b      	str	r3, [r7, #32]
 800327c:	2300      	movs	r3, #0
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
 8003280:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003284:	4642      	mov	r2, r8
 8003286:	464b      	mov	r3, r9
 8003288:	f04f 0000 	mov.w	r0, #0
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	0159      	lsls	r1, r3, #5
 8003292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003296:	0150      	lsls	r0, r2, #5
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4641      	mov	r1, r8
 800329e:	ebb2 0a01 	subs.w	sl, r2, r1
 80032a2:	4649      	mov	r1, r9
 80032a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032bc:	ebb2 040a 	subs.w	r4, r2, sl
 80032c0:	eb63 050b 	sbc.w	r5, r3, fp
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	00eb      	lsls	r3, r5, #3
 80032ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d2:	00e2      	lsls	r2, r4, #3
 80032d4:	4614      	mov	r4, r2
 80032d6:	461d      	mov	r5, r3
 80032d8:	4643      	mov	r3, r8
 80032da:	18e3      	adds	r3, r4, r3
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	464b      	mov	r3, r9
 80032e0:	eb45 0303 	adc.w	r3, r5, r3
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f2:	4629      	mov	r1, r5
 80032f4:	028b      	lsls	r3, r1, #10
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032fc:	4621      	mov	r1, r4
 80032fe:	028a      	lsls	r2, r1, #10
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003306:	2200      	movs	r2, #0
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	61fa      	str	r2, [r7, #28]
 800330c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003310:	f7fc ffb6 	bl	8000280 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_GetSysClockFreq+0x200>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	3301      	adds	r3, #1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800332c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800332e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003336:	e002      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetSysClockFreq+0x204>)
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800333c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003340:	4618      	mov	r0, r3
 8003342:	3750      	adds	r7, #80	; 0x50
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	00f42400 	.word	0x00f42400
 8003354:	007a1200 	.word	0x007a1200

08003358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <HAL_RCC_GetHCLKFreq+0x14>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000000 	.word	0x20000000

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003374:	f7ff fff0 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0a9b      	lsrs	r3, r3, #10
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	080096fc 	.word	0x080096fc

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800339c:	f7ff ffdc 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0b5b      	lsrs	r3, r3, #13
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	080096fc 	.word	0x080096fc

080033c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	220f      	movs	r2, #15
 80033ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_GetClockConfig+0x5c>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_RCC_GetClockConfig+0x5c>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_RCC_GetClockConfig+0x5c>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_GetClockConfig+0x5c>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	08db      	lsrs	r3, r3, #3
 80033fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <HAL_RCC_GetClockConfig+0x60>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0207 	and.w	r2, r3, #7
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	601a      	str	r2, [r3, #0]
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	40023c00 	.word	0x40023c00

08003424 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003448:	2b00      	cmp	r3, #0
 800344a:	d038      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800344c:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003452:	f7fe fce5 	bl	8001e20 <HAL_GetTick>
 8003456:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003458:	e008      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800345a:	f7fe fce1 	bl	8001e20 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0bd      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800346c:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f0      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	071b      	lsls	r3, r3, #28
 800348a:	495a      	ldr	r1, [pc, #360]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003492:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003498:	f7fe fcc2 	bl	8001e20 <HAL_GetTick>
 800349c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034a0:	f7fe fcbe 	bl	8001e20 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e09a      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034b2:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8083 	beq.w	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	4b48      	ldr	r3, [pc, #288]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	4a47      	ldr	r2, [pc, #284]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034da:	6413      	str	r3, [r2, #64]	; 0x40
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034e8:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a42      	ldr	r2, [pc, #264]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fe fc94 	bl	8001e20 <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034fc:	f7fe fc90 	bl	8001e20 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e06c      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800350e:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800351a:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003522:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02f      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d028      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003538:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003540:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003548:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800354e:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d114      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003560:	f7fe fc5e 	bl	8001e20 <HAL_GetTick>
 8003564:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	e00a      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fe fc5a 	bl	8001e20 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e034      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0ee      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003596:	d10d      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ac:	4911      	ldr	r1, [pc, #68]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
 80035b2:	e005      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035be:	6093      	str	r3, [r2, #8]
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035cc:	4909      	ldr	r1, [pc, #36]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7d1a      	ldrb	r2, [r3, #20]
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80035e4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	42470068 	.word	0x42470068
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40007000 	.word	0x40007000
 80035fc:	42470e40 	.word	0x42470e40
 8003600:	424711e0 	.word	0x424711e0

08003604 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e066      	b.n	80036e8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7f5b      	ldrb	r3, [r3, #29]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fe f882 	bl	8001734 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	22ca      	movs	r2, #202	; 0xca
 800363c:	625a      	str	r2, [r3, #36]	; 0x24
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2253      	movs	r2, #83	; 0x53
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa45 	bl	8003ad6 <RTC_EnterInitMode>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d12c      	bne.n	80036b0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003668:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6899      	ldr	r1, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68d2      	ldr	r2, [r2, #12]
 8003690:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6919      	ldr	r1, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	041a      	lsls	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa4c 	bl	8003b44 <RTC_ExitInitMode>
 80036ac:	4603      	mov	r3, r0
 80036ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d113      	bne.n	80036de <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699a      	ldr	r2, [r3, #24]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	22ff      	movs	r2, #255	; 0xff
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	7f1b      	ldrb	r3, [r3, #28]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_RTC_SetTime+0x1c>
 8003708:	2302      	movs	r3, #2
 800370a:	e087      	b.n	800381c <HAL_RTC_SetTime+0x12c>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2202      	movs	r2, #2
 8003716:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d126      	bne.n	800376c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2200      	movs	r2, #0
 8003730:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fa29 	bl	8003b8e <RTC_ByteToBcd2>
 800373c:	4603      	mov	r3, r0
 800373e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fa22 	bl	8003b8e <RTC_ByteToBcd2>
 800374a:	4603      	mov	r3, r0
 800374c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800374e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	789b      	ldrb	r3, [r3, #2]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fa1a 	bl	8003b8e <RTC_ByteToBcd2>
 800375a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800375c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	78db      	ldrb	r3, [r3, #3]
 8003764:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e018      	b.n	800379e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2200      	movs	r2, #0
 800377e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	785b      	ldrb	r3, [r3, #1]
 800378a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800378c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003792:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	78db      	ldrb	r3, [r3, #3]
 8003798:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	22ca      	movs	r2, #202	; 0xca
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2253      	movs	r2, #83	; 0x53
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f991 	bl	8003ad6 <RTC_EnterInitMode>
 80037b4:	4603      	mov	r3, r0
 80037b6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d120      	bne.n	8003800 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037cc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6899      	ldr	r1, [r3, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f9a4 	bl	8003b44 <RTC_ExitInitMode>
 80037fc:	4603      	mov	r3, r0
 80037fe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	771a      	strb	r2, [r3, #28]

  return status;
 800381a:	7cfb      	ldrb	r3, [r7, #19]
}
 800381c:	4618      	mov	r0, r3
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	bd90      	pop	{r4, r7, pc}

08003824 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003856:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800385a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	0c1b      	lsrs	r3, r3, #16
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003866:	b2da      	uxtb	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	0d9b      	lsrs	r3, r3, #22
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	b2da      	uxtb	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11a      	bne.n	80038d6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f98f 	bl	8003bc8 <RTC_Bcd2ToByte>
 80038aa:	4603      	mov	r3, r0
 80038ac:	461a      	mov	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f986 	bl	8003bc8 <RTC_Bcd2ToByte>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	789b      	ldrb	r3, [r3, #2]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f97d 	bl	8003bc8 <RTC_Bcd2ToByte>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	7f1b      	ldrb	r3, [r3, #28]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_RTC_SetDate+0x1c>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e071      	b.n	80039e0 <HAL_RTC_SetDate+0x100>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2202      	movs	r2, #2
 8003906:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10e      	bne.n	800392c <HAL_RTC_SetDate+0x4c>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	785b      	ldrb	r3, [r3, #1]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	f023 0310 	bic.w	r3, r3, #16
 8003922:	b2db      	uxtb	r3, r3
 8003924:	330a      	adds	r3, #10
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11c      	bne.n	800396c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	78db      	ldrb	r3, [r3, #3]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f929 	bl	8003b8e <RTC_ByteToBcd2>
 800393c:	4603      	mov	r3, r0
 800393e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	785b      	ldrb	r3, [r3, #1]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f922 	bl	8003b8e <RTC_ByteToBcd2>
 800394a:	4603      	mov	r3, r0
 800394c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800394e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	789b      	ldrb	r3, [r3, #2]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f91a 	bl	8003b8e <RTC_ByteToBcd2>
 800395a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800395c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e00e      	b.n	800398a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	78db      	ldrb	r3, [r3, #3]
 8003970:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003978:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800397e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	22ca      	movs	r2, #202	; 0xca
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2253      	movs	r2, #83	; 0x53
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f89b 	bl	8003ad6 <RTC_EnterInitMode>
 80039a0:	4603      	mov	r3, r0
 80039a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f8c2 	bl	8003b44 <RTC_ExitInitMode>
 80039c0:	4603      	mov	r3, r0
 80039c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	22ff      	movs	r2, #255	; 0xff
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	771a      	strb	r2, [r3, #28]

  return status;
 80039de:	7cfb      	ldrb	r3, [r7, #19]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd90      	pop	{r4, r7, pc}

080039e8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	0c1b      	lsrs	r3, r3, #16
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	0b5b      	lsrs	r3, r3, #13
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11a      	bne.n	8003a7c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	78db      	ldrb	r3, [r3, #3]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f8bc 	bl	8003bc8 <RTC_Bcd2ToByte>
 8003a50:	4603      	mov	r3, r0
 8003a52:	461a      	mov	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 f8b3 	bl	8003bc8 <RTC_Bcd2ToByte>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	789b      	ldrb	r3, [r3, #2]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f8aa 	bl	8003bc8 <RTC_Bcd2ToByte>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aa0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa2:	f7fe f9bd 	bl	8001e20 <HAL_GetTick>
 8003aa6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003aa8:	e009      	b.n	8003abe <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003aaa:	f7fe f9b9 	bl	8001e20 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab8:	d901      	bls.n	8003abe <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e007      	b.n	8003ace <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ee      	beq.n	8003aaa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d122      	bne.n	8003b3a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b02:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fe f98c 	bl	8001e20 <HAL_GetTick>
 8003b08:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b0a:	e00c      	b.n	8003b26 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b0c:	f7fe f988 	bl	8001e20 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b1a:	d904      	bls.n	8003b26 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <RTC_EnterInitMode+0x64>
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d1e8      	bne.n	8003b0c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ff89 	bl	8003a86 <HAL_RTC_WaitForSynchro>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003b9c:	e005      	b.n	8003baa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	3b0a      	subs	r3, #10
 8003ba8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	2b09      	cmp	r3, #9
 8003bae:	d8f6      	bhi.n	8003b9e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b2db      	uxtb	r3, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b2db      	uxtb	r3, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07b      	b.n	8003d0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d108      	bne.n	8003c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c22:	d009      	beq.n	8003c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	61da      	str	r2, [r3, #28]
 8003c2a:	e005      	b.n	8003c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fdce 	bl	80017f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	ea42 0103 	orr.w	r1, r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	f003 0104 	and.w	r1, r3, #4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f003 0210 	and.w	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d110      	bne.n	8003d50 <HAL_SPI_Receive_DMA+0x3c>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d36:	d10b      	bne.n	8003d50 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f8ac 	bl	8003ea4 <HAL_SPI_TransmitReceive_DMA>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	e09f      	b.n	8003e90 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_SPI_Receive_DMA+0x4a>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e098      	b.n	8003e90 <HAL_SPI_Receive_DMA+0x17c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d002      	beq.n	8003d78 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003d72:	2302      	movs	r3, #2
 8003d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d76:	e086      	b.n	8003e86 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_SPI_Receive_DMA+0x70>
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d102      	bne.n	8003d8a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d88:	e07d      	b.n	8003e86 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	88fa      	ldrh	r2, [r7, #6]
 8003da2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	88fa      	ldrh	r2, [r7, #6]
 8003da8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dca:	d10f      	bne.n	8003dec <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <HAL_SPI_Receive_DMA+0x184>)
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df8:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <HAL_SPI_Receive_DMA+0x188>)
 8003dfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e00:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <HAL_SPI_Receive_DMA+0x18c>)
 8003e02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e08:	2200      	movs	r2, #0
 8003e0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	330c      	adds	r3, #12
 8003e16:	4619      	mov	r1, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003e24:	f7fe f998 	bl	8002158 <HAL_DMA_Start_IT>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00c      	beq.n	8003e48 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	f043 0210 	orr.w	r2, r3, #16
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003e46:	e01e      	b.n	8003e86 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d007      	beq.n	8003e66 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e64:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0220 	orr.w	r2, r2, #32
 8003e74:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	08004245 	.word	0x08004245
 8003e9c:	0800410d 	.word	0x0800410d
 8003ea0:	0800427d 	.word	0x0800427d

08003ea4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0e3      	b.n	800408c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003eda:	7dbb      	ldrb	r3, [r7, #22]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d00d      	beq.n	8003efc <HAL_SPI_TransmitReceive_DMA+0x58>
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee6:	d106      	bne.n	8003ef6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003ef0:	7dbb      	ldrb	r3, [r7, #22]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003efa:	e0c2      	b.n	8004082 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f12:	e0b6      	b.n	8004082 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d003      	beq.n	8003f28 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2205      	movs	r2, #5
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	887a      	ldrh	r2, [r7, #2]
 8003f38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	887a      	ldrh	r2, [r7, #2]
 8003f3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	887a      	ldrh	r2, [r7, #2]
 8003f4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d108      	bne.n	8003f7c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	4a49      	ldr	r2, [pc, #292]	; (8004094 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	4a48      	ldr	r2, [pc, #288]	; (8004098 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f7a:	e007      	b.n	8003f8c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f80:	4a46      	ldr	r2, [pc, #280]	; (800409c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f88:	4a45      	ldr	r2, [pc, #276]	; (80040a0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003f8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f90:	4a44      	ldr	r2, [pc, #272]	; (80040a4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003f92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f98:	2200      	movs	r2, #0
 8003f9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003fb4:	f7fe f8d0 	bl	8002158 <HAL_DMA_Start_IT>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f043 0210 	orr.w	r2, r3, #16
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003fd6:	e054      	b.n	8004082 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004004:	2200      	movs	r2, #0
 8004006:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	4619      	mov	r1, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004020:	f7fe f89a 	bl	8002158 <HAL_DMA_Start_IT>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f043 0210 	orr.w	r2, r3, #16
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004042:	e01e      	b.n	8004082 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d007      	beq.n	8004062 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004060:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0220 	orr.w	r2, r2, #32
 8004070:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0202 	orr.w	r2, r2, #2
 8004080:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800408a:	7dfb      	ldrb	r3, [r7, #23]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	08004245 	.word	0x08004245
 8004098:	0800410d 	.word	0x0800410d
 800409c:	08004261 	.word	0x08004261
 80040a0:	080041b5 	.word	0x080041b5
 80040a4:	0800427d 	.word	0x0800427d

080040a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800411a:	f7fd fe81 	bl	8001e20 <HAL_GetTick>
 800411e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412e:	d03b      	beq.n	80041a8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0220 	bic.w	r2, r2, #32
 800413e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10d      	bne.n	8004164 <SPI_DMAReceiveCplt+0x58>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004150:	d108      	bne.n	8004164 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0203 	bic.w	r2, r2, #3
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	e007      	b.n	8004174 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f927 	bl	80043cc <SPI_EndRxTransaction>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f7ff ffa9 	bl	80040f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80041a6:	e002      	b.n	80041ae <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7ff ff7d 	bl	80040a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041c2:	f7fd fe2d 	bl	8001e20 <HAL_GetTick>
 80041c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d6:	d02f      	beq.n	8004238 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0220 	bic.w	r2, r2, #32
 80041e6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	2164      	movs	r1, #100	; 0x64
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f953 	bl	8004498 <SPI_EndRxTxTransaction>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0203 	bic.w	r2, r2, #3
 8004212:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff ff61 	bl	80040f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004236:	e002      	b.n	800423e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff ff3f 	bl	80040bc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff ff3c 	bl	80040d0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff ff38 	bl	80040e4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0203 	bic.w	r2, r2, #3
 8004298:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f043 0210 	orr.w	r2, r3, #16
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f7ff ff22 	bl	80040f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042cc:	f7fd fda8 	bl	8001e20 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042dc:	f7fd fda0 	bl	8001e20 <HAL_GetTick>
 80042e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042e2:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	015b      	lsls	r3, r3, #5
 80042e8:	0d1b      	lsrs	r3, r3, #20
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f2:	e054      	b.n	800439e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d050      	beq.n	800439e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042fc:	f7fd fd90 	bl	8001e20 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	429a      	cmp	r2, r3
 800430a:	d902      	bls.n	8004312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d13d      	bne.n	800438e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432a:	d111      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004334:	d004      	beq.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433e:	d107      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004358:	d10f      	bne.n	800437a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e017      	b.n	80043be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3b01      	subs	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4013      	ands	r3, r2
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d19b      	bne.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000000 	.word	0x20000000

080043cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e0:	d111      	bne.n	8004406 <SPI_EndRxTransaction+0x3a>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ea:	d004      	beq.n	80043f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f4:	d107      	bne.n	8004406 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004404:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440e:	d12a      	bne.n	8004466 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004418:	d012      	beq.n	8004440 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2200      	movs	r2, #0
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff ff49 	bl	80042bc <SPI_WaitFlagStateUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d02d      	beq.n	800448c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e026      	b.n	800448e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	2101      	movs	r1, #1
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff ff36 	bl	80042bc <SPI_WaitFlagStateUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01a      	beq.n	800448c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e013      	b.n	800448e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2200      	movs	r2, #0
 800446e:	2101      	movs	r1, #1
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff ff23 	bl	80042bc <SPI_WaitFlagStateUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e000      	b.n	800448e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <SPI_EndRxTxTransaction+0x7c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <SPI_EndRxTxTransaction+0x80>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0d5b      	lsrs	r3, r3, #21
 80044b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c2:	d112      	bne.n	80044ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fef4 	bl	80042bc <SPI_WaitFlagStateUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e00f      	b.n	800450a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d0f2      	beq.n	80044ea <SPI_EndRxTxTransaction+0x52>
 8004504:	e000      	b.n	8004508 <SPI_EndRxTxTransaction+0x70>
        break;
 8004506:	bf00      	nop
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000000 	.word	0x20000000
 8004518:	165e9f81 	.word	0x165e9f81

0800451c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e041      	b.n	80045b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f839 	bl	80045ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f000 f9ca 	bl	80048f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e044      	b.n	8004672 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1e      	ldr	r2, [pc, #120]	; (8004680 <HAL_TIM_Base_Start_IT+0xb0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d018      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d013      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <HAL_TIM_Base_Start_IT+0xb4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00e      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a19      	ldr	r2, [pc, #100]	; (8004688 <HAL_TIM_Base_Start_IT+0xb8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <HAL_TIM_Base_Start_IT+0xbc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a16      	ldr	r2, [pc, #88]	; (8004690 <HAL_TIM_Base_Start_IT+0xc0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d111      	bne.n	8004660 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b06      	cmp	r3, #6
 800464c:	d010      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465e:	e007      	b.n	8004670 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40010000 	.word	0x40010000
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40000c00 	.word	0x40000c00
 8004690:	40014000 	.word	0x40014000

08004694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d122      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d11b      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0202 	mvn.w	r2, #2
 80046c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f8ee 	bl	80048b8 <HAL_TIM_IC_CaptureCallback>
 80046dc:	e005      	b.n	80046ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8e0 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f8f1 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d122      	bne.n	8004744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b04      	cmp	r3, #4
 800470a:	d11b      	bne.n	8004744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0204 	mvn.w	r2, #4
 8004714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8c4 	bl	80048b8 <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8b6 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f8c7 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b08      	cmp	r3, #8
 8004750:	d122      	bne.n	8004798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b08      	cmp	r3, #8
 800475e:	d11b      	bne.n	8004798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0208 	mvn.w	r2, #8
 8004768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2204      	movs	r2, #4
 800476e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f89a 	bl	80048b8 <HAL_TIM_IC_CaptureCallback>
 8004784:	e005      	b.n	8004792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f88c 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f89d 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d122      	bne.n	80047ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d11b      	bne.n	80047ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0210 	mvn.w	r2, #16
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2208      	movs	r2, #8
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f870 	bl	80048b8 <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f862 	bl	80048a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f873 	bl	80048cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10e      	bne.n	8004818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b01      	cmp	r3, #1
 8004806:	d107      	bne.n	8004818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0201 	mvn.w	r2, #1
 8004810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc ff50 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	d10e      	bne.n	8004844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004830:	2b80      	cmp	r3, #128	; 0x80
 8004832:	d107      	bne.n	8004844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800483c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8e2 	bl	8004a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d10e      	bne.n	8004870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d107      	bne.n	8004870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f838 	bl	80048e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b20      	cmp	r3, #32
 800487c:	d10e      	bne.n	800489c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b20      	cmp	r3, #32
 800488a:	d107      	bne.n	800489c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0220 	mvn.w	r2, #32
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8ac 	bl	80049f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a34      	ldr	r2, [pc, #208]	; (80049d8 <TIM_Base_SetConfig+0xe4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00f      	beq.n	800492c <TIM_Base_SetConfig+0x38>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d00b      	beq.n	800492c <TIM_Base_SetConfig+0x38>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a31      	ldr	r2, [pc, #196]	; (80049dc <TIM_Base_SetConfig+0xe8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_Base_SetConfig+0x38>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a30      	ldr	r2, [pc, #192]	; (80049e0 <TIM_Base_SetConfig+0xec>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0x38>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a2f      	ldr	r2, [pc, #188]	; (80049e4 <TIM_Base_SetConfig+0xf0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a25      	ldr	r2, [pc, #148]	; (80049d8 <TIM_Base_SetConfig+0xe4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01b      	beq.n	800497e <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d017      	beq.n	800497e <TIM_Base_SetConfig+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a22      	ldr	r2, [pc, #136]	; (80049dc <TIM_Base_SetConfig+0xe8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <TIM_Base_SetConfig+0x8a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <TIM_Base_SetConfig+0xec>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00f      	beq.n	800497e <TIM_Base_SetConfig+0x8a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <TIM_Base_SetConfig+0xf0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00b      	beq.n	800497e <TIM_Base_SetConfig+0x8a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <TIM_Base_SetConfig+0xf4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <TIM_Base_SetConfig+0x8a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <TIM_Base_SetConfig+0xf8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_Base_SetConfig+0x8a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <TIM_Base_SetConfig+0xfc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d108      	bne.n	8004990 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <TIM_Base_SetConfig+0xe4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d103      	bne.n	80049c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	615a      	str	r2, [r3, #20]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40014400 	.word	0x40014400
 80049f0:	40014800 	.word	0x40014800

080049f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e03f      	b.n	8004aae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fd f944 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	; 0x24
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f929 	bl	8004cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b08a      	sub	sp, #40	; 0x28
 8004aba:	af02      	add	r7, sp, #8
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d17c      	bne.n	8004bd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_UART_Transmit+0x2c>
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e075      	b.n	8004bd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_UART_Transmit+0x3e>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e06e      	b.n	8004bd2 <HAL_UART_Transmit+0x11c>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2221      	movs	r2, #33	; 0x21
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b0a:	f7fd f989 	bl	8001e20 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b24:	d108      	bne.n	8004b38 <HAL_UART_Transmit+0x82>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e003      	b.n	8004b40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b48:	e02a      	b.n	8004ba0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2200      	movs	r2, #0
 8004b52:	2180      	movs	r1, #128	; 0x80
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f840 	bl	8004bda <UART_WaitOnFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e036      	b.n	8004bd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	3302      	adds	r3, #2
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	e007      	b.n	8004b92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	781a      	ldrb	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1cf      	bne.n	8004b4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2140      	movs	r1, #64	; 0x40
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f810 	bl	8004bda <UART_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e006      	b.n	8004bd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e000      	b.n	8004bd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bd0:	2302      	movs	r3, #2
  }
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b090      	sub	sp, #64	; 0x40
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bea:	e050      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d04c      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8004bfa:	f7fd f911 	bl	8001e20 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d241      	bcs.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c2a:	637a      	str	r2, [r7, #52]	; 0x34
 8004c2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e5      	bne.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c5e:	623a      	str	r2, [r7, #32]
 8004c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	69f9      	ldr	r1, [r7, #28]
 8004c64:	6a3a      	ldr	r2, [r7, #32]
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e00f      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4013      	ands	r3, r2
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d09f      	beq.n	8004bec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3740      	adds	r7, #64	; 0x40
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cbc:	b0c0      	sub	sp, #256	; 0x100
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	68d9      	ldr	r1, [r3, #12]
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	ea40 0301 	orr.w	r3, r0, r1
 8004ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d10:	f021 010c 	bic.w	r1, r1, #12
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d32:	6999      	ldr	r1, [r3, #24]
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	ea40 0301 	orr.w	r3, r0, r1
 8004d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b8f      	ldr	r3, [pc, #572]	; (8004f84 <UART_SetConfig+0x2cc>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d005      	beq.n	8004d58 <UART_SetConfig+0xa0>
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b8d      	ldr	r3, [pc, #564]	; (8004f88 <UART_SetConfig+0x2d0>)
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d104      	bne.n	8004d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe fb1e 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 8004d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d60:	e003      	b.n	8004d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d62:	f7fe fb05 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 8004d66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d74:	f040 810c 	bne.w	8004f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d92:	415b      	adcs	r3, r3
 8004d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	eb12 0801 	adds.w	r8, r2, r1
 8004da0:	4629      	mov	r1, r5
 8004da2:	eb43 0901 	adc.w	r9, r3, r1
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dba:	4690      	mov	r8, r2
 8004dbc:	4699      	mov	r9, r3
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	eb18 0303 	adds.w	r3, r8, r3
 8004dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dc8:	462b      	mov	r3, r5
 8004dca:	eb49 0303 	adc.w	r3, r9, r3
 8004dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004de6:	460b      	mov	r3, r1
 8004de8:	18db      	adds	r3, r3, r3
 8004dea:	653b      	str	r3, [r7, #80]	; 0x50
 8004dec:	4613      	mov	r3, r2
 8004dee:	eb42 0303 	adc.w	r3, r2, r3
 8004df2:	657b      	str	r3, [r7, #84]	; 0x54
 8004df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dfc:	f7fb fa40 	bl	8000280 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4b61      	ldr	r3, [pc, #388]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004e06:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	011c      	lsls	r4, r3, #4
 8004e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	1891      	adds	r1, r2, r2
 8004e26:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e28:	415b      	adcs	r3, r3
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e30:	4641      	mov	r1, r8
 8004e32:	eb12 0a01 	adds.w	sl, r2, r1
 8004e36:	4649      	mov	r1, r9
 8004e38:	eb43 0b01 	adc.w	fp, r3, r1
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e50:	4692      	mov	sl, r2
 8004e52:	469b      	mov	fp, r3
 8004e54:	4643      	mov	r3, r8
 8004e56:	eb1a 0303 	adds.w	r3, sl, r3
 8004e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	eb4b 0303 	adc.w	r3, fp, r3
 8004e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	18db      	adds	r3, r3, r3
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
 8004e82:	4613      	mov	r3, r2
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e92:	f7fb f9f5 	bl	8000280 <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2264      	movs	r2, #100	; 0x64
 8004ea6:	fb02 f303 	mul.w	r3, r2, r3
 8004eaa:	1acb      	subs	r3, r1, r3
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eb2:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ec0:	441c      	add	r4, r3
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	63b9      	str	r1, [r7, #56]	; 0x38
 8004edc:	415b      	adcs	r3, r3
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	1851      	adds	r1, r2, r1
 8004ee8:	6339      	str	r1, [r7, #48]	; 0x30
 8004eea:	4649      	mov	r1, r9
 8004eec:	414b      	adcs	r3, r1
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004efc:	4659      	mov	r1, fp
 8004efe:	00cb      	lsls	r3, r1, #3
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f06:	4651      	mov	r1, sl
 8004f08:	00ca      	lsls	r2, r1, #3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4642      	mov	r2, r8
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f18:	464b      	mov	r3, r9
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	eb42 0303 	adc.w	r3, r2, r3
 8004f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f38:	460b      	mov	r3, r1
 8004f3a:	18db      	adds	r3, r3, r3
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3e:	4613      	mov	r3, r2
 8004f40:	eb42 0303 	adc.w	r3, r2, r3
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f4e:	f7fb f997 	bl	8000280 <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004f58:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	2164      	movs	r1, #100	; 0x64
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	3332      	adds	r3, #50	; 0x32
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <UART_SetConfig+0x2d4>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	f003 0207 	and.w	r2, r3, #7
 8004f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4422      	add	r2, r4
 8004f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f80:	e106      	b.n	8005190 <UART_SetConfig+0x4d8>
 8004f82:	bf00      	nop
 8004f84:	40011000 	.word	0x40011000
 8004f88:	40011400 	.word	0x40011400
 8004f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fa2:	4642      	mov	r2, r8
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	1891      	adds	r1, r2, r2
 8004fa8:	6239      	str	r1, [r7, #32]
 8004faa:	415b      	adcs	r3, r3
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	1854      	adds	r4, r2, r1
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	eb43 0501 	adc.w	r5, r3, r1
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	00eb      	lsls	r3, r5, #3
 8004fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fca:	00e2      	lsls	r2, r4, #3
 8004fcc:	4614      	mov	r4, r2
 8004fce:	461d      	mov	r5, r3
 8004fd0:	4643      	mov	r3, r8
 8004fd2:	18e3      	adds	r3, r4, r3
 8004fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fd8:	464b      	mov	r3, r9
 8004fda:	eb45 0303 	adc.w	r3, r5, r3
 8004fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ffe:	4629      	mov	r1, r5
 8005000:	008b      	lsls	r3, r1, #2
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005008:	4621      	mov	r1, r4
 800500a:	008a      	lsls	r2, r1, #2
 800500c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005010:	f7fb f936 	bl	8000280 <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4b60      	ldr	r3, [pc, #384]	; (800519c <UART_SetConfig+0x4e4>)
 800501a:	fba3 2302 	umull	r2, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	011c      	lsls	r4, r3, #4
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800502c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	61b9      	str	r1, [r7, #24]
 800503c:	415b      	adcs	r3, r3
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005044:	4641      	mov	r1, r8
 8005046:	1851      	adds	r1, r2, r1
 8005048:	6139      	str	r1, [r7, #16]
 800504a:	4649      	mov	r1, r9
 800504c:	414b      	adcs	r3, r1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800505c:	4659      	mov	r1, fp
 800505e:	00cb      	lsls	r3, r1, #3
 8005060:	4651      	mov	r1, sl
 8005062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005066:	4651      	mov	r1, sl
 8005068:	00ca      	lsls	r2, r1, #3
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	4603      	mov	r3, r0
 8005070:	4642      	mov	r2, r8
 8005072:	189b      	adds	r3, r3, r2
 8005074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005078:	464b      	mov	r3, r9
 800507a:	460a      	mov	r2, r1
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	67bb      	str	r3, [r7, #120]	; 0x78
 800508e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800509c:	4649      	mov	r1, r9
 800509e:	008b      	lsls	r3, r1, #2
 80050a0:	4641      	mov	r1, r8
 80050a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a6:	4641      	mov	r1, r8
 80050a8:	008a      	lsls	r2, r1, #2
 80050aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050ae:	f7fb f8e7 	bl	8000280 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	4b38      	ldr	r3, [pc, #224]	; (800519c <UART_SetConfig+0x4e4>)
 80050ba:	fba3 2301 	umull	r2, r3, r3, r1
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2264      	movs	r2, #100	; 0x64
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	1acb      	subs	r3, r1, r3
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	3332      	adds	r3, #50	; 0x32
 80050cc:	4a33      	ldr	r2, [pc, #204]	; (800519c <UART_SetConfig+0x4e4>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d8:	441c      	add	r4, r3
 80050da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050de:	2200      	movs	r2, #0
 80050e0:	673b      	str	r3, [r7, #112]	; 0x70
 80050e2:	677a      	str	r2, [r7, #116]	; 0x74
 80050e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	1891      	adds	r1, r2, r2
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	415b      	adcs	r3, r3
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f8:	4641      	mov	r1, r8
 80050fa:	1851      	adds	r1, r2, r1
 80050fc:	6039      	str	r1, [r7, #0]
 80050fe:	4649      	mov	r1, r9
 8005100:	414b      	adcs	r3, r1
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005110:	4659      	mov	r1, fp
 8005112:	00cb      	lsls	r3, r1, #3
 8005114:	4651      	mov	r1, sl
 8005116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511a:	4651      	mov	r1, sl
 800511c:	00ca      	lsls	r2, r1, #3
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	4603      	mov	r3, r0
 8005124:	4642      	mov	r2, r8
 8005126:	189b      	adds	r3, r3, r2
 8005128:	66bb      	str	r3, [r7, #104]	; 0x68
 800512a:	464b      	mov	r3, r9
 800512c:	460a      	mov	r2, r1
 800512e:	eb42 0303 	adc.w	r3, r2, r3
 8005132:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	663b      	str	r3, [r7, #96]	; 0x60
 800513e:	667a      	str	r2, [r7, #100]	; 0x64
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800514c:	4649      	mov	r1, r9
 800514e:	008b      	lsls	r3, r1, #2
 8005150:	4641      	mov	r1, r8
 8005152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005156:	4641      	mov	r1, r8
 8005158:	008a      	lsls	r2, r1, #2
 800515a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800515e:	f7fb f88f 	bl	8000280 <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <UART_SetConfig+0x4e4>)
 8005168:	fba3 1302 	umull	r1, r3, r3, r2
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	2164      	movs	r1, #100	; 0x64
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	3332      	adds	r3, #50	; 0x32
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <UART_SetConfig+0x4e4>)
 800517c:	fba2 2303 	umull	r2, r3, r2, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	f003 020f 	and.w	r2, r3, #15
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4422      	add	r2, r4
 800518e:	609a      	str	r2, [r3, #8]
}
 8005190:	bf00      	nop
 8005192:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005196:	46bd      	mov	sp, r7
 8005198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800519c:	51eb851f 	.word	0x51eb851f

080051a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	6039      	str	r1, [r7, #0]
 80051aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	db0a      	blt.n	80051ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	490c      	ldr	r1, [pc, #48]	; (80051ec <__NVIC_SetPriority+0x4c>)
 80051ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051be:	0112      	lsls	r2, r2, #4
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	440b      	add	r3, r1
 80051c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c8:	e00a      	b.n	80051e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	4908      	ldr	r1, [pc, #32]	; (80051f0 <__NVIC_SetPriority+0x50>)
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	3b04      	subs	r3, #4
 80051d8:	0112      	lsls	r2, r2, #4
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	440b      	add	r3, r1
 80051de:	761a      	strb	r2, [r3, #24]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	e000e100 	.word	0xe000e100
 80051f0:	e000ed00 	.word	0xe000ed00

080051f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <SysTick_Handler+0x1c>)
 80051fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80051fc:	f002 f880 	bl	8007300 <xTaskGetSchedulerState>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d001      	beq.n	800520a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005206:	f002 ff67 	bl	80080d8 <xPortSysTickHandler>
  }
}
 800520a:	bf00      	nop
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	e000e010 	.word	0xe000e010

08005214 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005218:	2100      	movs	r1, #0
 800521a:	f06f 0004 	mvn.w	r0, #4
 800521e:	f7ff ffbf 	bl	80051a0 <__NVIC_SetPriority>
#endif
}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800522e:	f3ef 8305 	mrs	r3, IPSR
 8005232:	603b      	str	r3, [r7, #0]
  return(result);
 8005234:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800523a:	f06f 0305 	mvn.w	r3, #5
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	e00c      	b.n	800525c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <osKernelInitialize+0x44>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <osKernelInitialize+0x44>)
 800524c:	2201      	movs	r2, #1
 800524e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005250:	2300      	movs	r3, #0
 8005252:	607b      	str	r3, [r7, #4]
 8005254:	e002      	b.n	800525c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800525c:	687b      	ldr	r3, [r7, #4]
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000023c 	.word	0x2000023c

08005270 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005276:	f3ef 8305 	mrs	r3, IPSR
 800527a:	603b      	str	r3, [r7, #0]
  return(result);
 800527c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005282:	f06f 0305 	mvn.w	r3, #5
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	e010      	b.n	80052ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <osKernelStart+0x48>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d109      	bne.n	80052a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005292:	f7ff ffbf 	bl	8005214 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <osKernelStart+0x48>)
 8005298:	2202      	movs	r2, #2
 800529a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800529c:	f001 fbb2 	bl	8006a04 <vTaskStartScheduler>
      stat = osOK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	607b      	str	r3, [r7, #4]
 80052a4:	e002      	b.n	80052ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295
 80052aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052ac:	687b      	ldr	r3, [r7, #4]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	2000023c 	.word	0x2000023c

080052bc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c2:	f3ef 8305 	mrs	r3, IPSR
 80052c6:	603b      	str	r3, [r7, #0]
  return(result);
 80052c8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80052ce:	f001 fcc5 	bl	8006c5c <xTaskGetTickCountFromISR>
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	e002      	b.n	80052dc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80052d6:	f001 fcb1 	bl	8006c3c <xTaskGetTickCount>
 80052da:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80052dc:	687b      	ldr	r3, [r7, #4]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b08e      	sub	sp, #56	; 0x38
 80052ea:	af04      	add	r7, sp, #16
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f6:	f3ef 8305 	mrs	r3, IPSR
 80052fa:	617b      	str	r3, [r7, #20]
  return(result);
 80052fc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d17e      	bne.n	8005400 <osThreadNew+0x11a>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d07b      	beq.n	8005400 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800530c:	2318      	movs	r3, #24
 800530e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005310:	2300      	movs	r3, #0
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005314:	f04f 33ff 	mov.w	r3, #4294967295
 8005318:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d045      	beq.n	80053ac <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <osThreadNew+0x48>
        name = attr->name;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <osThreadNew+0x6e>
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	2b38      	cmp	r3, #56	; 0x38
 8005346:	d805      	bhi.n	8005354 <osThreadNew+0x6e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <osThreadNew+0x72>
        return (NULL);
 8005354:	2300      	movs	r3, #0
 8005356:	e054      	b.n	8005402 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	089b      	lsrs	r3, r3, #2
 8005366:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <osThreadNew+0xa8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2ba7      	cmp	r3, #167	; 0xa7
 8005376:	d90a      	bls.n	800538e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800537c:	2b00      	cmp	r3, #0
 800537e:	d006      	beq.n	800538e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <osThreadNew+0xa8>
        mem = 1;
 8005388:	2301      	movs	r3, #1
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e010      	b.n	80053b0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10c      	bne.n	80053b0 <osThreadNew+0xca>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d108      	bne.n	80053b0 <osThreadNew+0xca>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d104      	bne.n	80053b0 <osThreadNew+0xca>
          mem = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	e001      	b.n	80053b0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d110      	bne.n	80053d8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053be:	9202      	str	r2, [sp, #8]
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f001 f92d 	bl	800662c <xTaskCreateStatic>
 80053d2:	4603      	mov	r3, r0
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e013      	b.n	8005400 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d110      	bne.n	8005400 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f107 0310 	add.w	r3, r7, #16
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f001 f978 	bl	80066e6 <xTaskCreate>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d001      	beq.n	8005400 <osThreadNew+0x11a>
            hTask = NULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005400:	693b      	ldr	r3, [r7, #16]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3728      	adds	r7, #40	; 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005412:	f3ef 8305 	mrs	r3, IPSR
 8005416:	60bb      	str	r3, [r7, #8]
  return(result);
 8005418:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <osDelay+0x1c>
    stat = osErrorISR;
 800541e:	f06f 0305 	mvn.w	r3, #5
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e007      	b.n	8005436 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 fab3 	bl	800699c <vTaskDelay>
    }
  }

  return (stat);
 8005436:	68fb      	ldr	r3, [r7, #12]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800544c:	f3ef 8305 	mrs	r3, IPSR
 8005450:	60bb      	str	r3, [r7, #8]
  return(result);
 8005452:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005454:	2b00      	cmp	r3, #0
 8005456:	d174      	bne.n	8005542 <osMutexNew+0x102>
    if (attr != NULL) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <osMutexNew+0x26>
      type = attr->attr_bits;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	e001      	b.n	800546a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <osMutexNew+0x3a>
      rmtx = 1U;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e001      	b.n	800547e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d15c      	bne.n	8005542 <osMutexNew+0x102>
      mem = -1;
 8005488:	f04f 33ff 	mov.w	r3, #4294967295
 800548c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d015      	beq.n	80054c0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d006      	beq.n	80054aa <osMutexNew+0x6a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	2b4f      	cmp	r3, #79	; 0x4f
 80054a2:	d902      	bls.n	80054aa <osMutexNew+0x6a>
          mem = 1;
 80054a4:	2301      	movs	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e00c      	b.n	80054c4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d108      	bne.n	80054c4 <osMutexNew+0x84>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <osMutexNew+0x84>
            mem = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e001      	b.n	80054c4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d112      	bne.n	80054f0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4619      	mov	r1, r3
 80054d6:	2004      	movs	r0, #4
 80054d8:	f000 fb17 	bl	8005b0a <xQueueCreateMutexStatic>
 80054dc:	61f8      	str	r0, [r7, #28]
 80054de:	e016      	b.n	800550e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4619      	mov	r1, r3
 80054e6:	2001      	movs	r0, #1
 80054e8:	f000 fb0f 	bl	8005b0a <xQueueCreateMutexStatic>
 80054ec:	61f8      	str	r0, [r7, #28]
 80054ee:	e00e      	b.n	800550e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80054fc:	2004      	movs	r0, #4
 80054fe:	f000 faec 	bl	8005ada <xQueueCreateMutex>
 8005502:	61f8      	str	r0, [r7, #28]
 8005504:	e003      	b.n	800550e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005506:	2001      	movs	r0, #1
 8005508:	f000 fae7 	bl	8005ada <xQueueCreateMutex>
 800550c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00c      	beq.n	800552e <osMutexNew+0xee>
        if (attr != NULL) {
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <osMutexNew+0xe2>
          name = attr->name;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e001      	b.n	8005526 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	69f8      	ldr	r0, [r7, #28]
 800552a:	f001 f821 	bl	8006570 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <osMutexNew+0x102>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005542:	69fb      	ldr	r3, [r7, #28]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3720      	adds	r7, #32
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800556a:	f3ef 8305 	mrs	r3, IPSR
 800556e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005570:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005576:	f06f 0305 	mvn.w	r3, #5
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	e02c      	b.n	80055d8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d103      	bne.n	800558c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005584:	f06f 0303 	mvn.w	r3, #3
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e025      	b.n	80055d8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d011      	beq.n	80055b6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6938      	ldr	r0, [r7, #16]
 8005596:	f000 fb07 	bl	8005ba8 <xQueueTakeMutexRecursive>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d01b      	beq.n	80055d8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80055a6:	f06f 0301 	mvn.w	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e014      	b.n	80055d8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80055ae:	f06f 0302 	mvn.w	r3, #2
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e010      	b.n	80055d8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80055b6:	6839      	ldr	r1, [r7, #0]
 80055b8:	6938      	ldr	r0, [r7, #16]
 80055ba:	f000 fda5 	bl	8006108 <xQueueSemaphoreTake>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d009      	beq.n	80055d8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80055ca:	f06f 0301 	mvn.w	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e002      	b.n	80055d8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80055d2:	f06f 0302 	mvn.w	r3, #2
 80055d6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80055d8:	697b      	ldr	r3, [r7, #20]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055fe:	f3ef 8305 	mrs	r3, IPSR
 8005602:	60bb      	str	r3, [r7, #8]
  return(result);
 8005604:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <osMutexRelease+0x30>
    stat = osErrorISR;
 800560a:	f06f 0305 	mvn.w	r3, #5
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e01f      	b.n	8005652 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d103      	bne.n	8005620 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005618:	f06f 0303 	mvn.w	r3, #3
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e018      	b.n	8005652 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005626:	6938      	ldr	r0, [r7, #16]
 8005628:	f000 fa8a 	bl	8005b40 <xQueueGiveMutexRecursive>
 800562c:	4603      	mov	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d00f      	beq.n	8005652 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005632:	f06f 0302 	mvn.w	r3, #2
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e00b      	b.n	8005652 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800563a:	2300      	movs	r3, #0
 800563c:	2200      	movs	r2, #0
 800563e:	2100      	movs	r1, #0
 8005640:	6938      	ldr	r0, [r7, #16]
 8005642:	f000 fae7 	bl	8005c14 <xQueueGenericSend>
 8005646:	4603      	mov	r3, r0
 8005648:	2b01      	cmp	r3, #1
 800564a:	d002      	beq.n	8005652 <osMutexRelease+0x70>
        stat = osErrorResource;
 800564c:	f06f 0302 	mvn.w	r3, #2
 8005650:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a07      	ldr	r2, [pc, #28]	; (8005688 <vApplicationGetIdleTaskMemory+0x2c>)
 800566c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4a06      	ldr	r2, [pc, #24]	; (800568c <vApplicationGetIdleTaskMemory+0x30>)
 8005672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2280      	movs	r2, #128	; 0x80
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000240 	.word	0x20000240
 800568c:	200002e8 	.word	0x200002e8

08005690 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a07      	ldr	r2, [pc, #28]	; (80056bc <vApplicationGetTimerTaskMemory+0x2c>)
 80056a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4a06      	ldr	r2, [pc, #24]	; (80056c0 <vApplicationGetTimerTaskMemory+0x30>)
 80056a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ae:	601a      	str	r2, [r3, #0]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	200004e8 	.word	0x200004e8
 80056c0:	20000590 	.word	0x20000590

080056c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f103 0208 	add.w	r2, r3, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f04f 32ff 	mov.w	r2, #4294967295
 80056dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f103 0208 	add.w	r2, r3, #8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f103 0208 	add.w	r2, r3, #8
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d103      	bne.n	8005786 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e00c      	b.n	80057a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3308      	adds	r3, #8
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e002      	b.n	8005794 <vListInsert+0x2e>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	d2f6      	bcs.n	800578e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	601a      	str	r2, [r3, #0]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6892      	ldr	r2, [r2, #8]
 80057ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6852      	ldr	r2, [r2, #4]
 80057f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d103      	bne.n	800580c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	1e5a      	subs	r2, r3, #1
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005856:	f002 fbad 	bl	8007fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	441a      	add	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	3b01      	subs	r3, #1
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	441a      	add	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	22ff      	movs	r2, #255	; 0xff
 800589a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	22ff      	movs	r2, #255	; 0xff
 80058a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d114      	bne.n	80058d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01a      	beq.n	80058ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3310      	adds	r3, #16
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 fb4f 	bl	8006f5c <xTaskRemoveFromEventList>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d012      	beq.n	80058ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <xQueueGenericReset+0xcc>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	e009      	b.n	80058ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3310      	adds	r3, #16
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fef2 	bl	80056c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3324      	adds	r3, #36	; 0x24
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff feed 	bl	80056c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058ea:	f002 fb93 	bl	8008014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058ee:	2301      	movs	r3, #1
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08e      	sub	sp, #56	; 0x38
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <xQueueGenericCreateStatic+0x52>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <xQueueGenericCreateStatic+0x56>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericCreateStatic+0x58>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <xQueueGenericCreateStatic+0x7e>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <xQueueGenericCreateStatic+0x82>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <xQueueGenericCreateStatic+0x84>
 800597e:	2300      	movs	r3, #0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	61fb      	str	r3, [r7, #28]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800599a:	2350      	movs	r3, #80	; 0x50
 800599c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b50      	cmp	r3, #80	; 0x50
 80059a2:	d00a      	beq.n	80059ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	61bb      	str	r3, [r7, #24]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00d      	beq.n	80059e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	4613      	mov	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f83f 	bl	8005a60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3730      	adds	r7, #48	; 0x30
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	613b      	str	r3, [r7, #16]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	3350      	adds	r3, #80	; 0x50
 8005a24:	4618      	mov	r0, r3
 8005a26:	f002 fbe7 	bl	80081f8 <pvPortMalloc>
 8005a2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d011      	beq.n	8005a56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	3350      	adds	r3, #80	; 0x50
 8005a3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a44:	79fa      	ldrb	r2, [r7, #7]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f805 	bl	8005a60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a56:	69bb      	ldr	r3, [r7, #24]
	}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3720      	adds	r7, #32
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d103      	bne.n	8005a7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e002      	b.n	8005a82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a8e:	2101      	movs	r1, #1
 8005a90:	69b8      	ldr	r0, [r7, #24]
 8005a92:	f7ff fecb 	bl	800582c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	78fa      	ldrb	r2, [r7, #3]
 8005a9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00e      	beq.n	8005ad2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2100      	movs	r1, #0
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f8a1 	bl	8005c14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b086      	sub	sp, #24
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	461a      	mov	r2, r3
 8005af0:	6939      	ldr	r1, [r7, #16]
 8005af2:	6978      	ldr	r0, [r7, #20]
 8005af4:	f7ff ff7a 	bl	80059ec <xQueueGenericCreate>
 8005af8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff ffd3 	bl	8005aa6 <prvInitialiseMutex>

		return xNewQueue;
 8005b00:	68fb      	ldr	r3, [r7, #12]
	}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b088      	sub	sp, #32
 8005b0e:	af02      	add	r7, sp, #8
 8005b10:	4603      	mov	r3, r0
 8005b12:	6039      	str	r1, [r7, #0]
 8005b14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b16:	2301      	movs	r3, #1
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	6939      	ldr	r1, [r7, #16]
 8005b28:	6978      	ldr	r0, [r7, #20]
 8005b2a:	f7ff fee7 	bl	80058fc <xQueueGenericCreateStatic>
 8005b2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff ffb8 	bl	8005aa6 <prvInitialiseMutex>

		return xNewQueue;
 8005b36:	68fb      	ldr	r3, [r7, #12]
	}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	60fb      	str	r3, [r7, #12]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	689c      	ldr	r4, [r3, #8]
 8005b6c:	f001 fbb8 	bl	80072e0 <xTaskGetCurrentTaskHandle>
 8005b70:	4603      	mov	r3, r0
 8005b72:	429c      	cmp	r4, r3
 8005b74:	d111      	bne.n	8005b9a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	1e5a      	subs	r2, r3, #1
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d105      	bne.n	8005b94 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	6938      	ldr	r0, [r7, #16]
 8005b90:	f000 f840 	bl	8005c14 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005b94:	2301      	movs	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e001      	b.n	8005b9e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005b9e:	697b      	ldr	r3, [r7, #20]
	}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd90      	pop	{r4, r7, pc}

08005ba8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	60fb      	str	r3, [r7, #12]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	689c      	ldr	r4, [r3, #8]
 8005bd6:	f001 fb83 	bl	80072e0 <xTaskGetCurrentTaskHandle>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	d107      	bne.n	8005bf0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005bea:	2301      	movs	r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e00c      	b.n	8005c0a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6938      	ldr	r0, [r7, #16]
 8005bf4:	f000 fa88 	bl	8006108 <xQueueSemaphoreTake>
 8005bf8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005c0a:	697b      	ldr	r3, [r7, #20]
	}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd90      	pop	{r4, r7, pc}

08005c14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08e      	sub	sp, #56	; 0x38
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c22:	2300      	movs	r3, #0
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <xQueueGenericSend+0x32>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d103      	bne.n	8005c54 <xQueueGenericSend+0x40>
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <xQueueGenericSend+0x44>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <xQueueGenericSend+0x46>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <xQueueGenericSend+0x60>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d103      	bne.n	8005c82 <xQueueGenericSend+0x6e>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <xQueueGenericSend+0x72>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <xQueueGenericSend+0x74>
 8005c86:	2300      	movs	r3, #0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	623b      	str	r3, [r7, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca2:	f001 fb2d 	bl	8007300 <xTaskGetSchedulerState>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <xQueueGenericSend+0x9e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <xQueueGenericSend+0xa2>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <xQueueGenericSend+0xa4>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	61fb      	str	r3, [r7, #28]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd2:	f002 f96f 	bl	8007fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <xQueueGenericSend+0xd4>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d129      	bne.n	8005d3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cee:	f000 fb2f 	bl	8006350 <prvCopyDataToQueue>
 8005cf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d010      	beq.n	8005d1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	3324      	adds	r3, #36	; 0x24
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 f92b 	bl	8006f5c <xTaskRemoveFromEventList>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d013      	beq.n	8005d34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d0c:	4b3f      	ldr	r3, [pc, #252]	; (8005e0c <xQueueGenericSend+0x1f8>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	e00a      	b.n	8005d34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d24:	4b39      	ldr	r3, [pc, #228]	; (8005e0c <xQueueGenericSend+0x1f8>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d34:	f002 f96e 	bl	8008014 <vPortExitCritical>
				return pdPASS;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e063      	b.n	8005e04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d42:	f002 f967 	bl	8008014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e05c      	b.n	8005e04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 f965 	bl	8007024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d5e:	f002 f959 	bl	8008014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d62:	f000 febf 	bl	8006ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d66:	f002 f925 	bl	8007fb4 <vPortEnterCritical>
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d70:	b25b      	sxtb	r3, r3
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d103      	bne.n	8005d80 <xQueueGenericSend+0x16c>
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d86:	b25b      	sxtb	r3, r3
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d103      	bne.n	8005d96 <xQueueGenericSend+0x182>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d96:	f002 f93d 	bl	8008014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d9a:	1d3a      	adds	r2, r7, #4
 8005d9c:	f107 0314 	add.w	r3, r7, #20
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f001 f954 	bl	8007050 <xTaskCheckForTimeOut>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d124      	bne.n	8005df8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db0:	f000 fbc6 	bl	8006540 <prvIsQueueFull>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d018      	beq.n	8005dec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 f87a 	bl	8006ebc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dca:	f000 fb51 	bl	8006470 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dce:	f000 fe97 	bl	8006b00 <xTaskResumeAll>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f47f af7c 	bne.w	8005cd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005dda:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <xQueueGenericSend+0x1f8>)
 8005ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	e772      	b.n	8005cd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dee:	f000 fb3f 	bl	8006470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005df2:	f000 fe85 	bl	8006b00 <xTaskResumeAll>
 8005df6:	e76c      	b.n	8005cd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dfa:	f000 fb39 	bl	8006470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dfe:	f000 fe7f 	bl	8006b00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3738      	adds	r7, #56	; 0x38
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b090      	sub	sp, #64	; 0x40
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <xQueueGenericSendFromISR+0x3c>
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <xQueueGenericSendFromISR+0x40>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <xQueueGenericSendFromISR+0x42>
 8005e50:	2300      	movs	r3, #0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d103      	bne.n	8005e7a <xQueueGenericSendFromISR+0x6a>
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <xQueueGenericSendFromISR+0x6e>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <xQueueGenericSendFromISR+0x70>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	623b      	str	r3, [r7, #32]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e9a:	f002 f96d 	bl	8008178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e9e:	f3ef 8211 	mrs	r2, BASEPRI
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	61fa      	str	r2, [r7, #28]
 8005eb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d302      	bcc.n	8005ecc <xQueueGenericSendFromISR+0xbc>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d12f      	bne.n	8005f2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ee2:	f000 fa35 	bl	8006350 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ee6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d112      	bne.n	8005f16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d016      	beq.n	8005f26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	3324      	adds	r3, #36	; 0x24
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 f82d 	bl	8006f5c <xTaskRemoveFromEventList>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00e      	beq.n	8005f26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e007      	b.n	8005f26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	b25a      	sxtb	r2, r3
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f26:	2301      	movs	r3, #1
 8005f28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f2a:	e001      	b.n	8005f30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3740      	adds	r7, #64	; 0x40
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <xQueueReceive+0x30>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	623b      	str	r3, [r7, #32]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <xQueueReceive+0x3e>
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <xQueueReceive+0x42>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <xQueueReceive+0x44>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xQueueReceive+0x5e>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	61fb      	str	r3, [r7, #28]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa6:	f001 f9ab 	bl	8007300 <xTaskGetSchedulerState>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <xQueueReceive+0x6e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <xQueueReceive+0x72>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <xQueueReceive+0x74>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueReceive+0x8e>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	61bb      	str	r3, [r7, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fd6:	f001 ffed 	bl	8007fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01f      	beq.n	8006026 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fea:	f000 fa1b 	bl	8006424 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	1e5a      	subs	r2, r3, #1
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00f      	beq.n	800601e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	3310      	adds	r3, #16
 8006002:	4618      	mov	r0, r3
 8006004:	f000 ffaa 	bl	8006f5c <xTaskRemoveFromEventList>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800600e:	4b3d      	ldr	r3, [pc, #244]	; (8006104 <xQueueReceive+0x1bc>)
 8006010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800601e:	f001 fff9 	bl	8008014 <vPortExitCritical>
				return pdPASS;
 8006022:	2301      	movs	r3, #1
 8006024:	e069      	b.n	80060fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d103      	bne.n	8006034 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800602c:	f001 fff2 	bl	8008014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006030:	2300      	movs	r3, #0
 8006032:	e062      	b.n	80060fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800603a:	f107 0310 	add.w	r3, r7, #16
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fff0 	bl	8007024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006044:	2301      	movs	r3, #1
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006048:	f001 ffe4 	bl	8008014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800604c:	f000 fd4a 	bl	8006ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006050:	f001 ffb0 	bl	8007fb4 <vPortEnterCritical>
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800605a:	b25b      	sxtb	r3, r3
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d103      	bne.n	800606a <xQueueReceive+0x122>
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006070:	b25b      	sxtb	r3, r3
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d103      	bne.n	8006080 <xQueueReceive+0x138>
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006080:	f001 ffc8 	bl	8008014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006084:	1d3a      	adds	r2, r7, #4
 8006086:	f107 0310 	add.w	r3, r7, #16
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f000 ffdf 	bl	8007050 <xTaskCheckForTimeOut>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d123      	bne.n	80060e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609a:	f000 fa3b 	bl	8006514 <prvIsQueueEmpty>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d017      	beq.n	80060d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	3324      	adds	r3, #36	; 0x24
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 ff05 	bl	8006ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b4:	f000 f9dc 	bl	8006470 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060b8:	f000 fd22 	bl	8006b00 <xTaskResumeAll>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d189      	bne.n	8005fd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <xQueueReceive+0x1bc>)
 80060c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	e780      	b.n	8005fd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d6:	f000 f9cb 	bl	8006470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060da:	f000 fd11 	bl	8006b00 <xTaskResumeAll>
 80060de:	e77a      	b.n	8005fd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e2:	f000 f9c5 	bl	8006470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060e6:	f000 fd0b 	bl	8006b00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ec:	f000 fa12 	bl	8006514 <prvIsQueueEmpty>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f43f af6f 	beq.w	8005fd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3730      	adds	r7, #48	; 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08e      	sub	sp, #56	; 0x38
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800611a:	2300      	movs	r3, #0
 800611c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	623b      	str	r3, [r7, #32]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	61fb      	str	r3, [r7, #28]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006158:	f001 f8d2 	bl	8007300 <xTaskGetSchedulerState>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <xQueueSemaphoreTake+0x60>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <xQueueSemaphoreTake+0x64>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <xQueueSemaphoreTake+0x66>
 800616c:	2300      	movs	r3, #0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	61bb      	str	r3, [r7, #24]
}
 8006184:	bf00      	nop
 8006186:	e7fe      	b.n	8006186 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006188:	f001 ff14 	bl	8007fb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	2b00      	cmp	r3, #0
 8006196:	d024      	beq.n	80061e2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	1e5a      	subs	r2, r3, #1
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061a8:	f001 fa20 	bl	80075ec <pvTaskIncrementMutexHeldCount>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00f      	beq.n	80061da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	3310      	adds	r3, #16
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fecc 	bl	8006f5c <xTaskRemoveFromEventList>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d007      	beq.n	80061da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061ca:	4b54      	ldr	r3, [pc, #336]	; (800631c <xQueueSemaphoreTake+0x214>)
 80061cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061da:	f001 ff1b 	bl	8008014 <vPortExitCritical>
				return pdPASS;
 80061de:	2301      	movs	r3, #1
 80061e0:	e097      	b.n	8006312 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d111      	bne.n	800620c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	617b      	str	r3, [r7, #20]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006204:	f001 ff06 	bl	8008014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006208:	2300      	movs	r3, #0
 800620a:	e082      	b.n	8006312 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006212:	f107 030c 	add.w	r3, r7, #12
 8006216:	4618      	mov	r0, r3
 8006218:	f000 ff04 	bl	8007024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006220:	f001 fef8 	bl	8008014 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006224:	f000 fc5e 	bl	8006ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006228:	f001 fec4 	bl	8007fb4 <vPortEnterCritical>
 800622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006232:	b25b      	sxtb	r3, r3
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d103      	bne.n	8006242 <xQueueSemaphoreTake+0x13a>
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006248:	b25b      	sxtb	r3, r3
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624e:	d103      	bne.n	8006258 <xQueueSemaphoreTake+0x150>
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006258:	f001 fedc 	bl	8008014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800625c:	463a      	mov	r2, r7
 800625e:	f107 030c 	add.w	r3, r7, #12
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fef3 	bl	8007050 <xTaskCheckForTimeOut>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d132      	bne.n	80062d6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006270:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006272:	f000 f94f 	bl	8006514 <prvIsQueueEmpty>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d026      	beq.n	80062ca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006284:	f001 fe96 	bl	8007fb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f001 f855 	bl	800733c <xTaskPriorityInherit>
 8006292:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006294:	f001 febe 	bl	8008014 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	3324      	adds	r3, #36	; 0x24
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fe0b 	bl	8006ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062a8:	f000 f8e2 	bl	8006470 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062ac:	f000 fc28 	bl	8006b00 <xTaskResumeAll>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f47f af68 	bne.w	8006188 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <xQueueSemaphoreTake+0x214>)
 80062ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	e75e      	b.n	8006188 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062cc:	f000 f8d0 	bl	8006470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062d0:	f000 fc16 	bl	8006b00 <xTaskResumeAll>
 80062d4:	e758      	b.n	8006188 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062d8:	f000 f8ca 	bl	8006470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062dc:	f000 fc10 	bl	8006b00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062e2:	f000 f917 	bl	8006514 <prvIsQueueEmpty>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f43f af4d 	beq.w	8006188 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00d      	beq.n	8006310 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80062f4:	f001 fe5e 	bl	8007fb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80062f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062fa:	f000 f811 	bl	8006320 <prvGetDisinheritPriorityAfterTimeout>
 80062fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006306:	4618      	mov	r0, r3
 8006308:	f001 f8ee 	bl	80074e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800630c:	f001 fe82 	bl	8008014 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006310:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006312:	4618      	mov	r0, r3
 8006314:	3738      	adds	r7, #56	; 0x38
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	e000ed04 	.word	0xe000ed04

08006320 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	e001      	b.n	8006342 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006342:	68fb      	ldr	r3, [r7, #12]
	}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d14d      	bne.n	8006412 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	4618      	mov	r0, r3
 800637c:	f001 f846 	bl	800740c <xTaskPriorityDisinherit>
 8006380:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	609a      	str	r2, [r3, #8]
 8006388:	e043      	b.n	8006412 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d119      	bne.n	80063c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6858      	ldr	r0, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	461a      	mov	r2, r3
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	f002 faff 	bl	800899e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	441a      	add	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d32b      	bcc.n	8006412 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	e026      	b.n	8006412 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68d8      	ldr	r0, [r3, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	461a      	mov	r2, r3
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	f002 fae5 	bl	800899e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	425b      	negs	r3, r3
 80063de:	441a      	add	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d207      	bcs.n	8006400 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	425b      	negs	r3, r3
 80063fa:	441a      	add	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d105      	bne.n	8006412 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	3b01      	subs	r3, #1
 8006410:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800641a:	697b      	ldr	r3, [r7, #20]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d018      	beq.n	8006468 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	441a      	add	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	429a      	cmp	r2, r3
 800644e:	d303      	bcc.n	8006458 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68d9      	ldr	r1, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	461a      	mov	r2, r3
 8006462:	6838      	ldr	r0, [r7, #0]
 8006464:	f002 fa9b 	bl	800899e <memcpy>
	}
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006478:	f001 fd9c 	bl	8007fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006482:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006484:	e011      	b.n	80064aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	2b00      	cmp	r3, #0
 800648c:	d012      	beq.n	80064b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3324      	adds	r3, #36	; 0x24
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fd62 	bl	8006f5c <xTaskRemoveFromEventList>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800649e:	f000 fe39 	bl	8007114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	dce9      	bgt.n	8006486 <prvUnlockQueue+0x16>
 80064b2:	e000      	b.n	80064b6 <prvUnlockQueue+0x46>
					break;
 80064b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	22ff      	movs	r2, #255	; 0xff
 80064ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064be:	f001 fda9 	bl	8008014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064c2:	f001 fd77 	bl	8007fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064ce:	e011      	b.n	80064f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d012      	beq.n	80064fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3310      	adds	r3, #16
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fd3d 	bl	8006f5c <xTaskRemoveFromEventList>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064e8:	f000 fe14 	bl	8007114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dce9      	bgt.n	80064d0 <prvUnlockQueue+0x60>
 80064fc:	e000      	b.n	8006500 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	22ff      	movs	r2, #255	; 0xff
 8006504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006508:	f001 fd84 	bl	8008014 <vPortExitCritical>
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800651c:	f001 fd4a 	bl	8007fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e001      	b.n	8006532 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006532:	f001 fd6f 	bl	8008014 <vPortExitCritical>

	return xReturn;
 8006536:	68fb      	ldr	r3, [r7, #12]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006548:	f001 fd34 	bl	8007fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	429a      	cmp	r2, r3
 8006556:	d102      	bne.n	800655e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006558:	2301      	movs	r3, #1
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	e001      	b.n	8006562 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006562:	f001 fd57 	bl	8008014 <vPortExitCritical>

	return xReturn;
 8006566:	68fb      	ldr	r3, [r7, #12]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e014      	b.n	80065aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006580:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <vQueueAddToRegistry+0x50>)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10b      	bne.n	80065a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800658c:	490c      	ldr	r1, [pc, #48]	; (80065c0 <vQueueAddToRegistry+0x50>)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006596:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <vQueueAddToRegistry+0x50>)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4413      	add	r3, r2
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065a2:	e006      	b.n	80065b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3301      	adds	r3, #1
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b07      	cmp	r3, #7
 80065ae:	d9e7      	bls.n	8006580 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	20000990 	.word	0x20000990

080065c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065d4:	f001 fcee 	bl	8007fb4 <vPortEnterCritical>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d103      	bne.n	80065ee <vQueueWaitForMessageRestricted+0x2a>
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d103      	bne.n	8006604 <vQueueWaitForMessageRestricted+0x40>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006604:	f001 fd06 	bl	8008014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3324      	adds	r3, #36	; 0x24
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fc73 	bl	8006f04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f7ff ff26 	bl	8006470 <prvUnlockQueue>
	}
 8006624:	bf00      	nop
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af04      	add	r7, sp, #16
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	623b      	str	r3, [r7, #32]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <xTaskCreateStatic+0x46>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	61fb      	str	r3, [r7, #28]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006672:	23a8      	movs	r3, #168	; 0xa8
 8006674:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2ba8      	cmp	r3, #168	; 0xa8
 800667a:	d00a      	beq.n	8006692 <xTaskCreateStatic+0x66>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	61bb      	str	r3, [r7, #24]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006692:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01e      	beq.n	80066d8 <xTaskCreateStatic+0xac>
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066b2:	2300      	movs	r3, #0
 80066b4:	9303      	str	r3, [sp, #12]
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	9302      	str	r3, [sp, #8]
 80066ba:	f107 0314 	add.w	r3, r7, #20
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f850 	bl	8006770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066d2:	f000 f8f3 	bl	80068bc <prvAddNewTaskToReadyList>
 80066d6:	e001      	b.n	80066dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066dc:	697b      	ldr	r3, [r7, #20]
	}
 80066de:	4618      	mov	r0, r3
 80066e0:	3728      	adds	r7, #40	; 0x28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b08c      	sub	sp, #48	; 0x30
 80066ea:	af04      	add	r7, sp, #16
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 fd7c 	bl	80081f8 <pvPortMalloc>
 8006700:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00e      	beq.n	8006726 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006708:	20a8      	movs	r0, #168	; 0xa8
 800670a:	f001 fd75 	bl	80081f8 <pvPortMalloc>
 800670e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
 800671c:	e005      	b.n	800672a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800671e:	6978      	ldr	r0, [r7, #20]
 8006720:	f001 fe36 	bl	8008390 <vPortFree>
 8006724:	e001      	b.n	800672a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d017      	beq.n	8006760 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006738:	88fa      	ldrh	r2, [r7, #6]
 800673a:	2300      	movs	r3, #0
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	9302      	str	r3, [sp, #8]
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f80e 	bl	8006770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006754:	69f8      	ldr	r0, [r7, #28]
 8006756:	f000 f8b1 	bl	80068bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800675a:	2301      	movs	r3, #1
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	e002      	b.n	8006766 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
 8006764:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006766:	69bb      	ldr	r3, [r7, #24]
	}
 8006768:	4618      	mov	r0, r3
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	461a      	mov	r2, r3
 8006788:	21a5      	movs	r1, #165	; 0xa5
 800678a:	f002 f836 	bl	80087fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006798:	3b01      	subs	r3, #1
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f023 0307 	bic.w	r3, r3, #7
 80067a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	617b      	str	r3, [r7, #20]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01f      	beq.n	800680e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067ce:	2300      	movs	r3, #0
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	e012      	b.n	80067fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	4413      	add	r3, r2
 80067da:	7819      	ldrb	r1, [r3, #0]
 80067dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	3334      	adds	r3, #52	; 0x34
 80067e4:	460a      	mov	r2, r1
 80067e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	4413      	add	r3, r2
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	3301      	adds	r3, #1
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	2b0f      	cmp	r3, #15
 80067fe:	d9e9      	bls.n	80067d4 <prvInitialiseNewTask+0x64>
 8006800:	e000      	b.n	8006804 <prvInitialiseNewTask+0x94>
			{
				break;
 8006802:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800680c:	e003      	b.n	8006816 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	2b37      	cmp	r3, #55	; 0x37
 800681a:	d901      	bls.n	8006820 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800681c:	2337      	movs	r3, #55	; 0x37
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006824:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800682a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	2200      	movs	r2, #0
 8006830:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	3304      	adds	r3, #4
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe ff64 	bl	8005704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	3318      	adds	r3, #24
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe ff5f 	bl	8005704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	2200      	movs	r2, #0
 8006868:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	3354      	adds	r3, #84	; 0x54
 8006870:	224c      	movs	r2, #76	; 0x4c
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f001 ffc0 	bl	80087fa <memset>
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	4a0c      	ldr	r2, [pc, #48]	; (80068b0 <prvInitialiseNewTask+0x140>)
 800687e:	659a      	str	r2, [r3, #88]	; 0x58
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	4a0c      	ldr	r2, [pc, #48]	; (80068b4 <prvInitialiseNewTask+0x144>)
 8006884:	65da      	str	r2, [r3, #92]	; 0x5c
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	4a0b      	ldr	r2, [pc, #44]	; (80068b8 <prvInitialiseNewTask+0x148>)
 800688a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	69b8      	ldr	r0, [r7, #24]
 8006892:	f001 fa61 	bl	8007d58 <pxPortInitialiseStack>
 8006896:	4602      	mov	r2, r0
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068a8:	bf00      	nop
 80068aa:	3720      	adds	r7, #32
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20004c24 	.word	0x20004c24
 80068b4:	20004c8c 	.word	0x20004c8c
 80068b8:	20004cf4 	.word	0x20004cf4

080068bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068c4:	f001 fb76 	bl	8007fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068c8:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <prvAddNewTaskToReadyList+0xc4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	4a2c      	ldr	r2, [pc, #176]	; (8006980 <prvAddNewTaskToReadyList+0xc4>)
 80068d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068d2:	4b2c      	ldr	r3, [pc, #176]	; (8006984 <prvAddNewTaskToReadyList+0xc8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068da:	4a2a      	ldr	r2, [pc, #168]	; (8006984 <prvAddNewTaskToReadyList+0xc8>)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068e0:	4b27      	ldr	r3, [pc, #156]	; (8006980 <prvAddNewTaskToReadyList+0xc4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d110      	bne.n	800690a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068e8:	f000 fc38 	bl	800715c <prvInitialiseTaskLists>
 80068ec:	e00d      	b.n	800690a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068ee:	4b26      	ldr	r3, [pc, #152]	; (8006988 <prvAddNewTaskToReadyList+0xcc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068f6:	4b23      	ldr	r3, [pc, #140]	; (8006984 <prvAddNewTaskToReadyList+0xc8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	429a      	cmp	r2, r3
 8006902:	d802      	bhi.n	800690a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006904:	4a1f      	ldr	r2, [pc, #124]	; (8006984 <prvAddNewTaskToReadyList+0xc8>)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800690a:	4b20      	ldr	r3, [pc, #128]	; (800698c <prvAddNewTaskToReadyList+0xd0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3301      	adds	r3, #1
 8006910:	4a1e      	ldr	r2, [pc, #120]	; (800698c <prvAddNewTaskToReadyList+0xd0>)
 8006912:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006914:	4b1d      	ldr	r3, [pc, #116]	; (800698c <prvAddNewTaskToReadyList+0xd0>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <prvAddNewTaskToReadyList+0xd4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d903      	bls.n	8006930 <prvAddNewTaskToReadyList+0x74>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	4a18      	ldr	r2, [pc, #96]	; (8006990 <prvAddNewTaskToReadyList+0xd4>)
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4a15      	ldr	r2, [pc, #84]	; (8006994 <prvAddNewTaskToReadyList+0xd8>)
 800693e:	441a      	add	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3304      	adds	r3, #4
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f7fe fee9 	bl	800571e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800694c:	f001 fb62 	bl	8008014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <prvAddNewTaskToReadyList+0xcc>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00e      	beq.n	8006976 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <prvAddNewTaskToReadyList+0xc8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	429a      	cmp	r2, r3
 8006964:	d207      	bcs.n	8006976 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <prvAddNewTaskToReadyList+0xdc>)
 8006968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000ea4 	.word	0x20000ea4
 8006984:	200009d0 	.word	0x200009d0
 8006988:	20000eb0 	.word	0x20000eb0
 800698c:	20000ec0 	.word	0x20000ec0
 8006990:	20000eac 	.word	0x20000eac
 8006994:	200009d4 	.word	0x200009d4
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d017      	beq.n	80069de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069ae:	4b13      	ldr	r3, [pc, #76]	; (80069fc <vTaskDelay+0x60>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <vTaskDelay+0x30>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	60bb      	str	r3, [r7, #8]
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069cc:	f000 f88a 	bl	8006ae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069d0:	2100      	movs	r1, #0
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fe1e 	bl	8007614 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069d8:	f000 f892 	bl	8006b00 <xTaskResumeAll>
 80069dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d107      	bne.n	80069f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <vTaskDelay+0x64>)
 80069e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000ecc 	.word	0x20000ecc
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08a      	sub	sp, #40	; 0x28
 8006a08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a12:	463a      	mov	r2, r7
 8006a14:	1d39      	adds	r1, r7, #4
 8006a16:	f107 0308 	add.w	r3, r7, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fe1e 	bl	800565c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	9202      	str	r2, [sp, #8]
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	460a      	mov	r2, r1
 8006a32:	4924      	ldr	r1, [pc, #144]	; (8006ac4 <vTaskStartScheduler+0xc0>)
 8006a34:	4824      	ldr	r0, [pc, #144]	; (8006ac8 <vTaskStartScheduler+0xc4>)
 8006a36:	f7ff fdf9 	bl	800662c <xTaskCreateStatic>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4a23      	ldr	r2, [pc, #140]	; (8006acc <vTaskStartScheduler+0xc8>)
 8006a3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a40:	4b22      	ldr	r3, [pc, #136]	; (8006acc <vTaskStartScheduler+0xc8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e001      	b.n	8006a52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d102      	bne.n	8006a5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a58:	f000 fe30 	bl	80076bc <xTimerCreateTimerTask>
 8006a5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d11b      	bne.n	8006a9c <vTaskStartScheduler+0x98>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	613b      	str	r3, [r7, #16]
}
 8006a76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a78:	4b15      	ldr	r3, [pc, #84]	; (8006ad0 <vTaskStartScheduler+0xcc>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3354      	adds	r3, #84	; 0x54
 8006a7e:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <vTaskStartScheduler+0xd0>)
 8006a80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a82:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <vTaskStartScheduler+0xd4>)
 8006a84:	f04f 32ff 	mov.w	r2, #4294967295
 8006a88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a8a:	4b14      	ldr	r3, [pc, #80]	; (8006adc <vTaskStartScheduler+0xd8>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a90:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <vTaskStartScheduler+0xdc>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a96:	f001 f9eb 	bl	8007e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a9a:	e00e      	b.n	8006aba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d10a      	bne.n	8006aba <vTaskStartScheduler+0xb6>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	60fb      	str	r3, [r7, #12]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <vTaskStartScheduler+0xb4>
}
 8006aba:	bf00      	nop
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	080095cc 	.word	0x080095cc
 8006ac8:	0800712d 	.word	0x0800712d
 8006acc:	20000ec8 	.word	0x20000ec8
 8006ad0:	200009d0 	.word	0x200009d0
 8006ad4:	20000068 	.word	0x20000068
 8006ad8:	20000ec4 	.word	0x20000ec4
 8006adc:	20000eb0 	.word	0x20000eb0
 8006ae0:	20000ea8 	.word	0x20000ea8

08006ae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <vTaskSuspendAll+0x18>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3301      	adds	r3, #1
 8006aee:	4a03      	ldr	r2, [pc, #12]	; (8006afc <vTaskSuspendAll+0x18>)
 8006af0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006af2:	bf00      	nop
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	20000ecc 	.word	0x20000ecc

08006b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b0e:	4b42      	ldr	r3, [pc, #264]	; (8006c18 <xTaskResumeAll+0x118>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <xTaskResumeAll+0x2c>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	603b      	str	r3, [r7, #0]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b2c:	f001 fa42 	bl	8007fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b30:	4b39      	ldr	r3, [pc, #228]	; (8006c18 <xTaskResumeAll+0x118>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	4a38      	ldr	r2, [pc, #224]	; (8006c18 <xTaskResumeAll+0x118>)
 8006b38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b3a:	4b37      	ldr	r3, [pc, #220]	; (8006c18 <xTaskResumeAll+0x118>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d162      	bne.n	8006c08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b42:	4b36      	ldr	r3, [pc, #216]	; (8006c1c <xTaskResumeAll+0x11c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d05e      	beq.n	8006c08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b4a:	e02f      	b.n	8006bac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b4c:	4b34      	ldr	r3, [pc, #208]	; (8006c20 <xTaskResumeAll+0x120>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3318      	adds	r3, #24
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe fe3d 	bl	80057d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fe38 	bl	80057d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6c:	4b2d      	ldr	r3, [pc, #180]	; (8006c24 <xTaskResumeAll+0x124>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d903      	bls.n	8006b7c <xTaskResumeAll+0x7c>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	4a2a      	ldr	r2, [pc, #168]	; (8006c24 <xTaskResumeAll+0x124>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4a27      	ldr	r2, [pc, #156]	; (8006c28 <xTaskResumeAll+0x128>)
 8006b8a:	441a      	add	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f7fe fdc3 	bl	800571e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4b23      	ldr	r3, [pc, #140]	; (8006c2c <xTaskResumeAll+0x12c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ba6:	4b22      	ldr	r3, [pc, #136]	; (8006c30 <xTaskResumeAll+0x130>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bac:	4b1c      	ldr	r3, [pc, #112]	; (8006c20 <xTaskResumeAll+0x120>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1cb      	bne.n	8006b4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bba:	f000 fb71 	bl	80072a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bbe:	4b1d      	ldr	r3, [pc, #116]	; (8006c34 <xTaskResumeAll+0x134>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d010      	beq.n	8006bec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bca:	f000 f859 	bl	8006c80 <xTaskIncrementTick>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bd4:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <xTaskResumeAll+0x130>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f1      	bne.n	8006bca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <xTaskResumeAll+0x134>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bec:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <xTaskResumeAll+0x130>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <xTaskResumeAll+0x138>)
 8006bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c08:	f001 fa04 	bl	8008014 <vPortExitCritical>

	return xAlreadyYielded;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000ecc 	.word	0x20000ecc
 8006c1c:	20000ea4 	.word	0x20000ea4
 8006c20:	20000e64 	.word	0x20000e64
 8006c24:	20000eac 	.word	0x20000eac
 8006c28:	200009d4 	.word	0x200009d4
 8006c2c:	200009d0 	.word	0x200009d0
 8006c30:	20000eb8 	.word	0x20000eb8
 8006c34:	20000eb4 	.word	0x20000eb4
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <xTaskGetTickCount+0x1c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c48:	687b      	ldr	r3, [r7, #4]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20000ea8 	.word	0x20000ea8

08006c5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c62:	f001 fa89 	bl	8008178 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006c6a:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <xTaskGetTickCountFromISR+0x20>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c70:	683b      	ldr	r3, [r7, #0]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000ea8 	.word	0x20000ea8

08006c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c8a:	4b4f      	ldr	r3, [pc, #316]	; (8006dc8 <xTaskIncrementTick+0x148>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f040 808f 	bne.w	8006db2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c94:	4b4d      	ldr	r3, [pc, #308]	; (8006dcc <xTaskIncrementTick+0x14c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c9c:	4a4b      	ldr	r2, [pc, #300]	; (8006dcc <xTaskIncrementTick+0x14c>)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d120      	bne.n	8006cea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ca8:	4b49      	ldr	r3, [pc, #292]	; (8006dd0 <xTaskIncrementTick+0x150>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	603b      	str	r3, [r7, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <xTaskIncrementTick+0x46>
 8006cc8:	4b41      	ldr	r3, [pc, #260]	; (8006dd0 <xTaskIncrementTick+0x150>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	4b41      	ldr	r3, [pc, #260]	; (8006dd4 <xTaskIncrementTick+0x154>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a3f      	ldr	r2, [pc, #252]	; (8006dd0 <xTaskIncrementTick+0x150>)
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	4a3f      	ldr	r2, [pc, #252]	; (8006dd4 <xTaskIncrementTick+0x154>)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	4b3e      	ldr	r3, [pc, #248]	; (8006dd8 <xTaskIncrementTick+0x158>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	4a3d      	ldr	r2, [pc, #244]	; (8006dd8 <xTaskIncrementTick+0x158>)
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	f000 fadb 	bl	80072a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cea:	4b3c      	ldr	r3, [pc, #240]	; (8006ddc <xTaskIncrementTick+0x15c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d349      	bcc.n	8006d88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf4:	4b36      	ldr	r3, [pc, #216]	; (8006dd0 <xTaskIncrementTick+0x150>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cfe:	4b37      	ldr	r3, [pc, #220]	; (8006ddc <xTaskIncrementTick+0x15c>)
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295
 8006d04:	601a      	str	r2, [r3, #0]
					break;
 8006d06:	e03f      	b.n	8006d88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d08:	4b31      	ldr	r3, [pc, #196]	; (8006dd0 <xTaskIncrementTick+0x150>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d203      	bcs.n	8006d28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d20:	4a2e      	ldr	r2, [pc, #184]	; (8006ddc <xTaskIncrementTick+0x15c>)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d26:	e02f      	b.n	8006d88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fd53 	bl	80057d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	3318      	adds	r3, #24
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fd4a 	bl	80057d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <xTaskIncrementTick+0x160>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d903      	bls.n	8006d58 <xTaskIncrementTick+0xd8>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	4a22      	ldr	r2, [pc, #136]	; (8006de0 <xTaskIncrementTick+0x160>)
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4a1f      	ldr	r2, [pc, #124]	; (8006de4 <xTaskIncrementTick+0x164>)
 8006d66:	441a      	add	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f7fe fcd5 	bl	800571e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d78:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <xTaskIncrementTick+0x168>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d3b8      	bcc.n	8006cf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d82:	2301      	movs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d86:	e7b5      	b.n	8006cf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d88:	4b17      	ldr	r3, [pc, #92]	; (8006de8 <xTaskIncrementTick+0x168>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8e:	4915      	ldr	r1, [pc, #84]	; (8006de4 <xTaskIncrementTick+0x164>)
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d901      	bls.n	8006da4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006da4:	4b11      	ldr	r3, [pc, #68]	; (8006dec <xTaskIncrementTick+0x16c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d007      	beq.n	8006dbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006dac:	2301      	movs	r3, #1
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	e004      	b.n	8006dbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <xTaskIncrementTick+0x170>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3301      	adds	r3, #1
 8006db8:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <xTaskIncrementTick+0x170>)
 8006dba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dbc:	697b      	ldr	r3, [r7, #20]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000ecc 	.word	0x20000ecc
 8006dcc:	20000ea8 	.word	0x20000ea8
 8006dd0:	20000e5c 	.word	0x20000e5c
 8006dd4:	20000e60 	.word	0x20000e60
 8006dd8:	20000ebc 	.word	0x20000ebc
 8006ddc:	20000ec4 	.word	0x20000ec4
 8006de0:	20000eac 	.word	0x20000eac
 8006de4:	200009d4 	.word	0x200009d4
 8006de8:	200009d0 	.word	0x200009d0
 8006dec:	20000eb8 	.word	0x20000eb8
 8006df0:	20000eb4 	.word	0x20000eb4

08006df4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <vTaskSwitchContext+0xb0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e02:	4b29      	ldr	r3, [pc, #164]	; (8006ea8 <vTaskSwitchContext+0xb4>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e08:	e046      	b.n	8006e98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006e0a:	4b27      	ldr	r3, [pc, #156]	; (8006ea8 <vTaskSwitchContext+0xb4>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e10:	4b26      	ldr	r3, [pc, #152]	; (8006eac <vTaskSwitchContext+0xb8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e010      	b.n	8006e3a <vTaskSwitchContext+0x46>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	607b      	str	r3, [r7, #4]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <vTaskSwitchContext+0x3e>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	491d      	ldr	r1, [pc, #116]	; (8006eb0 <vTaskSwitchContext+0xbc>)
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0e4      	beq.n	8006e18 <vTaskSwitchContext+0x24>
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4a15      	ldr	r2, [pc, #84]	; (8006eb0 <vTaskSwitchContext+0xbc>)
 8006e5a:	4413      	add	r3, r2
 8006e5c:	60bb      	str	r3, [r7, #8]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	605a      	str	r2, [r3, #4]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d104      	bne.n	8006e7e <vTaskSwitchContext+0x8a>
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	605a      	str	r2, [r3, #4]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	4a0b      	ldr	r2, [pc, #44]	; (8006eb4 <vTaskSwitchContext+0xc0>)
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	4a08      	ldr	r2, [pc, #32]	; (8006eac <vTaskSwitchContext+0xb8>)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <vTaskSwitchContext+0xc0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3354      	adds	r3, #84	; 0x54
 8006e94:	4a08      	ldr	r2, [pc, #32]	; (8006eb8 <vTaskSwitchContext+0xc4>)
 8006e96:	6013      	str	r3, [r2, #0]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	20000ecc 	.word	0x20000ecc
 8006ea8:	20000eb8 	.word	0x20000eb8
 8006eac:	20000eac 	.word	0x20000eac
 8006eb0:	200009d4 	.word	0x200009d4
 8006eb4:	200009d0 	.word	0x200009d0
 8006eb8:	20000068 	.word	0x20000068

08006ebc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	60fb      	str	r3, [r7, #12]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ee2:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <vTaskPlaceOnEventList+0x44>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3318      	adds	r3, #24
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fe fc3b 	bl	8005766 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	6838      	ldr	r0, [r7, #0]
 8006ef4:	f000 fb8e 	bl	8007614 <prvAddCurrentTaskToDelayedList>
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	200009d0 	.word	0x200009d0

08006f04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	617b      	str	r3, [r7, #20]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3318      	adds	r3, #24
 8006f32:	4619      	mov	r1, r3
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7fe fbf2 	bl	800571e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295
 8006f44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	68b8      	ldr	r0, [r7, #8]
 8006f4a:	f000 fb63 	bl	8007614 <prvAddCurrentTaskToDelayedList>
	}
 8006f4e:	bf00      	nop
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	200009d0 	.word	0x200009d0

08006f5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60fb      	str	r3, [r7, #12]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	3318      	adds	r3, #24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fc23 	bl	80057d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f92:	4b1e      	ldr	r3, [pc, #120]	; (800700c <xTaskRemoveFromEventList+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d11d      	bne.n	8006fd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fc1a 	bl	80057d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	4b19      	ldr	r3, [pc, #100]	; (8007010 <xTaskRemoveFromEventList+0xb4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d903      	bls.n	8006fb8 <xTaskRemoveFromEventList+0x5c>
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	4a16      	ldr	r2, [pc, #88]	; (8007010 <xTaskRemoveFromEventList+0xb4>)
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4a13      	ldr	r2, [pc, #76]	; (8007014 <xTaskRemoveFromEventList+0xb8>)
 8006fc6:	441a      	add	r2, r3
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fe fba5 	bl	800571e <vListInsertEnd>
 8006fd4:	e005      	b.n	8006fe2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	3318      	adds	r3, #24
 8006fda:	4619      	mov	r1, r3
 8006fdc:	480e      	ldr	r0, [pc, #56]	; (8007018 <xTaskRemoveFromEventList+0xbc>)
 8006fde:	f7fe fb9e 	bl	800571e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <xTaskRemoveFromEventList+0xc0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d905      	bls.n	8006ffc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <xTaskRemoveFromEventList+0xc4>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e001      	b.n	8007000 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007000:	697b      	ldr	r3, [r7, #20]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000ecc 	.word	0x20000ecc
 8007010:	20000eac 	.word	0x20000eac
 8007014:	200009d4 	.word	0x200009d4
 8007018:	20000e64 	.word	0x20000e64
 800701c:	200009d0 	.word	0x200009d0
 8007020:	20000eb8 	.word	0x20000eb8

08007024 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800702c:	4b06      	ldr	r3, [pc, #24]	; (8007048 <vTaskInternalSetTimeOutState+0x24>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <vTaskInternalSetTimeOutState+0x28>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	605a      	str	r2, [r3, #4]
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	20000ebc 	.word	0x20000ebc
 800704c:	20000ea8 	.word	0x20000ea8

08007050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	613b      	str	r3, [r7, #16]
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	60fb      	str	r3, [r7, #12]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007092:	f000 ff8f 	bl	8007fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007096:	4b1d      	ldr	r3, [pc, #116]	; (800710c <xTaskCheckForTimeOut+0xbc>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d102      	bne.n	80070b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e023      	b.n	80070fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b15      	ldr	r3, [pc, #84]	; (8007110 <xTaskCheckForTimeOut+0xc0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d007      	beq.n	80070d2 <xTaskCheckForTimeOut+0x82>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	e015      	b.n	80070fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d20b      	bcs.n	80070f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff9b 	bl	8007024 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e004      	b.n	80070fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070fe:	f000 ff89 	bl	8008014 <vPortExitCritical>

	return xReturn;
 8007102:	69fb      	ldr	r3, [r7, #28]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000ea8 	.word	0x20000ea8
 8007110:	20000ebc 	.word	0x20000ebc

08007114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007118:	4b03      	ldr	r3, [pc, #12]	; (8007128 <vTaskMissedYield+0x14>)
 800711a:	2201      	movs	r2, #1
 800711c:	601a      	str	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	20000eb8 	.word	0x20000eb8

0800712c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007134:	f000 f852 	bl	80071dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <prvIdleTask+0x28>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d9f9      	bls.n	8007134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <prvIdleTask+0x2c>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007150:	e7f0      	b.n	8007134 <prvIdleTask+0x8>
 8007152:	bf00      	nop
 8007154:	200009d4 	.word	0x200009d4
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	e00c      	b.n	8007182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4a12      	ldr	r2, [pc, #72]	; (80071bc <prvInitialiseTaskLists+0x60>)
 8007174:	4413      	add	r3, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe faa4 	bl	80056c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3301      	adds	r3, #1
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b37      	cmp	r3, #55	; 0x37
 8007186:	d9ef      	bls.n	8007168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007188:	480d      	ldr	r0, [pc, #52]	; (80071c0 <prvInitialiseTaskLists+0x64>)
 800718a:	f7fe fa9b 	bl	80056c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800718e:	480d      	ldr	r0, [pc, #52]	; (80071c4 <prvInitialiseTaskLists+0x68>)
 8007190:	f7fe fa98 	bl	80056c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007194:	480c      	ldr	r0, [pc, #48]	; (80071c8 <prvInitialiseTaskLists+0x6c>)
 8007196:	f7fe fa95 	bl	80056c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800719a:	480c      	ldr	r0, [pc, #48]	; (80071cc <prvInitialiseTaskLists+0x70>)
 800719c:	f7fe fa92 	bl	80056c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071a0:	480b      	ldr	r0, [pc, #44]	; (80071d0 <prvInitialiseTaskLists+0x74>)
 80071a2:	f7fe fa8f 	bl	80056c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <prvInitialiseTaskLists+0x78>)
 80071a8:	4a05      	ldr	r2, [pc, #20]	; (80071c0 <prvInitialiseTaskLists+0x64>)
 80071aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <prvInitialiseTaskLists+0x7c>)
 80071ae:	4a05      	ldr	r2, [pc, #20]	; (80071c4 <prvInitialiseTaskLists+0x68>)
 80071b0:	601a      	str	r2, [r3, #0]
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	200009d4 	.word	0x200009d4
 80071c0:	20000e34 	.word	0x20000e34
 80071c4:	20000e48 	.word	0x20000e48
 80071c8:	20000e64 	.word	0x20000e64
 80071cc:	20000e78 	.word	0x20000e78
 80071d0:	20000e90 	.word	0x20000e90
 80071d4:	20000e5c 	.word	0x20000e5c
 80071d8:	20000e60 	.word	0x20000e60

080071dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e2:	e019      	b.n	8007218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071e4:	f000 fee6 	bl	8007fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e8:	4b10      	ldr	r3, [pc, #64]	; (800722c <prvCheckTasksWaitingTermination+0x50>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe faef 	bl	80057d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071fa:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <prvCheckTasksWaitingTermination+0x54>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3b01      	subs	r3, #1
 8007200:	4a0b      	ldr	r2, [pc, #44]	; (8007230 <prvCheckTasksWaitingTermination+0x54>)
 8007202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007204:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <prvCheckTasksWaitingTermination+0x58>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3b01      	subs	r3, #1
 800720a:	4a0a      	ldr	r2, [pc, #40]	; (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800720c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800720e:	f000 ff01 	bl	8008014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f810 	bl	8007238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e1      	bne.n	80071e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000e78 	.word	0x20000e78
 8007230:	20000ea4 	.word	0x20000ea4
 8007234:	20000e8c 	.word	0x20000e8c

08007238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3354      	adds	r3, #84	; 0x54
 8007244:	4618      	mov	r0, r3
 8007246:	f001 faf1 	bl	800882c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007250:	2b00      	cmp	r3, #0
 8007252:	d108      	bne.n	8007266 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	4618      	mov	r0, r3
 800725a:	f001 f899 	bl	8008390 <vPortFree>
				vPortFree( pxTCB );
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 f896 	bl	8008390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007264:	e018      	b.n	8007298 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800726c:	2b01      	cmp	r3, #1
 800726e:	d103      	bne.n	8007278 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 f88d 	bl	8008390 <vPortFree>
	}
 8007276:	e00f      	b.n	8007298 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800727e:	2b02      	cmp	r3, #2
 8007280:	d00a      	beq.n	8007298 <prvDeleteTCB+0x60>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60fb      	str	r3, [r7, #12]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <prvDeleteTCB+0x5e>
	}
 8007298:	bf00      	nop
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072a6:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <prvResetNextTaskUnblockTime+0x38>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d104      	bne.n	80072ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <prvResetNextTaskUnblockTime+0x3c>)
 80072b2:	f04f 32ff 	mov.w	r2, #4294967295
 80072b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072b8:	e008      	b.n	80072cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <prvResetNextTaskUnblockTime+0x38>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4a04      	ldr	r2, [pc, #16]	; (80072dc <prvResetNextTaskUnblockTime+0x3c>)
 80072ca:	6013      	str	r3, [r2, #0]
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	20000e5c 	.word	0x20000e5c
 80072dc:	20000ec4 	.word	0x20000ec4

080072e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80072e6:	4b05      	ldr	r3, [pc, #20]	; (80072fc <xTaskGetCurrentTaskHandle+0x1c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 80072ec:	687b      	ldr	r3, [r7, #4]
	}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	200009d0 	.word	0x200009d0

08007300 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <xTaskGetSchedulerState+0x34>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d102      	bne.n	8007314 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800730e:	2301      	movs	r3, #1
 8007310:	607b      	str	r3, [r7, #4]
 8007312:	e008      	b.n	8007326 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007314:	4b08      	ldr	r3, [pc, #32]	; (8007338 <xTaskGetSchedulerState+0x38>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800731c:	2302      	movs	r3, #2
 800731e:	607b      	str	r3, [r7, #4]
 8007320:	e001      	b.n	8007326 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007322:	2300      	movs	r3, #0
 8007324:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007326:	687b      	ldr	r3, [r7, #4]
	}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	20000eb0 	.word	0x20000eb0
 8007338:	20000ecc 	.word	0x20000ecc

0800733c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d051      	beq.n	80073f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007356:	4b2a      	ldr	r3, [pc, #168]	; (8007400 <xTaskPriorityInherit+0xc4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	429a      	cmp	r2, r3
 800735e:	d241      	bcs.n	80073e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	db06      	blt.n	8007376 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007368:	4b25      	ldr	r3, [pc, #148]	; (8007400 <xTaskPriorityInherit+0xc4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6959      	ldr	r1, [r3, #20]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <xTaskPriorityInherit+0xc8>)
 8007388:	4413      	add	r3, r2
 800738a:	4299      	cmp	r1, r3
 800738c:	d122      	bne.n	80073d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	3304      	adds	r3, #4
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fa20 	bl	80057d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007398:	4b19      	ldr	r3, [pc, #100]	; (8007400 <xTaskPriorityInherit+0xc4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a6:	4b18      	ldr	r3, [pc, #96]	; (8007408 <xTaskPriorityInherit+0xcc>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d903      	bls.n	80073b6 <xTaskPriorityInherit+0x7a>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <xTaskPriorityInherit+0xcc>)
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4a10      	ldr	r2, [pc, #64]	; (8007404 <xTaskPriorityInherit+0xc8>)
 80073c4:	441a      	add	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	3304      	adds	r3, #4
 80073ca:	4619      	mov	r1, r3
 80073cc:	4610      	mov	r0, r2
 80073ce:	f7fe f9a6 	bl	800571e <vListInsertEnd>
 80073d2:	e004      	b.n	80073de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073d4:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <xTaskPriorityInherit+0xc4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073de:	2301      	movs	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e008      	b.n	80073f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <xTaskPriorityInherit+0xc4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d201      	bcs.n	80073f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073f2:	2301      	movs	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073f6:	68fb      	ldr	r3, [r7, #12]
	}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	200009d0 	.word	0x200009d0
 8007404:	200009d4 	.word	0x200009d4
 8007408:	20000eac 	.word	0x20000eac

0800740c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d056      	beq.n	80074d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007422:	4b2e      	ldr	r3, [pc, #184]	; (80074dc <xTaskPriorityDisinherit+0xd0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	429a      	cmp	r2, r3
 800742a:	d00a      	beq.n	8007442 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60fb      	str	r3, [r7, #12]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10a      	bne.n	8007460 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	60bb      	str	r3, [r7, #8]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007464:	1e5a      	subs	r2, r3, #1
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007472:	429a      	cmp	r2, r3
 8007474:	d02c      	beq.n	80074d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747a:	2b00      	cmp	r3, #0
 800747c:	d128      	bne.n	80074d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	3304      	adds	r3, #4
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe f9a8 	bl	80057d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <xTaskPriorityDisinherit+0xd4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d903      	bls.n	80074b0 <xTaskPriorityDisinherit+0xa4>
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	4a0c      	ldr	r2, [pc, #48]	; (80074e0 <xTaskPriorityDisinherit+0xd4>)
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4a09      	ldr	r2, [pc, #36]	; (80074e4 <xTaskPriorityDisinherit+0xd8>)
 80074be:	441a      	add	r2, r3
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4619      	mov	r1, r3
 80074c6:	4610      	mov	r0, r2
 80074c8:	f7fe f929 	bl	800571e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074cc:	2301      	movs	r3, #1
 80074ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074d0:	697b      	ldr	r3, [r7, #20]
	}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	200009d0 	.word	0x200009d0
 80074e0:	20000eac 	.word	0x20000eac
 80074e4:	200009d4 	.word	0x200009d4

080074e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074f6:	2301      	movs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d06a      	beq.n	80075d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	60fb      	str	r3, [r7, #12]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	429a      	cmp	r2, r3
 8007526:	d902      	bls.n	800752e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	61fb      	str	r3, [r7, #28]
 800752c:	e002      	b.n	8007534 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007532:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	69fa      	ldr	r2, [r7, #28]
 800753a:	429a      	cmp	r2, r3
 800753c:	d04b      	beq.n	80075d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	429a      	cmp	r2, r3
 8007546:	d146      	bne.n	80075d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007548:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	429a      	cmp	r2, r3
 8007550:	d10a      	bne.n	8007568 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	60bb      	str	r3, [r7, #8]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	db04      	blt.n	8007586 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	6959      	ldr	r1, [r3, #20]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4a13      	ldr	r2, [pc, #76]	; (80075e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007596:	4413      	add	r3, r2
 8007598:	4299      	cmp	r1, r3
 800759a:	d11c      	bne.n	80075d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe f919 	bl	80057d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075aa:	4b0f      	ldr	r3, [pc, #60]	; (80075e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d903      	bls.n	80075ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	4a0c      	ldr	r2, [pc, #48]	; (80075e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a07      	ldr	r2, [pc, #28]	; (80075e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80075c8:	441a      	add	r2, r3
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7fe f8a4 	bl	800571e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075d6:	bf00      	nop
 80075d8:	3720      	adds	r7, #32
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200009d0 	.word	0x200009d0
 80075e4:	200009d4 	.word	0x200009d4
 80075e8:	20000eac 	.word	0x20000eac

080075ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <pvTaskIncrementMutexHeldCount+0x24>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075f8:	4b05      	ldr	r3, [pc, #20]	; (8007610 <pvTaskIncrementMutexHeldCount+0x24>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075fe:	3201      	adds	r2, #1
 8007600:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007602:	4b03      	ldr	r3, [pc, #12]	; (8007610 <pvTaskIncrementMutexHeldCount+0x24>)
 8007604:	681b      	ldr	r3, [r3, #0]
	}
 8007606:	4618      	mov	r0, r3
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	200009d0 	.word	0x200009d0

08007614 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800761e:	4b21      	ldr	r3, [pc, #132]	; (80076a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007624:	4b20      	ldr	r3, [pc, #128]	; (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3304      	adds	r3, #4
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe f8d4 	bl	80057d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d10a      	bne.n	800764e <prvAddCurrentTaskToDelayedList+0x3a>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800763e:	4b1a      	ldr	r3, [pc, #104]	; (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3304      	adds	r3, #4
 8007644:	4619      	mov	r1, r3
 8007646:	4819      	ldr	r0, [pc, #100]	; (80076ac <prvAddCurrentTaskToDelayedList+0x98>)
 8007648:	f7fe f869 	bl	800571e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800764c:	e026      	b.n	800769c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4413      	add	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007656:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	429a      	cmp	r2, r3
 8007664:	d209      	bcs.n	800767a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007666:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3304      	adds	r3, #4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7fe f877 	bl	8005766 <vListInsert>
}
 8007678:	e010      	b.n	800769c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800767a:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3304      	adds	r3, #4
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f7fe f86d 	bl	8005766 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	429a      	cmp	r2, r3
 8007694:	d202      	bcs.n	800769c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007696:	4a08      	ldr	r2, [pc, #32]	; (80076b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6013      	str	r3, [r2, #0]
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000ea8 	.word	0x20000ea8
 80076a8:	200009d0 	.word	0x200009d0
 80076ac:	20000e90 	.word	0x20000e90
 80076b0:	20000e60 	.word	0x20000e60
 80076b4:	20000e5c 	.word	0x20000e5c
 80076b8:	20000ec4 	.word	0x20000ec4

080076bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08a      	sub	sp, #40	; 0x28
 80076c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076c6:	f000 fb07 	bl	8007cd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076ca:	4b1c      	ldr	r3, [pc, #112]	; (800773c <xTimerCreateTimerTask+0x80>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d021      	beq.n	8007716 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076da:	1d3a      	adds	r2, r7, #4
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	f107 030c 	add.w	r3, r7, #12
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fd ffd3 	bl	8005690 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	9202      	str	r2, [sp, #8]
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	2302      	movs	r3, #2
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	2300      	movs	r3, #0
 80076fa:	460a      	mov	r2, r1
 80076fc:	4910      	ldr	r1, [pc, #64]	; (8007740 <xTimerCreateTimerTask+0x84>)
 80076fe:	4811      	ldr	r0, [pc, #68]	; (8007744 <xTimerCreateTimerTask+0x88>)
 8007700:	f7fe ff94 	bl	800662c <xTaskCreateStatic>
 8007704:	4603      	mov	r3, r0
 8007706:	4a10      	ldr	r2, [pc, #64]	; (8007748 <xTimerCreateTimerTask+0x8c>)
 8007708:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <xTimerCreateTimerTask+0x8c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007712:	2301      	movs	r3, #1
 8007714:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	613b      	str	r3, [r7, #16]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007732:	697b      	ldr	r3, [r7, #20]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000f00 	.word	0x20000f00
 8007740:	080095d4 	.word	0x080095d4
 8007744:	08007881 	.word	0x08007881
 8007748:	20000f04 	.word	0x20000f04

0800774c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800775a:	2300      	movs	r3, #0
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	623b      	str	r3, [r7, #32]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800777a:	4b1a      	ldr	r3, [pc, #104]	; (80077e4 <xTimerGenericCommand+0x98>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d02a      	beq.n	80077d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b05      	cmp	r3, #5
 8007792:	dc18      	bgt.n	80077c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007794:	f7ff fdb4 	bl	8007300 <xTaskGetSchedulerState>
 8007798:	4603      	mov	r3, r0
 800779a:	2b02      	cmp	r3, #2
 800779c:	d109      	bne.n	80077b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800779e:	4b11      	ldr	r3, [pc, #68]	; (80077e4 <xTimerGenericCommand+0x98>)
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f107 0110 	add.w	r1, r7, #16
 80077a6:	2300      	movs	r3, #0
 80077a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077aa:	f7fe fa33 	bl	8005c14 <xQueueGenericSend>
 80077ae:	6278      	str	r0, [r7, #36]	; 0x24
 80077b0:	e012      	b.n	80077d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077b2:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <xTimerGenericCommand+0x98>)
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	f107 0110 	add.w	r1, r7, #16
 80077ba:	2300      	movs	r3, #0
 80077bc:	2200      	movs	r2, #0
 80077be:	f7fe fa29 	bl	8005c14 <xQueueGenericSend>
 80077c2:	6278      	str	r0, [r7, #36]	; 0x24
 80077c4:	e008      	b.n	80077d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077c6:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <xTimerGenericCommand+0x98>)
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	f107 0110 	add.w	r1, r7, #16
 80077ce:	2300      	movs	r3, #0
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	f7fe fb1d 	bl	8005e10 <xQueueGenericSendFromISR>
 80077d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3728      	adds	r7, #40	; 0x28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000f00 	.word	0x20000f00

080077e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f2:	4b22      	ldr	r3, [pc, #136]	; (800787c <prvProcessExpiredTimer+0x94>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	3304      	adds	r3, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f7fd ffe9 	bl	80057d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d022      	beq.n	800785a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	18d1      	adds	r1, r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	6978      	ldr	r0, [r7, #20]
 8007822:	f000 f8d1 	bl	80079c8 <prvInsertTimerInActiveList>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01f      	beq.n	800786c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800782c:	2300      	movs	r3, #0
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	2300      	movs	r3, #0
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	2100      	movs	r1, #0
 8007836:	6978      	ldr	r0, [r7, #20]
 8007838:	f7ff ff88 	bl	800774c <xTimerGenericCommand>
 800783c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d113      	bne.n	800786c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	60fb      	str	r3, [r7, #12]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007860:	f023 0301 	bic.w	r3, r3, #1
 8007864:	b2da      	uxtb	r2, r3
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	6978      	ldr	r0, [r7, #20]
 8007872:	4798      	blx	r3
}
 8007874:	bf00      	nop
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000ef8 	.word	0x20000ef8

08007880 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007888:	f107 0308 	add.w	r3, r7, #8
 800788c:	4618      	mov	r0, r3
 800788e:	f000 f857 	bl	8007940 <prvGetNextExpireTime>
 8007892:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	4619      	mov	r1, r3
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f803 	bl	80078a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800789e:	f000 f8d5 	bl	8007a4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078a2:	e7f1      	b.n	8007888 <prvTimerTask+0x8>

080078a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078ae:	f7ff f919 	bl	8006ae4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078b2:	f107 0308 	add.w	r3, r7, #8
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f866 	bl	8007988 <prvSampleTimeNow>
 80078bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d130      	bne.n	8007926 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <prvProcessTimerOrBlockTask+0x3c>
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d806      	bhi.n	80078e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078d2:	f7ff f915 	bl	8006b00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff ff85 	bl	80077e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078de:	e024      	b.n	800792a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d008      	beq.n	80078f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <prvProcessTimerOrBlockTask+0x90>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <prvProcessTimerOrBlockTask+0x50>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <prvProcessTimerOrBlockTask+0x52>
 80078f4:	2300      	movs	r3, #0
 80078f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078f8:	4b0f      	ldr	r3, [pc, #60]	; (8007938 <prvProcessTimerOrBlockTask+0x94>)
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4619      	mov	r1, r3
 8007906:	f7fe fe5d 	bl	80065c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800790a:	f7ff f8f9 	bl	8006b00 <xTaskResumeAll>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007914:	4b09      	ldr	r3, [pc, #36]	; (800793c <prvProcessTimerOrBlockTask+0x98>)
 8007916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	f3bf 8f6f 	isb	sy
}
 8007924:	e001      	b.n	800792a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007926:	f7ff f8eb 	bl	8006b00 <xTaskResumeAll>
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000efc 	.word	0x20000efc
 8007938:	20000f00 	.word	0x20000f00
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007948:	4b0e      	ldr	r3, [pc, #56]	; (8007984 <prvGetNextExpireTime+0x44>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <prvGetNextExpireTime+0x16>
 8007952:	2201      	movs	r2, #1
 8007954:	e000      	b.n	8007958 <prvGetNextExpireTime+0x18>
 8007956:	2200      	movs	r2, #0
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d105      	bne.n	8007970 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <prvGetNextExpireTime+0x44>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e001      	b.n	8007974 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007974:	68fb      	ldr	r3, [r7, #12]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000ef8 	.word	0x20000ef8

08007988 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007990:	f7ff f954 	bl	8006c3c <xTaskGetTickCount>
 8007994:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007996:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <prvSampleTimeNow+0x3c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	429a      	cmp	r2, r3
 800799e:	d205      	bcs.n	80079ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079a0:	f000 f936 	bl	8007c10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e002      	b.n	80079b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079b2:	4a04      	ldr	r2, [pc, #16]	; (80079c4 <prvSampleTimeNow+0x3c>)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079b8:	68fb      	ldr	r3, [r7, #12]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000f08 	.word	0x20000f08

080079c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d812      	bhi.n	8007a14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	1ad2      	subs	r2, r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d302      	bcc.n	8007a02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e01b      	b.n	8007a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a02:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <prvInsertTimerInActiveList+0x7c>)
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	f7fd feaa 	bl	8005766 <vListInsert>
 8007a12:	e012      	b.n	8007a3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d206      	bcs.n	8007a2a <prvInsertTimerInActiveList+0x62>
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d302      	bcc.n	8007a2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a24:	2301      	movs	r3, #1
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	e007      	b.n	8007a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a2a:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <prvInsertTimerInActiveList+0x80>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4619      	mov	r1, r3
 8007a34:	4610      	mov	r0, r2
 8007a36:	f7fd fe96 	bl	8005766 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a3a:	697b      	ldr	r3, [r7, #20]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20000efc 	.word	0x20000efc
 8007a48:	20000ef8 	.word	0x20000ef8

08007a4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08e      	sub	sp, #56	; 0x38
 8007a50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a52:	e0ca      	b.n	8007bea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da18      	bge.n	8007a8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a5a:	1d3b      	adds	r3, r7, #4
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	61fb      	str	r3, [r7, #28]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a82:	6850      	ldr	r0, [r2, #4]
 8007a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a86:	6892      	ldr	r2, [r2, #8]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f2c0 80ab 	blt.w	8007bea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fd fe97 	bl	80057d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aaa:	463b      	mov	r3, r7
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff ff6b 	bl	8007988 <prvSampleTimeNow>
 8007ab2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b09      	cmp	r3, #9
 8007ab8:	f200 8096 	bhi.w	8007be8 <prvProcessReceivedCommands+0x19c>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <prvProcessReceivedCommands+0x78>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007aed 	.word	0x08007aed
 8007ac8:	08007aed 	.word	0x08007aed
 8007acc:	08007aed 	.word	0x08007aed
 8007ad0:	08007b61 	.word	0x08007b61
 8007ad4:	08007b75 	.word	0x08007b75
 8007ad8:	08007bbf 	.word	0x08007bbf
 8007adc:	08007aed 	.word	0x08007aed
 8007ae0:	08007aed 	.word	0x08007aed
 8007ae4:	08007b61 	.word	0x08007b61
 8007ae8:	08007b75 	.word	0x08007b75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	18d1      	adds	r1, r2, r3
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b0c:	f7ff ff5c 	bl	80079c8 <prvInsertTimerInActiveList>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d069      	beq.n	8007bea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d05e      	beq.n	8007bea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	441a      	add	r2, r3
 8007b34:	2300      	movs	r3, #0
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b3e:	f7ff fe05 	bl	800774c <xTimerGenericCommand>
 8007b42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d14f      	bne.n	8007bea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	61bb      	str	r3, [r7, #24]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b66:	f023 0301 	bic.w	r3, r3, #1
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b72:	e03a      	b.n	8007bea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	617b      	str	r3, [r7, #20]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	18d1      	adds	r1, r2, r3
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb8:	f7ff ff06 	bl	80079c8 <prvInsertTimerInActiveList>
					break;
 8007bbc:	e015      	b.n	8007bea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bce:	f000 fbdf 	bl	8008390 <vPortFree>
 8007bd2:	e00a      	b.n	8007bea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bda:	f023 0301 	bic.w	r3, r3, #1
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007be6:	e000      	b.n	8007bea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007be8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bea:	4b08      	ldr	r3, [pc, #32]	; (8007c0c <prvProcessReceivedCommands+0x1c0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	1d39      	adds	r1, r7, #4
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe f9a8 	bl	8005f48 <xQueueReceive>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f47f af2a 	bne.w	8007a54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3730      	adds	r7, #48	; 0x30
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000f00 	.word	0x20000f00

08007c10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c16:	e048      	b.n	8007caa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c18:	4b2d      	ldr	r3, [pc, #180]	; (8007cd0 <prvSwitchTimerLists+0xc0>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c22:	4b2b      	ldr	r3, [pc, #172]	; (8007cd0 <prvSwitchTimerLists+0xc0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fd fdd1 	bl	80057d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d02e      	beq.n	8007caa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4413      	add	r3, r2
 8007c54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d90e      	bls.n	8007c7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c6a:	4b19      	ldr	r3, [pc, #100]	; (8007cd0 <prvSwitchTimerLists+0xc0>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f7fd fd76 	bl	8005766 <vListInsert>
 8007c7a:	e016      	b.n	8007caa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	2300      	movs	r3, #0
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	2100      	movs	r1, #0
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff fd60 	bl	800774c <xTimerGenericCommand>
 8007c8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	603b      	str	r3, [r7, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <prvSwitchTimerLists+0xc0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1b1      	bne.n	8007c18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <prvSwitchTimerLists+0xc0>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cba:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <prvSwitchTimerLists+0xc4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a04      	ldr	r2, [pc, #16]	; (8007cd0 <prvSwitchTimerLists+0xc0>)
 8007cc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cc2:	4a04      	ldr	r2, [pc, #16]	; (8007cd4 <prvSwitchTimerLists+0xc4>)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	6013      	str	r3, [r2, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20000ef8 	.word	0x20000ef8
 8007cd4:	20000efc 	.word	0x20000efc

08007cd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cde:	f000 f969 	bl	8007fb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ce2:	4b15      	ldr	r3, [pc, #84]	; (8007d38 <prvCheckForValidListAndQueue+0x60>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d120      	bne.n	8007d2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cea:	4814      	ldr	r0, [pc, #80]	; (8007d3c <prvCheckForValidListAndQueue+0x64>)
 8007cec:	f7fd fcea 	bl	80056c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cf0:	4813      	ldr	r0, [pc, #76]	; (8007d40 <prvCheckForValidListAndQueue+0x68>)
 8007cf2:	f7fd fce7 	bl	80056c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <prvCheckForValidListAndQueue+0x6c>)
 8007cf8:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <prvCheckForValidListAndQueue+0x64>)
 8007cfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cfc:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <prvCheckForValidListAndQueue+0x70>)
 8007cfe:	4a10      	ldr	r2, [pc, #64]	; (8007d40 <prvCheckForValidListAndQueue+0x68>)
 8007d00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d02:	2300      	movs	r3, #0
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <prvCheckForValidListAndQueue+0x74>)
 8007d08:	4a11      	ldr	r2, [pc, #68]	; (8007d50 <prvCheckForValidListAndQueue+0x78>)
 8007d0a:	2110      	movs	r1, #16
 8007d0c:	200a      	movs	r0, #10
 8007d0e:	f7fd fdf5 	bl	80058fc <xQueueGenericCreateStatic>
 8007d12:	4603      	mov	r3, r0
 8007d14:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <prvCheckForValidListAndQueue+0x60>)
 8007d16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d18:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <prvCheckForValidListAndQueue+0x60>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <prvCheckForValidListAndQueue+0x60>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	490b      	ldr	r1, [pc, #44]	; (8007d54 <prvCheckForValidListAndQueue+0x7c>)
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fc22 	bl	8006570 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d2c:	f000 f972 	bl	8008014 <vPortExitCritical>
}
 8007d30:	bf00      	nop
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000f00 	.word	0x20000f00
 8007d3c:	20000ed0 	.word	0x20000ed0
 8007d40:	20000ee4 	.word	0x20000ee4
 8007d44:	20000ef8 	.word	0x20000ef8
 8007d48:	20000efc 	.word	0x20000efc
 8007d4c:	20000fac 	.word	0x20000fac
 8007d50:	20000f0c 	.word	0x20000f0c
 8007d54:	080095dc 	.word	0x080095dc

08007d58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3b04      	subs	r3, #4
 8007d68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3b04      	subs	r3, #4
 8007d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f023 0201 	bic.w	r2, r3, #1
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3b04      	subs	r3, #4
 8007d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d88:	4a0c      	ldr	r2, [pc, #48]	; (8007dbc <pxPortInitialiseStack+0x64>)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3b14      	subs	r3, #20
 8007d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3b04      	subs	r3, #4
 8007d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f06f 0202 	mvn.w	r2, #2
 8007da6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3b20      	subs	r3, #32
 8007dac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dae:	68fb      	ldr	r3, [r7, #12]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	08007dc1 	.word	0x08007dc1

08007dc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dca:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <prvTaskExitError+0x54>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	d00a      	beq.n	8007dea <prvTaskExitError+0x2a>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	60fb      	str	r3, [r7, #12]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <prvTaskExitError+0x28>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	60bb      	str	r3, [r7, #8]
}
 8007dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dfe:	bf00      	nop
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0fc      	beq.n	8007e00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	2000000c 	.word	0x2000000c
	...

08007e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <pxCurrentTCBConst2>)
 8007e22:	6819      	ldr	r1, [r3, #0]
 8007e24:	6808      	ldr	r0, [r1, #0]
 8007e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	f380 8809 	msr	PSP, r0
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f380 8811 	msr	BASEPRI, r0
 8007e3a:	4770      	bx	lr
 8007e3c:	f3af 8000 	nop.w

08007e40 <pxCurrentTCBConst2>:
 8007e40:	200009d0 	.word	0x200009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e48:	4808      	ldr	r0, [pc, #32]	; (8007e6c <prvPortStartFirstTask+0x24>)
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	6800      	ldr	r0, [r0, #0]
 8007e4e:	f380 8808 	msr	MSP, r0
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f380 8814 	msr	CONTROL, r0
 8007e5a:	b662      	cpsie	i
 8007e5c:	b661      	cpsie	f
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	df00      	svc	0
 8007e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e6a:	bf00      	nop
 8007e6c:	e000ed08 	.word	0xe000ed08

08007e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e76:	4b46      	ldr	r3, [pc, #280]	; (8007f90 <xPortStartScheduler+0x120>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a46      	ldr	r2, [pc, #280]	; (8007f94 <xPortStartScheduler+0x124>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d10a      	bne.n	8007e96 <xPortStartScheduler+0x26>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	613b      	str	r3, [r7, #16]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e96:	4b3e      	ldr	r3, [pc, #248]	; (8007f90 <xPortStartScheduler+0x120>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a3f      	ldr	r2, [pc, #252]	; (8007f98 <xPortStartScheduler+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d10a      	bne.n	8007eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	60fb      	str	r3, [r7, #12]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eb6:	4b39      	ldr	r3, [pc, #228]	; (8007f9c <xPortStartScheduler+0x12c>)
 8007eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	22ff      	movs	r2, #255	; 0xff
 8007ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	4b31      	ldr	r3, [pc, #196]	; (8007fa0 <xPortStartScheduler+0x130>)
 8007edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ede:	4b31      	ldr	r3, [pc, #196]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007ee0:	2207      	movs	r2, #7
 8007ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ee4:	e009      	b.n	8007efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ee6:	4b2f      	ldr	r3, [pc, #188]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	4a2d      	ldr	r2, [pc, #180]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d0ef      	beq.n	8007ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f06:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f1c3 0307 	rsb	r3, r3, #7
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d00a      	beq.n	8007f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	60bb      	str	r3, [r7, #8]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f28:	4b1e      	ldr	r3, [pc, #120]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f32:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f3a:	4a1a      	ldr	r2, [pc, #104]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f46:	4b18      	ldr	r3, [pc, #96]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f5e:	f000 f8dd 	bl	800811c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <xPortStartScheduler+0x13c>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f68:	f000 f8fc 	bl	8008164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f6c:	4b10      	ldr	r3, [pc, #64]	; (8007fb0 <xPortStartScheduler+0x140>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0f      	ldr	r2, [pc, #60]	; (8007fb0 <xPortStartScheduler+0x140>)
 8007f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f78:	f7ff ff66 	bl	8007e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f7c:	f7fe ff3a 	bl	8006df4 <vTaskSwitchContext>
	prvTaskExitError();
 8007f80:	f7ff ff1e 	bl	8007dc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	e000ed00 	.word	0xe000ed00
 8007f94:	410fc271 	.word	0x410fc271
 8007f98:	410fc270 	.word	0x410fc270
 8007f9c:	e000e400 	.word	0xe000e400
 8007fa0:	20000ffc 	.word	0x20000ffc
 8007fa4:	20001000 	.word	0x20001000
 8007fa8:	e000ed20 	.word	0xe000ed20
 8007fac:	2000000c 	.word	0x2000000c
 8007fb0:	e000ef34 	.word	0xe000ef34

08007fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	607b      	str	r3, [r7, #4]
}
 8007fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <vPortEnterCritical+0x58>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	4a0d      	ldr	r2, [pc, #52]	; (800800c <vPortEnterCritical+0x58>)
 8007fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	; (800800c <vPortEnterCritical+0x58>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d10f      	bne.n	8008000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <vPortEnterCritical+0x5c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <vPortEnterCritical+0x4c>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	603b      	str	r3, [r7, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <vPortEnterCritical+0x4a>
	}
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	2000000c 	.word	0x2000000c
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <vPortExitCritical+0x50>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <vPortExitCritical+0x24>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	607b      	str	r3, [r7, #4]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <vPortExitCritical+0x50>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3b01      	subs	r3, #1
 800803e:	4a09      	ldr	r2, [pc, #36]	; (8008064 <vPortExitCritical+0x50>)
 8008040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008042:	4b08      	ldr	r3, [pc, #32]	; (8008064 <vPortExitCritical+0x50>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <vPortExitCritical+0x42>
 800804a:	2300      	movs	r3, #0
 800804c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	f383 8811 	msr	BASEPRI, r3
}
 8008054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	2000000c 	.word	0x2000000c
	...

08008070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008070:	f3ef 8009 	mrs	r0, PSP
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <pxCurrentTCBConst>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	f01e 0f10 	tst.w	lr, #16
 8008080:	bf08      	it	eq
 8008082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	6010      	str	r0, [r2, #0]
 800808c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008094:	f380 8811 	msr	BASEPRI, r0
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f7fe fea8 	bl	8006df4 <vTaskSwitchContext>
 80080a4:	f04f 0000 	mov.w	r0, #0
 80080a8:	f380 8811 	msr	BASEPRI, r0
 80080ac:	bc09      	pop	{r0, r3}
 80080ae:	6819      	ldr	r1, [r3, #0]
 80080b0:	6808      	ldr	r0, [r1, #0]
 80080b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b6:	f01e 0f10 	tst.w	lr, #16
 80080ba:	bf08      	it	eq
 80080bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080c0:	f380 8809 	msr	PSP, r0
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	f3af 8000 	nop.w

080080d0 <pxCurrentTCBConst>:
 80080d0:	200009d0 	.word	0x200009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop

080080d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	607b      	str	r3, [r7, #4]
}
 80080f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080f2:	f7fe fdc5 	bl	8006c80 <xTaskIncrementTick>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <xPortSysTickHandler+0x40>)
 80080fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	2300      	movs	r3, #0
 8008106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f383 8811 	msr	BASEPRI, r3
}
 800810e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008120:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <vPortSetupTimerInterrupt+0x34>)
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008126:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <vPortSetupTimerInterrupt+0x38>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800812c:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <vPortSetupTimerInterrupt+0x3c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a0a      	ldr	r2, [pc, #40]	; (800815c <vPortSetupTimerInterrupt+0x40>)
 8008132:	fba2 2303 	umull	r2, r3, r2, r3
 8008136:	099b      	lsrs	r3, r3, #6
 8008138:	4a09      	ldr	r2, [pc, #36]	; (8008160 <vPortSetupTimerInterrupt+0x44>)
 800813a:	3b01      	subs	r3, #1
 800813c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800813e:	4b04      	ldr	r3, [pc, #16]	; (8008150 <vPortSetupTimerInterrupt+0x34>)
 8008140:	2207      	movs	r2, #7
 8008142:	601a      	str	r2, [r3, #0]
}
 8008144:	bf00      	nop
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	e000e010 	.word	0xe000e010
 8008154:	e000e018 	.word	0xe000e018
 8008158:	20000000 	.word	0x20000000
 800815c:	10624dd3 	.word	0x10624dd3
 8008160:	e000e014 	.word	0xe000e014

08008164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008174 <vPortEnableVFP+0x10>
 8008168:	6801      	ldr	r1, [r0, #0]
 800816a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800816e:	6001      	str	r1, [r0, #0]
 8008170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008172:	bf00      	nop
 8008174:	e000ed88 	.word	0xe000ed88

08008178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800817e:	f3ef 8305 	mrs	r3, IPSR
 8008182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b0f      	cmp	r3, #15
 8008188:	d914      	bls.n	80081b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800818a:	4a17      	ldr	r2, [pc, #92]	; (80081e8 <vPortValidateInterruptPriority+0x70>)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008194:	4b15      	ldr	r3, [pc, #84]	; (80081ec <vPortValidateInterruptPriority+0x74>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	7afa      	ldrb	r2, [r7, #11]
 800819a:	429a      	cmp	r2, r3
 800819c:	d20a      	bcs.n	80081b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	607b      	str	r3, [r7, #4]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081b4:	4b0e      	ldr	r3, [pc, #56]	; (80081f0 <vPortValidateInterruptPriority+0x78>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081bc:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <vPortValidateInterruptPriority+0x7c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d90a      	bls.n	80081da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	603b      	str	r3, [r7, #0]
}
 80081d6:	bf00      	nop
 80081d8:	e7fe      	b.n	80081d8 <vPortValidateInterruptPriority+0x60>
	}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	e000e3f0 	.word	0xe000e3f0
 80081ec:	20000ffc 	.word	0x20000ffc
 80081f0:	e000ed0c 	.word	0xe000ed0c
 80081f4:	20001000 	.word	0x20001000

080081f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08a      	sub	sp, #40	; 0x28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008204:	f7fe fc6e 	bl	8006ae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008208:	4b5b      	ldr	r3, [pc, #364]	; (8008378 <pvPortMalloc+0x180>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008210:	f000 f920 	bl	8008454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008214:	4b59      	ldr	r3, [pc, #356]	; (800837c <pvPortMalloc+0x184>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4013      	ands	r3, r2
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 8093 	bne.w	8008348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01d      	beq.n	8008264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008228:	2208      	movs	r2, #8
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4413      	add	r3, r2
 800822e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	2b00      	cmp	r3, #0
 8008238:	d014      	beq.n	8008264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f023 0307 	bic.w	r3, r3, #7
 8008240:	3308      	adds	r3, #8
 8008242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <pvPortMalloc+0x6c>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	617b      	str	r3, [r7, #20]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d06e      	beq.n	8008348 <pvPortMalloc+0x150>
 800826a:	4b45      	ldr	r3, [pc, #276]	; (8008380 <pvPortMalloc+0x188>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d869      	bhi.n	8008348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008274:	4b43      	ldr	r3, [pc, #268]	; (8008384 <pvPortMalloc+0x18c>)
 8008276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008278:	4b42      	ldr	r3, [pc, #264]	; (8008384 <pvPortMalloc+0x18c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800827e:	e004      	b.n	800828a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	d903      	bls.n	800829c <pvPortMalloc+0xa4>
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1f1      	bne.n	8008280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800829c:	4b36      	ldr	r3, [pc, #216]	; (8008378 <pvPortMalloc+0x180>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d050      	beq.n	8008348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2208      	movs	r2, #8
 80082ac:	4413      	add	r3, r2
 80082ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	2308      	movs	r3, #8
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d91f      	bls.n	8008308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <pvPortMalloc+0xf8>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	613b      	str	r3, [r7, #16]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	1ad2      	subs	r2, r2, r3
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008302:	69b8      	ldr	r0, [r7, #24]
 8008304:	f000 f908 	bl	8008518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008308:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <pvPortMalloc+0x188>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	4a1b      	ldr	r2, [pc, #108]	; (8008380 <pvPortMalloc+0x188>)
 8008314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008316:	4b1a      	ldr	r3, [pc, #104]	; (8008380 <pvPortMalloc+0x188>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <pvPortMalloc+0x190>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d203      	bcs.n	800832a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008322:	4b17      	ldr	r3, [pc, #92]	; (8008380 <pvPortMalloc+0x188>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a18      	ldr	r2, [pc, #96]	; (8008388 <pvPortMalloc+0x190>)
 8008328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	4b13      	ldr	r3, [pc, #76]	; (800837c <pvPortMalloc+0x184>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	431a      	orrs	r2, r3
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800833e:	4b13      	ldr	r3, [pc, #76]	; (800838c <pvPortMalloc+0x194>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3301      	adds	r3, #1
 8008344:	4a11      	ldr	r2, [pc, #68]	; (800838c <pvPortMalloc+0x194>)
 8008346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008348:	f7fe fbda 	bl	8006b00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <pvPortMalloc+0x174>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	60fb      	str	r3, [r7, #12]
}
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <pvPortMalloc+0x172>
	return pvReturn;
 800836c:	69fb      	ldr	r3, [r7, #28]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3728      	adds	r7, #40	; 0x28
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20004c0c 	.word	0x20004c0c
 800837c:	20004c20 	.word	0x20004c20
 8008380:	20004c10 	.word	0x20004c10
 8008384:	20004c04 	.word	0x20004c04
 8008388:	20004c14 	.word	0x20004c14
 800838c:	20004c18 	.word	0x20004c18

08008390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d04d      	beq.n	800843e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083a2:	2308      	movs	r3, #8
 80083a4:	425b      	negs	r3, r3
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4413      	add	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	4b24      	ldr	r3, [pc, #144]	; (8008448 <vPortFree+0xb8>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10a      	bne.n	80083d4 <vPortFree+0x44>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	60fb      	str	r3, [r7, #12]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00a      	beq.n	80083f2 <vPortFree+0x62>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	60bb      	str	r3, [r7, #8]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <vPortFree+0xb8>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4013      	ands	r3, r2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01e      	beq.n	800843e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d11a      	bne.n	800843e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	4b0e      	ldr	r3, [pc, #56]	; (8008448 <vPortFree+0xb8>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	43db      	mvns	r3, r3
 8008412:	401a      	ands	r2, r3
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008418:	f7fe fb64 	bl	8006ae4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <vPortFree+0xbc>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4413      	add	r3, r2
 8008426:	4a09      	ldr	r2, [pc, #36]	; (800844c <vPortFree+0xbc>)
 8008428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800842a:	6938      	ldr	r0, [r7, #16]
 800842c:	f000 f874 	bl	8008518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008430:	4b07      	ldr	r3, [pc, #28]	; (8008450 <vPortFree+0xc0>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3301      	adds	r3, #1
 8008436:	4a06      	ldr	r2, [pc, #24]	; (8008450 <vPortFree+0xc0>)
 8008438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800843a:	f7fe fb61 	bl	8006b00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800843e:	bf00      	nop
 8008440:	3718      	adds	r7, #24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20004c20 	.word	0x20004c20
 800844c:	20004c10 	.word	0x20004c10
 8008450:	20004c1c 	.word	0x20004c1c

08008454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800845a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800845e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008460:	4b27      	ldr	r3, [pc, #156]	; (8008500 <prvHeapInit+0xac>)
 8008462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00c      	beq.n	8008488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3307      	adds	r3, #7
 8008472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f023 0307 	bic.w	r3, r3, #7
 800847a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	4a1f      	ldr	r2, [pc, #124]	; (8008500 <prvHeapInit+0xac>)
 8008484:	4413      	add	r3, r2
 8008486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800848c:	4a1d      	ldr	r2, [pc, #116]	; (8008504 <prvHeapInit+0xb0>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008492:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <prvHeapInit+0xb0>)
 8008494:	2200      	movs	r2, #0
 8008496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084a0:	2208      	movs	r2, #8
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0307 	bic.w	r3, r3, #7
 80084ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4a15      	ldr	r2, [pc, #84]	; (8008508 <prvHeapInit+0xb4>)
 80084b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084b6:	4b14      	ldr	r3, [pc, #80]	; (8008508 <prvHeapInit+0xb4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2200      	movs	r2, #0
 80084bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084be:	4b12      	ldr	r3, [pc, #72]	; (8008508 <prvHeapInit+0xb4>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084d4:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <prvHeapInit+0xb4>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	4a0a      	ldr	r2, [pc, #40]	; (800850c <prvHeapInit+0xb8>)
 80084e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	4a09      	ldr	r2, [pc, #36]	; (8008510 <prvHeapInit+0xbc>)
 80084ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084ec:	4b09      	ldr	r3, [pc, #36]	; (8008514 <prvHeapInit+0xc0>)
 80084ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084f2:	601a      	str	r2, [r3, #0]
}
 80084f4:	bf00      	nop
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	20001004 	.word	0x20001004
 8008504:	20004c04 	.word	0x20004c04
 8008508:	20004c0c 	.word	0x20004c0c
 800850c:	20004c14 	.word	0x20004c14
 8008510:	20004c10 	.word	0x20004c10
 8008514:	20004c20 	.word	0x20004c20

08008518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008520:	4b28      	ldr	r3, [pc, #160]	; (80085c4 <prvInsertBlockIntoFreeList+0xac>)
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e002      	b.n	800852c <prvInsertBlockIntoFreeList+0x14>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	429a      	cmp	r2, r3
 8008534:	d8f7      	bhi.n	8008526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	4413      	add	r3, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	429a      	cmp	r2, r3
 8008546:	d108      	bne.n	800855a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	441a      	add	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	441a      	add	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	d118      	bne.n	80085a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d00d      	beq.n	8008596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	441a      	add	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e008      	b.n	80085a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008596:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	e003      	b.n	80085a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d002      	beq.n	80085b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085b6:	bf00      	nop
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	20004c04 	.word	0x20004c04
 80085c8:	20004c0c 	.word	0x20004c0c

080085cc <std>:
 80085cc:	2300      	movs	r3, #0
 80085ce:	b510      	push	{r4, lr}
 80085d0:	4604      	mov	r4, r0
 80085d2:	e9c0 3300 	strd	r3, r3, [r0]
 80085d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085da:	6083      	str	r3, [r0, #8]
 80085dc:	8181      	strh	r1, [r0, #12]
 80085de:	6643      	str	r3, [r0, #100]	; 0x64
 80085e0:	81c2      	strh	r2, [r0, #14]
 80085e2:	6183      	str	r3, [r0, #24]
 80085e4:	4619      	mov	r1, r3
 80085e6:	2208      	movs	r2, #8
 80085e8:	305c      	adds	r0, #92	; 0x5c
 80085ea:	f000 f906 	bl	80087fa <memset>
 80085ee:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <std+0x58>)
 80085f0:	6263      	str	r3, [r4, #36]	; 0x24
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <std+0x5c>)
 80085f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80085f6:	4b0d      	ldr	r3, [pc, #52]	; (800862c <std+0x60>)
 80085f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085fa:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <std+0x64>)
 80085fc:	6323      	str	r3, [r4, #48]	; 0x30
 80085fe:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <std+0x68>)
 8008600:	6224      	str	r4, [r4, #32]
 8008602:	429c      	cmp	r4, r3
 8008604:	d006      	beq.n	8008614 <std+0x48>
 8008606:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800860a:	4294      	cmp	r4, r2
 800860c:	d002      	beq.n	8008614 <std+0x48>
 800860e:	33d0      	adds	r3, #208	; 0xd0
 8008610:	429c      	cmp	r4, r3
 8008612:	d105      	bne.n	8008620 <std+0x54>
 8008614:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861c:	f000 b9bc 	b.w	8008998 <__retarget_lock_init_recursive>
 8008620:	bd10      	pop	{r4, pc}
 8008622:	bf00      	nop
 8008624:	08008775 	.word	0x08008775
 8008628:	08008797 	.word	0x08008797
 800862c:	080087cf 	.word	0x080087cf
 8008630:	080087f3 	.word	0x080087f3
 8008634:	20004c24 	.word	0x20004c24

08008638 <stdio_exit_handler>:
 8008638:	4a02      	ldr	r2, [pc, #8]	; (8008644 <stdio_exit_handler+0xc>)
 800863a:	4903      	ldr	r1, [pc, #12]	; (8008648 <stdio_exit_handler+0x10>)
 800863c:	4803      	ldr	r0, [pc, #12]	; (800864c <stdio_exit_handler+0x14>)
 800863e:	f000 b869 	b.w	8008714 <_fwalk_sglue>
 8008642:	bf00      	nop
 8008644:	20000010 	.word	0x20000010
 8008648:	08009261 	.word	0x08009261
 800864c:	2000001c 	.word	0x2000001c

08008650 <cleanup_stdio>:
 8008650:	6841      	ldr	r1, [r0, #4]
 8008652:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <cleanup_stdio+0x34>)
 8008654:	4299      	cmp	r1, r3
 8008656:	b510      	push	{r4, lr}
 8008658:	4604      	mov	r4, r0
 800865a:	d001      	beq.n	8008660 <cleanup_stdio+0x10>
 800865c:	f000 fe00 	bl	8009260 <_fflush_r>
 8008660:	68a1      	ldr	r1, [r4, #8]
 8008662:	4b09      	ldr	r3, [pc, #36]	; (8008688 <cleanup_stdio+0x38>)
 8008664:	4299      	cmp	r1, r3
 8008666:	d002      	beq.n	800866e <cleanup_stdio+0x1e>
 8008668:	4620      	mov	r0, r4
 800866a:	f000 fdf9 	bl	8009260 <_fflush_r>
 800866e:	68e1      	ldr	r1, [r4, #12]
 8008670:	4b06      	ldr	r3, [pc, #24]	; (800868c <cleanup_stdio+0x3c>)
 8008672:	4299      	cmp	r1, r3
 8008674:	d004      	beq.n	8008680 <cleanup_stdio+0x30>
 8008676:	4620      	mov	r0, r4
 8008678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800867c:	f000 bdf0 	b.w	8009260 <_fflush_r>
 8008680:	bd10      	pop	{r4, pc}
 8008682:	bf00      	nop
 8008684:	20004c24 	.word	0x20004c24
 8008688:	20004c8c 	.word	0x20004c8c
 800868c:	20004cf4 	.word	0x20004cf4

08008690 <global_stdio_init.part.0>:
 8008690:	b510      	push	{r4, lr}
 8008692:	4b0b      	ldr	r3, [pc, #44]	; (80086c0 <global_stdio_init.part.0+0x30>)
 8008694:	4c0b      	ldr	r4, [pc, #44]	; (80086c4 <global_stdio_init.part.0+0x34>)
 8008696:	4a0c      	ldr	r2, [pc, #48]	; (80086c8 <global_stdio_init.part.0+0x38>)
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	4620      	mov	r0, r4
 800869c:	2200      	movs	r2, #0
 800869e:	2104      	movs	r1, #4
 80086a0:	f7ff ff94 	bl	80085cc <std>
 80086a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80086a8:	2201      	movs	r2, #1
 80086aa:	2109      	movs	r1, #9
 80086ac:	f7ff ff8e 	bl	80085cc <std>
 80086b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80086b4:	2202      	movs	r2, #2
 80086b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ba:	2112      	movs	r1, #18
 80086bc:	f7ff bf86 	b.w	80085cc <std>
 80086c0:	20004d5c 	.word	0x20004d5c
 80086c4:	20004c24 	.word	0x20004c24
 80086c8:	08008639 	.word	0x08008639

080086cc <__sfp_lock_acquire>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__sfp_lock_acquire+0x8>)
 80086ce:	f000 b964 	b.w	800899a <__retarget_lock_acquire_recursive>
 80086d2:	bf00      	nop
 80086d4:	20004d65 	.word	0x20004d65

080086d8 <__sfp_lock_release>:
 80086d8:	4801      	ldr	r0, [pc, #4]	; (80086e0 <__sfp_lock_release+0x8>)
 80086da:	f000 b95f 	b.w	800899c <__retarget_lock_release_recursive>
 80086de:	bf00      	nop
 80086e0:	20004d65 	.word	0x20004d65

080086e4 <__sinit>:
 80086e4:	b510      	push	{r4, lr}
 80086e6:	4604      	mov	r4, r0
 80086e8:	f7ff fff0 	bl	80086cc <__sfp_lock_acquire>
 80086ec:	6a23      	ldr	r3, [r4, #32]
 80086ee:	b11b      	cbz	r3, 80086f8 <__sinit+0x14>
 80086f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f4:	f7ff bff0 	b.w	80086d8 <__sfp_lock_release>
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <__sinit+0x28>)
 80086fa:	6223      	str	r3, [r4, #32]
 80086fc:	4b04      	ldr	r3, [pc, #16]	; (8008710 <__sinit+0x2c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1f5      	bne.n	80086f0 <__sinit+0xc>
 8008704:	f7ff ffc4 	bl	8008690 <global_stdio_init.part.0>
 8008708:	e7f2      	b.n	80086f0 <__sinit+0xc>
 800870a:	bf00      	nop
 800870c:	08008651 	.word	0x08008651
 8008710:	20004d5c 	.word	0x20004d5c

08008714 <_fwalk_sglue>:
 8008714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008718:	4607      	mov	r7, r0
 800871a:	4688      	mov	r8, r1
 800871c:	4614      	mov	r4, r2
 800871e:	2600      	movs	r6, #0
 8008720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008724:	f1b9 0901 	subs.w	r9, r9, #1
 8008728:	d505      	bpl.n	8008736 <_fwalk_sglue+0x22>
 800872a:	6824      	ldr	r4, [r4, #0]
 800872c:	2c00      	cmp	r4, #0
 800872e:	d1f7      	bne.n	8008720 <_fwalk_sglue+0xc>
 8008730:	4630      	mov	r0, r6
 8008732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d907      	bls.n	800874c <_fwalk_sglue+0x38>
 800873c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008740:	3301      	adds	r3, #1
 8008742:	d003      	beq.n	800874c <_fwalk_sglue+0x38>
 8008744:	4629      	mov	r1, r5
 8008746:	4638      	mov	r0, r7
 8008748:	47c0      	blx	r8
 800874a:	4306      	orrs	r6, r0
 800874c:	3568      	adds	r5, #104	; 0x68
 800874e:	e7e9      	b.n	8008724 <_fwalk_sglue+0x10>

08008750 <iprintf>:
 8008750:	b40f      	push	{r0, r1, r2, r3}
 8008752:	b507      	push	{r0, r1, r2, lr}
 8008754:	4906      	ldr	r1, [pc, #24]	; (8008770 <iprintf+0x20>)
 8008756:	ab04      	add	r3, sp, #16
 8008758:	6808      	ldr	r0, [r1, #0]
 800875a:	f853 2b04 	ldr.w	r2, [r3], #4
 800875e:	6881      	ldr	r1, [r0, #8]
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	f000 fa4d 	bl	8008c00 <_vfiprintf_r>
 8008766:	b003      	add	sp, #12
 8008768:	f85d eb04 	ldr.w	lr, [sp], #4
 800876c:	b004      	add	sp, #16
 800876e:	4770      	bx	lr
 8008770:	20000068 	.word	0x20000068

08008774 <__sread>:
 8008774:	b510      	push	{r4, lr}
 8008776:	460c      	mov	r4, r1
 8008778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877c:	f000 f8be 	bl	80088fc <_read_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	bfab      	itete	ge
 8008784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008786:	89a3      	ldrhlt	r3, [r4, #12]
 8008788:	181b      	addge	r3, r3, r0
 800878a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800878e:	bfac      	ite	ge
 8008790:	6563      	strge	r3, [r4, #84]	; 0x54
 8008792:	81a3      	strhlt	r3, [r4, #12]
 8008794:	bd10      	pop	{r4, pc}

08008796 <__swrite>:
 8008796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879a:	461f      	mov	r7, r3
 800879c:	898b      	ldrh	r3, [r1, #12]
 800879e:	05db      	lsls	r3, r3, #23
 80087a0:	4605      	mov	r5, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	4616      	mov	r6, r2
 80087a6:	d505      	bpl.n	80087b4 <__swrite+0x1e>
 80087a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ac:	2302      	movs	r3, #2
 80087ae:	2200      	movs	r2, #0
 80087b0:	f000 f892 	bl	80088d8 <_lseek_r>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	4632      	mov	r2, r6
 80087c2:	463b      	mov	r3, r7
 80087c4:	4628      	mov	r0, r5
 80087c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ca:	f000 b8a9 	b.w	8008920 <_write_r>

080087ce <__sseek>:
 80087ce:	b510      	push	{r4, lr}
 80087d0:	460c      	mov	r4, r1
 80087d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d6:	f000 f87f 	bl	80088d8 <_lseek_r>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	bf15      	itete	ne
 80087e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80087e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087ea:	81a3      	strheq	r3, [r4, #12]
 80087ec:	bf18      	it	ne
 80087ee:	81a3      	strhne	r3, [r4, #12]
 80087f0:	bd10      	pop	{r4, pc}

080087f2 <__sclose>:
 80087f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f6:	f000 b809 	b.w	800880c <_close_r>

080087fa <memset>:
 80087fa:	4402      	add	r2, r0
 80087fc:	4603      	mov	r3, r0
 80087fe:	4293      	cmp	r3, r2
 8008800:	d100      	bne.n	8008804 <memset+0xa>
 8008802:	4770      	bx	lr
 8008804:	f803 1b01 	strb.w	r1, [r3], #1
 8008808:	e7f9      	b.n	80087fe <memset+0x4>
	...

0800880c <_close_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d06      	ldr	r5, [pc, #24]	; (8008828 <_close_r+0x1c>)
 8008810:	2300      	movs	r3, #0
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	602b      	str	r3, [r5, #0]
 8008818:	f7f9 f9a1 	bl	8001b5e <_close>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_close_r+0x1a>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_close_r+0x1a>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	20004d60 	.word	0x20004d60

0800882c <_reclaim_reent>:
 800882c:	4b29      	ldr	r3, [pc, #164]	; (80088d4 <_reclaim_reent+0xa8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4283      	cmp	r3, r0
 8008832:	b570      	push	{r4, r5, r6, lr}
 8008834:	4604      	mov	r4, r0
 8008836:	d04b      	beq.n	80088d0 <_reclaim_reent+0xa4>
 8008838:	69c3      	ldr	r3, [r0, #28]
 800883a:	b143      	cbz	r3, 800884e <_reclaim_reent+0x22>
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d144      	bne.n	80088cc <_reclaim_reent+0xa0>
 8008842:	69e3      	ldr	r3, [r4, #28]
 8008844:	6819      	ldr	r1, [r3, #0]
 8008846:	b111      	cbz	r1, 800884e <_reclaim_reent+0x22>
 8008848:	4620      	mov	r0, r4
 800884a:	f000 f8b7 	bl	80089bc <_free_r>
 800884e:	6961      	ldr	r1, [r4, #20]
 8008850:	b111      	cbz	r1, 8008858 <_reclaim_reent+0x2c>
 8008852:	4620      	mov	r0, r4
 8008854:	f000 f8b2 	bl	80089bc <_free_r>
 8008858:	69e1      	ldr	r1, [r4, #28]
 800885a:	b111      	cbz	r1, 8008862 <_reclaim_reent+0x36>
 800885c:	4620      	mov	r0, r4
 800885e:	f000 f8ad 	bl	80089bc <_free_r>
 8008862:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008864:	b111      	cbz	r1, 800886c <_reclaim_reent+0x40>
 8008866:	4620      	mov	r0, r4
 8008868:	f000 f8a8 	bl	80089bc <_free_r>
 800886c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800886e:	b111      	cbz	r1, 8008876 <_reclaim_reent+0x4a>
 8008870:	4620      	mov	r0, r4
 8008872:	f000 f8a3 	bl	80089bc <_free_r>
 8008876:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008878:	b111      	cbz	r1, 8008880 <_reclaim_reent+0x54>
 800887a:	4620      	mov	r0, r4
 800887c:	f000 f89e 	bl	80089bc <_free_r>
 8008880:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008882:	b111      	cbz	r1, 800888a <_reclaim_reent+0x5e>
 8008884:	4620      	mov	r0, r4
 8008886:	f000 f899 	bl	80089bc <_free_r>
 800888a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800888c:	b111      	cbz	r1, 8008894 <_reclaim_reent+0x68>
 800888e:	4620      	mov	r0, r4
 8008890:	f000 f894 	bl	80089bc <_free_r>
 8008894:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008896:	b111      	cbz	r1, 800889e <_reclaim_reent+0x72>
 8008898:	4620      	mov	r0, r4
 800889a:	f000 f88f 	bl	80089bc <_free_r>
 800889e:	6a23      	ldr	r3, [r4, #32]
 80088a0:	b1b3      	cbz	r3, 80088d0 <_reclaim_reent+0xa4>
 80088a2:	4620      	mov	r0, r4
 80088a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088a8:	4718      	bx	r3
 80088aa:	5949      	ldr	r1, [r1, r5]
 80088ac:	b941      	cbnz	r1, 80088c0 <_reclaim_reent+0x94>
 80088ae:	3504      	adds	r5, #4
 80088b0:	69e3      	ldr	r3, [r4, #28]
 80088b2:	2d80      	cmp	r5, #128	; 0x80
 80088b4:	68d9      	ldr	r1, [r3, #12]
 80088b6:	d1f8      	bne.n	80088aa <_reclaim_reent+0x7e>
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 f87f 	bl	80089bc <_free_r>
 80088be:	e7c0      	b.n	8008842 <_reclaim_reent+0x16>
 80088c0:	680e      	ldr	r6, [r1, #0]
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f87a 	bl	80089bc <_free_r>
 80088c8:	4631      	mov	r1, r6
 80088ca:	e7ef      	b.n	80088ac <_reclaim_reent+0x80>
 80088cc:	2500      	movs	r5, #0
 80088ce:	e7ef      	b.n	80088b0 <_reclaim_reent+0x84>
 80088d0:	bd70      	pop	{r4, r5, r6, pc}
 80088d2:	bf00      	nop
 80088d4:	20000068 	.word	0x20000068

080088d8 <_lseek_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4d07      	ldr	r5, [pc, #28]	; (80088f8 <_lseek_r+0x20>)
 80088dc:	4604      	mov	r4, r0
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	602a      	str	r2, [r5, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f7f9 f960 	bl	8001bac <_lseek>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_lseek_r+0x1e>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_lseek_r+0x1e>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	20004d60 	.word	0x20004d60

080088fc <_read_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4d07      	ldr	r5, [pc, #28]	; (800891c <_read_r+0x20>)
 8008900:	4604      	mov	r4, r0
 8008902:	4608      	mov	r0, r1
 8008904:	4611      	mov	r1, r2
 8008906:	2200      	movs	r2, #0
 8008908:	602a      	str	r2, [r5, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	f7f9 f8ee 	bl	8001aec <_read>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_read_r+0x1e>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_read_r+0x1e>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	20004d60 	.word	0x20004d60

08008920 <_write_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4d07      	ldr	r5, [pc, #28]	; (8008940 <_write_r+0x20>)
 8008924:	4604      	mov	r4, r0
 8008926:	4608      	mov	r0, r1
 8008928:	4611      	mov	r1, r2
 800892a:	2200      	movs	r2, #0
 800892c:	602a      	str	r2, [r5, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	f7f9 f8f9 	bl	8001b26 <_write>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_write_r+0x1e>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_write_r+0x1e>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	20004d60 	.word	0x20004d60

08008944 <__errno>:
 8008944:	4b01      	ldr	r3, [pc, #4]	; (800894c <__errno+0x8>)
 8008946:	6818      	ldr	r0, [r3, #0]
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	20000068 	.word	0x20000068

08008950 <__libc_init_array>:
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	4d0d      	ldr	r5, [pc, #52]	; (8008988 <__libc_init_array+0x38>)
 8008954:	4c0d      	ldr	r4, [pc, #52]	; (800898c <__libc_init_array+0x3c>)
 8008956:	1b64      	subs	r4, r4, r5
 8008958:	10a4      	asrs	r4, r4, #2
 800895a:	2600      	movs	r6, #0
 800895c:	42a6      	cmp	r6, r4
 800895e:	d109      	bne.n	8008974 <__libc_init_array+0x24>
 8008960:	4d0b      	ldr	r5, [pc, #44]	; (8008990 <__libc_init_array+0x40>)
 8008962:	4c0c      	ldr	r4, [pc, #48]	; (8008994 <__libc_init_array+0x44>)
 8008964:	f000 fdce 	bl	8009504 <_init>
 8008968:	1b64      	subs	r4, r4, r5
 800896a:	10a4      	asrs	r4, r4, #2
 800896c:	2600      	movs	r6, #0
 800896e:	42a6      	cmp	r6, r4
 8008970:	d105      	bne.n	800897e <__libc_init_array+0x2e>
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	f855 3b04 	ldr.w	r3, [r5], #4
 8008978:	4798      	blx	r3
 800897a:	3601      	adds	r6, #1
 800897c:	e7ee      	b.n	800895c <__libc_init_array+0xc>
 800897e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008982:	4798      	blx	r3
 8008984:	3601      	adds	r6, #1
 8008986:	e7f2      	b.n	800896e <__libc_init_array+0x1e>
 8008988:	08009748 	.word	0x08009748
 800898c:	08009748 	.word	0x08009748
 8008990:	08009748 	.word	0x08009748
 8008994:	0800974c 	.word	0x0800974c

08008998 <__retarget_lock_init_recursive>:
 8008998:	4770      	bx	lr

0800899a <__retarget_lock_acquire_recursive>:
 800899a:	4770      	bx	lr

0800899c <__retarget_lock_release_recursive>:
 800899c:	4770      	bx	lr

0800899e <memcpy>:
 800899e:	440a      	add	r2, r1
 80089a0:	4291      	cmp	r1, r2
 80089a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80089a6:	d100      	bne.n	80089aa <memcpy+0xc>
 80089a8:	4770      	bx	lr
 80089aa:	b510      	push	{r4, lr}
 80089ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089b4:	4291      	cmp	r1, r2
 80089b6:	d1f9      	bne.n	80089ac <memcpy+0xe>
 80089b8:	bd10      	pop	{r4, pc}
	...

080089bc <_free_r>:
 80089bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089be:	2900      	cmp	r1, #0
 80089c0:	d044      	beq.n	8008a4c <_free_r+0x90>
 80089c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c6:	9001      	str	r0, [sp, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f1a1 0404 	sub.w	r4, r1, #4
 80089ce:	bfb8      	it	lt
 80089d0:	18e4      	addlt	r4, r4, r3
 80089d2:	f000 f8df 	bl	8008b94 <__malloc_lock>
 80089d6:	4a1e      	ldr	r2, [pc, #120]	; (8008a50 <_free_r+0x94>)
 80089d8:	9801      	ldr	r0, [sp, #4]
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	b933      	cbnz	r3, 80089ec <_free_r+0x30>
 80089de:	6063      	str	r3, [r4, #4]
 80089e0:	6014      	str	r4, [r2, #0]
 80089e2:	b003      	add	sp, #12
 80089e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089e8:	f000 b8da 	b.w	8008ba0 <__malloc_unlock>
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	d908      	bls.n	8008a02 <_free_r+0x46>
 80089f0:	6825      	ldr	r5, [r4, #0]
 80089f2:	1961      	adds	r1, r4, r5
 80089f4:	428b      	cmp	r3, r1
 80089f6:	bf01      	itttt	eq
 80089f8:	6819      	ldreq	r1, [r3, #0]
 80089fa:	685b      	ldreq	r3, [r3, #4]
 80089fc:	1949      	addeq	r1, r1, r5
 80089fe:	6021      	streq	r1, [r4, #0]
 8008a00:	e7ed      	b.n	80089de <_free_r+0x22>
 8008a02:	461a      	mov	r2, r3
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	b10b      	cbz	r3, 8008a0c <_free_r+0x50>
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	d9fa      	bls.n	8008a02 <_free_r+0x46>
 8008a0c:	6811      	ldr	r1, [r2, #0]
 8008a0e:	1855      	adds	r5, r2, r1
 8008a10:	42a5      	cmp	r5, r4
 8008a12:	d10b      	bne.n	8008a2c <_free_r+0x70>
 8008a14:	6824      	ldr	r4, [r4, #0]
 8008a16:	4421      	add	r1, r4
 8008a18:	1854      	adds	r4, r2, r1
 8008a1a:	42a3      	cmp	r3, r4
 8008a1c:	6011      	str	r1, [r2, #0]
 8008a1e:	d1e0      	bne.n	80089e2 <_free_r+0x26>
 8008a20:	681c      	ldr	r4, [r3, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	6053      	str	r3, [r2, #4]
 8008a26:	440c      	add	r4, r1
 8008a28:	6014      	str	r4, [r2, #0]
 8008a2a:	e7da      	b.n	80089e2 <_free_r+0x26>
 8008a2c:	d902      	bls.n	8008a34 <_free_r+0x78>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	6003      	str	r3, [r0, #0]
 8008a32:	e7d6      	b.n	80089e2 <_free_r+0x26>
 8008a34:	6825      	ldr	r5, [r4, #0]
 8008a36:	1961      	adds	r1, r4, r5
 8008a38:	428b      	cmp	r3, r1
 8008a3a:	bf04      	itt	eq
 8008a3c:	6819      	ldreq	r1, [r3, #0]
 8008a3e:	685b      	ldreq	r3, [r3, #4]
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	bf04      	itt	eq
 8008a44:	1949      	addeq	r1, r1, r5
 8008a46:	6021      	streq	r1, [r4, #0]
 8008a48:	6054      	str	r4, [r2, #4]
 8008a4a:	e7ca      	b.n	80089e2 <_free_r+0x26>
 8008a4c:	b003      	add	sp, #12
 8008a4e:	bd30      	pop	{r4, r5, pc}
 8008a50:	20004d68 	.word	0x20004d68

08008a54 <sbrk_aligned>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4e0e      	ldr	r6, [pc, #56]	; (8008a90 <sbrk_aligned+0x3c>)
 8008a58:	460c      	mov	r4, r1
 8008a5a:	6831      	ldr	r1, [r6, #0]
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	b911      	cbnz	r1, 8008a66 <sbrk_aligned+0x12>
 8008a60:	f000 fcbc 	bl	80093dc <_sbrk_r>
 8008a64:	6030      	str	r0, [r6, #0]
 8008a66:	4621      	mov	r1, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f000 fcb7 	bl	80093dc <_sbrk_r>
 8008a6e:	1c43      	adds	r3, r0, #1
 8008a70:	d00a      	beq.n	8008a88 <sbrk_aligned+0x34>
 8008a72:	1cc4      	adds	r4, r0, #3
 8008a74:	f024 0403 	bic.w	r4, r4, #3
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	d007      	beq.n	8008a8c <sbrk_aligned+0x38>
 8008a7c:	1a21      	subs	r1, r4, r0
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 fcac 	bl	80093dc <_sbrk_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	d101      	bne.n	8008a8c <sbrk_aligned+0x38>
 8008a88:	f04f 34ff 	mov.w	r4, #4294967295
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	20004d6c 	.word	0x20004d6c

08008a94 <_malloc_r>:
 8008a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a98:	1ccd      	adds	r5, r1, #3
 8008a9a:	f025 0503 	bic.w	r5, r5, #3
 8008a9e:	3508      	adds	r5, #8
 8008aa0:	2d0c      	cmp	r5, #12
 8008aa2:	bf38      	it	cc
 8008aa4:	250c      	movcc	r5, #12
 8008aa6:	2d00      	cmp	r5, #0
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	db01      	blt.n	8008ab0 <_malloc_r+0x1c>
 8008aac:	42a9      	cmp	r1, r5
 8008aae:	d905      	bls.n	8008abc <_malloc_r+0x28>
 8008ab0:	230c      	movs	r3, #12
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008abc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b90 <_malloc_r+0xfc>
 8008ac0:	f000 f868 	bl	8008b94 <__malloc_lock>
 8008ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac8:	461c      	mov	r4, r3
 8008aca:	bb5c      	cbnz	r4, 8008b24 <_malloc_r+0x90>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4638      	mov	r0, r7
 8008ad0:	f7ff ffc0 	bl	8008a54 <sbrk_aligned>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	d155      	bne.n	8008b86 <_malloc_r+0xf2>
 8008ada:	f8d8 4000 	ldr.w	r4, [r8]
 8008ade:	4626      	mov	r6, r4
 8008ae0:	2e00      	cmp	r6, #0
 8008ae2:	d145      	bne.n	8008b70 <_malloc_r+0xdc>
 8008ae4:	2c00      	cmp	r4, #0
 8008ae6:	d048      	beq.n	8008b7a <_malloc_r+0xe6>
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	4631      	mov	r1, r6
 8008aec:	4638      	mov	r0, r7
 8008aee:	eb04 0903 	add.w	r9, r4, r3
 8008af2:	f000 fc73 	bl	80093dc <_sbrk_r>
 8008af6:	4581      	cmp	r9, r0
 8008af8:	d13f      	bne.n	8008b7a <_malloc_r+0xe6>
 8008afa:	6821      	ldr	r1, [r4, #0]
 8008afc:	1a6d      	subs	r5, r5, r1
 8008afe:	4629      	mov	r1, r5
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7ff ffa7 	bl	8008a54 <sbrk_aligned>
 8008b06:	3001      	adds	r0, #1
 8008b08:	d037      	beq.n	8008b7a <_malloc_r+0xe6>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	442b      	add	r3, r5
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	f8d8 3000 	ldr.w	r3, [r8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d038      	beq.n	8008b8a <_malloc_r+0xf6>
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	42a2      	cmp	r2, r4
 8008b1c:	d12b      	bne.n	8008b76 <_malloc_r+0xe2>
 8008b1e:	2200      	movs	r2, #0
 8008b20:	605a      	str	r2, [r3, #4]
 8008b22:	e00f      	b.n	8008b44 <_malloc_r+0xb0>
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	1b52      	subs	r2, r2, r5
 8008b28:	d41f      	bmi.n	8008b6a <_malloc_r+0xd6>
 8008b2a:	2a0b      	cmp	r2, #11
 8008b2c:	d917      	bls.n	8008b5e <_malloc_r+0xca>
 8008b2e:	1961      	adds	r1, r4, r5
 8008b30:	42a3      	cmp	r3, r4
 8008b32:	6025      	str	r5, [r4, #0]
 8008b34:	bf18      	it	ne
 8008b36:	6059      	strne	r1, [r3, #4]
 8008b38:	6863      	ldr	r3, [r4, #4]
 8008b3a:	bf08      	it	eq
 8008b3c:	f8c8 1000 	streq.w	r1, [r8]
 8008b40:	5162      	str	r2, [r4, r5]
 8008b42:	604b      	str	r3, [r1, #4]
 8008b44:	4638      	mov	r0, r7
 8008b46:	f104 060b 	add.w	r6, r4, #11
 8008b4a:	f000 f829 	bl	8008ba0 <__malloc_unlock>
 8008b4e:	f026 0607 	bic.w	r6, r6, #7
 8008b52:	1d23      	adds	r3, r4, #4
 8008b54:	1af2      	subs	r2, r6, r3
 8008b56:	d0ae      	beq.n	8008ab6 <_malloc_r+0x22>
 8008b58:	1b9b      	subs	r3, r3, r6
 8008b5a:	50a3      	str	r3, [r4, r2]
 8008b5c:	e7ab      	b.n	8008ab6 <_malloc_r+0x22>
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	6862      	ldr	r2, [r4, #4]
 8008b62:	d1dd      	bne.n	8008b20 <_malloc_r+0x8c>
 8008b64:	f8c8 2000 	str.w	r2, [r8]
 8008b68:	e7ec      	b.n	8008b44 <_malloc_r+0xb0>
 8008b6a:	4623      	mov	r3, r4
 8008b6c:	6864      	ldr	r4, [r4, #4]
 8008b6e:	e7ac      	b.n	8008aca <_malloc_r+0x36>
 8008b70:	4634      	mov	r4, r6
 8008b72:	6876      	ldr	r6, [r6, #4]
 8008b74:	e7b4      	b.n	8008ae0 <_malloc_r+0x4c>
 8008b76:	4613      	mov	r3, r2
 8008b78:	e7cc      	b.n	8008b14 <_malloc_r+0x80>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	603b      	str	r3, [r7, #0]
 8008b7e:	4638      	mov	r0, r7
 8008b80:	f000 f80e 	bl	8008ba0 <__malloc_unlock>
 8008b84:	e797      	b.n	8008ab6 <_malloc_r+0x22>
 8008b86:	6025      	str	r5, [r4, #0]
 8008b88:	e7dc      	b.n	8008b44 <_malloc_r+0xb0>
 8008b8a:	605b      	str	r3, [r3, #4]
 8008b8c:	deff      	udf	#255	; 0xff
 8008b8e:	bf00      	nop
 8008b90:	20004d68 	.word	0x20004d68

08008b94 <__malloc_lock>:
 8008b94:	4801      	ldr	r0, [pc, #4]	; (8008b9c <__malloc_lock+0x8>)
 8008b96:	f7ff bf00 	b.w	800899a <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	20004d64 	.word	0x20004d64

08008ba0 <__malloc_unlock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__malloc_unlock+0x8>)
 8008ba2:	f7ff befb 	b.w	800899c <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	20004d64 	.word	0x20004d64

08008bac <__sfputc_r>:
 8008bac:	6893      	ldr	r3, [r2, #8]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	b410      	push	{r4}
 8008bb4:	6093      	str	r3, [r2, #8]
 8008bb6:	da08      	bge.n	8008bca <__sfputc_r+0x1e>
 8008bb8:	6994      	ldr	r4, [r2, #24]
 8008bba:	42a3      	cmp	r3, r4
 8008bbc:	db01      	blt.n	8008bc2 <__sfputc_r+0x16>
 8008bbe:	290a      	cmp	r1, #10
 8008bc0:	d103      	bne.n	8008bca <__sfputc_r+0x1e>
 8008bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc6:	f000 bb73 	b.w	80092b0 <__swbuf_r>
 8008bca:	6813      	ldr	r3, [r2, #0]
 8008bcc:	1c58      	adds	r0, r3, #1
 8008bce:	6010      	str	r0, [r2, #0]
 8008bd0:	7019      	strb	r1, [r3, #0]
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <__sfputs_r>:
 8008bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bdc:	4606      	mov	r6, r0
 8008bde:	460f      	mov	r7, r1
 8008be0:	4614      	mov	r4, r2
 8008be2:	18d5      	adds	r5, r2, r3
 8008be4:	42ac      	cmp	r4, r5
 8008be6:	d101      	bne.n	8008bec <__sfputs_r+0x12>
 8008be8:	2000      	movs	r0, #0
 8008bea:	e007      	b.n	8008bfc <__sfputs_r+0x22>
 8008bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf0:	463a      	mov	r2, r7
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7ff ffda 	bl	8008bac <__sfputc_r>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d1f3      	bne.n	8008be4 <__sfputs_r+0xa>
 8008bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c00 <_vfiprintf_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	460d      	mov	r5, r1
 8008c06:	b09d      	sub	sp, #116	; 0x74
 8008c08:	4614      	mov	r4, r2
 8008c0a:	4698      	mov	r8, r3
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	b118      	cbz	r0, 8008c18 <_vfiprintf_r+0x18>
 8008c10:	6a03      	ldr	r3, [r0, #32]
 8008c12:	b90b      	cbnz	r3, 8008c18 <_vfiprintf_r+0x18>
 8008c14:	f7ff fd66 	bl	80086e4 <__sinit>
 8008c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c1a:	07d9      	lsls	r1, r3, #31
 8008c1c:	d405      	bmi.n	8008c2a <_vfiprintf_r+0x2a>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	059a      	lsls	r2, r3, #22
 8008c22:	d402      	bmi.n	8008c2a <_vfiprintf_r+0x2a>
 8008c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c26:	f7ff feb8 	bl	800899a <__retarget_lock_acquire_recursive>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	071b      	lsls	r3, r3, #28
 8008c2e:	d501      	bpl.n	8008c34 <_vfiprintf_r+0x34>
 8008c30:	692b      	ldr	r3, [r5, #16]
 8008c32:	b99b      	cbnz	r3, 8008c5c <_vfiprintf_r+0x5c>
 8008c34:	4629      	mov	r1, r5
 8008c36:	4630      	mov	r0, r6
 8008c38:	f000 fb78 	bl	800932c <__swsetup_r>
 8008c3c:	b170      	cbz	r0, 8008c5c <_vfiprintf_r+0x5c>
 8008c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c40:	07dc      	lsls	r4, r3, #31
 8008c42:	d504      	bpl.n	8008c4e <_vfiprintf_r+0x4e>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	b01d      	add	sp, #116	; 0x74
 8008c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4e:	89ab      	ldrh	r3, [r5, #12]
 8008c50:	0598      	lsls	r0, r3, #22
 8008c52:	d4f7      	bmi.n	8008c44 <_vfiprintf_r+0x44>
 8008c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c56:	f7ff fea1 	bl	800899c <__retarget_lock_release_recursive>
 8008c5a:	e7f3      	b.n	8008c44 <_vfiprintf_r+0x44>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c60:	2320      	movs	r3, #32
 8008c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c6a:	2330      	movs	r3, #48	; 0x30
 8008c6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008e20 <_vfiprintf_r+0x220>
 8008c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c74:	f04f 0901 	mov.w	r9, #1
 8008c78:	4623      	mov	r3, r4
 8008c7a:	469a      	mov	sl, r3
 8008c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c80:	b10a      	cbz	r2, 8008c86 <_vfiprintf_r+0x86>
 8008c82:	2a25      	cmp	r2, #37	; 0x25
 8008c84:	d1f9      	bne.n	8008c7a <_vfiprintf_r+0x7a>
 8008c86:	ebba 0b04 	subs.w	fp, sl, r4
 8008c8a:	d00b      	beq.n	8008ca4 <_vfiprintf_r+0xa4>
 8008c8c:	465b      	mov	r3, fp
 8008c8e:	4622      	mov	r2, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	4630      	mov	r0, r6
 8008c94:	f7ff ffa1 	bl	8008bda <__sfputs_r>
 8008c98:	3001      	adds	r0, #1
 8008c9a:	f000 80a9 	beq.w	8008df0 <_vfiprintf_r+0x1f0>
 8008c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ca0:	445a      	add	r2, fp
 8008ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 80a1 	beq.w	8008df0 <_vfiprintf_r+0x1f0>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cb8:	f10a 0a01 	add.w	sl, sl, #1
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	9307      	str	r3, [sp, #28]
 8008cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8008cc6:	4654      	mov	r4, sl
 8008cc8:	2205      	movs	r2, #5
 8008cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cce:	4854      	ldr	r0, [pc, #336]	; (8008e20 <_vfiprintf_r+0x220>)
 8008cd0:	f7f7 fa86 	bl	80001e0 <memchr>
 8008cd4:	9a04      	ldr	r2, [sp, #16]
 8008cd6:	b9d8      	cbnz	r0, 8008d10 <_vfiprintf_r+0x110>
 8008cd8:	06d1      	lsls	r1, r2, #27
 8008cda:	bf44      	itt	mi
 8008cdc:	2320      	movmi	r3, #32
 8008cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ce2:	0713      	lsls	r3, r2, #28
 8008ce4:	bf44      	itt	mi
 8008ce6:	232b      	movmi	r3, #43	; 0x2b
 8008ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cec:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cf2:	d015      	beq.n	8008d20 <_vfiprintf_r+0x120>
 8008cf4:	9a07      	ldr	r2, [sp, #28]
 8008cf6:	4654      	mov	r4, sl
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	f04f 0c0a 	mov.w	ip, #10
 8008cfe:	4621      	mov	r1, r4
 8008d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d04:	3b30      	subs	r3, #48	; 0x30
 8008d06:	2b09      	cmp	r3, #9
 8008d08:	d94d      	bls.n	8008da6 <_vfiprintf_r+0x1a6>
 8008d0a:	b1b0      	cbz	r0, 8008d3a <_vfiprintf_r+0x13a>
 8008d0c:	9207      	str	r2, [sp, #28]
 8008d0e:	e014      	b.n	8008d3a <_vfiprintf_r+0x13a>
 8008d10:	eba0 0308 	sub.w	r3, r0, r8
 8008d14:	fa09 f303 	lsl.w	r3, r9, r3
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	46a2      	mov	sl, r4
 8008d1e:	e7d2      	b.n	8008cc6 <_vfiprintf_r+0xc6>
 8008d20:	9b03      	ldr	r3, [sp, #12]
 8008d22:	1d19      	adds	r1, r3, #4
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	9103      	str	r1, [sp, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	bfbb      	ittet	lt
 8008d2c:	425b      	neglt	r3, r3
 8008d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d32:	9307      	strge	r3, [sp, #28]
 8008d34:	9307      	strlt	r3, [sp, #28]
 8008d36:	bfb8      	it	lt
 8008d38:	9204      	strlt	r2, [sp, #16]
 8008d3a:	7823      	ldrb	r3, [r4, #0]
 8008d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d3e:	d10c      	bne.n	8008d5a <_vfiprintf_r+0x15a>
 8008d40:	7863      	ldrb	r3, [r4, #1]
 8008d42:	2b2a      	cmp	r3, #42	; 0x2a
 8008d44:	d134      	bne.n	8008db0 <_vfiprintf_r+0x1b0>
 8008d46:	9b03      	ldr	r3, [sp, #12]
 8008d48:	1d1a      	adds	r2, r3, #4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	9203      	str	r2, [sp, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	bfb8      	it	lt
 8008d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d56:	3402      	adds	r4, #2
 8008d58:	9305      	str	r3, [sp, #20]
 8008d5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008e30 <_vfiprintf_r+0x230>
 8008d5e:	7821      	ldrb	r1, [r4, #0]
 8008d60:	2203      	movs	r2, #3
 8008d62:	4650      	mov	r0, sl
 8008d64:	f7f7 fa3c 	bl	80001e0 <memchr>
 8008d68:	b138      	cbz	r0, 8008d7a <_vfiprintf_r+0x17a>
 8008d6a:	9b04      	ldr	r3, [sp, #16]
 8008d6c:	eba0 000a 	sub.w	r0, r0, sl
 8008d70:	2240      	movs	r2, #64	; 0x40
 8008d72:	4082      	lsls	r2, r0
 8008d74:	4313      	orrs	r3, r2
 8008d76:	3401      	adds	r4, #1
 8008d78:	9304      	str	r3, [sp, #16]
 8008d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d7e:	4829      	ldr	r0, [pc, #164]	; (8008e24 <_vfiprintf_r+0x224>)
 8008d80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d84:	2206      	movs	r2, #6
 8008d86:	f7f7 fa2b 	bl	80001e0 <memchr>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d03f      	beq.n	8008e0e <_vfiprintf_r+0x20e>
 8008d8e:	4b26      	ldr	r3, [pc, #152]	; (8008e28 <_vfiprintf_r+0x228>)
 8008d90:	bb1b      	cbnz	r3, 8008dda <_vfiprintf_r+0x1da>
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	3307      	adds	r3, #7
 8008d96:	f023 0307 	bic.w	r3, r3, #7
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	9303      	str	r3, [sp, #12]
 8008d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da0:	443b      	add	r3, r7
 8008da2:	9309      	str	r3, [sp, #36]	; 0x24
 8008da4:	e768      	b.n	8008c78 <_vfiprintf_r+0x78>
 8008da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008daa:	460c      	mov	r4, r1
 8008dac:	2001      	movs	r0, #1
 8008dae:	e7a6      	b.n	8008cfe <_vfiprintf_r+0xfe>
 8008db0:	2300      	movs	r3, #0
 8008db2:	3401      	adds	r4, #1
 8008db4:	9305      	str	r3, [sp, #20]
 8008db6:	4619      	mov	r1, r3
 8008db8:	f04f 0c0a 	mov.w	ip, #10
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dc2:	3a30      	subs	r2, #48	; 0x30
 8008dc4:	2a09      	cmp	r2, #9
 8008dc6:	d903      	bls.n	8008dd0 <_vfiprintf_r+0x1d0>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d0c6      	beq.n	8008d5a <_vfiprintf_r+0x15a>
 8008dcc:	9105      	str	r1, [sp, #20]
 8008dce:	e7c4      	b.n	8008d5a <_vfiprintf_r+0x15a>
 8008dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e7f0      	b.n	8008dbc <_vfiprintf_r+0x1bc>
 8008dda:	ab03      	add	r3, sp, #12
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	462a      	mov	r2, r5
 8008de0:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <_vfiprintf_r+0x22c>)
 8008de2:	a904      	add	r1, sp, #16
 8008de4:	4630      	mov	r0, r6
 8008de6:	f3af 8000 	nop.w
 8008dea:	4607      	mov	r7, r0
 8008dec:	1c78      	adds	r0, r7, #1
 8008dee:	d1d6      	bne.n	8008d9e <_vfiprintf_r+0x19e>
 8008df0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008df2:	07d9      	lsls	r1, r3, #31
 8008df4:	d405      	bmi.n	8008e02 <_vfiprintf_r+0x202>
 8008df6:	89ab      	ldrh	r3, [r5, #12]
 8008df8:	059a      	lsls	r2, r3, #22
 8008dfa:	d402      	bmi.n	8008e02 <_vfiprintf_r+0x202>
 8008dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dfe:	f7ff fdcd 	bl	800899c <__retarget_lock_release_recursive>
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	065b      	lsls	r3, r3, #25
 8008e06:	f53f af1d 	bmi.w	8008c44 <_vfiprintf_r+0x44>
 8008e0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e0c:	e71c      	b.n	8008c48 <_vfiprintf_r+0x48>
 8008e0e:	ab03      	add	r3, sp, #12
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	462a      	mov	r2, r5
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <_vfiprintf_r+0x22c>)
 8008e16:	a904      	add	r1, sp, #16
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f000 f879 	bl	8008f10 <_printf_i>
 8008e1e:	e7e4      	b.n	8008dea <_vfiprintf_r+0x1ea>
 8008e20:	0800970c 	.word	0x0800970c
 8008e24:	08009716 	.word	0x08009716
 8008e28:	00000000 	.word	0x00000000
 8008e2c:	08008bdb 	.word	0x08008bdb
 8008e30:	08009712 	.word	0x08009712

08008e34 <_printf_common>:
 8008e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	4616      	mov	r6, r2
 8008e3a:	4699      	mov	r9, r3
 8008e3c:	688a      	ldr	r2, [r1, #8]
 8008e3e:	690b      	ldr	r3, [r1, #16]
 8008e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e44:	4293      	cmp	r3, r2
 8008e46:	bfb8      	it	lt
 8008e48:	4613      	movlt	r3, r2
 8008e4a:	6033      	str	r3, [r6, #0]
 8008e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e50:	4607      	mov	r7, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	b10a      	cbz	r2, 8008e5a <_printf_common+0x26>
 8008e56:	3301      	adds	r3, #1
 8008e58:	6033      	str	r3, [r6, #0]
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	0699      	lsls	r1, r3, #26
 8008e5e:	bf42      	ittt	mi
 8008e60:	6833      	ldrmi	r3, [r6, #0]
 8008e62:	3302      	addmi	r3, #2
 8008e64:	6033      	strmi	r3, [r6, #0]
 8008e66:	6825      	ldr	r5, [r4, #0]
 8008e68:	f015 0506 	ands.w	r5, r5, #6
 8008e6c:	d106      	bne.n	8008e7c <_printf_common+0x48>
 8008e6e:	f104 0a19 	add.w	sl, r4, #25
 8008e72:	68e3      	ldr	r3, [r4, #12]
 8008e74:	6832      	ldr	r2, [r6, #0]
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	42ab      	cmp	r3, r5
 8008e7a:	dc26      	bgt.n	8008eca <_printf_common+0x96>
 8008e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e80:	1e13      	subs	r3, r2, #0
 8008e82:	6822      	ldr	r2, [r4, #0]
 8008e84:	bf18      	it	ne
 8008e86:	2301      	movne	r3, #1
 8008e88:	0692      	lsls	r2, r2, #26
 8008e8a:	d42b      	bmi.n	8008ee4 <_printf_common+0xb0>
 8008e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e90:	4649      	mov	r1, r9
 8008e92:	4638      	mov	r0, r7
 8008e94:	47c0      	blx	r8
 8008e96:	3001      	adds	r0, #1
 8008e98:	d01e      	beq.n	8008ed8 <_printf_common+0xa4>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	6922      	ldr	r2, [r4, #16]
 8008e9e:	f003 0306 	and.w	r3, r3, #6
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	bf02      	ittt	eq
 8008ea6:	68e5      	ldreq	r5, [r4, #12]
 8008ea8:	6833      	ldreq	r3, [r6, #0]
 8008eaa:	1aed      	subeq	r5, r5, r3
 8008eac:	68a3      	ldr	r3, [r4, #8]
 8008eae:	bf0c      	ite	eq
 8008eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb4:	2500      	movne	r5, #0
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	bfc4      	itt	gt
 8008eba:	1a9b      	subgt	r3, r3, r2
 8008ebc:	18ed      	addgt	r5, r5, r3
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	341a      	adds	r4, #26
 8008ec2:	42b5      	cmp	r5, r6
 8008ec4:	d11a      	bne.n	8008efc <_printf_common+0xc8>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e008      	b.n	8008edc <_printf_common+0xa8>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	4652      	mov	r2, sl
 8008ece:	4649      	mov	r1, r9
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	47c0      	blx	r8
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d103      	bne.n	8008ee0 <_printf_common+0xac>
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	e7c6      	b.n	8008e72 <_printf_common+0x3e>
 8008ee4:	18e1      	adds	r1, r4, r3
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	2030      	movs	r0, #48	; 0x30
 8008eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eee:	4422      	add	r2, r4
 8008ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ef8:	3302      	adds	r3, #2
 8008efa:	e7c7      	b.n	8008e8c <_printf_common+0x58>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4622      	mov	r2, r4
 8008f00:	4649      	mov	r1, r9
 8008f02:	4638      	mov	r0, r7
 8008f04:	47c0      	blx	r8
 8008f06:	3001      	adds	r0, #1
 8008f08:	d0e6      	beq.n	8008ed8 <_printf_common+0xa4>
 8008f0a:	3601      	adds	r6, #1
 8008f0c:	e7d9      	b.n	8008ec2 <_printf_common+0x8e>
	...

08008f10 <_printf_i>:
 8008f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f14:	7e0f      	ldrb	r7, [r1, #24]
 8008f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f18:	2f78      	cmp	r7, #120	; 0x78
 8008f1a:	4691      	mov	r9, r2
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	469a      	mov	sl, r3
 8008f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f26:	d807      	bhi.n	8008f38 <_printf_i+0x28>
 8008f28:	2f62      	cmp	r7, #98	; 0x62
 8008f2a:	d80a      	bhi.n	8008f42 <_printf_i+0x32>
 8008f2c:	2f00      	cmp	r7, #0
 8008f2e:	f000 80d4 	beq.w	80090da <_printf_i+0x1ca>
 8008f32:	2f58      	cmp	r7, #88	; 0x58
 8008f34:	f000 80c0 	beq.w	80090b8 <_printf_i+0x1a8>
 8008f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f40:	e03a      	b.n	8008fb8 <_printf_i+0xa8>
 8008f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f46:	2b15      	cmp	r3, #21
 8008f48:	d8f6      	bhi.n	8008f38 <_printf_i+0x28>
 8008f4a:	a101      	add	r1, pc, #4	; (adr r1, 8008f50 <_printf_i+0x40>)
 8008f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f50:	08008fa9 	.word	0x08008fa9
 8008f54:	08008fbd 	.word	0x08008fbd
 8008f58:	08008f39 	.word	0x08008f39
 8008f5c:	08008f39 	.word	0x08008f39
 8008f60:	08008f39 	.word	0x08008f39
 8008f64:	08008f39 	.word	0x08008f39
 8008f68:	08008fbd 	.word	0x08008fbd
 8008f6c:	08008f39 	.word	0x08008f39
 8008f70:	08008f39 	.word	0x08008f39
 8008f74:	08008f39 	.word	0x08008f39
 8008f78:	08008f39 	.word	0x08008f39
 8008f7c:	080090c1 	.word	0x080090c1
 8008f80:	08008fe9 	.word	0x08008fe9
 8008f84:	0800907b 	.word	0x0800907b
 8008f88:	08008f39 	.word	0x08008f39
 8008f8c:	08008f39 	.word	0x08008f39
 8008f90:	080090e3 	.word	0x080090e3
 8008f94:	08008f39 	.word	0x08008f39
 8008f98:	08008fe9 	.word	0x08008fe9
 8008f9c:	08008f39 	.word	0x08008f39
 8008fa0:	08008f39 	.word	0x08008f39
 8008fa4:	08009083 	.word	0x08009083
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	1d1a      	adds	r2, r3, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	602a      	str	r2, [r5, #0]
 8008fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e09f      	b.n	80090fc <_printf_i+0x1ec>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	682b      	ldr	r3, [r5, #0]
 8008fc0:	0607      	lsls	r7, r0, #24
 8008fc2:	f103 0104 	add.w	r1, r3, #4
 8008fc6:	6029      	str	r1, [r5, #0]
 8008fc8:	d501      	bpl.n	8008fce <_printf_i+0xbe>
 8008fca:	681e      	ldr	r6, [r3, #0]
 8008fcc:	e003      	b.n	8008fd6 <_printf_i+0xc6>
 8008fce:	0646      	lsls	r6, r0, #25
 8008fd0:	d5fb      	bpl.n	8008fca <_printf_i+0xba>
 8008fd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008fd6:	2e00      	cmp	r6, #0
 8008fd8:	da03      	bge.n	8008fe2 <_printf_i+0xd2>
 8008fda:	232d      	movs	r3, #45	; 0x2d
 8008fdc:	4276      	negs	r6, r6
 8008fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe2:	485a      	ldr	r0, [pc, #360]	; (800914c <_printf_i+0x23c>)
 8008fe4:	230a      	movs	r3, #10
 8008fe6:	e012      	b.n	800900e <_printf_i+0xfe>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	6820      	ldr	r0, [r4, #0]
 8008fec:	1d19      	adds	r1, r3, #4
 8008fee:	6029      	str	r1, [r5, #0]
 8008ff0:	0605      	lsls	r5, r0, #24
 8008ff2:	d501      	bpl.n	8008ff8 <_printf_i+0xe8>
 8008ff4:	681e      	ldr	r6, [r3, #0]
 8008ff6:	e002      	b.n	8008ffe <_printf_i+0xee>
 8008ff8:	0641      	lsls	r1, r0, #25
 8008ffa:	d5fb      	bpl.n	8008ff4 <_printf_i+0xe4>
 8008ffc:	881e      	ldrh	r6, [r3, #0]
 8008ffe:	4853      	ldr	r0, [pc, #332]	; (800914c <_printf_i+0x23c>)
 8009000:	2f6f      	cmp	r7, #111	; 0x6f
 8009002:	bf0c      	ite	eq
 8009004:	2308      	moveq	r3, #8
 8009006:	230a      	movne	r3, #10
 8009008:	2100      	movs	r1, #0
 800900a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800900e:	6865      	ldr	r5, [r4, #4]
 8009010:	60a5      	str	r5, [r4, #8]
 8009012:	2d00      	cmp	r5, #0
 8009014:	bfa2      	ittt	ge
 8009016:	6821      	ldrge	r1, [r4, #0]
 8009018:	f021 0104 	bicge.w	r1, r1, #4
 800901c:	6021      	strge	r1, [r4, #0]
 800901e:	b90e      	cbnz	r6, 8009024 <_printf_i+0x114>
 8009020:	2d00      	cmp	r5, #0
 8009022:	d04b      	beq.n	80090bc <_printf_i+0x1ac>
 8009024:	4615      	mov	r5, r2
 8009026:	fbb6 f1f3 	udiv	r1, r6, r3
 800902a:	fb03 6711 	mls	r7, r3, r1, r6
 800902e:	5dc7      	ldrb	r7, [r0, r7]
 8009030:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009034:	4637      	mov	r7, r6
 8009036:	42bb      	cmp	r3, r7
 8009038:	460e      	mov	r6, r1
 800903a:	d9f4      	bls.n	8009026 <_printf_i+0x116>
 800903c:	2b08      	cmp	r3, #8
 800903e:	d10b      	bne.n	8009058 <_printf_i+0x148>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	07de      	lsls	r6, r3, #31
 8009044:	d508      	bpl.n	8009058 <_printf_i+0x148>
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	6861      	ldr	r1, [r4, #4]
 800904a:	4299      	cmp	r1, r3
 800904c:	bfde      	ittt	le
 800904e:	2330      	movle	r3, #48	; 0x30
 8009050:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009054:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009058:	1b52      	subs	r2, r2, r5
 800905a:	6122      	str	r2, [r4, #16]
 800905c:	f8cd a000 	str.w	sl, [sp]
 8009060:	464b      	mov	r3, r9
 8009062:	aa03      	add	r2, sp, #12
 8009064:	4621      	mov	r1, r4
 8009066:	4640      	mov	r0, r8
 8009068:	f7ff fee4 	bl	8008e34 <_printf_common>
 800906c:	3001      	adds	r0, #1
 800906e:	d14a      	bne.n	8009106 <_printf_i+0x1f6>
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	b004      	add	sp, #16
 8009076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	f043 0320 	orr.w	r3, r3, #32
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	4833      	ldr	r0, [pc, #204]	; (8009150 <_printf_i+0x240>)
 8009084:	2778      	movs	r7, #120	; 0x78
 8009086:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	6829      	ldr	r1, [r5, #0]
 800908e:	061f      	lsls	r7, r3, #24
 8009090:	f851 6b04 	ldr.w	r6, [r1], #4
 8009094:	d402      	bmi.n	800909c <_printf_i+0x18c>
 8009096:	065f      	lsls	r7, r3, #25
 8009098:	bf48      	it	mi
 800909a:	b2b6      	uxthmi	r6, r6
 800909c:	07df      	lsls	r7, r3, #31
 800909e:	bf48      	it	mi
 80090a0:	f043 0320 	orrmi.w	r3, r3, #32
 80090a4:	6029      	str	r1, [r5, #0]
 80090a6:	bf48      	it	mi
 80090a8:	6023      	strmi	r3, [r4, #0]
 80090aa:	b91e      	cbnz	r6, 80090b4 <_printf_i+0x1a4>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	f023 0320 	bic.w	r3, r3, #32
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	2310      	movs	r3, #16
 80090b6:	e7a7      	b.n	8009008 <_printf_i+0xf8>
 80090b8:	4824      	ldr	r0, [pc, #144]	; (800914c <_printf_i+0x23c>)
 80090ba:	e7e4      	b.n	8009086 <_printf_i+0x176>
 80090bc:	4615      	mov	r5, r2
 80090be:	e7bd      	b.n	800903c <_printf_i+0x12c>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	6826      	ldr	r6, [r4, #0]
 80090c4:	6961      	ldr	r1, [r4, #20]
 80090c6:	1d18      	adds	r0, r3, #4
 80090c8:	6028      	str	r0, [r5, #0]
 80090ca:	0635      	lsls	r5, r6, #24
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	d501      	bpl.n	80090d4 <_printf_i+0x1c4>
 80090d0:	6019      	str	r1, [r3, #0]
 80090d2:	e002      	b.n	80090da <_printf_i+0x1ca>
 80090d4:	0670      	lsls	r0, r6, #25
 80090d6:	d5fb      	bpl.n	80090d0 <_printf_i+0x1c0>
 80090d8:	8019      	strh	r1, [r3, #0]
 80090da:	2300      	movs	r3, #0
 80090dc:	6123      	str	r3, [r4, #16]
 80090de:	4615      	mov	r5, r2
 80090e0:	e7bc      	b.n	800905c <_printf_i+0x14c>
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	1d1a      	adds	r2, r3, #4
 80090e6:	602a      	str	r2, [r5, #0]
 80090e8:	681d      	ldr	r5, [r3, #0]
 80090ea:	6862      	ldr	r2, [r4, #4]
 80090ec:	2100      	movs	r1, #0
 80090ee:	4628      	mov	r0, r5
 80090f0:	f7f7 f876 	bl	80001e0 <memchr>
 80090f4:	b108      	cbz	r0, 80090fa <_printf_i+0x1ea>
 80090f6:	1b40      	subs	r0, r0, r5
 80090f8:	6060      	str	r0, [r4, #4]
 80090fa:	6863      	ldr	r3, [r4, #4]
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	2300      	movs	r3, #0
 8009100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009104:	e7aa      	b.n	800905c <_printf_i+0x14c>
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	462a      	mov	r2, r5
 800910a:	4649      	mov	r1, r9
 800910c:	4640      	mov	r0, r8
 800910e:	47d0      	blx	sl
 8009110:	3001      	adds	r0, #1
 8009112:	d0ad      	beq.n	8009070 <_printf_i+0x160>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	079b      	lsls	r3, r3, #30
 8009118:	d413      	bmi.n	8009142 <_printf_i+0x232>
 800911a:	68e0      	ldr	r0, [r4, #12]
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	4298      	cmp	r0, r3
 8009120:	bfb8      	it	lt
 8009122:	4618      	movlt	r0, r3
 8009124:	e7a6      	b.n	8009074 <_printf_i+0x164>
 8009126:	2301      	movs	r3, #1
 8009128:	4632      	mov	r2, r6
 800912a:	4649      	mov	r1, r9
 800912c:	4640      	mov	r0, r8
 800912e:	47d0      	blx	sl
 8009130:	3001      	adds	r0, #1
 8009132:	d09d      	beq.n	8009070 <_printf_i+0x160>
 8009134:	3501      	adds	r5, #1
 8009136:	68e3      	ldr	r3, [r4, #12]
 8009138:	9903      	ldr	r1, [sp, #12]
 800913a:	1a5b      	subs	r3, r3, r1
 800913c:	42ab      	cmp	r3, r5
 800913e:	dcf2      	bgt.n	8009126 <_printf_i+0x216>
 8009140:	e7eb      	b.n	800911a <_printf_i+0x20a>
 8009142:	2500      	movs	r5, #0
 8009144:	f104 0619 	add.w	r6, r4, #25
 8009148:	e7f5      	b.n	8009136 <_printf_i+0x226>
 800914a:	bf00      	nop
 800914c:	0800971d 	.word	0x0800971d
 8009150:	0800972e 	.word	0x0800972e

08009154 <__sflush_r>:
 8009154:	898a      	ldrh	r2, [r1, #12]
 8009156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915a:	4605      	mov	r5, r0
 800915c:	0710      	lsls	r0, r2, #28
 800915e:	460c      	mov	r4, r1
 8009160:	d458      	bmi.n	8009214 <__sflush_r+0xc0>
 8009162:	684b      	ldr	r3, [r1, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	dc05      	bgt.n	8009174 <__sflush_r+0x20>
 8009168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	dc02      	bgt.n	8009174 <__sflush_r+0x20>
 800916e:	2000      	movs	r0, #0
 8009170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009176:	2e00      	cmp	r6, #0
 8009178:	d0f9      	beq.n	800916e <__sflush_r+0x1a>
 800917a:	2300      	movs	r3, #0
 800917c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009180:	682f      	ldr	r7, [r5, #0]
 8009182:	6a21      	ldr	r1, [r4, #32]
 8009184:	602b      	str	r3, [r5, #0]
 8009186:	d032      	beq.n	80091ee <__sflush_r+0x9a>
 8009188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	075a      	lsls	r2, r3, #29
 800918e:	d505      	bpl.n	800919c <__sflush_r+0x48>
 8009190:	6863      	ldr	r3, [r4, #4]
 8009192:	1ac0      	subs	r0, r0, r3
 8009194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009196:	b10b      	cbz	r3, 800919c <__sflush_r+0x48>
 8009198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800919a:	1ac0      	subs	r0, r0, r3
 800919c:	2300      	movs	r3, #0
 800919e:	4602      	mov	r2, r0
 80091a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091a2:	6a21      	ldr	r1, [r4, #32]
 80091a4:	4628      	mov	r0, r5
 80091a6:	47b0      	blx	r6
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	d106      	bne.n	80091bc <__sflush_r+0x68>
 80091ae:	6829      	ldr	r1, [r5, #0]
 80091b0:	291d      	cmp	r1, #29
 80091b2:	d82b      	bhi.n	800920c <__sflush_r+0xb8>
 80091b4:	4a29      	ldr	r2, [pc, #164]	; (800925c <__sflush_r+0x108>)
 80091b6:	410a      	asrs	r2, r1
 80091b8:	07d6      	lsls	r6, r2, #31
 80091ba:	d427      	bmi.n	800920c <__sflush_r+0xb8>
 80091bc:	2200      	movs	r2, #0
 80091be:	6062      	str	r2, [r4, #4]
 80091c0:	04d9      	lsls	r1, r3, #19
 80091c2:	6922      	ldr	r2, [r4, #16]
 80091c4:	6022      	str	r2, [r4, #0]
 80091c6:	d504      	bpl.n	80091d2 <__sflush_r+0x7e>
 80091c8:	1c42      	adds	r2, r0, #1
 80091ca:	d101      	bne.n	80091d0 <__sflush_r+0x7c>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b903      	cbnz	r3, 80091d2 <__sflush_r+0x7e>
 80091d0:	6560      	str	r0, [r4, #84]	; 0x54
 80091d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091d4:	602f      	str	r7, [r5, #0]
 80091d6:	2900      	cmp	r1, #0
 80091d8:	d0c9      	beq.n	800916e <__sflush_r+0x1a>
 80091da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091de:	4299      	cmp	r1, r3
 80091e0:	d002      	beq.n	80091e8 <__sflush_r+0x94>
 80091e2:	4628      	mov	r0, r5
 80091e4:	f7ff fbea 	bl	80089bc <_free_r>
 80091e8:	2000      	movs	r0, #0
 80091ea:	6360      	str	r0, [r4, #52]	; 0x34
 80091ec:	e7c0      	b.n	8009170 <__sflush_r+0x1c>
 80091ee:	2301      	movs	r3, #1
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b0      	blx	r6
 80091f4:	1c41      	adds	r1, r0, #1
 80091f6:	d1c8      	bne.n	800918a <__sflush_r+0x36>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0c5      	beq.n	800918a <__sflush_r+0x36>
 80091fe:	2b1d      	cmp	r3, #29
 8009200:	d001      	beq.n	8009206 <__sflush_r+0xb2>
 8009202:	2b16      	cmp	r3, #22
 8009204:	d101      	bne.n	800920a <__sflush_r+0xb6>
 8009206:	602f      	str	r7, [r5, #0]
 8009208:	e7b1      	b.n	800916e <__sflush_r+0x1a>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	e7ad      	b.n	8009170 <__sflush_r+0x1c>
 8009214:	690f      	ldr	r7, [r1, #16]
 8009216:	2f00      	cmp	r7, #0
 8009218:	d0a9      	beq.n	800916e <__sflush_r+0x1a>
 800921a:	0793      	lsls	r3, r2, #30
 800921c:	680e      	ldr	r6, [r1, #0]
 800921e:	bf08      	it	eq
 8009220:	694b      	ldreq	r3, [r1, #20]
 8009222:	600f      	str	r7, [r1, #0]
 8009224:	bf18      	it	ne
 8009226:	2300      	movne	r3, #0
 8009228:	eba6 0807 	sub.w	r8, r6, r7
 800922c:	608b      	str	r3, [r1, #8]
 800922e:	f1b8 0f00 	cmp.w	r8, #0
 8009232:	dd9c      	ble.n	800916e <__sflush_r+0x1a>
 8009234:	6a21      	ldr	r1, [r4, #32]
 8009236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009238:	4643      	mov	r3, r8
 800923a:	463a      	mov	r2, r7
 800923c:	4628      	mov	r0, r5
 800923e:	47b0      	blx	r6
 8009240:	2800      	cmp	r0, #0
 8009242:	dc06      	bgt.n	8009252 <__sflush_r+0xfe>
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800924a:	81a3      	strh	r3, [r4, #12]
 800924c:	f04f 30ff 	mov.w	r0, #4294967295
 8009250:	e78e      	b.n	8009170 <__sflush_r+0x1c>
 8009252:	4407      	add	r7, r0
 8009254:	eba8 0800 	sub.w	r8, r8, r0
 8009258:	e7e9      	b.n	800922e <__sflush_r+0xda>
 800925a:	bf00      	nop
 800925c:	dfbffffe 	.word	0xdfbffffe

08009260 <_fflush_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	690b      	ldr	r3, [r1, #16]
 8009264:	4605      	mov	r5, r0
 8009266:	460c      	mov	r4, r1
 8009268:	b913      	cbnz	r3, 8009270 <_fflush_r+0x10>
 800926a:	2500      	movs	r5, #0
 800926c:	4628      	mov	r0, r5
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	b118      	cbz	r0, 800927a <_fflush_r+0x1a>
 8009272:	6a03      	ldr	r3, [r0, #32]
 8009274:	b90b      	cbnz	r3, 800927a <_fflush_r+0x1a>
 8009276:	f7ff fa35 	bl	80086e4 <__sinit>
 800927a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0f3      	beq.n	800926a <_fflush_r+0xa>
 8009282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009284:	07d0      	lsls	r0, r2, #31
 8009286:	d404      	bmi.n	8009292 <_fflush_r+0x32>
 8009288:	0599      	lsls	r1, r3, #22
 800928a:	d402      	bmi.n	8009292 <_fflush_r+0x32>
 800928c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800928e:	f7ff fb84 	bl	800899a <__retarget_lock_acquire_recursive>
 8009292:	4628      	mov	r0, r5
 8009294:	4621      	mov	r1, r4
 8009296:	f7ff ff5d 	bl	8009154 <__sflush_r>
 800929a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800929c:	07da      	lsls	r2, r3, #31
 800929e:	4605      	mov	r5, r0
 80092a0:	d4e4      	bmi.n	800926c <_fflush_r+0xc>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	059b      	lsls	r3, r3, #22
 80092a6:	d4e1      	bmi.n	800926c <_fflush_r+0xc>
 80092a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092aa:	f7ff fb77 	bl	800899c <__retarget_lock_release_recursive>
 80092ae:	e7dd      	b.n	800926c <_fflush_r+0xc>

080092b0 <__swbuf_r>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	460e      	mov	r6, r1
 80092b4:	4614      	mov	r4, r2
 80092b6:	4605      	mov	r5, r0
 80092b8:	b118      	cbz	r0, 80092c2 <__swbuf_r+0x12>
 80092ba:	6a03      	ldr	r3, [r0, #32]
 80092bc:	b90b      	cbnz	r3, 80092c2 <__swbuf_r+0x12>
 80092be:	f7ff fa11 	bl	80086e4 <__sinit>
 80092c2:	69a3      	ldr	r3, [r4, #24]
 80092c4:	60a3      	str	r3, [r4, #8]
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	071a      	lsls	r2, r3, #28
 80092ca:	d525      	bpl.n	8009318 <__swbuf_r+0x68>
 80092cc:	6923      	ldr	r3, [r4, #16]
 80092ce:	b31b      	cbz	r3, 8009318 <__swbuf_r+0x68>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	6922      	ldr	r2, [r4, #16]
 80092d4:	1a98      	subs	r0, r3, r2
 80092d6:	6963      	ldr	r3, [r4, #20]
 80092d8:	b2f6      	uxtb	r6, r6
 80092da:	4283      	cmp	r3, r0
 80092dc:	4637      	mov	r7, r6
 80092de:	dc04      	bgt.n	80092ea <__swbuf_r+0x3a>
 80092e0:	4621      	mov	r1, r4
 80092e2:	4628      	mov	r0, r5
 80092e4:	f7ff ffbc 	bl	8009260 <_fflush_r>
 80092e8:	b9e0      	cbnz	r0, 8009324 <__swbuf_r+0x74>
 80092ea:	68a3      	ldr	r3, [r4, #8]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	60a3      	str	r3, [r4, #8]
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	6022      	str	r2, [r4, #0]
 80092f6:	701e      	strb	r6, [r3, #0]
 80092f8:	6962      	ldr	r2, [r4, #20]
 80092fa:	1c43      	adds	r3, r0, #1
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d004      	beq.n	800930a <__swbuf_r+0x5a>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	07db      	lsls	r3, r3, #31
 8009304:	d506      	bpl.n	8009314 <__swbuf_r+0x64>
 8009306:	2e0a      	cmp	r6, #10
 8009308:	d104      	bne.n	8009314 <__swbuf_r+0x64>
 800930a:	4621      	mov	r1, r4
 800930c:	4628      	mov	r0, r5
 800930e:	f7ff ffa7 	bl	8009260 <_fflush_r>
 8009312:	b938      	cbnz	r0, 8009324 <__swbuf_r+0x74>
 8009314:	4638      	mov	r0, r7
 8009316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009318:	4621      	mov	r1, r4
 800931a:	4628      	mov	r0, r5
 800931c:	f000 f806 	bl	800932c <__swsetup_r>
 8009320:	2800      	cmp	r0, #0
 8009322:	d0d5      	beq.n	80092d0 <__swbuf_r+0x20>
 8009324:	f04f 37ff 	mov.w	r7, #4294967295
 8009328:	e7f4      	b.n	8009314 <__swbuf_r+0x64>
	...

0800932c <__swsetup_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4b2a      	ldr	r3, [pc, #168]	; (80093d8 <__swsetup_r+0xac>)
 8009330:	4605      	mov	r5, r0
 8009332:	6818      	ldr	r0, [r3, #0]
 8009334:	460c      	mov	r4, r1
 8009336:	b118      	cbz	r0, 8009340 <__swsetup_r+0x14>
 8009338:	6a03      	ldr	r3, [r0, #32]
 800933a:	b90b      	cbnz	r3, 8009340 <__swsetup_r+0x14>
 800933c:	f7ff f9d2 	bl	80086e4 <__sinit>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009346:	0718      	lsls	r0, r3, #28
 8009348:	d422      	bmi.n	8009390 <__swsetup_r+0x64>
 800934a:	06d9      	lsls	r1, r3, #27
 800934c:	d407      	bmi.n	800935e <__swsetup_r+0x32>
 800934e:	2309      	movs	r3, #9
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	e034      	b.n	80093c8 <__swsetup_r+0x9c>
 800935e:	0758      	lsls	r0, r3, #29
 8009360:	d512      	bpl.n	8009388 <__swsetup_r+0x5c>
 8009362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009364:	b141      	cbz	r1, 8009378 <__swsetup_r+0x4c>
 8009366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800936a:	4299      	cmp	r1, r3
 800936c:	d002      	beq.n	8009374 <__swsetup_r+0x48>
 800936e:	4628      	mov	r0, r5
 8009370:	f7ff fb24 	bl	80089bc <_free_r>
 8009374:	2300      	movs	r3, #0
 8009376:	6363      	str	r3, [r4, #52]	; 0x34
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	2300      	movs	r3, #0
 8009382:	6063      	str	r3, [r4, #4]
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	f043 0308 	orr.w	r3, r3, #8
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	b94b      	cbnz	r3, 80093a8 <__swsetup_r+0x7c>
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800939a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800939e:	d003      	beq.n	80093a8 <__swsetup_r+0x7c>
 80093a0:	4621      	mov	r1, r4
 80093a2:	4628      	mov	r0, r5
 80093a4:	f000 f850 	bl	8009448 <__smakebuf_r>
 80093a8:	89a0      	ldrh	r0, [r4, #12]
 80093aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ae:	f010 0301 	ands.w	r3, r0, #1
 80093b2:	d00a      	beq.n	80093ca <__swsetup_r+0x9e>
 80093b4:	2300      	movs	r3, #0
 80093b6:	60a3      	str	r3, [r4, #8]
 80093b8:	6963      	ldr	r3, [r4, #20]
 80093ba:	425b      	negs	r3, r3
 80093bc:	61a3      	str	r3, [r4, #24]
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	b943      	cbnz	r3, 80093d4 <__swsetup_r+0xa8>
 80093c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093c6:	d1c4      	bne.n	8009352 <__swsetup_r+0x26>
 80093c8:	bd38      	pop	{r3, r4, r5, pc}
 80093ca:	0781      	lsls	r1, r0, #30
 80093cc:	bf58      	it	pl
 80093ce:	6963      	ldrpl	r3, [r4, #20]
 80093d0:	60a3      	str	r3, [r4, #8]
 80093d2:	e7f4      	b.n	80093be <__swsetup_r+0x92>
 80093d4:	2000      	movs	r0, #0
 80093d6:	e7f7      	b.n	80093c8 <__swsetup_r+0x9c>
 80093d8:	20000068 	.word	0x20000068

080093dc <_sbrk_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	4d06      	ldr	r5, [pc, #24]	; (80093f8 <_sbrk_r+0x1c>)
 80093e0:	2300      	movs	r3, #0
 80093e2:	4604      	mov	r4, r0
 80093e4:	4608      	mov	r0, r1
 80093e6:	602b      	str	r3, [r5, #0]
 80093e8:	f7f8 fbee 	bl	8001bc8 <_sbrk>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_sbrk_r+0x1a>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_sbrk_r+0x1a>
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	20004d60 	.word	0x20004d60

080093fc <__swhatbuf_r>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	460c      	mov	r4, r1
 8009400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009404:	2900      	cmp	r1, #0
 8009406:	b096      	sub	sp, #88	; 0x58
 8009408:	4615      	mov	r5, r2
 800940a:	461e      	mov	r6, r3
 800940c:	da0d      	bge.n	800942a <__swhatbuf_r+0x2e>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009414:	f04f 0100 	mov.w	r1, #0
 8009418:	bf0c      	ite	eq
 800941a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800941e:	2340      	movne	r3, #64	; 0x40
 8009420:	2000      	movs	r0, #0
 8009422:	6031      	str	r1, [r6, #0]
 8009424:	602b      	str	r3, [r5, #0]
 8009426:	b016      	add	sp, #88	; 0x58
 8009428:	bd70      	pop	{r4, r5, r6, pc}
 800942a:	466a      	mov	r2, sp
 800942c:	f000 f848 	bl	80094c0 <_fstat_r>
 8009430:	2800      	cmp	r0, #0
 8009432:	dbec      	blt.n	800940e <__swhatbuf_r+0x12>
 8009434:	9901      	ldr	r1, [sp, #4]
 8009436:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800943a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800943e:	4259      	negs	r1, r3
 8009440:	4159      	adcs	r1, r3
 8009442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009446:	e7eb      	b.n	8009420 <__swhatbuf_r+0x24>

08009448 <__smakebuf_r>:
 8009448:	898b      	ldrh	r3, [r1, #12]
 800944a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800944c:	079d      	lsls	r5, r3, #30
 800944e:	4606      	mov	r6, r0
 8009450:	460c      	mov	r4, r1
 8009452:	d507      	bpl.n	8009464 <__smakebuf_r+0x1c>
 8009454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	6123      	str	r3, [r4, #16]
 800945c:	2301      	movs	r3, #1
 800945e:	6163      	str	r3, [r4, #20]
 8009460:	b002      	add	sp, #8
 8009462:	bd70      	pop	{r4, r5, r6, pc}
 8009464:	ab01      	add	r3, sp, #4
 8009466:	466a      	mov	r2, sp
 8009468:	f7ff ffc8 	bl	80093fc <__swhatbuf_r>
 800946c:	9900      	ldr	r1, [sp, #0]
 800946e:	4605      	mov	r5, r0
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff fb0f 	bl	8008a94 <_malloc_r>
 8009476:	b948      	cbnz	r0, 800948c <__smakebuf_r+0x44>
 8009478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800947c:	059a      	lsls	r2, r3, #22
 800947e:	d4ef      	bmi.n	8009460 <__smakebuf_r+0x18>
 8009480:	f023 0303 	bic.w	r3, r3, #3
 8009484:	f043 0302 	orr.w	r3, r3, #2
 8009488:	81a3      	strh	r3, [r4, #12]
 800948a:	e7e3      	b.n	8009454 <__smakebuf_r+0xc>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	6020      	str	r0, [r4, #0]
 8009490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009494:	81a3      	strh	r3, [r4, #12]
 8009496:	9b00      	ldr	r3, [sp, #0]
 8009498:	6163      	str	r3, [r4, #20]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	6120      	str	r0, [r4, #16]
 800949e:	b15b      	cbz	r3, 80094b8 <__smakebuf_r+0x70>
 80094a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a4:	4630      	mov	r0, r6
 80094a6:	f000 f81d 	bl	80094e4 <_isatty_r>
 80094aa:	b128      	cbz	r0, 80094b8 <__smakebuf_r+0x70>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	431d      	orrs	r5, r3
 80094bc:	81a5      	strh	r5, [r4, #12]
 80094be:	e7cf      	b.n	8009460 <__smakebuf_r+0x18>

080094c0 <_fstat_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d07      	ldr	r5, [pc, #28]	; (80094e0 <_fstat_r+0x20>)
 80094c4:	2300      	movs	r3, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	4611      	mov	r1, r2
 80094cc:	602b      	str	r3, [r5, #0]
 80094ce:	f7f8 fb52 	bl	8001b76 <_fstat>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	d102      	bne.n	80094dc <_fstat_r+0x1c>
 80094d6:	682b      	ldr	r3, [r5, #0]
 80094d8:	b103      	cbz	r3, 80094dc <_fstat_r+0x1c>
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	bd38      	pop	{r3, r4, r5, pc}
 80094de:	bf00      	nop
 80094e0:	20004d60 	.word	0x20004d60

080094e4 <_isatty_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d06      	ldr	r5, [pc, #24]	; (8009500 <_isatty_r+0x1c>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f8 fb51 	bl	8001b96 <_isatty>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_isatty_r+0x1a>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_isatty_r+0x1a>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	20004d60 	.word	0x20004d60

08009504 <_init>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	bf00      	nop
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr

08009510 <_fini>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	bf00      	nop
 8009514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009516:	bc08      	pop	{r3}
 8009518:	469e      	mov	lr, r3
 800951a:	4770      	bx	lr
