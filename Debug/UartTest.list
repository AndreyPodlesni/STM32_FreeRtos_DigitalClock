
UartTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d4  080032d4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080032d4  080032d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032dc  080032dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032dc  080032dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032e0  080032e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080032e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  0800334c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800334c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f0f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000180e  00000000  00000000  00027fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  000297f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000554  00000000  00000000  00029f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000165ef  00000000  00000000  0002a464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000983b  00000000  00000000  00040a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008711e  00000000  00000000  0004a28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002290  00000000  00000000  000d13ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000d363c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003258 	.word	0x08003258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003258 	.word	0x08003258

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b2d      	ldr	r3, [pc, #180]	; (800064c <MX_GPIO_Init+0xd0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a2c      	ldr	r2, [pc, #176]	; (800064c <MX_GPIO_Init+0xd0>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <MX_GPIO_Init+0xd0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_GPIO_Init+0xd0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a25      	ldr	r2, [pc, #148]	; (800064c <MX_GPIO_Init+0xd0>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <MX_GPIO_Init+0xd0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a1e      	ldr	r2, [pc, #120]	; (800064c <MX_GPIO_Init+0xd0>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_GPIO_Init+0xd0>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2120      	movs	r1, #32
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <MX_GPIO_Init+0xd4>)
 8000608:	f000 fdd8 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800060c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <MX_GPIO_Init+0xd8>)
 8000624:	f000 fc46 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000628:	2320      	movs	r3, #32
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_GPIO_Init+0xd4>)
 8000640:	f000 fc38 	bl	8000eb4 <HAL_GPIO_Init>

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40020000 	.word	0x40020000
 8000654:	40020800 	.word	0x40020800

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fad2 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f81a 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f7ff ff8a 	bl	800057c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000668:	f000 f9d2 	bl	8000a10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800066c:	f000 f9fa 	bl	8000a64 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  reading = Read_Uart_Value(&huart1);
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <main+0x34>)
 8000672:	f000 f99b 	bl	80009ac <Read_Uart_Value>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <main+0x38>)
 800067c:	801a      	strh	r2, [r3, #0]
	  printf("reading values is: %d\n\r",reading);
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <main+0x38>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <main+0x3c>)
 8000686:	f001 ff71 	bl	800256c <iprintf>
	  reading = Read_Uart_Value(&huart1);
 800068a:	e7f1      	b.n	8000670 <main+0x18>
 800068c:	2000008c 	.word	0x2000008c
 8000690:	20000084 	.word	0x20000084
 8000694:	08003270 	.word	0x08003270

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 ffb5 	bl	8002616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000716:	2304      	movs	r3, #4
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fd66 	bl	80011f0 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800072a:	f000 f81f 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 ffc8 	bl	80016e0 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f809 	bl	800076c <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <HAL_MspInit+0x4c>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6453      	str	r3, [r2, #68]	; 0x44
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x4c>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007b6:	2007      	movs	r0, #7
 80007b8:	f000 fb48 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 fa48 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e00a      	b.n	8000844 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800082e:	f3af 8000 	nop.w
 8000832:	4601      	mov	r1, r0
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	b2ca      	uxtb	r2, r1
 800083c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf0      	blt.n	800082e <_read+0x12>
  }

  return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e009      	b.n	800087c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f889 	bl	8000988 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf1      	blt.n	8000868 <_write+0x12>
  }
  return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_close>:

int _close(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b6:	605a      	str	r2, [r3, #4]
  return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f001 fec4 	bl	80026b4 <__errno>
 800092c:	4603      	mov	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <_sbrk+0x64>)
 8000948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20020000 	.word	0x20020000
 8000958:	00000400 	.word	0x00000400
 800095c:	20000088 	.word	0x20000088
 8000960:	20000268 	.word	0x20000268

08000964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__io_putchar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 8000990:	1d39      	adds	r1, r7, #4
 8000992:	230a      	movs	r3, #10
 8000994:	2201      	movs	r2, #1
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <__io_putchar+0x20>)
 8000998:	f001 f90f 	bl	8001bba <HAL_UART_Transmit>
	return ch;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000d0 	.word	0x200000d0

080009ac <Read_Uart_Value>:


uint16_t Read_Uart_Value(UART_HandleTypeDef *huart) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    const uint8_t startMarker = 0xAA;
 80009b4:	23aa      	movs	r3, #170	; 0xaa
 80009b6:	75fb      	strb	r3, [r7, #23]
    uint8_t readingBuffer[3];
    uint16_t reading = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	82bb      	strh	r3, [r7, #20]
    uint32_t timeout = 3000; // Timeout in milliseconds
 80009bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009c0:	613b      	str	r3, [r7, #16]
    uint32_t startTime = HAL_GetTick(); // Get the current time
 80009c2:	f000 f985 	bl	8000cd0 <HAL_GetTick>
 80009c6:	60f8      	str	r0, [r7, #12]

    while (readingBuffer[0] != startMarker) {
 80009c8:	e011      	b.n	80009ee <Read_Uart_Value+0x42>
        if (HAL_GetTick() - startTime >= timeout) {
 80009ca:	f000 f981 	bl	8000cd0 <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d802      	bhi.n	80009e0 <Read_Uart_Value+0x34>
            // Timeout occurred
            return 0xFFFF; // Return an error code
 80009da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009de:	e013      	b.n	8000a08 <Read_Uart_Value+0x5c>
        }
        HAL_UART_Receive(huart, readingBuffer, 3, 100);
 80009e0:	f107 0108 	add.w	r1, r7, #8
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	2203      	movs	r2, #3
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f001 f978 	bl	8001cde <HAL_UART_Receive>
    while (readingBuffer[0] != startMarker) {
 80009ee:	7a3b      	ldrb	r3, [r7, #8]
 80009f0:	7dfa      	ldrb	r2, [r7, #23]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d1e9      	bne.n	80009ca <Read_Uart_Value+0x1e>
    }

    reading = (uint16_t)(readingBuffer[2] << 8) | readingBuffer[1];
 80009f6:	7abb      	ldrb	r3, [r7, #10]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	7a7b      	ldrb	r3, [r7, #9]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	82bb      	strh	r3, [r7, #20]
    return reading;
 8000a06:	8abb      	ldrh	r3, [r7, #20]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_USART1_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART1_UART_Init+0x4c>)
 8000a48:	f001 f86a 	bl	8001b20 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f7ff fe8b 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	40011000 	.word	0x40011000

08000a64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_USART2_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	f001 f840 	bl	8001b20 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f7ff fe61 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000d0 	.word	0x200000d0
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a32      	ldr	r2, [pc, #200]	; (8000ba0 <HAL_UART_MspInit+0xe8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12d      	bne.n	8000b36 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a30      	ldr	r2, [pc, #192]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000ae4:	f043 0310 	orr.w	r3, r3, #16
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f003 0310 	and.w	r3, r3, #16
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b24:	2307      	movs	r3, #7
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481e      	ldr	r0, [pc, #120]	; (8000ba8 <HAL_UART_MspInit+0xf0>)
 8000b30:	f000 f9c0 	bl	8000eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b34:	e030      	b.n	8000b98 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_UART_MspInit+0xf4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d12b      	bne.n	8000b98 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_UART_MspInit+0xec>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b78:	230c      	movs	r3, #12
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b88:	2307      	movs	r3, #7
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_MspInit+0xf0>)
 8000b94:	f000 f98e 	bl	8000eb4 <HAL_GPIO_Init>
}
 8000b98:	bf00      	nop
 8000b9a:	3730      	adds	r7, #48	; 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40004400 	.word	0x40004400

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bda:	f7ff fec3 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f001 fd6f 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fd39 	bl	8000658 <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bf4:	080032e4 	.word	0x080032e4
  ldr r2, =_sbss
 8000bf8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bfc:	20000264 	.word	0x20000264

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f90d 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fd9e 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f917 	bl	8000e9a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f8ed 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000114 	.word	0x20000114

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000114 	.word	0x20000114

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff47 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff5c 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffb0 	bl	8000e08 <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e159      	b.n	8001184 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 8148 	bne.w	800117e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80a2 	beq.w	800117e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b57      	ldr	r3, [pc, #348]	; (800119c <HAL_GPIO_Init+0x2e8>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a56      	ldr	r2, [pc, #344]	; (800119c <HAL_GPIO_Init+0x2e8>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b54      	ldr	r3, [pc, #336]	; (800119c <HAL_GPIO_Init+0x2e8>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001056:	4a52      	ldr	r2, [pc, #328]	; (80011a0 <HAL_GPIO_Init+0x2ec>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a49      	ldr	r2, [pc, #292]	; (80011a4 <HAL_GPIO_Init+0x2f0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x202>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <HAL_GPIO_Init+0x2f4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x1fe>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a47      	ldr	r2, [pc, #284]	; (80011ac <HAL_GPIO_Init+0x2f8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x1fa>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a46      	ldr	r2, [pc, #280]	; (80011b0 <HAL_GPIO_Init+0x2fc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x1f6>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a45      	ldr	r2, [pc, #276]	; (80011b4 <HAL_GPIO_Init+0x300>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x1f2>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010a6:	2307      	movs	r3, #7
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010b6:	2300      	movs	r3, #0
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	; (80011a0 <HAL_GPIO_Init+0x2ec>)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <HAL_GPIO_Init+0x304>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a2f      	ldr	r2, [pc, #188]	; (80011b8 <HAL_GPIO_Init+0x304>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_GPIO_Init+0x304>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <HAL_GPIO_Init+0x304>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_GPIO_Init+0x304>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114e:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_GPIO_Init+0x304>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_GPIO_Init+0x304>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_GPIO_Init+0x304>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	f67f aea2 	bls.w	8000ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e267      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d075      	beq.n	80012fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	4b88      	ldr	r3, [pc, #544]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d00c      	beq.n	8001234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b85      	ldr	r3, [pc, #532]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001222:	2b08      	cmp	r3, #8
 8001224:	d112      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001226:	4b82      	ldr	r3, [pc, #520]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001232:	d10b      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	4b7e      	ldr	r3, [pc, #504]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d05b      	beq.n	80012f8 <HAL_RCC_OscConfig+0x108>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d157      	bne.n	80012f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e242      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001254:	d106      	bne.n	8001264 <HAL_RCC_OscConfig+0x74>
 8001256:	4b76      	ldr	r3, [pc, #472]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a75      	ldr	r2, [pc, #468]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b70      	ldr	r3, [pc, #448]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6f      	ldr	r2, [pc, #444]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6d      	ldr	r3, [pc, #436]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6c      	ldr	r2, [pc, #432]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001288:	4b69      	ldr	r3, [pc, #420]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a68      	ldr	r2, [pc, #416]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a65      	ldr	r2, [pc, #404]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fd12 	bl	8000cd0 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fd0e 	bl	8000cd0 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e207      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xc0>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fcfe 	bl	8000cd0 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fcfa 	bl	8000cd0 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1f3      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b51      	ldr	r3, [pc, #324]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0xe8>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1c7      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4937      	ldr	r1, [pc, #220]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_RCC_OscConfig+0x244>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fcb3 	bl	8000cd0 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fcaf 	bl	8000cd0 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1a8      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4925      	ldr	r1, [pc, #148]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x244>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc92 	bl	8000cd0 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc8e 	bl	8000cd0 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e187      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d036      	beq.n	8001448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d016      	beq.n	8001410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_RCC_OscConfig+0x248>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e8:	f7ff fc72 	bl	8000cd0 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc6e 	bl	8000cd0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e167      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x200>
 800140e:	e01b      	b.n	8001448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_OscConfig+0x248>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fc5b 	bl	8000cd0 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	e00e      	b.n	800143c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fc57 	bl	8000cd0 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d907      	bls.n	800143c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e150      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001430:	40023800 	.word	0x40023800
 8001434:	42470000 	.word	0x42470000
 8001438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	4b88      	ldr	r3, [pc, #544]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ea      	bne.n	800141e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8097 	beq.w	8001584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145a:	4b81      	ldr	r3, [pc, #516]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b7d      	ldr	r3, [pc, #500]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a7c      	ldr	r2, [pc, #496]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b7a      	ldr	r3, [pc, #488]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b77      	ldr	r3, [pc, #476]	; (8001664 <HAL_RCC_OscConfig+0x474>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <HAL_RCC_OscConfig+0x474>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a73      	ldr	r2, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x474>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fc17 	bl	8000cd0 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fc13 	bl	8000cd0 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e10c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_OscConfig+0x474>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x2ea>
 80014cc:	4b64      	ldr	r3, [pc, #400]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a63      	ldr	r2, [pc, #396]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
 80014d8:	e01c      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x30c>
 80014e2:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a5e      	ldr	r2, [pc, #376]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
 80014ee:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a5b      	ldr	r2, [pc, #364]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014fc:	4b58      	ldr	r3, [pc, #352]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	4a57      	ldr	r2, [pc, #348]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6713      	str	r3, [r2, #112]	; 0x70
 8001508:	4b55      	ldr	r3, [pc, #340]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a54      	ldr	r2, [pc, #336]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800150e:	f023 0304 	bic.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d015      	beq.n	8001548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151c:	f7ff fbd8 	bl	8000cd0 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	e00a      	b.n	800153a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001524:	f7ff fbd4 	bl	8000cd0 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0cb      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ee      	beq.n	8001524 <HAL_RCC_OscConfig+0x334>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fbc2 	bl	8000cd0 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fbbe 	bl	8000cd0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0b5      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001566:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ee      	bne.n	8001550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a38      	ldr	r2, [pc, #224]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800157e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a1 	beq.w	80016d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800158e:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b08      	cmp	r3, #8
 8001598:	d05c      	beq.n	8001654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d141      	bne.n	8001626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b31      	ldr	r3, [pc, #196]	; (8001668 <HAL_RCC_OscConfig+0x478>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb92 	bl	8000cd0 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fb8e 	bl	8000cd0 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e087      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	3b01      	subs	r3, #1
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	061b      	lsls	r3, r3, #24
 80015f2:	491b      	ldr	r1, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x478>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb67 	bl	8000cd0 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fb63 	bl	8000cd0 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e05c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x416>
 8001624:	e054      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x478>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb50 	bl	8000cd0 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb4c 	bl	8000cd0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e045      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x444>
 8001652:	e03d      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e038      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000
 8001668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x4ec>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d028      	beq.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d121      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d11a      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800169c:	4013      	ands	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d111      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0cc      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b68      	ldr	r3, [pc, #416]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d90c      	bls.n	800171c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b65      	ldr	r3, [pc, #404]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b8      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800173e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a52      	ldr	r2, [pc, #328]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	494d      	ldr	r1, [pc, #308]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d044      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d119      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e07f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d003      	beq.n	800179e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e067      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b37      	ldr	r3, [pc, #220]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4934      	ldr	r1, [pc, #208]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff fa7e 	bl	8000cd0 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fa7a 	bl	8000cd0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e04f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d20c      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e032      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4916      	ldr	r1, [pc, #88]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001866:	f000 f821 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186a:	4602      	mov	r2, r0
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	490a      	ldr	r1, [pc, #40]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	5ccb      	ldrb	r3, [r1, r3]
 800187a:	fa22 f303 	lsr.w	r3, r2, r3
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f9de 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00
 800189c:	40023800 	.word	0x40023800
 80018a0:	08003288 	.word	0x08003288
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b0:	b094      	sub	sp, #80	; 0x50
 80018b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
 80018b8:	2300      	movs	r3, #0
 80018ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018bc:	2300      	movs	r3, #0
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c4:	4b79      	ldr	r3, [pc, #484]	; (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d00d      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x40>
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	f200 80e1 	bhi.w	8001a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018de:	e0db      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018e4:	e0db      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ea:	e0d8      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ec:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f6:	4b6d      	ldr	r3, [pc, #436]	; (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d063      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001902:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	2200      	movs	r2, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
 800190c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800190e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
 800191a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800191e:	4622      	mov	r2, r4
 8001920:	462b      	mov	r3, r5
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	0159      	lsls	r1, r3, #5
 800192c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001930:	0150      	lsls	r0, r2, #5
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4621      	mov	r1, r4
 8001938:	1a51      	subs	r1, r2, r1
 800193a:	6139      	str	r1, [r7, #16]
 800193c:	4629      	mov	r1, r5
 800193e:	eb63 0301 	sbc.w	r3, r3, r1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001950:	4659      	mov	r1, fp
 8001952:	018b      	lsls	r3, r1, #6
 8001954:	4651      	mov	r1, sl
 8001956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800195a:	4651      	mov	r1, sl
 800195c:	018a      	lsls	r2, r1, #6
 800195e:	4651      	mov	r1, sl
 8001960:	ebb2 0801 	subs.w	r8, r2, r1
 8001964:	4659      	mov	r1, fp
 8001966:	eb63 0901 	sbc.w	r9, r3, r1
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800197a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800197e:	4690      	mov	r8, r2
 8001980:	4699      	mov	r9, r3
 8001982:	4623      	mov	r3, r4
 8001984:	eb18 0303 	adds.w	r3, r8, r3
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	462b      	mov	r3, r5
 800198c:	eb49 0303 	adc.w	r3, r9, r3
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800199e:	4629      	mov	r1, r5
 80019a0:	024b      	lsls	r3, r1, #9
 80019a2:	4621      	mov	r1, r4
 80019a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019a8:	4621      	mov	r1, r4
 80019aa:	024a      	lsls	r2, r1, #9
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b2:	2200      	movs	r2, #0
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019bc:	f7fe fc60 	bl	8000280 <__aeabi_uldivmod>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4613      	mov	r3, r2
 80019c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c8:	e058      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	2200      	movs	r2, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	4611      	mov	r1, r2
 80019d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019da:	623b      	str	r3, [r7, #32]
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019e4:	4642      	mov	r2, r8
 80019e6:	464b      	mov	r3, r9
 80019e8:	f04f 0000 	mov.w	r0, #0
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	0159      	lsls	r1, r3, #5
 80019f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f6:	0150      	lsls	r0, r2, #5
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4641      	mov	r1, r8
 80019fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a02:	4649      	mov	r1, r9
 8001a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a20:	eb63 050b 	sbc.w	r5, r3, fp
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	00eb      	lsls	r3, r5, #3
 8001a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a32:	00e2      	lsls	r2, r4, #3
 8001a34:	4614      	mov	r4, r2
 8001a36:	461d      	mov	r5, r3
 8001a38:	4643      	mov	r3, r8
 8001a3a:	18e3      	adds	r3, r4, r3
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	464b      	mov	r3, r9
 8001a40:	eb45 0303 	adc.w	r3, r5, r3
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a52:	4629      	mov	r1, r5
 8001a54:	028b      	lsls	r3, r1, #10
 8001a56:	4621      	mov	r1, r4
 8001a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	028a      	lsls	r2, r1, #10
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	61fa      	str	r2, [r7, #28]
 8001a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a70:	f7fe fc06 	bl	8000280 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3750      	adds	r7, #80	; 0x50
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400
 8001ab4:	007a1200 	.word	0x007a1200

08001ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_RCC_GetHCLKFreq+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000000 	.word	0x20000000

08001ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ad4:	f7ff fff0 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0a9b      	lsrs	r3, r3, #10
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	4903      	ldr	r1, [pc, #12]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae6:	5ccb      	ldrb	r3, [r1, r3]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	08003298 	.word	0x08003298

08001af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001afc:	f7ff ffdc 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0b5b      	lsrs	r3, r3, #13
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4903      	ldr	r1, [pc, #12]	; (8001b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08003298 	.word	0x08003298

08001b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e03f      	b.n	8001bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe ffb6 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f9cb 	bl	8001f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b08a      	sub	sp, #40	; 0x28
 8001bbe:	af02      	add	r7, sp, #8
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d17c      	bne.n	8001cd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_UART_Transmit+0x2c>
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e075      	b.n	8001cd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_UART_Transmit+0x3e>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e06e      	b.n	8001cd6 <HAL_UART_Transmit+0x11c>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2221      	movs	r2, #33	; 0x21
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c0e:	f7ff f85f 	bl	8000cd0 <HAL_GetTick>
 8001c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	88fa      	ldrh	r2, [r7, #6]
 8001c18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	88fa      	ldrh	r2, [r7, #6]
 8001c1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c28:	d108      	bne.n	8001c3c <HAL_UART_Transmit+0x82>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d104      	bne.n	8001c3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	e003      	b.n	8001c44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c4c:	e02a      	b.n	8001ca4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2200      	movs	r2, #0
 8001c56:	2180      	movs	r1, #128	; 0x80
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 f8e2 	bl	8001e22 <UART_WaitOnFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e036      	b.n	8001cd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10b      	bne.n	8001c86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	3302      	adds	r3, #2
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	e007      	b.n	8001c96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1cf      	bne.n	8001c4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2140      	movs	r1, #64	; 0x40
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f8b2 	bl	8001e22 <UART_WaitOnFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e006      	b.n	8001cd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
  }
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3720      	adds	r7, #32
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b08a      	sub	sp, #40	; 0x28
 8001ce2:	af02      	add	r7, sp, #8
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4613      	mov	r3, r2
 8001cec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	f040 808c 	bne.w	8001e18 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_UART_Receive+0x2e>
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e084      	b.n	8001e1a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_UART_Receive+0x40>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e07d      	b.n	8001e1a <HAL_UART_Receive+0x13c>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2222      	movs	r2, #34	; 0x22
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d3a:	f7fe ffc9 	bl	8000cd0 <HAL_GetTick>
 8001d3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	88fa      	ldrh	r2, [r7, #6]
 8001d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d54:	d108      	bne.n	8001d68 <HAL_UART_Receive+0x8a>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d104      	bne.n	8001d68 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	e003      	b.n	8001d70 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d78:	e043      	b.n	8001e02 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2200      	movs	r2, #0
 8001d82:	2120      	movs	r1, #32
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f84c 	bl	8001e22 <UART_WaitOnFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e042      	b.n	8001e1a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	3302      	adds	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	e01f      	b.n	8001df4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dbc:	d007      	beq.n	8001dce <HAL_UART_Receive+0xf0>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10a      	bne.n	8001ddc <HAL_UART_Receive+0xfe>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e008      	b.n	8001dee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1b6      	bne.n	8001d7a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e000      	b.n	8001e1a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b090      	sub	sp, #64	; 0x40
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e32:	e050      	b.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3a:	d04c      	beq.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e42:	f7fe ff45 	bl	8000cd0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d241      	bcs.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	330c      	adds	r3, #12
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	e853 3f00 	ldrex	r3, [r3]
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	330c      	adds	r3, #12
 8001e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e72:	637a      	str	r2, [r7, #52]	; 0x34
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e7a:	e841 2300 	strex	r3, r2, [r1]
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1e5      	bne.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	e853 3f00 	ldrex	r3, [r3]
 8001e94:	613b      	str	r3, [r7, #16]
   return(result);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea6:	623a      	str	r2, [r7, #32]
 8001ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eaa:	69f9      	ldr	r1, [r7, #28]
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	e841 2300 	strex	r3, r2, [r1]
 8001eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1e5      	bne.n	8001e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e00f      	b.n	8001ef6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d09f      	beq.n	8001e34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3740      	adds	r7, #64	; 0x40
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f04:	b0c0      	sub	sp, #256	; 0x100
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1c:	68d9      	ldr	r1, [r3, #12]
 8001f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	ea40 0301 	orr.w	r3, r0, r1
 8001f28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f58:	f021 010c 	bic.w	r1, r1, #12
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f66:	430b      	orrs	r3, r1
 8001f68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7a:	6999      	ldr	r1, [r3, #24]
 8001f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	ea40 0301 	orr.w	r3, r0, r1
 8001f86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b8f      	ldr	r3, [pc, #572]	; (80021cc <UART_SetConfig+0x2cc>)
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d005      	beq.n	8001fa0 <UART_SetConfig+0xa0>
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b8d      	ldr	r3, [pc, #564]	; (80021d0 <UART_SetConfig+0x2d0>)
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d104      	bne.n	8001faa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fa0:	f7ff fdaa 	bl	8001af8 <HAL_RCC_GetPCLK2Freq>
 8001fa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001fa8:	e003      	b.n	8001fb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001faa:	f7ff fd91 	bl	8001ad0 <HAL_RCC_GetPCLK1Freq>
 8001fae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fbc:	f040 810c 	bne.w	80021d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001fca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001fce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	462b      	mov	r3, r5
 8001fd6:	1891      	adds	r1, r2, r2
 8001fd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fda:	415b      	adcs	r3, r3
 8001fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	eb12 0801 	adds.w	r8, r2, r1
 8001fe8:	4629      	mov	r1, r5
 8001fea:	eb43 0901 	adc.w	r9, r3, r1
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002002:	4690      	mov	r8, r2
 8002004:	4699      	mov	r9, r3
 8002006:	4623      	mov	r3, r4
 8002008:	eb18 0303 	adds.w	r3, r8, r3
 800200c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002010:	462b      	mov	r3, r5
 8002012:	eb49 0303 	adc.w	r3, r9, r3
 8002016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800201a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002026:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800202a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800202e:	460b      	mov	r3, r1
 8002030:	18db      	adds	r3, r3, r3
 8002032:	653b      	str	r3, [r7, #80]	; 0x50
 8002034:	4613      	mov	r3, r2
 8002036:	eb42 0303 	adc.w	r3, r2, r3
 800203a:	657b      	str	r3, [r7, #84]	; 0x54
 800203c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002040:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002044:	f7fe f91c 	bl	8000280 <__aeabi_uldivmod>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <UART_SetConfig+0x2d4>)
 800204e:	fba3 2302 	umull	r2, r3, r3, r2
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	011c      	lsls	r4, r3, #4
 8002056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800205a:	2200      	movs	r2, #0
 800205c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002060:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002064:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002068:	4642      	mov	r2, r8
 800206a:	464b      	mov	r3, r9
 800206c:	1891      	adds	r1, r2, r2
 800206e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002070:	415b      	adcs	r3, r3
 8002072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002074:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002078:	4641      	mov	r1, r8
 800207a:	eb12 0a01 	adds.w	sl, r2, r1
 800207e:	4649      	mov	r1, r9
 8002080:	eb43 0b01 	adc.w	fp, r3, r1
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002090:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002098:	4692      	mov	sl, r2
 800209a:	469b      	mov	fp, r3
 800209c:	4643      	mov	r3, r8
 800209e:	eb1a 0303 	adds.w	r3, sl, r3
 80020a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020a6:	464b      	mov	r3, r9
 80020a8:	eb4b 0303 	adc.w	r3, fp, r3
 80020ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020c4:	460b      	mov	r3, r1
 80020c6:	18db      	adds	r3, r3, r3
 80020c8:	643b      	str	r3, [r7, #64]	; 0x40
 80020ca:	4613      	mov	r3, r2
 80020cc:	eb42 0303 	adc.w	r3, r2, r3
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
 80020d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020da:	f7fe f8d1 	bl	8000280 <__aeabi_uldivmod>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <UART_SetConfig+0x2d4>)
 80020e6:	fba3 2301 	umull	r2, r3, r3, r1
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2264      	movs	r2, #100	; 0x64
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	1acb      	subs	r3, r1, r3
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020fa:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <UART_SetConfig+0x2d4>)
 80020fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002108:	441c      	add	r4, r3
 800210a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800210e:	2200      	movs	r2, #0
 8002110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002114:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002118:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800211c:	4642      	mov	r2, r8
 800211e:	464b      	mov	r3, r9
 8002120:	1891      	adds	r1, r2, r2
 8002122:	63b9      	str	r1, [r7, #56]	; 0x38
 8002124:	415b      	adcs	r3, r3
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002128:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800212c:	4641      	mov	r1, r8
 800212e:	1851      	adds	r1, r2, r1
 8002130:	6339      	str	r1, [r7, #48]	; 0x30
 8002132:	4649      	mov	r1, r9
 8002134:	414b      	adcs	r3, r1
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002144:	4659      	mov	r1, fp
 8002146:	00cb      	lsls	r3, r1, #3
 8002148:	4651      	mov	r1, sl
 800214a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800214e:	4651      	mov	r1, sl
 8002150:	00ca      	lsls	r2, r1, #3
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	4603      	mov	r3, r0
 8002158:	4642      	mov	r2, r8
 800215a:	189b      	adds	r3, r3, r2
 800215c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002160:	464b      	mov	r3, r9
 8002162:	460a      	mov	r2, r1
 8002164:	eb42 0303 	adc.w	r3, r2, r3
 8002168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002178:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800217c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002180:	460b      	mov	r3, r1
 8002182:	18db      	adds	r3, r3, r3
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
 8002186:	4613      	mov	r3, r2
 8002188:	eb42 0303 	adc.w	r3, r2, r3
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800218e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002192:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002196:	f7fe f873 	bl	8000280 <__aeabi_uldivmod>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <UART_SetConfig+0x2d4>)
 80021a0:	fba3 1302 	umull	r1, r3, r3, r2
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	2164      	movs	r1, #100	; 0x64
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	3332      	adds	r3, #50	; 0x32
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <UART_SetConfig+0x2d4>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	f003 0207 	and.w	r2, r3, #7
 80021be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4422      	add	r2, r4
 80021c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021c8:	e106      	b.n	80023d8 <UART_SetConfig+0x4d8>
 80021ca:	bf00      	nop
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40011400 	.word	0x40011400
 80021d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021dc:	2200      	movs	r2, #0
 80021de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021ea:	4642      	mov	r2, r8
 80021ec:	464b      	mov	r3, r9
 80021ee:	1891      	adds	r1, r2, r2
 80021f0:	6239      	str	r1, [r7, #32]
 80021f2:	415b      	adcs	r3, r3
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021fa:	4641      	mov	r1, r8
 80021fc:	1854      	adds	r4, r2, r1
 80021fe:	4649      	mov	r1, r9
 8002200:	eb43 0501 	adc.w	r5, r3, r1
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	00eb      	lsls	r3, r5, #3
 800220e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002212:	00e2      	lsls	r2, r4, #3
 8002214:	4614      	mov	r4, r2
 8002216:	461d      	mov	r5, r3
 8002218:	4643      	mov	r3, r8
 800221a:	18e3      	adds	r3, r4, r3
 800221c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002220:	464b      	mov	r3, r9
 8002222:	eb45 0303 	adc.w	r3, r5, r3
 8002226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800222a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002246:	4629      	mov	r1, r5
 8002248:	008b      	lsls	r3, r1, #2
 800224a:	4621      	mov	r1, r4
 800224c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002250:	4621      	mov	r1, r4
 8002252:	008a      	lsls	r2, r1, #2
 8002254:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002258:	f7fe f812 	bl	8000280 <__aeabi_uldivmod>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4b60      	ldr	r3, [pc, #384]	; (80023e4 <UART_SetConfig+0x4e4>)
 8002262:	fba3 2302 	umull	r2, r3, r3, r2
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	011c      	lsls	r4, r3, #4
 800226a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002274:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002278:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800227c:	4642      	mov	r2, r8
 800227e:	464b      	mov	r3, r9
 8002280:	1891      	adds	r1, r2, r2
 8002282:	61b9      	str	r1, [r7, #24]
 8002284:	415b      	adcs	r3, r3
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800228c:	4641      	mov	r1, r8
 800228e:	1851      	adds	r1, r2, r1
 8002290:	6139      	str	r1, [r7, #16]
 8002292:	4649      	mov	r1, r9
 8002294:	414b      	adcs	r3, r1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022a4:	4659      	mov	r1, fp
 80022a6:	00cb      	lsls	r3, r1, #3
 80022a8:	4651      	mov	r1, sl
 80022aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ae:	4651      	mov	r1, sl
 80022b0:	00ca      	lsls	r2, r1, #3
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	4642      	mov	r2, r8
 80022ba:	189b      	adds	r3, r3, r2
 80022bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022c0:	464b      	mov	r3, r9
 80022c2:	460a      	mov	r2, r1
 80022c4:	eb42 0303 	adc.w	r3, r2, r3
 80022c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80022d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022e4:	4649      	mov	r1, r9
 80022e6:	008b      	lsls	r3, r1, #2
 80022e8:	4641      	mov	r1, r8
 80022ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ee:	4641      	mov	r1, r8
 80022f0:	008a      	lsls	r2, r1, #2
 80022f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022f6:	f7fd ffc3 	bl	8000280 <__aeabi_uldivmod>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4611      	mov	r1, r2
 8002300:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <UART_SetConfig+0x4e4>)
 8002302:	fba3 2301 	umull	r2, r3, r3, r1
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2264      	movs	r2, #100	; 0x64
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	1acb      	subs	r3, r1, r3
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	3332      	adds	r3, #50	; 0x32
 8002314:	4a33      	ldr	r2, [pc, #204]	; (80023e4 <UART_SetConfig+0x4e4>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002320:	441c      	add	r4, r3
 8002322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002326:	2200      	movs	r2, #0
 8002328:	673b      	str	r3, [r7, #112]	; 0x70
 800232a:	677a      	str	r2, [r7, #116]	; 0x74
 800232c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002330:	4642      	mov	r2, r8
 8002332:	464b      	mov	r3, r9
 8002334:	1891      	adds	r1, r2, r2
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	415b      	adcs	r3, r3
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002340:	4641      	mov	r1, r8
 8002342:	1851      	adds	r1, r2, r1
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	4649      	mov	r1, r9
 8002348:	414b      	adcs	r3, r1
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002358:	4659      	mov	r1, fp
 800235a:	00cb      	lsls	r3, r1, #3
 800235c:	4651      	mov	r1, sl
 800235e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002362:	4651      	mov	r1, sl
 8002364:	00ca      	lsls	r2, r1, #3
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	4603      	mov	r3, r0
 800236c:	4642      	mov	r2, r8
 800236e:	189b      	adds	r3, r3, r2
 8002370:	66bb      	str	r3, [r7, #104]	; 0x68
 8002372:	464b      	mov	r3, r9
 8002374:	460a      	mov	r2, r1
 8002376:	eb42 0303 	adc.w	r3, r2, r3
 800237a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	663b      	str	r3, [r7, #96]	; 0x60
 8002386:	667a      	str	r2, [r7, #100]	; 0x64
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002394:	4649      	mov	r1, r9
 8002396:	008b      	lsls	r3, r1, #2
 8002398:	4641      	mov	r1, r8
 800239a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800239e:	4641      	mov	r1, r8
 80023a0:	008a      	lsls	r2, r1, #2
 80023a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023a6:	f7fd ff6b 	bl	8000280 <__aeabi_uldivmod>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <UART_SetConfig+0x4e4>)
 80023b0:	fba3 1302 	umull	r1, r3, r3, r2
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	2164      	movs	r1, #100	; 0x64
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	3332      	adds	r3, #50	; 0x32
 80023c2:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <UART_SetConfig+0x4e4>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	f003 020f 	and.w	r2, r3, #15
 80023ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4422      	add	r2, r4
 80023d6:	609a      	str	r2, [r3, #8]
}
 80023d8:	bf00      	nop
 80023da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023de:	46bd      	mov	sp, r7
 80023e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e4:	51eb851f 	.word	0x51eb851f

080023e8 <std>:
 80023e8:	2300      	movs	r3, #0
 80023ea:	b510      	push	{r4, lr}
 80023ec:	4604      	mov	r4, r0
 80023ee:	e9c0 3300 	strd	r3, r3, [r0]
 80023f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023f6:	6083      	str	r3, [r0, #8]
 80023f8:	8181      	strh	r1, [r0, #12]
 80023fa:	6643      	str	r3, [r0, #100]	; 0x64
 80023fc:	81c2      	strh	r2, [r0, #14]
 80023fe:	6183      	str	r3, [r0, #24]
 8002400:	4619      	mov	r1, r3
 8002402:	2208      	movs	r2, #8
 8002404:	305c      	adds	r0, #92	; 0x5c
 8002406:	f000 f906 	bl	8002616 <memset>
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <std+0x58>)
 800240c:	6263      	str	r3, [r4, #36]	; 0x24
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <std+0x5c>)
 8002410:	62a3      	str	r3, [r4, #40]	; 0x28
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <std+0x60>)
 8002414:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <std+0x64>)
 8002418:	6323      	str	r3, [r4, #48]	; 0x30
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <std+0x68>)
 800241c:	6224      	str	r4, [r4, #32]
 800241e:	429c      	cmp	r4, r3
 8002420:	d006      	beq.n	8002430 <std+0x48>
 8002422:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002426:	4294      	cmp	r4, r2
 8002428:	d002      	beq.n	8002430 <std+0x48>
 800242a:	33d0      	adds	r3, #208	; 0xd0
 800242c:	429c      	cmp	r4, r3
 800242e:	d105      	bne.n	800243c <std+0x54>
 8002430:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002438:	f000 b966 	b.w	8002708 <__retarget_lock_init_recursive>
 800243c:	bd10      	pop	{r4, pc}
 800243e:	bf00      	nop
 8002440:	08002591 	.word	0x08002591
 8002444:	080025b3 	.word	0x080025b3
 8002448:	080025eb 	.word	0x080025eb
 800244c:	0800260f 	.word	0x0800260f
 8002450:	20000118 	.word	0x20000118

08002454 <stdio_exit_handler>:
 8002454:	4a02      	ldr	r2, [pc, #8]	; (8002460 <stdio_exit_handler+0xc>)
 8002456:	4903      	ldr	r1, [pc, #12]	; (8002464 <stdio_exit_handler+0x10>)
 8002458:	4803      	ldr	r0, [pc, #12]	; (8002468 <stdio_exit_handler+0x14>)
 800245a:	f000 b869 	b.w	8002530 <_fwalk_sglue>
 800245e:	bf00      	nop
 8002460:	2000000c 	.word	0x2000000c
 8002464:	08002fb5 	.word	0x08002fb5
 8002468:	20000018 	.word	0x20000018

0800246c <cleanup_stdio>:
 800246c:	6841      	ldr	r1, [r0, #4]
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <cleanup_stdio+0x34>)
 8002470:	4299      	cmp	r1, r3
 8002472:	b510      	push	{r4, lr}
 8002474:	4604      	mov	r4, r0
 8002476:	d001      	beq.n	800247c <cleanup_stdio+0x10>
 8002478:	f000 fd9c 	bl	8002fb4 <_fflush_r>
 800247c:	68a1      	ldr	r1, [r4, #8]
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <cleanup_stdio+0x38>)
 8002480:	4299      	cmp	r1, r3
 8002482:	d002      	beq.n	800248a <cleanup_stdio+0x1e>
 8002484:	4620      	mov	r0, r4
 8002486:	f000 fd95 	bl	8002fb4 <_fflush_r>
 800248a:	68e1      	ldr	r1, [r4, #12]
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <cleanup_stdio+0x3c>)
 800248e:	4299      	cmp	r1, r3
 8002490:	d004      	beq.n	800249c <cleanup_stdio+0x30>
 8002492:	4620      	mov	r0, r4
 8002494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002498:	f000 bd8c 	b.w	8002fb4 <_fflush_r>
 800249c:	bd10      	pop	{r4, pc}
 800249e:	bf00      	nop
 80024a0:	20000118 	.word	0x20000118
 80024a4:	20000180 	.word	0x20000180
 80024a8:	200001e8 	.word	0x200001e8

080024ac <global_stdio_init.part.0>:
 80024ac:	b510      	push	{r4, lr}
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <global_stdio_init.part.0+0x30>)
 80024b0:	4c0b      	ldr	r4, [pc, #44]	; (80024e0 <global_stdio_init.part.0+0x34>)
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <global_stdio_init.part.0+0x38>)
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	4620      	mov	r0, r4
 80024b8:	2200      	movs	r2, #0
 80024ba:	2104      	movs	r1, #4
 80024bc:	f7ff ff94 	bl	80023e8 <std>
 80024c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80024c4:	2201      	movs	r2, #1
 80024c6:	2109      	movs	r1, #9
 80024c8:	f7ff ff8e 	bl	80023e8 <std>
 80024cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80024d0:	2202      	movs	r2, #2
 80024d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024d6:	2112      	movs	r1, #18
 80024d8:	f7ff bf86 	b.w	80023e8 <std>
 80024dc:	20000250 	.word	0x20000250
 80024e0:	20000118 	.word	0x20000118
 80024e4:	08002455 	.word	0x08002455

080024e8 <__sfp_lock_acquire>:
 80024e8:	4801      	ldr	r0, [pc, #4]	; (80024f0 <__sfp_lock_acquire+0x8>)
 80024ea:	f000 b90e 	b.w	800270a <__retarget_lock_acquire_recursive>
 80024ee:	bf00      	nop
 80024f0:	20000259 	.word	0x20000259

080024f4 <__sfp_lock_release>:
 80024f4:	4801      	ldr	r0, [pc, #4]	; (80024fc <__sfp_lock_release+0x8>)
 80024f6:	f000 b909 	b.w	800270c <__retarget_lock_release_recursive>
 80024fa:	bf00      	nop
 80024fc:	20000259 	.word	0x20000259

08002500 <__sinit>:
 8002500:	b510      	push	{r4, lr}
 8002502:	4604      	mov	r4, r0
 8002504:	f7ff fff0 	bl	80024e8 <__sfp_lock_acquire>
 8002508:	6a23      	ldr	r3, [r4, #32]
 800250a:	b11b      	cbz	r3, 8002514 <__sinit+0x14>
 800250c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002510:	f7ff bff0 	b.w	80024f4 <__sfp_lock_release>
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__sinit+0x28>)
 8002516:	6223      	str	r3, [r4, #32]
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <__sinit+0x2c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f5      	bne.n	800250c <__sinit+0xc>
 8002520:	f7ff ffc4 	bl	80024ac <global_stdio_init.part.0>
 8002524:	e7f2      	b.n	800250c <__sinit+0xc>
 8002526:	bf00      	nop
 8002528:	0800246d 	.word	0x0800246d
 800252c:	20000250 	.word	0x20000250

08002530 <_fwalk_sglue>:
 8002530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002534:	4607      	mov	r7, r0
 8002536:	4688      	mov	r8, r1
 8002538:	4614      	mov	r4, r2
 800253a:	2600      	movs	r6, #0
 800253c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002540:	f1b9 0901 	subs.w	r9, r9, #1
 8002544:	d505      	bpl.n	8002552 <_fwalk_sglue+0x22>
 8002546:	6824      	ldr	r4, [r4, #0]
 8002548:	2c00      	cmp	r4, #0
 800254a:	d1f7      	bne.n	800253c <_fwalk_sglue+0xc>
 800254c:	4630      	mov	r0, r6
 800254e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002552:	89ab      	ldrh	r3, [r5, #12]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d907      	bls.n	8002568 <_fwalk_sglue+0x38>
 8002558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800255c:	3301      	adds	r3, #1
 800255e:	d003      	beq.n	8002568 <_fwalk_sglue+0x38>
 8002560:	4629      	mov	r1, r5
 8002562:	4638      	mov	r0, r7
 8002564:	47c0      	blx	r8
 8002566:	4306      	orrs	r6, r0
 8002568:	3568      	adds	r5, #104	; 0x68
 800256a:	e7e9      	b.n	8002540 <_fwalk_sglue+0x10>

0800256c <iprintf>:
 800256c:	b40f      	push	{r0, r1, r2, r3}
 800256e:	b507      	push	{r0, r1, r2, lr}
 8002570:	4906      	ldr	r1, [pc, #24]	; (800258c <iprintf+0x20>)
 8002572:	ab04      	add	r3, sp, #16
 8002574:	6808      	ldr	r0, [r1, #0]
 8002576:	f853 2b04 	ldr.w	r2, [r3], #4
 800257a:	6881      	ldr	r1, [r0, #8]
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	f000 f9e9 	bl	8002954 <_vfiprintf_r>
 8002582:	b003      	add	sp, #12
 8002584:	f85d eb04 	ldr.w	lr, [sp], #4
 8002588:	b004      	add	sp, #16
 800258a:	4770      	bx	lr
 800258c:	20000064 	.word	0x20000064

08002590 <__sread>:
 8002590:	b510      	push	{r4, lr}
 8002592:	460c      	mov	r4, r1
 8002594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002598:	f000 f868 	bl	800266c <_read_r>
 800259c:	2800      	cmp	r0, #0
 800259e:	bfab      	itete	ge
 80025a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025a2:	89a3      	ldrhlt	r3, [r4, #12]
 80025a4:	181b      	addge	r3, r3, r0
 80025a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025aa:	bfac      	ite	ge
 80025ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80025ae:	81a3      	strhlt	r3, [r4, #12]
 80025b0:	bd10      	pop	{r4, pc}

080025b2 <__swrite>:
 80025b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025b6:	461f      	mov	r7, r3
 80025b8:	898b      	ldrh	r3, [r1, #12]
 80025ba:	05db      	lsls	r3, r3, #23
 80025bc:	4605      	mov	r5, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	4616      	mov	r6, r2
 80025c2:	d505      	bpl.n	80025d0 <__swrite+0x1e>
 80025c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c8:	2302      	movs	r3, #2
 80025ca:	2200      	movs	r2, #0
 80025cc:	f000 f83c 	bl	8002648 <_lseek_r>
 80025d0:	89a3      	ldrh	r3, [r4, #12]
 80025d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025da:	81a3      	strh	r3, [r4, #12]
 80025dc:	4632      	mov	r2, r6
 80025de:	463b      	mov	r3, r7
 80025e0:	4628      	mov	r0, r5
 80025e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025e6:	f000 b853 	b.w	8002690 <_write_r>

080025ea <__sseek>:
 80025ea:	b510      	push	{r4, lr}
 80025ec:	460c      	mov	r4, r1
 80025ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025f2:	f000 f829 	bl	8002648 <_lseek_r>
 80025f6:	1c43      	adds	r3, r0, #1
 80025f8:	89a3      	ldrh	r3, [r4, #12]
 80025fa:	bf15      	itete	ne
 80025fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80025fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002606:	81a3      	strheq	r3, [r4, #12]
 8002608:	bf18      	it	ne
 800260a:	81a3      	strhne	r3, [r4, #12]
 800260c:	bd10      	pop	{r4, pc}

0800260e <__sclose>:
 800260e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002612:	f000 b809 	b.w	8002628 <_close_r>

08002616 <memset>:
 8002616:	4402      	add	r2, r0
 8002618:	4603      	mov	r3, r0
 800261a:	4293      	cmp	r3, r2
 800261c:	d100      	bne.n	8002620 <memset+0xa>
 800261e:	4770      	bx	lr
 8002620:	f803 1b01 	strb.w	r1, [r3], #1
 8002624:	e7f9      	b.n	800261a <memset+0x4>
	...

08002628 <_close_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	4d06      	ldr	r5, [pc, #24]	; (8002644 <_close_r+0x1c>)
 800262c:	2300      	movs	r3, #0
 800262e:	4604      	mov	r4, r0
 8002630:	4608      	mov	r0, r1
 8002632:	602b      	str	r3, [r5, #0]
 8002634:	f7fe f92b 	bl	800088e <_close>
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	d102      	bne.n	8002642 <_close_r+0x1a>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	b103      	cbz	r3, 8002642 <_close_r+0x1a>
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	bd38      	pop	{r3, r4, r5, pc}
 8002644:	20000254 	.word	0x20000254

08002648 <_lseek_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4d07      	ldr	r5, [pc, #28]	; (8002668 <_lseek_r+0x20>)
 800264c:	4604      	mov	r4, r0
 800264e:	4608      	mov	r0, r1
 8002650:	4611      	mov	r1, r2
 8002652:	2200      	movs	r2, #0
 8002654:	602a      	str	r2, [r5, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	f7fe f940 	bl	80008dc <_lseek>
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	d102      	bne.n	8002666 <_lseek_r+0x1e>
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	b103      	cbz	r3, 8002666 <_lseek_r+0x1e>
 8002664:	6023      	str	r3, [r4, #0]
 8002666:	bd38      	pop	{r3, r4, r5, pc}
 8002668:	20000254 	.word	0x20000254

0800266c <_read_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4d07      	ldr	r5, [pc, #28]	; (800268c <_read_r+0x20>)
 8002670:	4604      	mov	r4, r0
 8002672:	4608      	mov	r0, r1
 8002674:	4611      	mov	r1, r2
 8002676:	2200      	movs	r2, #0
 8002678:	602a      	str	r2, [r5, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	f7fe f8ce 	bl	800081c <_read>
 8002680:	1c43      	adds	r3, r0, #1
 8002682:	d102      	bne.n	800268a <_read_r+0x1e>
 8002684:	682b      	ldr	r3, [r5, #0]
 8002686:	b103      	cbz	r3, 800268a <_read_r+0x1e>
 8002688:	6023      	str	r3, [r4, #0]
 800268a:	bd38      	pop	{r3, r4, r5, pc}
 800268c:	20000254 	.word	0x20000254

08002690 <_write_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4d07      	ldr	r5, [pc, #28]	; (80026b0 <_write_r+0x20>)
 8002694:	4604      	mov	r4, r0
 8002696:	4608      	mov	r0, r1
 8002698:	4611      	mov	r1, r2
 800269a:	2200      	movs	r2, #0
 800269c:	602a      	str	r2, [r5, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	f7fe f8d9 	bl	8000856 <_write>
 80026a4:	1c43      	adds	r3, r0, #1
 80026a6:	d102      	bne.n	80026ae <_write_r+0x1e>
 80026a8:	682b      	ldr	r3, [r5, #0]
 80026aa:	b103      	cbz	r3, 80026ae <_write_r+0x1e>
 80026ac:	6023      	str	r3, [r4, #0]
 80026ae:	bd38      	pop	{r3, r4, r5, pc}
 80026b0:	20000254 	.word	0x20000254

080026b4 <__errno>:
 80026b4:	4b01      	ldr	r3, [pc, #4]	; (80026bc <__errno+0x8>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000064 	.word	0x20000064

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4d0d      	ldr	r5, [pc, #52]	; (80026f8 <__libc_init_array+0x38>)
 80026c4:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <__libc_init_array+0x3c>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	2600      	movs	r6, #0
 80026cc:	42a6      	cmp	r6, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	4d0b      	ldr	r5, [pc, #44]	; (8002700 <__libc_init_array+0x40>)
 80026d2:	4c0c      	ldr	r4, [pc, #48]	; (8002704 <__libc_init_array+0x44>)
 80026d4:	f000 fdc0 	bl	8003258 <_init>
 80026d8:	1b64      	subs	r4, r4, r5
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	2600      	movs	r6, #0
 80026de:	42a6      	cmp	r6, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e8:	4798      	blx	r3
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f2:	4798      	blx	r3
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	080032dc 	.word	0x080032dc
 80026fc:	080032dc 	.word	0x080032dc
 8002700:	080032dc 	.word	0x080032dc
 8002704:	080032e0 	.word	0x080032e0

08002708 <__retarget_lock_init_recursive>:
 8002708:	4770      	bx	lr

0800270a <__retarget_lock_acquire_recursive>:
 800270a:	4770      	bx	lr

0800270c <__retarget_lock_release_recursive>:
 800270c:	4770      	bx	lr
	...

08002710 <_free_r>:
 8002710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002712:	2900      	cmp	r1, #0
 8002714:	d044      	beq.n	80027a0 <_free_r+0x90>
 8002716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800271a:	9001      	str	r0, [sp, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f1a1 0404 	sub.w	r4, r1, #4
 8002722:	bfb8      	it	lt
 8002724:	18e4      	addlt	r4, r4, r3
 8002726:	f000 f8df 	bl	80028e8 <__malloc_lock>
 800272a:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <_free_r+0x94>)
 800272c:	9801      	ldr	r0, [sp, #4]
 800272e:	6813      	ldr	r3, [r2, #0]
 8002730:	b933      	cbnz	r3, 8002740 <_free_r+0x30>
 8002732:	6063      	str	r3, [r4, #4]
 8002734:	6014      	str	r4, [r2, #0]
 8002736:	b003      	add	sp, #12
 8002738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800273c:	f000 b8da 	b.w	80028f4 <__malloc_unlock>
 8002740:	42a3      	cmp	r3, r4
 8002742:	d908      	bls.n	8002756 <_free_r+0x46>
 8002744:	6825      	ldr	r5, [r4, #0]
 8002746:	1961      	adds	r1, r4, r5
 8002748:	428b      	cmp	r3, r1
 800274a:	bf01      	itttt	eq
 800274c:	6819      	ldreq	r1, [r3, #0]
 800274e:	685b      	ldreq	r3, [r3, #4]
 8002750:	1949      	addeq	r1, r1, r5
 8002752:	6021      	streq	r1, [r4, #0]
 8002754:	e7ed      	b.n	8002732 <_free_r+0x22>
 8002756:	461a      	mov	r2, r3
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	b10b      	cbz	r3, 8002760 <_free_r+0x50>
 800275c:	42a3      	cmp	r3, r4
 800275e:	d9fa      	bls.n	8002756 <_free_r+0x46>
 8002760:	6811      	ldr	r1, [r2, #0]
 8002762:	1855      	adds	r5, r2, r1
 8002764:	42a5      	cmp	r5, r4
 8002766:	d10b      	bne.n	8002780 <_free_r+0x70>
 8002768:	6824      	ldr	r4, [r4, #0]
 800276a:	4421      	add	r1, r4
 800276c:	1854      	adds	r4, r2, r1
 800276e:	42a3      	cmp	r3, r4
 8002770:	6011      	str	r1, [r2, #0]
 8002772:	d1e0      	bne.n	8002736 <_free_r+0x26>
 8002774:	681c      	ldr	r4, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	6053      	str	r3, [r2, #4]
 800277a:	440c      	add	r4, r1
 800277c:	6014      	str	r4, [r2, #0]
 800277e:	e7da      	b.n	8002736 <_free_r+0x26>
 8002780:	d902      	bls.n	8002788 <_free_r+0x78>
 8002782:	230c      	movs	r3, #12
 8002784:	6003      	str	r3, [r0, #0]
 8002786:	e7d6      	b.n	8002736 <_free_r+0x26>
 8002788:	6825      	ldr	r5, [r4, #0]
 800278a:	1961      	adds	r1, r4, r5
 800278c:	428b      	cmp	r3, r1
 800278e:	bf04      	itt	eq
 8002790:	6819      	ldreq	r1, [r3, #0]
 8002792:	685b      	ldreq	r3, [r3, #4]
 8002794:	6063      	str	r3, [r4, #4]
 8002796:	bf04      	itt	eq
 8002798:	1949      	addeq	r1, r1, r5
 800279a:	6021      	streq	r1, [r4, #0]
 800279c:	6054      	str	r4, [r2, #4]
 800279e:	e7ca      	b.n	8002736 <_free_r+0x26>
 80027a0:	b003      	add	sp, #12
 80027a2:	bd30      	pop	{r4, r5, pc}
 80027a4:	2000025c 	.word	0x2000025c

080027a8 <sbrk_aligned>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	4e0e      	ldr	r6, [pc, #56]	; (80027e4 <sbrk_aligned+0x3c>)
 80027ac:	460c      	mov	r4, r1
 80027ae:	6831      	ldr	r1, [r6, #0]
 80027b0:	4605      	mov	r5, r0
 80027b2:	b911      	cbnz	r1, 80027ba <sbrk_aligned+0x12>
 80027b4:	f000 fcbc 	bl	8003130 <_sbrk_r>
 80027b8:	6030      	str	r0, [r6, #0]
 80027ba:	4621      	mov	r1, r4
 80027bc:	4628      	mov	r0, r5
 80027be:	f000 fcb7 	bl	8003130 <_sbrk_r>
 80027c2:	1c43      	adds	r3, r0, #1
 80027c4:	d00a      	beq.n	80027dc <sbrk_aligned+0x34>
 80027c6:	1cc4      	adds	r4, r0, #3
 80027c8:	f024 0403 	bic.w	r4, r4, #3
 80027cc:	42a0      	cmp	r0, r4
 80027ce:	d007      	beq.n	80027e0 <sbrk_aligned+0x38>
 80027d0:	1a21      	subs	r1, r4, r0
 80027d2:	4628      	mov	r0, r5
 80027d4:	f000 fcac 	bl	8003130 <_sbrk_r>
 80027d8:	3001      	adds	r0, #1
 80027da:	d101      	bne.n	80027e0 <sbrk_aligned+0x38>
 80027dc:	f04f 34ff 	mov.w	r4, #4294967295
 80027e0:	4620      	mov	r0, r4
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	20000260 	.word	0x20000260

080027e8 <_malloc_r>:
 80027e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ec:	1ccd      	adds	r5, r1, #3
 80027ee:	f025 0503 	bic.w	r5, r5, #3
 80027f2:	3508      	adds	r5, #8
 80027f4:	2d0c      	cmp	r5, #12
 80027f6:	bf38      	it	cc
 80027f8:	250c      	movcc	r5, #12
 80027fa:	2d00      	cmp	r5, #0
 80027fc:	4607      	mov	r7, r0
 80027fe:	db01      	blt.n	8002804 <_malloc_r+0x1c>
 8002800:	42a9      	cmp	r1, r5
 8002802:	d905      	bls.n	8002810 <_malloc_r+0x28>
 8002804:	230c      	movs	r3, #12
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	2600      	movs	r6, #0
 800280a:	4630      	mov	r0, r6
 800280c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002810:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80028e4 <_malloc_r+0xfc>
 8002814:	f000 f868 	bl	80028e8 <__malloc_lock>
 8002818:	f8d8 3000 	ldr.w	r3, [r8]
 800281c:	461c      	mov	r4, r3
 800281e:	bb5c      	cbnz	r4, 8002878 <_malloc_r+0x90>
 8002820:	4629      	mov	r1, r5
 8002822:	4638      	mov	r0, r7
 8002824:	f7ff ffc0 	bl	80027a8 <sbrk_aligned>
 8002828:	1c43      	adds	r3, r0, #1
 800282a:	4604      	mov	r4, r0
 800282c:	d155      	bne.n	80028da <_malloc_r+0xf2>
 800282e:	f8d8 4000 	ldr.w	r4, [r8]
 8002832:	4626      	mov	r6, r4
 8002834:	2e00      	cmp	r6, #0
 8002836:	d145      	bne.n	80028c4 <_malloc_r+0xdc>
 8002838:	2c00      	cmp	r4, #0
 800283a:	d048      	beq.n	80028ce <_malloc_r+0xe6>
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	4631      	mov	r1, r6
 8002840:	4638      	mov	r0, r7
 8002842:	eb04 0903 	add.w	r9, r4, r3
 8002846:	f000 fc73 	bl	8003130 <_sbrk_r>
 800284a:	4581      	cmp	r9, r0
 800284c:	d13f      	bne.n	80028ce <_malloc_r+0xe6>
 800284e:	6821      	ldr	r1, [r4, #0]
 8002850:	1a6d      	subs	r5, r5, r1
 8002852:	4629      	mov	r1, r5
 8002854:	4638      	mov	r0, r7
 8002856:	f7ff ffa7 	bl	80027a8 <sbrk_aligned>
 800285a:	3001      	adds	r0, #1
 800285c:	d037      	beq.n	80028ce <_malloc_r+0xe6>
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	442b      	add	r3, r5
 8002862:	6023      	str	r3, [r4, #0]
 8002864:	f8d8 3000 	ldr.w	r3, [r8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d038      	beq.n	80028de <_malloc_r+0xf6>
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	42a2      	cmp	r2, r4
 8002870:	d12b      	bne.n	80028ca <_malloc_r+0xe2>
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e00f      	b.n	8002898 <_malloc_r+0xb0>
 8002878:	6822      	ldr	r2, [r4, #0]
 800287a:	1b52      	subs	r2, r2, r5
 800287c:	d41f      	bmi.n	80028be <_malloc_r+0xd6>
 800287e:	2a0b      	cmp	r2, #11
 8002880:	d917      	bls.n	80028b2 <_malloc_r+0xca>
 8002882:	1961      	adds	r1, r4, r5
 8002884:	42a3      	cmp	r3, r4
 8002886:	6025      	str	r5, [r4, #0]
 8002888:	bf18      	it	ne
 800288a:	6059      	strne	r1, [r3, #4]
 800288c:	6863      	ldr	r3, [r4, #4]
 800288e:	bf08      	it	eq
 8002890:	f8c8 1000 	streq.w	r1, [r8]
 8002894:	5162      	str	r2, [r4, r5]
 8002896:	604b      	str	r3, [r1, #4]
 8002898:	4638      	mov	r0, r7
 800289a:	f104 060b 	add.w	r6, r4, #11
 800289e:	f000 f829 	bl	80028f4 <__malloc_unlock>
 80028a2:	f026 0607 	bic.w	r6, r6, #7
 80028a6:	1d23      	adds	r3, r4, #4
 80028a8:	1af2      	subs	r2, r6, r3
 80028aa:	d0ae      	beq.n	800280a <_malloc_r+0x22>
 80028ac:	1b9b      	subs	r3, r3, r6
 80028ae:	50a3      	str	r3, [r4, r2]
 80028b0:	e7ab      	b.n	800280a <_malloc_r+0x22>
 80028b2:	42a3      	cmp	r3, r4
 80028b4:	6862      	ldr	r2, [r4, #4]
 80028b6:	d1dd      	bne.n	8002874 <_malloc_r+0x8c>
 80028b8:	f8c8 2000 	str.w	r2, [r8]
 80028bc:	e7ec      	b.n	8002898 <_malloc_r+0xb0>
 80028be:	4623      	mov	r3, r4
 80028c0:	6864      	ldr	r4, [r4, #4]
 80028c2:	e7ac      	b.n	800281e <_malloc_r+0x36>
 80028c4:	4634      	mov	r4, r6
 80028c6:	6876      	ldr	r6, [r6, #4]
 80028c8:	e7b4      	b.n	8002834 <_malloc_r+0x4c>
 80028ca:	4613      	mov	r3, r2
 80028cc:	e7cc      	b.n	8002868 <_malloc_r+0x80>
 80028ce:	230c      	movs	r3, #12
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	4638      	mov	r0, r7
 80028d4:	f000 f80e 	bl	80028f4 <__malloc_unlock>
 80028d8:	e797      	b.n	800280a <_malloc_r+0x22>
 80028da:	6025      	str	r5, [r4, #0]
 80028dc:	e7dc      	b.n	8002898 <_malloc_r+0xb0>
 80028de:	605b      	str	r3, [r3, #4]
 80028e0:	deff      	udf	#255	; 0xff
 80028e2:	bf00      	nop
 80028e4:	2000025c 	.word	0x2000025c

080028e8 <__malloc_lock>:
 80028e8:	4801      	ldr	r0, [pc, #4]	; (80028f0 <__malloc_lock+0x8>)
 80028ea:	f7ff bf0e 	b.w	800270a <__retarget_lock_acquire_recursive>
 80028ee:	bf00      	nop
 80028f0:	20000258 	.word	0x20000258

080028f4 <__malloc_unlock>:
 80028f4:	4801      	ldr	r0, [pc, #4]	; (80028fc <__malloc_unlock+0x8>)
 80028f6:	f7ff bf09 	b.w	800270c <__retarget_lock_release_recursive>
 80028fa:	bf00      	nop
 80028fc:	20000258 	.word	0x20000258

08002900 <__sfputc_r>:
 8002900:	6893      	ldr	r3, [r2, #8]
 8002902:	3b01      	subs	r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	b410      	push	{r4}
 8002908:	6093      	str	r3, [r2, #8]
 800290a:	da08      	bge.n	800291e <__sfputc_r+0x1e>
 800290c:	6994      	ldr	r4, [r2, #24]
 800290e:	42a3      	cmp	r3, r4
 8002910:	db01      	blt.n	8002916 <__sfputc_r+0x16>
 8002912:	290a      	cmp	r1, #10
 8002914:	d103      	bne.n	800291e <__sfputc_r+0x1e>
 8002916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800291a:	f000 bb73 	b.w	8003004 <__swbuf_r>
 800291e:	6813      	ldr	r3, [r2, #0]
 8002920:	1c58      	adds	r0, r3, #1
 8002922:	6010      	str	r0, [r2, #0]
 8002924:	7019      	strb	r1, [r3, #0]
 8002926:	4608      	mov	r0, r1
 8002928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800292c:	4770      	bx	lr

0800292e <__sfputs_r>:
 800292e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002930:	4606      	mov	r6, r0
 8002932:	460f      	mov	r7, r1
 8002934:	4614      	mov	r4, r2
 8002936:	18d5      	adds	r5, r2, r3
 8002938:	42ac      	cmp	r4, r5
 800293a:	d101      	bne.n	8002940 <__sfputs_r+0x12>
 800293c:	2000      	movs	r0, #0
 800293e:	e007      	b.n	8002950 <__sfputs_r+0x22>
 8002940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002944:	463a      	mov	r2, r7
 8002946:	4630      	mov	r0, r6
 8002948:	f7ff ffda 	bl	8002900 <__sfputc_r>
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	d1f3      	bne.n	8002938 <__sfputs_r+0xa>
 8002950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002954 <_vfiprintf_r>:
 8002954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002958:	460d      	mov	r5, r1
 800295a:	b09d      	sub	sp, #116	; 0x74
 800295c:	4614      	mov	r4, r2
 800295e:	4698      	mov	r8, r3
 8002960:	4606      	mov	r6, r0
 8002962:	b118      	cbz	r0, 800296c <_vfiprintf_r+0x18>
 8002964:	6a03      	ldr	r3, [r0, #32]
 8002966:	b90b      	cbnz	r3, 800296c <_vfiprintf_r+0x18>
 8002968:	f7ff fdca 	bl	8002500 <__sinit>
 800296c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800296e:	07d9      	lsls	r1, r3, #31
 8002970:	d405      	bmi.n	800297e <_vfiprintf_r+0x2a>
 8002972:	89ab      	ldrh	r3, [r5, #12]
 8002974:	059a      	lsls	r2, r3, #22
 8002976:	d402      	bmi.n	800297e <_vfiprintf_r+0x2a>
 8002978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800297a:	f7ff fec6 	bl	800270a <__retarget_lock_acquire_recursive>
 800297e:	89ab      	ldrh	r3, [r5, #12]
 8002980:	071b      	lsls	r3, r3, #28
 8002982:	d501      	bpl.n	8002988 <_vfiprintf_r+0x34>
 8002984:	692b      	ldr	r3, [r5, #16]
 8002986:	b99b      	cbnz	r3, 80029b0 <_vfiprintf_r+0x5c>
 8002988:	4629      	mov	r1, r5
 800298a:	4630      	mov	r0, r6
 800298c:	f000 fb78 	bl	8003080 <__swsetup_r>
 8002990:	b170      	cbz	r0, 80029b0 <_vfiprintf_r+0x5c>
 8002992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002994:	07dc      	lsls	r4, r3, #31
 8002996:	d504      	bpl.n	80029a2 <_vfiprintf_r+0x4e>
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	b01d      	add	sp, #116	; 0x74
 800299e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029a2:	89ab      	ldrh	r3, [r5, #12]
 80029a4:	0598      	lsls	r0, r3, #22
 80029a6:	d4f7      	bmi.n	8002998 <_vfiprintf_r+0x44>
 80029a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029aa:	f7ff feaf 	bl	800270c <__retarget_lock_release_recursive>
 80029ae:	e7f3      	b.n	8002998 <_vfiprintf_r+0x44>
 80029b0:	2300      	movs	r3, #0
 80029b2:	9309      	str	r3, [sp, #36]	; 0x24
 80029b4:	2320      	movs	r3, #32
 80029b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80029be:	2330      	movs	r3, #48	; 0x30
 80029c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002b74 <_vfiprintf_r+0x220>
 80029c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029c8:	f04f 0901 	mov.w	r9, #1
 80029cc:	4623      	mov	r3, r4
 80029ce:	469a      	mov	sl, r3
 80029d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029d4:	b10a      	cbz	r2, 80029da <_vfiprintf_r+0x86>
 80029d6:	2a25      	cmp	r2, #37	; 0x25
 80029d8:	d1f9      	bne.n	80029ce <_vfiprintf_r+0x7a>
 80029da:	ebba 0b04 	subs.w	fp, sl, r4
 80029de:	d00b      	beq.n	80029f8 <_vfiprintf_r+0xa4>
 80029e0:	465b      	mov	r3, fp
 80029e2:	4622      	mov	r2, r4
 80029e4:	4629      	mov	r1, r5
 80029e6:	4630      	mov	r0, r6
 80029e8:	f7ff ffa1 	bl	800292e <__sfputs_r>
 80029ec:	3001      	adds	r0, #1
 80029ee:	f000 80a9 	beq.w	8002b44 <_vfiprintf_r+0x1f0>
 80029f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029f4:	445a      	add	r2, fp
 80029f6:	9209      	str	r2, [sp, #36]	; 0x24
 80029f8:	f89a 3000 	ldrb.w	r3, [sl]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a1 	beq.w	8002b44 <_vfiprintf_r+0x1f0>
 8002a02:	2300      	movs	r3, #0
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a0c:	f10a 0a01 	add.w	sl, sl, #1
 8002a10:	9304      	str	r3, [sp, #16]
 8002a12:	9307      	str	r3, [sp, #28]
 8002a14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a18:	931a      	str	r3, [sp, #104]	; 0x68
 8002a1a:	4654      	mov	r4, sl
 8002a1c:	2205      	movs	r2, #5
 8002a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a22:	4854      	ldr	r0, [pc, #336]	; (8002b74 <_vfiprintf_r+0x220>)
 8002a24:	f7fd fbdc 	bl	80001e0 <memchr>
 8002a28:	9a04      	ldr	r2, [sp, #16]
 8002a2a:	b9d8      	cbnz	r0, 8002a64 <_vfiprintf_r+0x110>
 8002a2c:	06d1      	lsls	r1, r2, #27
 8002a2e:	bf44      	itt	mi
 8002a30:	2320      	movmi	r3, #32
 8002a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a36:	0713      	lsls	r3, r2, #28
 8002a38:	bf44      	itt	mi
 8002a3a:	232b      	movmi	r3, #43	; 0x2b
 8002a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a40:	f89a 3000 	ldrb.w	r3, [sl]
 8002a44:	2b2a      	cmp	r3, #42	; 0x2a
 8002a46:	d015      	beq.n	8002a74 <_vfiprintf_r+0x120>
 8002a48:	9a07      	ldr	r2, [sp, #28]
 8002a4a:	4654      	mov	r4, sl
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f04f 0c0a 	mov.w	ip, #10
 8002a52:	4621      	mov	r1, r4
 8002a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a58:	3b30      	subs	r3, #48	; 0x30
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	d94d      	bls.n	8002afa <_vfiprintf_r+0x1a6>
 8002a5e:	b1b0      	cbz	r0, 8002a8e <_vfiprintf_r+0x13a>
 8002a60:	9207      	str	r2, [sp, #28]
 8002a62:	e014      	b.n	8002a8e <_vfiprintf_r+0x13a>
 8002a64:	eba0 0308 	sub.w	r3, r0, r8
 8002a68:	fa09 f303 	lsl.w	r3, r9, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	9304      	str	r3, [sp, #16]
 8002a70:	46a2      	mov	sl, r4
 8002a72:	e7d2      	b.n	8002a1a <_vfiprintf_r+0xc6>
 8002a74:	9b03      	ldr	r3, [sp, #12]
 8002a76:	1d19      	adds	r1, r3, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	9103      	str	r1, [sp, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bfbb      	ittet	lt
 8002a80:	425b      	neglt	r3, r3
 8002a82:	f042 0202 	orrlt.w	r2, r2, #2
 8002a86:	9307      	strge	r3, [sp, #28]
 8002a88:	9307      	strlt	r3, [sp, #28]
 8002a8a:	bfb8      	it	lt
 8002a8c:	9204      	strlt	r2, [sp, #16]
 8002a8e:	7823      	ldrb	r3, [r4, #0]
 8002a90:	2b2e      	cmp	r3, #46	; 0x2e
 8002a92:	d10c      	bne.n	8002aae <_vfiprintf_r+0x15a>
 8002a94:	7863      	ldrb	r3, [r4, #1]
 8002a96:	2b2a      	cmp	r3, #42	; 0x2a
 8002a98:	d134      	bne.n	8002b04 <_vfiprintf_r+0x1b0>
 8002a9a:	9b03      	ldr	r3, [sp, #12]
 8002a9c:	1d1a      	adds	r2, r3, #4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	9203      	str	r2, [sp, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bfb8      	it	lt
 8002aa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002aaa:	3402      	adds	r4, #2
 8002aac:	9305      	str	r3, [sp, #20]
 8002aae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002b84 <_vfiprintf_r+0x230>
 8002ab2:	7821      	ldrb	r1, [r4, #0]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	4650      	mov	r0, sl
 8002ab8:	f7fd fb92 	bl	80001e0 <memchr>
 8002abc:	b138      	cbz	r0, 8002ace <_vfiprintf_r+0x17a>
 8002abe:	9b04      	ldr	r3, [sp, #16]
 8002ac0:	eba0 000a 	sub.w	r0, r0, sl
 8002ac4:	2240      	movs	r2, #64	; 0x40
 8002ac6:	4082      	lsls	r2, r0
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	3401      	adds	r4, #1
 8002acc:	9304      	str	r3, [sp, #16]
 8002ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ad2:	4829      	ldr	r0, [pc, #164]	; (8002b78 <_vfiprintf_r+0x224>)
 8002ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ad8:	2206      	movs	r2, #6
 8002ada:	f7fd fb81 	bl	80001e0 <memchr>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d03f      	beq.n	8002b62 <_vfiprintf_r+0x20e>
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <_vfiprintf_r+0x228>)
 8002ae4:	bb1b      	cbnz	r3, 8002b2e <_vfiprintf_r+0x1da>
 8002ae6:	9b03      	ldr	r3, [sp, #12]
 8002ae8:	3307      	adds	r3, #7
 8002aea:	f023 0307 	bic.w	r3, r3, #7
 8002aee:	3308      	adds	r3, #8
 8002af0:	9303      	str	r3, [sp, #12]
 8002af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002af4:	443b      	add	r3, r7
 8002af6:	9309      	str	r3, [sp, #36]	; 0x24
 8002af8:	e768      	b.n	80029cc <_vfiprintf_r+0x78>
 8002afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8002afe:	460c      	mov	r4, r1
 8002b00:	2001      	movs	r0, #1
 8002b02:	e7a6      	b.n	8002a52 <_vfiprintf_r+0xfe>
 8002b04:	2300      	movs	r3, #0
 8002b06:	3401      	adds	r4, #1
 8002b08:	9305      	str	r3, [sp, #20]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f04f 0c0a 	mov.w	ip, #10
 8002b10:	4620      	mov	r0, r4
 8002b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b16:	3a30      	subs	r2, #48	; 0x30
 8002b18:	2a09      	cmp	r2, #9
 8002b1a:	d903      	bls.n	8002b24 <_vfiprintf_r+0x1d0>
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0c6      	beq.n	8002aae <_vfiprintf_r+0x15a>
 8002b20:	9105      	str	r1, [sp, #20]
 8002b22:	e7c4      	b.n	8002aae <_vfiprintf_r+0x15a>
 8002b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b28:	4604      	mov	r4, r0
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e7f0      	b.n	8002b10 <_vfiprintf_r+0x1bc>
 8002b2e:	ab03      	add	r3, sp, #12
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	462a      	mov	r2, r5
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <_vfiprintf_r+0x22c>)
 8002b36:	a904      	add	r1, sp, #16
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f3af 8000 	nop.w
 8002b3e:	4607      	mov	r7, r0
 8002b40:	1c78      	adds	r0, r7, #1
 8002b42:	d1d6      	bne.n	8002af2 <_vfiprintf_r+0x19e>
 8002b44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b46:	07d9      	lsls	r1, r3, #31
 8002b48:	d405      	bmi.n	8002b56 <_vfiprintf_r+0x202>
 8002b4a:	89ab      	ldrh	r3, [r5, #12]
 8002b4c:	059a      	lsls	r2, r3, #22
 8002b4e:	d402      	bmi.n	8002b56 <_vfiprintf_r+0x202>
 8002b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b52:	f7ff fddb 	bl	800270c <__retarget_lock_release_recursive>
 8002b56:	89ab      	ldrh	r3, [r5, #12]
 8002b58:	065b      	lsls	r3, r3, #25
 8002b5a:	f53f af1d 	bmi.w	8002998 <_vfiprintf_r+0x44>
 8002b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b60:	e71c      	b.n	800299c <_vfiprintf_r+0x48>
 8002b62:	ab03      	add	r3, sp, #12
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	462a      	mov	r2, r5
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <_vfiprintf_r+0x22c>)
 8002b6a:	a904      	add	r1, sp, #16
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	f000 f879 	bl	8002c64 <_printf_i>
 8002b72:	e7e4      	b.n	8002b3e <_vfiprintf_r+0x1ea>
 8002b74:	080032a0 	.word	0x080032a0
 8002b78:	080032aa 	.word	0x080032aa
 8002b7c:	00000000 	.word	0x00000000
 8002b80:	0800292f 	.word	0x0800292f
 8002b84:	080032a6 	.word	0x080032a6

08002b88 <_printf_common>:
 8002b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b8c:	4616      	mov	r6, r2
 8002b8e:	4699      	mov	r9, r3
 8002b90:	688a      	ldr	r2, [r1, #8]
 8002b92:	690b      	ldr	r3, [r1, #16]
 8002b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bfb8      	it	lt
 8002b9c:	4613      	movlt	r3, r2
 8002b9e:	6033      	str	r3, [r6, #0]
 8002ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ba4:	4607      	mov	r7, r0
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	b10a      	cbz	r2, 8002bae <_printf_common+0x26>
 8002baa:	3301      	adds	r3, #1
 8002bac:	6033      	str	r3, [r6, #0]
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	0699      	lsls	r1, r3, #26
 8002bb2:	bf42      	ittt	mi
 8002bb4:	6833      	ldrmi	r3, [r6, #0]
 8002bb6:	3302      	addmi	r3, #2
 8002bb8:	6033      	strmi	r3, [r6, #0]
 8002bba:	6825      	ldr	r5, [r4, #0]
 8002bbc:	f015 0506 	ands.w	r5, r5, #6
 8002bc0:	d106      	bne.n	8002bd0 <_printf_common+0x48>
 8002bc2:	f104 0a19 	add.w	sl, r4, #25
 8002bc6:	68e3      	ldr	r3, [r4, #12]
 8002bc8:	6832      	ldr	r2, [r6, #0]
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	42ab      	cmp	r3, r5
 8002bce:	dc26      	bgt.n	8002c1e <_printf_common+0x96>
 8002bd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bd4:	1e13      	subs	r3, r2, #0
 8002bd6:	6822      	ldr	r2, [r4, #0]
 8002bd8:	bf18      	it	ne
 8002bda:	2301      	movne	r3, #1
 8002bdc:	0692      	lsls	r2, r2, #26
 8002bde:	d42b      	bmi.n	8002c38 <_printf_common+0xb0>
 8002be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002be4:	4649      	mov	r1, r9
 8002be6:	4638      	mov	r0, r7
 8002be8:	47c0      	blx	r8
 8002bea:	3001      	adds	r0, #1
 8002bec:	d01e      	beq.n	8002c2c <_printf_common+0xa4>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	6922      	ldr	r2, [r4, #16]
 8002bf2:	f003 0306 	and.w	r3, r3, #6
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf02      	ittt	eq
 8002bfa:	68e5      	ldreq	r5, [r4, #12]
 8002bfc:	6833      	ldreq	r3, [r6, #0]
 8002bfe:	1aed      	subeq	r5, r5, r3
 8002c00:	68a3      	ldr	r3, [r4, #8]
 8002c02:	bf0c      	ite	eq
 8002c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c08:	2500      	movne	r5, #0
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	bfc4      	itt	gt
 8002c0e:	1a9b      	subgt	r3, r3, r2
 8002c10:	18ed      	addgt	r5, r5, r3
 8002c12:	2600      	movs	r6, #0
 8002c14:	341a      	adds	r4, #26
 8002c16:	42b5      	cmp	r5, r6
 8002c18:	d11a      	bne.n	8002c50 <_printf_common+0xc8>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	e008      	b.n	8002c30 <_printf_common+0xa8>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	4652      	mov	r2, sl
 8002c22:	4649      	mov	r1, r9
 8002c24:	4638      	mov	r0, r7
 8002c26:	47c0      	blx	r8
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d103      	bne.n	8002c34 <_printf_common+0xac>
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c34:	3501      	adds	r5, #1
 8002c36:	e7c6      	b.n	8002bc6 <_printf_common+0x3e>
 8002c38:	18e1      	adds	r1, r4, r3
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	2030      	movs	r0, #48	; 0x30
 8002c3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c42:	4422      	add	r2, r4
 8002c44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	e7c7      	b.n	8002be0 <_printf_common+0x58>
 8002c50:	2301      	movs	r3, #1
 8002c52:	4622      	mov	r2, r4
 8002c54:	4649      	mov	r1, r9
 8002c56:	4638      	mov	r0, r7
 8002c58:	47c0      	blx	r8
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	d0e6      	beq.n	8002c2c <_printf_common+0xa4>
 8002c5e:	3601      	adds	r6, #1
 8002c60:	e7d9      	b.n	8002c16 <_printf_common+0x8e>
	...

08002c64 <_printf_i>:
 8002c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c68:	7e0f      	ldrb	r7, [r1, #24]
 8002c6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c6c:	2f78      	cmp	r7, #120	; 0x78
 8002c6e:	4691      	mov	r9, r2
 8002c70:	4680      	mov	r8, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	469a      	mov	sl, r3
 8002c76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c7a:	d807      	bhi.n	8002c8c <_printf_i+0x28>
 8002c7c:	2f62      	cmp	r7, #98	; 0x62
 8002c7e:	d80a      	bhi.n	8002c96 <_printf_i+0x32>
 8002c80:	2f00      	cmp	r7, #0
 8002c82:	f000 80d4 	beq.w	8002e2e <_printf_i+0x1ca>
 8002c86:	2f58      	cmp	r7, #88	; 0x58
 8002c88:	f000 80c0 	beq.w	8002e0c <_printf_i+0x1a8>
 8002c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c94:	e03a      	b.n	8002d0c <_printf_i+0xa8>
 8002c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c9a:	2b15      	cmp	r3, #21
 8002c9c:	d8f6      	bhi.n	8002c8c <_printf_i+0x28>
 8002c9e:	a101      	add	r1, pc, #4	; (adr r1, 8002ca4 <_printf_i+0x40>)
 8002ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ca4:	08002cfd 	.word	0x08002cfd
 8002ca8:	08002d11 	.word	0x08002d11
 8002cac:	08002c8d 	.word	0x08002c8d
 8002cb0:	08002c8d 	.word	0x08002c8d
 8002cb4:	08002c8d 	.word	0x08002c8d
 8002cb8:	08002c8d 	.word	0x08002c8d
 8002cbc:	08002d11 	.word	0x08002d11
 8002cc0:	08002c8d 	.word	0x08002c8d
 8002cc4:	08002c8d 	.word	0x08002c8d
 8002cc8:	08002c8d 	.word	0x08002c8d
 8002ccc:	08002c8d 	.word	0x08002c8d
 8002cd0:	08002e15 	.word	0x08002e15
 8002cd4:	08002d3d 	.word	0x08002d3d
 8002cd8:	08002dcf 	.word	0x08002dcf
 8002cdc:	08002c8d 	.word	0x08002c8d
 8002ce0:	08002c8d 	.word	0x08002c8d
 8002ce4:	08002e37 	.word	0x08002e37
 8002ce8:	08002c8d 	.word	0x08002c8d
 8002cec:	08002d3d 	.word	0x08002d3d
 8002cf0:	08002c8d 	.word	0x08002c8d
 8002cf4:	08002c8d 	.word	0x08002c8d
 8002cf8:	08002dd7 	.word	0x08002dd7
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	602a      	str	r2, [r5, #0]
 8002d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e09f      	b.n	8002e50 <_printf_i+0x1ec>
 8002d10:	6820      	ldr	r0, [r4, #0]
 8002d12:	682b      	ldr	r3, [r5, #0]
 8002d14:	0607      	lsls	r7, r0, #24
 8002d16:	f103 0104 	add.w	r1, r3, #4
 8002d1a:	6029      	str	r1, [r5, #0]
 8002d1c:	d501      	bpl.n	8002d22 <_printf_i+0xbe>
 8002d1e:	681e      	ldr	r6, [r3, #0]
 8002d20:	e003      	b.n	8002d2a <_printf_i+0xc6>
 8002d22:	0646      	lsls	r6, r0, #25
 8002d24:	d5fb      	bpl.n	8002d1e <_printf_i+0xba>
 8002d26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d2a:	2e00      	cmp	r6, #0
 8002d2c:	da03      	bge.n	8002d36 <_printf_i+0xd2>
 8002d2e:	232d      	movs	r3, #45	; 0x2d
 8002d30:	4276      	negs	r6, r6
 8002d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d36:	485a      	ldr	r0, [pc, #360]	; (8002ea0 <_printf_i+0x23c>)
 8002d38:	230a      	movs	r3, #10
 8002d3a:	e012      	b.n	8002d62 <_printf_i+0xfe>
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	6820      	ldr	r0, [r4, #0]
 8002d40:	1d19      	adds	r1, r3, #4
 8002d42:	6029      	str	r1, [r5, #0]
 8002d44:	0605      	lsls	r5, r0, #24
 8002d46:	d501      	bpl.n	8002d4c <_printf_i+0xe8>
 8002d48:	681e      	ldr	r6, [r3, #0]
 8002d4a:	e002      	b.n	8002d52 <_printf_i+0xee>
 8002d4c:	0641      	lsls	r1, r0, #25
 8002d4e:	d5fb      	bpl.n	8002d48 <_printf_i+0xe4>
 8002d50:	881e      	ldrh	r6, [r3, #0]
 8002d52:	4853      	ldr	r0, [pc, #332]	; (8002ea0 <_printf_i+0x23c>)
 8002d54:	2f6f      	cmp	r7, #111	; 0x6f
 8002d56:	bf0c      	ite	eq
 8002d58:	2308      	moveq	r3, #8
 8002d5a:	230a      	movne	r3, #10
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d62:	6865      	ldr	r5, [r4, #4]
 8002d64:	60a5      	str	r5, [r4, #8]
 8002d66:	2d00      	cmp	r5, #0
 8002d68:	bfa2      	ittt	ge
 8002d6a:	6821      	ldrge	r1, [r4, #0]
 8002d6c:	f021 0104 	bicge.w	r1, r1, #4
 8002d70:	6021      	strge	r1, [r4, #0]
 8002d72:	b90e      	cbnz	r6, 8002d78 <_printf_i+0x114>
 8002d74:	2d00      	cmp	r5, #0
 8002d76:	d04b      	beq.n	8002e10 <_printf_i+0x1ac>
 8002d78:	4615      	mov	r5, r2
 8002d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8002d82:	5dc7      	ldrb	r7, [r0, r7]
 8002d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d88:	4637      	mov	r7, r6
 8002d8a:	42bb      	cmp	r3, r7
 8002d8c:	460e      	mov	r6, r1
 8002d8e:	d9f4      	bls.n	8002d7a <_printf_i+0x116>
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d10b      	bne.n	8002dac <_printf_i+0x148>
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	07de      	lsls	r6, r3, #31
 8002d98:	d508      	bpl.n	8002dac <_printf_i+0x148>
 8002d9a:	6923      	ldr	r3, [r4, #16]
 8002d9c:	6861      	ldr	r1, [r4, #4]
 8002d9e:	4299      	cmp	r1, r3
 8002da0:	bfde      	ittt	le
 8002da2:	2330      	movle	r3, #48	; 0x30
 8002da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dac:	1b52      	subs	r2, r2, r5
 8002dae:	6122      	str	r2, [r4, #16]
 8002db0:	f8cd a000 	str.w	sl, [sp]
 8002db4:	464b      	mov	r3, r9
 8002db6:	aa03      	add	r2, sp, #12
 8002db8:	4621      	mov	r1, r4
 8002dba:	4640      	mov	r0, r8
 8002dbc:	f7ff fee4 	bl	8002b88 <_printf_common>
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	d14a      	bne.n	8002e5a <_printf_i+0x1f6>
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	b004      	add	sp, #16
 8002dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	f043 0320 	orr.w	r3, r3, #32
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	4833      	ldr	r0, [pc, #204]	; (8002ea4 <_printf_i+0x240>)
 8002dd8:	2778      	movs	r7, #120	; 0x78
 8002dda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	6829      	ldr	r1, [r5, #0]
 8002de2:	061f      	lsls	r7, r3, #24
 8002de4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002de8:	d402      	bmi.n	8002df0 <_printf_i+0x18c>
 8002dea:	065f      	lsls	r7, r3, #25
 8002dec:	bf48      	it	mi
 8002dee:	b2b6      	uxthmi	r6, r6
 8002df0:	07df      	lsls	r7, r3, #31
 8002df2:	bf48      	it	mi
 8002df4:	f043 0320 	orrmi.w	r3, r3, #32
 8002df8:	6029      	str	r1, [r5, #0]
 8002dfa:	bf48      	it	mi
 8002dfc:	6023      	strmi	r3, [r4, #0]
 8002dfe:	b91e      	cbnz	r6, 8002e08 <_printf_i+0x1a4>
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f023 0320 	bic.w	r3, r3, #32
 8002e06:	6023      	str	r3, [r4, #0]
 8002e08:	2310      	movs	r3, #16
 8002e0a:	e7a7      	b.n	8002d5c <_printf_i+0xf8>
 8002e0c:	4824      	ldr	r0, [pc, #144]	; (8002ea0 <_printf_i+0x23c>)
 8002e0e:	e7e4      	b.n	8002dda <_printf_i+0x176>
 8002e10:	4615      	mov	r5, r2
 8002e12:	e7bd      	b.n	8002d90 <_printf_i+0x12c>
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	6826      	ldr	r6, [r4, #0]
 8002e18:	6961      	ldr	r1, [r4, #20]
 8002e1a:	1d18      	adds	r0, r3, #4
 8002e1c:	6028      	str	r0, [r5, #0]
 8002e1e:	0635      	lsls	r5, r6, #24
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	d501      	bpl.n	8002e28 <_printf_i+0x1c4>
 8002e24:	6019      	str	r1, [r3, #0]
 8002e26:	e002      	b.n	8002e2e <_printf_i+0x1ca>
 8002e28:	0670      	lsls	r0, r6, #25
 8002e2a:	d5fb      	bpl.n	8002e24 <_printf_i+0x1c0>
 8002e2c:	8019      	strh	r1, [r3, #0]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6123      	str	r3, [r4, #16]
 8002e32:	4615      	mov	r5, r2
 8002e34:	e7bc      	b.n	8002db0 <_printf_i+0x14c>
 8002e36:	682b      	ldr	r3, [r5, #0]
 8002e38:	1d1a      	adds	r2, r3, #4
 8002e3a:	602a      	str	r2, [r5, #0]
 8002e3c:	681d      	ldr	r5, [r3, #0]
 8002e3e:	6862      	ldr	r2, [r4, #4]
 8002e40:	2100      	movs	r1, #0
 8002e42:	4628      	mov	r0, r5
 8002e44:	f7fd f9cc 	bl	80001e0 <memchr>
 8002e48:	b108      	cbz	r0, 8002e4e <_printf_i+0x1ea>
 8002e4a:	1b40      	subs	r0, r0, r5
 8002e4c:	6060      	str	r0, [r4, #4]
 8002e4e:	6863      	ldr	r3, [r4, #4]
 8002e50:	6123      	str	r3, [r4, #16]
 8002e52:	2300      	movs	r3, #0
 8002e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e58:	e7aa      	b.n	8002db0 <_printf_i+0x14c>
 8002e5a:	6923      	ldr	r3, [r4, #16]
 8002e5c:	462a      	mov	r2, r5
 8002e5e:	4649      	mov	r1, r9
 8002e60:	4640      	mov	r0, r8
 8002e62:	47d0      	blx	sl
 8002e64:	3001      	adds	r0, #1
 8002e66:	d0ad      	beq.n	8002dc4 <_printf_i+0x160>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	079b      	lsls	r3, r3, #30
 8002e6c:	d413      	bmi.n	8002e96 <_printf_i+0x232>
 8002e6e:	68e0      	ldr	r0, [r4, #12]
 8002e70:	9b03      	ldr	r3, [sp, #12]
 8002e72:	4298      	cmp	r0, r3
 8002e74:	bfb8      	it	lt
 8002e76:	4618      	movlt	r0, r3
 8002e78:	e7a6      	b.n	8002dc8 <_printf_i+0x164>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4632      	mov	r2, r6
 8002e7e:	4649      	mov	r1, r9
 8002e80:	4640      	mov	r0, r8
 8002e82:	47d0      	blx	sl
 8002e84:	3001      	adds	r0, #1
 8002e86:	d09d      	beq.n	8002dc4 <_printf_i+0x160>
 8002e88:	3501      	adds	r5, #1
 8002e8a:	68e3      	ldr	r3, [r4, #12]
 8002e8c:	9903      	ldr	r1, [sp, #12]
 8002e8e:	1a5b      	subs	r3, r3, r1
 8002e90:	42ab      	cmp	r3, r5
 8002e92:	dcf2      	bgt.n	8002e7a <_printf_i+0x216>
 8002e94:	e7eb      	b.n	8002e6e <_printf_i+0x20a>
 8002e96:	2500      	movs	r5, #0
 8002e98:	f104 0619 	add.w	r6, r4, #25
 8002e9c:	e7f5      	b.n	8002e8a <_printf_i+0x226>
 8002e9e:	bf00      	nop
 8002ea0:	080032b1 	.word	0x080032b1
 8002ea4:	080032c2 	.word	0x080032c2

08002ea8 <__sflush_r>:
 8002ea8:	898a      	ldrh	r2, [r1, #12]
 8002eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eae:	4605      	mov	r5, r0
 8002eb0:	0710      	lsls	r0, r2, #28
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	d458      	bmi.n	8002f68 <__sflush_r+0xc0>
 8002eb6:	684b      	ldr	r3, [r1, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	dc05      	bgt.n	8002ec8 <__sflush_r+0x20>
 8002ebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	dc02      	bgt.n	8002ec8 <__sflush_r+0x20>
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eca:	2e00      	cmp	r6, #0
 8002ecc:	d0f9      	beq.n	8002ec2 <__sflush_r+0x1a>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ed4:	682f      	ldr	r7, [r5, #0]
 8002ed6:	6a21      	ldr	r1, [r4, #32]
 8002ed8:	602b      	str	r3, [r5, #0]
 8002eda:	d032      	beq.n	8002f42 <__sflush_r+0x9a>
 8002edc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ede:	89a3      	ldrh	r3, [r4, #12]
 8002ee0:	075a      	lsls	r2, r3, #29
 8002ee2:	d505      	bpl.n	8002ef0 <__sflush_r+0x48>
 8002ee4:	6863      	ldr	r3, [r4, #4]
 8002ee6:	1ac0      	subs	r0, r0, r3
 8002ee8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002eea:	b10b      	cbz	r3, 8002ef0 <__sflush_r+0x48>
 8002eec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002eee:	1ac0      	subs	r0, r0, r3
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ef6:	6a21      	ldr	r1, [r4, #32]
 8002ef8:	4628      	mov	r0, r5
 8002efa:	47b0      	blx	r6
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	d106      	bne.n	8002f10 <__sflush_r+0x68>
 8002f02:	6829      	ldr	r1, [r5, #0]
 8002f04:	291d      	cmp	r1, #29
 8002f06:	d82b      	bhi.n	8002f60 <__sflush_r+0xb8>
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <__sflush_r+0x108>)
 8002f0a:	410a      	asrs	r2, r1
 8002f0c:	07d6      	lsls	r6, r2, #31
 8002f0e:	d427      	bmi.n	8002f60 <__sflush_r+0xb8>
 8002f10:	2200      	movs	r2, #0
 8002f12:	6062      	str	r2, [r4, #4]
 8002f14:	04d9      	lsls	r1, r3, #19
 8002f16:	6922      	ldr	r2, [r4, #16]
 8002f18:	6022      	str	r2, [r4, #0]
 8002f1a:	d504      	bpl.n	8002f26 <__sflush_r+0x7e>
 8002f1c:	1c42      	adds	r2, r0, #1
 8002f1e:	d101      	bne.n	8002f24 <__sflush_r+0x7c>
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	b903      	cbnz	r3, 8002f26 <__sflush_r+0x7e>
 8002f24:	6560      	str	r0, [r4, #84]	; 0x54
 8002f26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f28:	602f      	str	r7, [r5, #0]
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	d0c9      	beq.n	8002ec2 <__sflush_r+0x1a>
 8002f2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f32:	4299      	cmp	r1, r3
 8002f34:	d002      	beq.n	8002f3c <__sflush_r+0x94>
 8002f36:	4628      	mov	r0, r5
 8002f38:	f7ff fbea 	bl	8002710 <_free_r>
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	6360      	str	r0, [r4, #52]	; 0x34
 8002f40:	e7c0      	b.n	8002ec4 <__sflush_r+0x1c>
 8002f42:	2301      	movs	r3, #1
 8002f44:	4628      	mov	r0, r5
 8002f46:	47b0      	blx	r6
 8002f48:	1c41      	adds	r1, r0, #1
 8002f4a:	d1c8      	bne.n	8002ede <__sflush_r+0x36>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0c5      	beq.n	8002ede <__sflush_r+0x36>
 8002f52:	2b1d      	cmp	r3, #29
 8002f54:	d001      	beq.n	8002f5a <__sflush_r+0xb2>
 8002f56:	2b16      	cmp	r3, #22
 8002f58:	d101      	bne.n	8002f5e <__sflush_r+0xb6>
 8002f5a:	602f      	str	r7, [r5, #0]
 8002f5c:	e7b1      	b.n	8002ec2 <__sflush_r+0x1a>
 8002f5e:	89a3      	ldrh	r3, [r4, #12]
 8002f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f64:	81a3      	strh	r3, [r4, #12]
 8002f66:	e7ad      	b.n	8002ec4 <__sflush_r+0x1c>
 8002f68:	690f      	ldr	r7, [r1, #16]
 8002f6a:	2f00      	cmp	r7, #0
 8002f6c:	d0a9      	beq.n	8002ec2 <__sflush_r+0x1a>
 8002f6e:	0793      	lsls	r3, r2, #30
 8002f70:	680e      	ldr	r6, [r1, #0]
 8002f72:	bf08      	it	eq
 8002f74:	694b      	ldreq	r3, [r1, #20]
 8002f76:	600f      	str	r7, [r1, #0]
 8002f78:	bf18      	it	ne
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	eba6 0807 	sub.w	r8, r6, r7
 8002f80:	608b      	str	r3, [r1, #8]
 8002f82:	f1b8 0f00 	cmp.w	r8, #0
 8002f86:	dd9c      	ble.n	8002ec2 <__sflush_r+0x1a>
 8002f88:	6a21      	ldr	r1, [r4, #32]
 8002f8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f8c:	4643      	mov	r3, r8
 8002f8e:	463a      	mov	r2, r7
 8002f90:	4628      	mov	r0, r5
 8002f92:	47b0      	blx	r6
 8002f94:	2800      	cmp	r0, #0
 8002f96:	dc06      	bgt.n	8002fa6 <__sflush_r+0xfe>
 8002f98:	89a3      	ldrh	r3, [r4, #12]
 8002f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9e:	81a3      	strh	r3, [r4, #12]
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	e78e      	b.n	8002ec4 <__sflush_r+0x1c>
 8002fa6:	4407      	add	r7, r0
 8002fa8:	eba8 0800 	sub.w	r8, r8, r0
 8002fac:	e7e9      	b.n	8002f82 <__sflush_r+0xda>
 8002fae:	bf00      	nop
 8002fb0:	dfbffffe 	.word	0xdfbffffe

08002fb4 <_fflush_r>:
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	690b      	ldr	r3, [r1, #16]
 8002fb8:	4605      	mov	r5, r0
 8002fba:	460c      	mov	r4, r1
 8002fbc:	b913      	cbnz	r3, 8002fc4 <_fflush_r+0x10>
 8002fbe:	2500      	movs	r5, #0
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	b118      	cbz	r0, 8002fce <_fflush_r+0x1a>
 8002fc6:	6a03      	ldr	r3, [r0, #32]
 8002fc8:	b90b      	cbnz	r3, 8002fce <_fflush_r+0x1a>
 8002fca:	f7ff fa99 	bl	8002500 <__sinit>
 8002fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f3      	beq.n	8002fbe <_fflush_r+0xa>
 8002fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fd8:	07d0      	lsls	r0, r2, #31
 8002fda:	d404      	bmi.n	8002fe6 <_fflush_r+0x32>
 8002fdc:	0599      	lsls	r1, r3, #22
 8002fde:	d402      	bmi.n	8002fe6 <_fflush_r+0x32>
 8002fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fe2:	f7ff fb92 	bl	800270a <__retarget_lock_acquire_recursive>
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	4621      	mov	r1, r4
 8002fea:	f7ff ff5d 	bl	8002ea8 <__sflush_r>
 8002fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ff0:	07da      	lsls	r2, r3, #31
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	d4e4      	bmi.n	8002fc0 <_fflush_r+0xc>
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	059b      	lsls	r3, r3, #22
 8002ffa:	d4e1      	bmi.n	8002fc0 <_fflush_r+0xc>
 8002ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ffe:	f7ff fb85 	bl	800270c <__retarget_lock_release_recursive>
 8003002:	e7dd      	b.n	8002fc0 <_fflush_r+0xc>

08003004 <__swbuf_r>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	460e      	mov	r6, r1
 8003008:	4614      	mov	r4, r2
 800300a:	4605      	mov	r5, r0
 800300c:	b118      	cbz	r0, 8003016 <__swbuf_r+0x12>
 800300e:	6a03      	ldr	r3, [r0, #32]
 8003010:	b90b      	cbnz	r3, 8003016 <__swbuf_r+0x12>
 8003012:	f7ff fa75 	bl	8002500 <__sinit>
 8003016:	69a3      	ldr	r3, [r4, #24]
 8003018:	60a3      	str	r3, [r4, #8]
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	071a      	lsls	r2, r3, #28
 800301e:	d525      	bpl.n	800306c <__swbuf_r+0x68>
 8003020:	6923      	ldr	r3, [r4, #16]
 8003022:	b31b      	cbz	r3, 800306c <__swbuf_r+0x68>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	6922      	ldr	r2, [r4, #16]
 8003028:	1a98      	subs	r0, r3, r2
 800302a:	6963      	ldr	r3, [r4, #20]
 800302c:	b2f6      	uxtb	r6, r6
 800302e:	4283      	cmp	r3, r0
 8003030:	4637      	mov	r7, r6
 8003032:	dc04      	bgt.n	800303e <__swbuf_r+0x3a>
 8003034:	4621      	mov	r1, r4
 8003036:	4628      	mov	r0, r5
 8003038:	f7ff ffbc 	bl	8002fb4 <_fflush_r>
 800303c:	b9e0      	cbnz	r0, 8003078 <__swbuf_r+0x74>
 800303e:	68a3      	ldr	r3, [r4, #8]
 8003040:	3b01      	subs	r3, #1
 8003042:	60a3      	str	r3, [r4, #8]
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	6022      	str	r2, [r4, #0]
 800304a:	701e      	strb	r6, [r3, #0]
 800304c:	6962      	ldr	r2, [r4, #20]
 800304e:	1c43      	adds	r3, r0, #1
 8003050:	429a      	cmp	r2, r3
 8003052:	d004      	beq.n	800305e <__swbuf_r+0x5a>
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	07db      	lsls	r3, r3, #31
 8003058:	d506      	bpl.n	8003068 <__swbuf_r+0x64>
 800305a:	2e0a      	cmp	r6, #10
 800305c:	d104      	bne.n	8003068 <__swbuf_r+0x64>
 800305e:	4621      	mov	r1, r4
 8003060:	4628      	mov	r0, r5
 8003062:	f7ff ffa7 	bl	8002fb4 <_fflush_r>
 8003066:	b938      	cbnz	r0, 8003078 <__swbuf_r+0x74>
 8003068:	4638      	mov	r0, r7
 800306a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800306c:	4621      	mov	r1, r4
 800306e:	4628      	mov	r0, r5
 8003070:	f000 f806 	bl	8003080 <__swsetup_r>
 8003074:	2800      	cmp	r0, #0
 8003076:	d0d5      	beq.n	8003024 <__swbuf_r+0x20>
 8003078:	f04f 37ff 	mov.w	r7, #4294967295
 800307c:	e7f4      	b.n	8003068 <__swbuf_r+0x64>
	...

08003080 <__swsetup_r>:
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	4b2a      	ldr	r3, [pc, #168]	; (800312c <__swsetup_r+0xac>)
 8003084:	4605      	mov	r5, r0
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	460c      	mov	r4, r1
 800308a:	b118      	cbz	r0, 8003094 <__swsetup_r+0x14>
 800308c:	6a03      	ldr	r3, [r0, #32]
 800308e:	b90b      	cbnz	r3, 8003094 <__swsetup_r+0x14>
 8003090:	f7ff fa36 	bl	8002500 <__sinit>
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800309a:	0718      	lsls	r0, r3, #28
 800309c:	d422      	bmi.n	80030e4 <__swsetup_r+0x64>
 800309e:	06d9      	lsls	r1, r3, #27
 80030a0:	d407      	bmi.n	80030b2 <__swsetup_r+0x32>
 80030a2:	2309      	movs	r3, #9
 80030a4:	602b      	str	r3, [r5, #0]
 80030a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295
 80030b0:	e034      	b.n	800311c <__swsetup_r+0x9c>
 80030b2:	0758      	lsls	r0, r3, #29
 80030b4:	d512      	bpl.n	80030dc <__swsetup_r+0x5c>
 80030b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030b8:	b141      	cbz	r1, 80030cc <__swsetup_r+0x4c>
 80030ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030be:	4299      	cmp	r1, r3
 80030c0:	d002      	beq.n	80030c8 <__swsetup_r+0x48>
 80030c2:	4628      	mov	r0, r5
 80030c4:	f7ff fb24 	bl	8002710 <_free_r>
 80030c8:	2300      	movs	r3, #0
 80030ca:	6363      	str	r3, [r4, #52]	; 0x34
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030d2:	81a3      	strh	r3, [r4, #12]
 80030d4:	2300      	movs	r3, #0
 80030d6:	6063      	str	r3, [r4, #4]
 80030d8:	6923      	ldr	r3, [r4, #16]
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	f043 0308 	orr.w	r3, r3, #8
 80030e2:	81a3      	strh	r3, [r4, #12]
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	b94b      	cbnz	r3, 80030fc <__swsetup_r+0x7c>
 80030e8:	89a3      	ldrh	r3, [r4, #12]
 80030ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f2:	d003      	beq.n	80030fc <__swsetup_r+0x7c>
 80030f4:	4621      	mov	r1, r4
 80030f6:	4628      	mov	r0, r5
 80030f8:	f000 f850 	bl	800319c <__smakebuf_r>
 80030fc:	89a0      	ldrh	r0, [r4, #12]
 80030fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003102:	f010 0301 	ands.w	r3, r0, #1
 8003106:	d00a      	beq.n	800311e <__swsetup_r+0x9e>
 8003108:	2300      	movs	r3, #0
 800310a:	60a3      	str	r3, [r4, #8]
 800310c:	6963      	ldr	r3, [r4, #20]
 800310e:	425b      	negs	r3, r3
 8003110:	61a3      	str	r3, [r4, #24]
 8003112:	6923      	ldr	r3, [r4, #16]
 8003114:	b943      	cbnz	r3, 8003128 <__swsetup_r+0xa8>
 8003116:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800311a:	d1c4      	bne.n	80030a6 <__swsetup_r+0x26>
 800311c:	bd38      	pop	{r3, r4, r5, pc}
 800311e:	0781      	lsls	r1, r0, #30
 8003120:	bf58      	it	pl
 8003122:	6963      	ldrpl	r3, [r4, #20]
 8003124:	60a3      	str	r3, [r4, #8]
 8003126:	e7f4      	b.n	8003112 <__swsetup_r+0x92>
 8003128:	2000      	movs	r0, #0
 800312a:	e7f7      	b.n	800311c <__swsetup_r+0x9c>
 800312c:	20000064 	.word	0x20000064

08003130 <_sbrk_r>:
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	4d06      	ldr	r5, [pc, #24]	; (800314c <_sbrk_r+0x1c>)
 8003134:	2300      	movs	r3, #0
 8003136:	4604      	mov	r4, r0
 8003138:	4608      	mov	r0, r1
 800313a:	602b      	str	r3, [r5, #0]
 800313c:	f7fd fbdc 	bl	80008f8 <_sbrk>
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	d102      	bne.n	800314a <_sbrk_r+0x1a>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	b103      	cbz	r3, 800314a <_sbrk_r+0x1a>
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	bd38      	pop	{r3, r4, r5, pc}
 800314c:	20000254 	.word	0x20000254

08003150 <__swhatbuf_r>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	460c      	mov	r4, r1
 8003154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003158:	2900      	cmp	r1, #0
 800315a:	b096      	sub	sp, #88	; 0x58
 800315c:	4615      	mov	r5, r2
 800315e:	461e      	mov	r6, r3
 8003160:	da0d      	bge.n	800317e <__swhatbuf_r+0x2e>
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	bf0c      	ite	eq
 800316e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003172:	2340      	movne	r3, #64	; 0x40
 8003174:	2000      	movs	r0, #0
 8003176:	6031      	str	r1, [r6, #0]
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	b016      	add	sp, #88	; 0x58
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	466a      	mov	r2, sp
 8003180:	f000 f848 	bl	8003214 <_fstat_r>
 8003184:	2800      	cmp	r0, #0
 8003186:	dbec      	blt.n	8003162 <__swhatbuf_r+0x12>
 8003188:	9901      	ldr	r1, [sp, #4]
 800318a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800318e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003192:	4259      	negs	r1, r3
 8003194:	4159      	adcs	r1, r3
 8003196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800319a:	e7eb      	b.n	8003174 <__swhatbuf_r+0x24>

0800319c <__smakebuf_r>:
 800319c:	898b      	ldrh	r3, [r1, #12]
 800319e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031a0:	079d      	lsls	r5, r3, #30
 80031a2:	4606      	mov	r6, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	d507      	bpl.n	80031b8 <__smakebuf_r+0x1c>
 80031a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	6123      	str	r3, [r4, #16]
 80031b0:	2301      	movs	r3, #1
 80031b2:	6163      	str	r3, [r4, #20]
 80031b4:	b002      	add	sp, #8
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	ab01      	add	r3, sp, #4
 80031ba:	466a      	mov	r2, sp
 80031bc:	f7ff ffc8 	bl	8003150 <__swhatbuf_r>
 80031c0:	9900      	ldr	r1, [sp, #0]
 80031c2:	4605      	mov	r5, r0
 80031c4:	4630      	mov	r0, r6
 80031c6:	f7ff fb0f 	bl	80027e8 <_malloc_r>
 80031ca:	b948      	cbnz	r0, 80031e0 <__smakebuf_r+0x44>
 80031cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d0:	059a      	lsls	r2, r3, #22
 80031d2:	d4ef      	bmi.n	80031b4 <__smakebuf_r+0x18>
 80031d4:	f023 0303 	bic.w	r3, r3, #3
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	81a3      	strh	r3, [r4, #12]
 80031de:	e7e3      	b.n	80031a8 <__smakebuf_r+0xc>
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	6020      	str	r0, [r4, #0]
 80031e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e8:	81a3      	strh	r3, [r4, #12]
 80031ea:	9b00      	ldr	r3, [sp, #0]
 80031ec:	6163      	str	r3, [r4, #20]
 80031ee:	9b01      	ldr	r3, [sp, #4]
 80031f0:	6120      	str	r0, [r4, #16]
 80031f2:	b15b      	cbz	r3, 800320c <__smakebuf_r+0x70>
 80031f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031f8:	4630      	mov	r0, r6
 80031fa:	f000 f81d 	bl	8003238 <_isatty_r>
 80031fe:	b128      	cbz	r0, 800320c <__smakebuf_r+0x70>
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	431d      	orrs	r5, r3
 8003210:	81a5      	strh	r5, [r4, #12]
 8003212:	e7cf      	b.n	80031b4 <__smakebuf_r+0x18>

08003214 <_fstat_r>:
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	4d07      	ldr	r5, [pc, #28]	; (8003234 <_fstat_r+0x20>)
 8003218:	2300      	movs	r3, #0
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	602b      	str	r3, [r5, #0]
 8003222:	f7fd fb40 	bl	80008a6 <_fstat>
 8003226:	1c43      	adds	r3, r0, #1
 8003228:	d102      	bne.n	8003230 <_fstat_r+0x1c>
 800322a:	682b      	ldr	r3, [r5, #0]
 800322c:	b103      	cbz	r3, 8003230 <_fstat_r+0x1c>
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	bd38      	pop	{r3, r4, r5, pc}
 8003232:	bf00      	nop
 8003234:	20000254 	.word	0x20000254

08003238 <_isatty_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	4d06      	ldr	r5, [pc, #24]	; (8003254 <_isatty_r+0x1c>)
 800323c:	2300      	movs	r3, #0
 800323e:	4604      	mov	r4, r0
 8003240:	4608      	mov	r0, r1
 8003242:	602b      	str	r3, [r5, #0]
 8003244:	f7fd fb3f 	bl	80008c6 <_isatty>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d102      	bne.n	8003252 <_isatty_r+0x1a>
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	b103      	cbz	r3, 8003252 <_isatty_r+0x1a>
 8003250:	6023      	str	r3, [r4, #0]
 8003252:	bd38      	pop	{r3, r4, r5, pc}
 8003254:	20000254 	.word	0x20000254

08003258 <_init>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	bf00      	nop
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr

08003264 <_fini>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr
