
FreeRtos_DigitalClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fec  08008fec  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fec  08008fec  00018fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff4  08008ff4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c84  2000006c  08009068  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cf0  08009068  00024cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cdba  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000443b  00000000  00000000  0003ce99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  000412d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001287  00000000  00000000  00042ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c9c8  00000000  00000000  00043d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d7d6  00000000  00000000  00060727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac843  00000000  00000000  0007defd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b28  00000000  00000000  0012a740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00131268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e44 	.word	0x08008e44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008e44 	.word	0x08008e44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <setSegments>:
uint8_t MinutsSecondDigit;
uint8_t prevHour = 0;



void setSegments(uint8_t number) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
        0b00000111, // 7
        0b01111111, // 8
        0b01101111  // 9
    };

    uint8_t segments = segmentMap[number];
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a2c      	ldr	r2, [pc, #176]	; (800063c <setSegments+0xc0>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	73fb      	strb	r3, [r7, #15]

    GPIO_PinState PinA_State = (segments & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState PinB_State = (segments & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	105b      	asrs	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	737b      	strb	r3, [r7, #13]
    GPIO_PinState PinC_State = (segments & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	109b      	asrs	r3, r3, #2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	733b      	strb	r3, [r7, #12]
    GPIO_PinState PinD_State = (segments & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	10db      	asrs	r3, r3, #3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	72fb      	strb	r3, [r7, #11]
    GPIO_PinState PinE_State = (segments & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	111b      	asrs	r3, r3, #4
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	72bb      	strb	r3, [r7, #10]
    GPIO_PinState PinF_State = (segments & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	115b      	asrs	r3, r3, #5
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	727b      	strb	r3, [r7, #9]
    GPIO_PinState PinG_State = (segments & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	119b      	asrs	r3, r3, #6
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	723b      	strb	r3, [r7, #8]

    // Corresponding HAL_GPIO_WritePin calls
    HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, PinA_State);
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	461a      	mov	r2, r3
 80005e2:	2101      	movs	r1, #1
 80005e4:	4816      	ldr	r0, [pc, #88]	; (8000640 <setSegments+0xc4>)
 80005e6:	f002 fb43 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, PinB_State);
 80005ea:	7b7b      	ldrb	r3, [r7, #13]
 80005ec:	461a      	mov	r2, r3
 80005ee:	2102      	movs	r1, #2
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <setSegments+0xc4>)
 80005f2:	f002 fb3d 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, PinC_State);
 80005f6:	7b3b      	ldrb	r3, [r7, #12]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2110      	movs	r1, #16
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <setSegments+0xc4>)
 80005fe:	f002 fb37 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, PinD_State);
 8000602:	7afb      	ldrb	r3, [r7, #11]
 8000604:	461a      	mov	r2, r3
 8000606:	2101      	movs	r1, #1
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <setSegments+0xc8>)
 800060a:	f002 fb31 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, PinE_State);
 800060e:	7abb      	ldrb	r3, [r7, #10]
 8000610:	461a      	mov	r2, r3
 8000612:	2102      	movs	r1, #2
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <setSegments+0xcc>)
 8000616:	f002 fb2b 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, PinF_State);
 800061a:	7a7b      	ldrb	r3, [r7, #9]
 800061c:	461a      	mov	r2, r3
 800061e:	2101      	movs	r1, #1
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <setSegments+0xcc>)
 8000622:	f002 fb25 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, PinG_State);
 8000626:	7a3b      	ldrb	r3, [r7, #8]
 8000628:	461a      	mov	r2, r3
 800062a:	2104      	movs	r1, #4
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <setSegments+0xcc>)
 800062e:	f002 fb1f 	bl	8002c70 <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	08008f04 	.word	0x08008f04
 8000640:	40020000 	.word	0x40020000
 8000644:	40020400 	.word	0x40020400
 8000648:	40020800 	.word	0x40020800

0800064c <SetCathode>:

void SetCathode(uint8_t Digit)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState Cathode1_Pin_State = (Digit & 0b00000001)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf0c      	ite	eq
 8000660:	2301      	moveq	r3, #1
 8000662:	2300      	movne	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState Cathode2_Pin_State = (Digit & 0b00000010)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(Cathode_1_GPIO_Port, Cathode_1_Pin, Cathode1_Pin_State);
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	461a      	mov	r2, r3
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <SetCathode+0x54>)
 8000684:	f002 faf4 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Cathode_2_GPIO_Port, Cathode_2_Pin, Cathode2_Pin_State);
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	461a      	mov	r2, r3
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <SetCathode+0x54>)
 8000692:	f002 faed 	bl	8002c70 <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020800 	.word	0x40020800

080006a4 <WriteDigit>:

void WriteDigit(uint8_t Digit,uint8_t number)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
	setSegments(number);
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff60 	bl	800057c <setSegments>
	SetCathode(Digit);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffc4 	bl	800064c <SetCathode>

}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <WriteNumber>:

void WriteNumber(uint8_t number)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]


    uint8_t firstDigit = number / 10;  // Extract the first digit
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4a11      	ldr	r2, [pc, #68]	; (8000720 <WriteNumber+0x54>)
 80006da:	fba2 2303 	umull	r2, r3, r2, r3
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	73fb      	strb	r3, [r7, #15]
    uint8_t secondDigit = number % 10; // Extract the second digit
 80006e2:	79fa      	ldrb	r2, [r7, #7]
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <WriteNumber+0x54>)
 80006e6:	fba3 1302 	umull	r1, r3, r3, r2
 80006ea:	08d9      	lsrs	r1, r3, #3
 80006ec:	460b      	mov	r3, r1
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	73bb      	strb	r3, [r7, #14]
    WriteDigit(1, firstDigit);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ffd1 	bl	80006a4 <WriteDigit>
    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000702:	2001      	movs	r0, #1
 8000704:	f004 fb21 	bl	8004d4a <osDelay>

    // Display the second digit
    WriteDigit(2, secondDigit);
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	4619      	mov	r1, r3
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff ffc9 	bl	80006a4 <WriteDigit>
    osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000712:	2001      	movs	r0, #1
 8000714:	f004 fb19 	bl	8004d4a <osDelay>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	cccccccd 	.word	0xcccccccd

08000724 <FourDigitsetSegments>:

void FourDigitsetSegments(uint8_t number) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
        0b00110111, // 15 (M)
        0b01110011  // 16 (P)
    };


    uint8_t segments = segmentMap[number];
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4a32      	ldr	r2, [pc, #200]	; (80007fc <FourDigitsetSegments+0xd8>)
 8000732:	5cd3      	ldrb	r3, [r2, r3]
 8000734:	75fb      	strb	r3, [r7, #23]

    GPIO_PinState FourDigitsPinA_State = (segments & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000736:	7dfb      	ldrb	r3, [r7, #23]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	75bb      	strb	r3, [r7, #22]
    GPIO_PinState FourDigitsPinB_State = (segments & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	105b      	asrs	r3, r3, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	757b      	strb	r3, [r7, #21]
    GPIO_PinState FourDigitsPinC_State = (segments & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800074a:	7dfb      	ldrb	r3, [r7, #23]
 800074c:	109b      	asrs	r3, r3, #2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	753b      	strb	r3, [r7, #20]
    GPIO_PinState FourDigitsPinD_State = (segments & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000756:	7dfb      	ldrb	r3, [r7, #23]
 8000758:	10db      	asrs	r3, r3, #3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	74fb      	strb	r3, [r7, #19]
    GPIO_PinState FourDigitsPinE_State = (segments & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	111b      	asrs	r3, r3, #4
 8000766:	b2db      	uxtb	r3, r3
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	74bb      	strb	r3, [r7, #18]
    GPIO_PinState FourDigitsPinF_State = (segments & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800076e:	7dfb      	ldrb	r3, [r7, #23]
 8000770:	115b      	asrs	r3, r3, #5
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	747b      	strb	r3, [r7, #17]
    GPIO_PinState FourDigitsPinG_State = (segments & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800077a:	7dfb      	ldrb	r3, [r7, #23]
 800077c:	119b      	asrs	r3, r3, #6
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	743b      	strb	r3, [r7, #16]
    GPIO_PinState FourDigitsPinDP_State = (segments & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	09db      	lsrs	r3, r3, #7
 800078a:	73fb      	strb	r3, [r7, #15]

    // Corresponding HAL_GPIO_WritePin calls
    HAL_GPIO_WritePin(FourDigitA_GPIO_Port, FourDigitA_Pin, FourDigitsPinA_State);
 800078c:	7dbb      	ldrb	r3, [r7, #22]
 800078e:	461a      	mov	r2, r3
 8000790:	2104      	movs	r1, #4
 8000792:	481b      	ldr	r0, [pc, #108]	; (8000800 <FourDigitsetSegments+0xdc>)
 8000794:	f002 fa6c 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitB_GPIO_Port, FourDigitB_Pin, FourDigitsPinB_State);
 8000798:	7d7b      	ldrb	r3, [r7, #21]
 800079a:	461a      	mov	r2, r3
 800079c:	2102      	movs	r1, #2
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <FourDigitsetSegments+0xdc>)
 80007a0:	f002 fa66 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitC_GPIO_Port, FourDigitC_Pin, FourDigitsPinC_State);
 80007a4:	7d3b      	ldrb	r3, [r7, #20]
 80007a6:	461a      	mov	r2, r3
 80007a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ac:	4814      	ldr	r0, [pc, #80]	; (8000800 <FourDigitsetSegments+0xdc>)
 80007ae:	f002 fa5f 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD_GPIO_Port, FourDigitD_Pin, FourDigitsPinD_State);
 80007b2:	7cfb      	ldrb	r3, [r7, #19]
 80007b4:	461a      	mov	r2, r3
 80007b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <FourDigitsetSegments+0xdc>)
 80007bc:	f002 fa58 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitE_GPIO_Port, FourDigitE_Pin, FourDigitsPinE_State);
 80007c0:	7cbb      	ldrb	r3, [r7, #18]
 80007c2:	461a      	mov	r2, r3
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <FourDigitsetSegments+0xdc>)
 80007ca:	f002 fa51 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitF_GPIO_Port, FourDigitF_Pin, FourDigitsPinF_State);
 80007ce:	7c7b      	ldrb	r3, [r7, #17]
 80007d0:	461a      	mov	r2, r3
 80007d2:	2110      	movs	r1, #16
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <FourDigitsetSegments+0xe0>)
 80007d6:	f002 fa4b 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitG_GPIO_Port, FourDigitG_Pin, FourDigitsPinG_State);
 80007da:	7c3b      	ldrb	r3, [r7, #16]
 80007dc:	461a      	mov	r2, r3
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	4809      	ldr	r0, [pc, #36]	; (8000808 <FourDigitsetSegments+0xe4>)
 80007e4:	f002 fa44 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, FourDigitsPinDP_State);
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	461a      	mov	r2, r3
 80007ec:	2110      	movs	r1, #16
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <FourDigitsetSegments+0xdc>)
 80007f0:	f002 fa3e 	bl	8002c70 <HAL_GPIO_WritePin>

}
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	08008f10 	.word	0x08008f10
 8000800:	40020400 	.word	0x40020400
 8000804:	40020800 	.word	0x40020800
 8000808:	40020000 	.word	0x40020000

0800080c <FourDigitsSetCathode>:

void FourDigitsSetCathode(uint8_t Digit)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState FourDigitsCathodeD1_Pin_State = (Digit == 1)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b01      	cmp	r3, #1
 800081a:	bf14      	ite	ne
 800081c:	2301      	movne	r3, #1
 800081e:	2300      	moveq	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState FourDigitsCathodeD2_Pin_State = (Digit == 2)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b02      	cmp	r3, #2
 8000828:	bf14      	ite	ne
 800082a:	2301      	movne	r3, #1
 800082c:	2300      	moveq	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState FourDigitsCathodeD3_Pin_State = (Digit == 3)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b03      	cmp	r3, #3
 8000836:	bf14      	ite	ne
 8000838:	2301      	movne	r3, #1
 800083a:	2300      	moveq	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	737b      	strb	r3, [r7, #13]
	GPIO_PinState FourDigitsCathodeD4_Pin_State = (Digit == 4)? GPIO_PIN_RESET : GPIO_PIN_SET;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	733b      	strb	r3, [r7, #12]



    HAL_GPIO_WritePin(FourDigitD1_GPIO_Port, FourDigitD1_Pin, FourDigitsCathodeD1_Pin_State);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	461a      	mov	r2, r3
 8000852:	2120      	movs	r1, #32
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <FourDigitsSetCathode+0x80>)
 8000856:	f002 fa0b 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD2_GPIO_Port, FourDigitD2_Pin, FourDigitsCathodeD2_Pin_State);
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	461a      	mov	r2, r3
 800085e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <FourDigitsSetCathode+0x84>)
 8000864:	f002 fa04 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD3_GPIO_Port, FourDigitD3_Pin, FourDigitsCathodeD3_Pin_State);
 8000868:	7b7b      	ldrb	r3, [r7, #13]
 800086a:	461a      	mov	r2, r3
 800086c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <FourDigitsSetCathode+0x84>)
 8000872:	f002 f9fd 	bl	8002c70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FourDigitD4_GPIO_Port, FourDigitD4_Pin, FourDigitsCathodeD4_Pin_State);
 8000876:	7b3b      	ldrb	r3, [r7, #12]
 8000878:	461a      	mov	r2, r3
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <FourDigitsSetCathode+0x84>)
 800087e:	f002 f9f7 	bl	8002c70 <HAL_GPIO_WritePin>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40020400 	.word	0x40020400
 8000890:	40020000 	.word	0x40020000

08000894 <FourDigitsWrite>:
void FourDigitsWrite(uint8_t Digit,uint8_t number)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	71bb      	strb	r3, [r7, #6]
	FourDigitsetSegments(number);
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff3c 	bl	8000724 <FourDigitsetSegments>
	FourDigitsSetCathode(Digit);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ffac 	bl	800080c <FourDigitsSetCathode>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <DisplayTime>:
	  FourDigitsSetCathode(3);
	  HAL_GPIO_WritePin(FourDigitDP_GPIO_Port, FourDigitDP_Pin, State);
}

void DisplayTime(RTC_TimeTypeDef Time, RTC_DateTypeDef Date, osMutexId_t UartMutexHandle)
{
 80008bc:	b084      	sub	sp, #16
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	f107 0c10 	add.w	ip, r7, #16
 80008c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f107 0110 	add.w	r1, r7, #16
 80008d2:	485a      	ldr	r0, [pc, #360]	; (8000a3c <DisplayTime+0x180>)
 80008d4:	f003 f8d4 	bl	8003a80 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	4856      	ldr	r0, [pc, #344]	; (8000a3c <DisplayTime+0x180>)
 80008e2:	f003 f9af 	bl	8003c44 <HAL_RTC_GetDate>


	  HoursFirstDigit = Time.Hours / 10;  // Extract the first digit
 80008e6:	7c3b      	ldrb	r3, [r7, #16]
 80008e8:	4a55      	ldr	r2, [pc, #340]	; (8000a40 <DisplayTime+0x184>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <DisplayTime+0x188>)
 80008f4:	701a      	strb	r2, [r3, #0]
	  HoursSecondDigit=Time.Hours % 10; // Extract the second digit
 80008f6:	7c3a      	ldrb	r2, [r7, #16]
 80008f8:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <DisplayTime+0x184>)
 80008fa:	fba3 1302 	umull	r1, r3, r3, r2
 80008fe:	08d9      	lsrs	r1, r3, #3
 8000900:	460b      	mov	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b4e      	ldr	r3, [pc, #312]	; (8000a48 <DisplayTime+0x18c>)
 800090e:	701a      	strb	r2, [r3, #0]

	  MinutsFirstDigit = Time.Minutes / 10;  // Extract the first digit
 8000910:	7c7b      	ldrb	r3, [r7, #17]
 8000912:	4a4b      	ldr	r2, [pc, #300]	; (8000a40 <DisplayTime+0x184>)
 8000914:	fba2 2303 	umull	r2, r3, r2, r3
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b4b      	ldr	r3, [pc, #300]	; (8000a4c <DisplayTime+0x190>)
 800091e:	701a      	strb	r2, [r3, #0]
	  MinutsSecondDigit=Time.Minutes % 10; // Extract the second digit
 8000920:	7c7a      	ldrb	r2, [r7, #17]
 8000922:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <DisplayTime+0x184>)
 8000924:	fba3 1302 	umull	r1, r3, r3, r2
 8000928:	08d9      	lsrs	r1, r3, #3
 800092a:	460b      	mov	r3, r1
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b46      	ldr	r3, [pc, #280]	; (8000a50 <DisplayTime+0x194>)
 8000938:	701a      	strb	r2, [r3, #0]


	    // Display the first digit
	    FourDigitsWrite(4, HoursFirstDigit);
 800093a:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <DisplayTime+0x188>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	4619      	mov	r1, r3
 8000940:	2004      	movs	r0, #4
 8000942:	f7ff ffa7 	bl	8000894 <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1));
 8000946:	2001      	movs	r0, #1
 8000948:	f004 f9ff 	bl	8004d4a <osDelay>

	    // Display the second digit
	    FourDigitsWrite(3, HoursSecondDigit);
 800094c:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <DisplayTime+0x18c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	2003      	movs	r0, #3
 8000954:	f7ff ff9e 	bl	8000894 <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1));
 8000958:	2001      	movs	r0, #1
 800095a:	f004 f9f6 	bl	8004d4a <osDelay>


	    FourDigitsWrite(2, MinutsFirstDigit);
 800095e:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <DisplayTime+0x190>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff ff95 	bl	8000894 <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1));
 800096a:	2001      	movs	r0, #1
 800096c:	f004 f9ed 	bl	8004d4a <osDelay>

	    FourDigitsWrite(1, MinutsSecondDigit);
 8000970:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <DisplayTime+0x194>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff ff8c 	bl	8000894 <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1));
 800097c:	2001      	movs	r0, #1
 800097e:	f004 f9e4 	bl	8004d4a <osDelay>

		  if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <DisplayTime+0x180>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2b40      	cmp	r3, #64	; 0x40
 8000988:	d109      	bne.n	800099e <DisplayTime+0xe2>
		  {

		    if (Time.TimeFormat == RTC_HOURFORMAT12_PM) {
 800098a:	7cfb      	ldrb	r3, [r7, #19]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d106      	bne.n	800099e <DisplayTime+0xe2>
		    	   FourDigitsWrite(1, 10);
 8000990:	210a      	movs	r1, #10
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff7e 	bl	8000894 <FourDigitsWrite>
		    	osDelay(pdMS_TO_TICKS(1));
 8000998:	2001      	movs	r0, #1
 800099a:	f004 f9d6 	bl	8004d4a <osDelay>





	    	uint32_t currentTick = osKernelGetTickCount();
 800099e:	f004 f92d 	bl	8004bfc <osKernelGetTickCount>
 80009a2:	6078      	str	r0, [r7, #4]
	    	 if (currentTick - lastTick >= 500) {
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <DisplayTime+0x198>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009b0:	d311      	bcc.n	80009d6 <DisplayTime+0x11a>
	    		 DpState = !DpState;
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <DisplayTime+0x19c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf14      	ite	ne
 80009ba:	2301      	movne	r3, #1
 80009bc:	2300      	moveq	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f083 0301 	eor.w	r3, r3, #1
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <DisplayTime+0x19c>)
 80009ce:	701a      	strb	r2, [r3, #0]
	    	       lastTick = currentTick;
 80009d0:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <DisplayTime+0x198>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
	    	        }
	    if(DpState)
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <DisplayTime+0x19c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d004      	beq.n	80009e8 <DisplayTime+0x12c>
	    {
	    	FourDigitsWrite(3, 10);
 80009de:	210a      	movs	r1, #10
 80009e0:	2003      	movs	r0, #3
 80009e2:	f7ff ff57 	bl	8000894 <FourDigitsWrite>
 80009e6:	e003      	b.n	80009f0 <DisplayTime+0x134>
	    }
	    else
	    {
	    	FourDigitsWrite(3, 11);
 80009e8:	210b      	movs	r1, #11
 80009ea:	2003      	movs	r0, #3
 80009ec:	f7ff ff52 	bl	8000894 <FourDigitsWrite>
	    }
	    osDelay(pdMS_TO_TICKS(1));
 80009f0:	2001      	movs	r0, #1
 80009f2:	f004 f9aa 	bl	8004d4a <osDelay>

	    //Update AM PM manualy
	    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <DisplayTime+0x180>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b40      	cmp	r3, #64	; 0x40
 80009fc:	d113      	bne.n	8000a26 <DisplayTime+0x16a>
	    {
	           // Check if the hour has transitioned from 12 to 1
	           if (prevHour == 12 && Time.Hours == 1)
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <DisplayTime+0x1a0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b0c      	cmp	r3, #12
 8000a04:	d10f      	bne.n	8000a26 <DisplayTime+0x16a>
 8000a06:	7c3b      	ldrb	r3, [r7, #16]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d10c      	bne.n	8000a26 <DisplayTime+0x16a>
	           {
	               // Toggle AM/PM
	               Time.TimeFormat = (Time.TimeFormat == RTC_HOURFORMAT12_AM) ? RTC_HOURFORMAT12_PM : RTC_HOURFORMAT12_AM;
 8000a0c:	7cfb      	ldrb	r3, [r7, #19]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf0c      	ite	eq
 8000a12:	2301      	moveq	r3, #1
 8000a14:	2300      	movne	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	74fb      	strb	r3, [r7, #19]
	               HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN); // Update the RTC time
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f107 0110 	add.w	r1, r7, #16
 8000a20:	4806      	ldr	r0, [pc, #24]	; (8000a3c <DisplayTime+0x180>)
 8000a22:	f002 ff93 	bl	800394c <HAL_RTC_SetTime>
	           }

	    }
	    prevHour = Time.Hours;
 8000a26:	7c3a      	ldrb	r2, [r7, #16]
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <DisplayTime+0x1a0>)
 8000a2a:	701a      	strb	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a36:	b004      	add	sp, #16
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000108 	.word	0x20000108
 8000a40:	cccccccd 	.word	0xcccccccd
 8000a44:	2000008f 	.word	0x2000008f
 8000a48:	20000090 	.word	0x20000090
 8000a4c:	20000091 	.word	0x20000091
 8000a50:	20000092 	.word	0x20000092
 8000a54:	20000088 	.word	0x20000088
 8000a58:	2000008c 	.word	0x2000008c
 8000a5c:	20000093 	.word	0x20000093

08000a60 <DisplaySetMinutes>:

void DisplaySetMinutes(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000a60:	b084      	sub	sp, #16
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	f107 0c10 	add.w	ip, r7, #16
 8000a6c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f107 0110 	add.w	r1, r7, #16
 8000a76:	484a      	ldr	r0, [pc, #296]	; (8000ba0 <DisplaySetMinutes+0x140>)
 8000a78:	f003 f802 	bl	8003a80 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	4846      	ldr	r0, [pc, #280]	; (8000ba0 <DisplaySetMinutes+0x140>)
 8000a86:	f003 f8dd 	bl	8003c44 <HAL_RTC_GetDate>

	  HoursFirstDigit = Time.Hours / 10;
 8000a8a:	7c3b      	ldrb	r3, [r7, #16]
 8000a8c:	4a45      	ldr	r2, [pc, #276]	; (8000ba4 <DisplaySetMinutes+0x144>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b44      	ldr	r3, [pc, #272]	; (8000ba8 <DisplaySetMinutes+0x148>)
 8000a98:	701a      	strb	r2, [r3, #0]
	  HoursSecondDigit=Time.Hours % 10;
 8000a9a:	7c3a      	ldrb	r2, [r7, #16]
 8000a9c:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <DisplaySetMinutes+0x144>)
 8000a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa2:	08d9      	lsrs	r1, r3, #3
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <DisplaySetMinutes+0x14c>)
 8000ab2:	701a      	strb	r2, [r3, #0]

	  MinutsFirstDigit = Time.Minutes / 10;
 8000ab4:	7c7b      	ldrb	r3, [r7, #17]
 8000ab6:	4a3b      	ldr	r2, [pc, #236]	; (8000ba4 <DisplaySetMinutes+0x144>)
 8000ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <DisplaySetMinutes+0x150>)
 8000ac2:	701a      	strb	r2, [r3, #0]
	  MinutsSecondDigit=Time.Minutes % 10;
 8000ac4:	7c7a      	ldrb	r2, [r7, #17]
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <DisplaySetMinutes+0x144>)
 8000ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8000acc:	08d9      	lsrs	r1, r3, #3
 8000ace:	460b      	mov	r3, r1
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <DisplaySetMinutes+0x154>)
 8000adc:	701a      	strb	r2, [r3, #0]

	 uint32_t currentTick = osKernelGetTickCount();
 8000ade:	f004 f88d 	bl	8004bfc <osKernelGetTickCount>
 8000ae2:	6078      	str	r0, [r7, #4]

	 if (currentTick - lastTick >= 500) {
 8000ae4:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <DisplaySetMinutes+0x158>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000af0:	d311      	bcc.n	8000b16 <DisplaySetMinutes+0xb6>
		 MinutesState = !MinutesState;
 8000af2:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <DisplaySetMinutes+0x15c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f083 0301 	eor.w	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <DisplaySetMinutes+0x15c>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	 	    	       lastTick = currentTick;
 8000b10:	4a29      	ldr	r2, [pc, #164]	; (8000bb8 <DisplaySetMinutes+0x158>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
	 	    	        }


	    FourDigitsWrite(4, HoursFirstDigit);
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <DisplaySetMinutes+0x148>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2004      	movs	r0, #4
 8000b1e:	f7ff feb9 	bl	8000894 <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1));
 8000b22:	2001      	movs	r0, #1
 8000b24:	f004 f911 	bl	8004d4a <osDelay>


	    FourDigitsWrite(3, HoursSecondDigit);
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <DisplaySetMinutes+0x14c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f7ff feb0 	bl	8000894 <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1));
 8000b34:	2001      	movs	r0, #1
 8000b36:	f004 f908 	bl	8004d4a <osDelay>

		  if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <DisplaySetMinutes+0x140>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b40      	cmp	r3, #64	; 0x40
 8000b40:	d109      	bne.n	8000b56 <DisplaySetMinutes+0xf6>
		  {

		    if (Time.TimeFormat == RTC_HOURFORMAT12_PM) {
 8000b42:	7cfb      	ldrb	r3, [r7, #19]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d106      	bne.n	8000b56 <DisplaySetMinutes+0xf6>
		    	   FourDigitsWrite(1, 10);
 8000b48:	210a      	movs	r1, #10
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fea2 	bl	8000894 <FourDigitsWrite>
		    	osDelay(pdMS_TO_TICKS(1)); // Wait for 50ms
 8000b50:	2001      	movs	r0, #1
 8000b52:	f004 f8fa 	bl	8004d4a <osDelay>
		  }




	    if(MinutesState)
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <DisplaySetMinutes+0x15c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d012      	beq.n	8000b84 <DisplaySetMinutes+0x124>
	    {
		    FourDigitsWrite(2, MinutsFirstDigit);
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <DisplaySetMinutes+0x150>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4619      	mov	r1, r3
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff fe95 	bl	8000894 <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1));
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f004 f8ed 	bl	8004d4a <osDelay>

		    FourDigitsWrite(1, MinutsSecondDigit);
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <DisplaySetMinutes+0x154>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff fe8c 	bl	8000894 <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1));
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f004 f8e4 	bl	8004d4a <osDelay>
	    {
	    	FourDigitsWrite(3, 11);
	    	osDelay(pdMS_TO_TICKS(1));
	    }

}
 8000b82:	e006      	b.n	8000b92 <DisplaySetMinutes+0x132>
	    	FourDigitsWrite(3, 11);
 8000b84:	210b      	movs	r1, #11
 8000b86:	2003      	movs	r0, #3
 8000b88:	f7ff fe84 	bl	8000894 <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1));
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f004 f8dc 	bl	8004d4a <osDelay>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b9c:	b004      	add	sp, #16
 8000b9e:	4770      	bx	lr
 8000ba0:	20000108 	.word	0x20000108
 8000ba4:	cccccccd 	.word	0xcccccccd
 8000ba8:	2000008f 	.word	0x2000008f
 8000bac:	20000090 	.word	0x20000090
 8000bb0:	20000091 	.word	0x20000091
 8000bb4:	20000092 	.word	0x20000092
 8000bb8:	20000088 	.word	0x20000088
 8000bbc:	2000008d 	.word	0x2000008d

08000bc0 <DisplaySetHours>:


void DisplaySetHours(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	f107 0c10 	add.w	ip, r7, #16
 8000bcc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f107 0110 	add.w	r1, r7, #16
 8000bd6:	484a      	ldr	r0, [pc, #296]	; (8000d00 <DisplaySetHours+0x140>)
 8000bd8:	f002 ff52 	bl	8003a80 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	4846      	ldr	r0, [pc, #280]	; (8000d00 <DisplaySetHours+0x140>)
 8000be6:	f003 f82d 	bl	8003c44 <HAL_RTC_GetDate>


	  HoursFirstDigit = Time.Hours / 10;
 8000bea:	7c3b      	ldrb	r3, [r7, #16]
 8000bec:	4a45      	ldr	r2, [pc, #276]	; (8000d04 <DisplaySetHours+0x144>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <DisplaySetHours+0x148>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	  HoursSecondDigit=Time.Hours % 10;
 8000bfa:	7c3a      	ldrb	r2, [r7, #16]
 8000bfc:	4b41      	ldr	r3, [pc, #260]	; (8000d04 <DisplaySetHours+0x144>)
 8000bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8000c02:	08d9      	lsrs	r1, r3, #3
 8000c04:	460b      	mov	r3, r1
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <DisplaySetHours+0x14c>)
 8000c12:	701a      	strb	r2, [r3, #0]

	  MinutsFirstDigit = Time.Minutes / 10;
 8000c14:	7c7b      	ldrb	r3, [r7, #17]
 8000c16:	4a3b      	ldr	r2, [pc, #236]	; (8000d04 <DisplaySetHours+0x144>)
 8000c18:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <DisplaySetHours+0x150>)
 8000c22:	701a      	strb	r2, [r3, #0]
	  MinutsSecondDigit=Time.Minutes % 10;
 8000c24:	7c7a      	ldrb	r2, [r7, #17]
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <DisplaySetHours+0x144>)
 8000c28:	fba3 1302 	umull	r1, r3, r3, r2
 8000c2c:	08d9      	lsrs	r1, r3, #3
 8000c2e:	460b      	mov	r3, r1
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	440b      	add	r3, r1
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <DisplaySetHours+0x154>)
 8000c3c:	701a      	strb	r2, [r3, #0]

	  if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <DisplaySetHours+0x140>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b40      	cmp	r3, #64	; 0x40
 8000c44:	d109      	bne.n	8000c5a <DisplaySetHours+0x9a>
	  {

	    if (Time.TimeFormat == RTC_HOURFORMAT12_PM) {
 8000c46:	7cfb      	ldrb	r3, [r7, #19]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d106      	bne.n	8000c5a <DisplaySetHours+0x9a>
	    	   FourDigitsWrite(1, 10);
 8000c4c:	210a      	movs	r1, #10
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff fe20 	bl	8000894 <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1));
 8000c54:	2001      	movs	r0, #1
 8000c56:	f004 f878 	bl	8004d4a <osDelay>

	  }



	 uint32_t currentTick = osKernelGetTickCount();
 8000c5a:	f003 ffcf 	bl	8004bfc <osKernelGetTickCount>
 8000c5e:	6078      	str	r0, [r7, #4]

	 if (currentTick - lastTick >= 500) {
 8000c60:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <DisplaySetHours+0x158>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c6c:	d311      	bcc.n	8000c92 <DisplaySetHours+0xd2>
		 HoursState = !HoursState;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <DisplaySetHours+0x15c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf14      	ite	ne
 8000c76:	2301      	movne	r3, #1
 8000c78:	2300      	moveq	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f083 0301 	eor.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <DisplaySetHours+0x15c>)
 8000c8a:	701a      	strb	r2, [r3, #0]
	 	    	       lastTick = currentTick;
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <DisplaySetHours+0x158>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
	 	    	        }
	 	 	 	FourDigitsWrite(2, MinutsFirstDigit);
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <DisplaySetHours+0x150>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f7ff fdfb 	bl	8000894 <FourDigitsWrite>
	 		    osDelay(pdMS_TO_TICKS(1));
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f004 f853 	bl	8004d4a <osDelay>

	 		    FourDigitsWrite(1, MinutsSecondDigit);
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <DisplaySetHours+0x154>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fdf2 	bl	8000894 <FourDigitsWrite>
	 		    osDelay(pdMS_TO_TICKS(1));
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f004 f84a 	bl	8004d4a <osDelay>
	    if(HoursState)
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <DisplaySetHours+0x15c>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d012      	beq.n	8000ce4 <DisplaySetHours+0x124>
	    {
		    FourDigitsWrite(4, HoursFirstDigit);
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <DisplaySetHours+0x148>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2004      	movs	r0, #4
 8000cc6:	f7ff fde5 	bl	8000894 <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1));
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f004 f83d 	bl	8004d4a <osDelay>

		    FourDigitsWrite(3, HoursSecondDigit);
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <DisplaySetHours+0x14c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f7ff fddc 	bl	8000894 <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1));
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f004 f834 	bl	8004d4a <osDelay>
	    else
	    {
	    	FourDigitsWrite(3, 11);
	    	osDelay(pdMS_TO_TICKS(1));
	    }
}
 8000ce2:	e006      	b.n	8000cf2 <DisplaySetHours+0x132>
	    	FourDigitsWrite(3, 11);
 8000ce4:	210b      	movs	r1, #11
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f7ff fdd4 	bl	8000894 <FourDigitsWrite>
	    	osDelay(pdMS_TO_TICKS(1));
 8000cec:	2001      	movs	r0, #1
 8000cee:	f004 f82c 	bl	8004d4a <osDelay>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cfc:	b004      	add	sp, #16
 8000cfe:	4770      	bx	lr
 8000d00:	20000108 	.word	0x20000108
 8000d04:	cccccccd 	.word	0xcccccccd
 8000d08:	2000008f 	.word	0x2000008f
 8000d0c:	20000090 	.word	0x20000090
 8000d10:	20000091 	.word	0x20000091
 8000d14:	20000092 	.word	0x20000092
 8000d18:	20000088 	.word	0x20000088
 8000d1c:	2000008e 	.word	0x2000008e

08000d20 <AddOneMinuteToRTC>:


void AddOneMinuteToRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000d20:	b084      	sub	sp, #16
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	f107 0c08 	add.w	ip, r7, #8
 8000d2a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f107 0108 	add.w	r1, r7, #8
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <AddOneMinuteToRTC+0x60>)
 8000d36:	f002 fea3 	bl	8003a80 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4619      	mov	r1, r3
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <AddOneMinuteToRTC+0x60>)
 8000d44:	f002 ff7e 	bl	8003c44 <HAL_RTC_GetDate>

    // Add one minute
    Time.Minutes++;
 8000d48:	7a7b      	ldrb	r3, [r7, #9]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	727b      	strb	r3, [r7, #9]

    // Handle minute overflow (if it goes beyond 59, reset to 0)
    if (Time.Minutes >= 60)
 8000d50:	7a7b      	ldrb	r3, [r7, #9]
 8000d52:	2b3b      	cmp	r3, #59	; 0x3b
 8000d54:	d901      	bls.n	8000d5a <AddOneMinuteToRTC+0x3a>
    {
        Time.Minutes = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	727b      	strb	r3, [r7, #9]
        // No change to the hours
    }

    // Set the new time
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f107 0108 	add.w	r1, r7, #8
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <AddOneMinuteToRTC+0x60>)
 8000d62:	f002 fdf3 	bl	800394c <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Set the date again due to the RTC hardware design
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <AddOneMinuteToRTC+0x60>)
 8000d70:	f002 fee4 	bl	8003b3c <HAL_RTC_SetDate>
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d7c:	b004      	add	sp, #16
 8000d7e:	4770      	bx	lr
 8000d80:	20000108 	.word	0x20000108

08000d84 <SubtractOneMinuteFromRTC>:

void SubtractOneMinuteFromRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000d84:	b084      	sub	sp, #16
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	f107 0c08 	add.w	ip, r7, #8
 8000d8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f107 0108 	add.w	r1, r7, #8
 8000d98:	4813      	ldr	r0, [pc, #76]	; (8000de8 <SubtractOneMinuteFromRTC+0x64>)
 8000d9a:	f002 fe71 	bl	8003a80 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This line is necessary due to the RTC hardware design
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	4810      	ldr	r0, [pc, #64]	; (8000de8 <SubtractOneMinuteFromRTC+0x64>)
 8000da8:	f002 ff4c 	bl	8003c44 <HAL_RTC_GetDate>

    // Check if the minutes are at 0, and if so, wrap around to 59
    if (Time.Minutes == 0) {
 8000dac:	7a7b      	ldrb	r3, [r7, #9]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <SubtractOneMinuteFromRTC+0x34>
        Time.Minutes = 59;
 8000db2:	233b      	movs	r3, #59	; 0x3b
 8000db4:	727b      	strb	r3, [r7, #9]
 8000db6:	e003      	b.n	8000dc0 <SubtractOneMinuteFromRTC+0x3c>
        // No change to the hours
    } else {
        // Subtract one minute
        Time.Minutes--;
 8000db8:	7a7b      	ldrb	r3, [r7, #9]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	727b      	strb	r3, [r7, #9]
    }

    // Set the new time
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f107 0108 	add.w	r1, r7, #8
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <SubtractOneMinuteFromRTC+0x64>)
 8000dc8:	f002 fdc0 	bl	800394c <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Set the date again due to the RTC hardware design
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <SubtractOneMinuteFromRTC+0x64>)
 8000dd6:	f002 feb1 	bl	8003b3c <HAL_RTC_SetDate>
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de2:	b004      	add	sp, #16
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000108 	.word	0x20000108

08000dec <AddOneHourToRTC>:

void AddOneHourToRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000dec:	b084      	sub	sp, #16
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	f107 0c08 	add.w	ip, r7, #8
 8000df6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <AddOneHourToRTC+0x94>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	22ca      	movs	r2, #202	; 0xca
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <AddOneHourToRTC+0x94>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2253      	movs	r2, #83	; 0x53
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24




    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f107 0108 	add.w	r1, r7, #8
 8000e10:	481b      	ldr	r0, [pc, #108]	; (8000e80 <AddOneHourToRTC+0x94>)
 8000e12:	f002 fe35 	bl	8003a80 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This is necessary due to the RTC hardware design
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <AddOneHourToRTC+0x94>)
 8000e20:	f002 ff10 	bl	8003c44 <HAL_RTC_GetDate>

    // Add one hour
    Time.Hours++;
 8000e24:	7a3b      	ldrb	r3, [r7, #8]
 8000e26:	3301      	adds	r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	723b      	strb	r3, [r7, #8]

    // Handle hour overflow (if it goes beyond 23, reset to 0)
    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <AddOneHourToRTC+0x94>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b40      	cmp	r3, #64	; 0x40
 8000e32:	d105      	bne.n	8000e40 <AddOneHourToRTC+0x54>
        if (Time.Hours >= 13)
 8000e34:	7a3b      	ldrb	r3, [r7, #8]
 8000e36:	2b0c      	cmp	r3, #12
 8000e38:	d90b      	bls.n	8000e52 <AddOneHourToRTC+0x66>
        {
            Time.Hours = 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	723b      	strb	r3, [r7, #8]
 8000e3e:	e008      	b.n	8000e52 <AddOneHourToRTC+0x66>
        }
    }
    else if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <AddOneHourToRTC+0x94>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d104      	bne.n	8000e52 <AddOneHourToRTC+0x66>
    {
			if (Time.Hours >= 24)
 8000e48:	7a3b      	ldrb	r3, [r7, #8]
 8000e4a:	2b17      	cmp	r3, #23
 8000e4c:	d901      	bls.n	8000e52 <AddOneHourToRTC+0x66>
			{
				Time.Hours = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	723b      	strb	r3, [r7, #8]
			}
    }
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f107 0108 	add.w	r1, r7, #8
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <AddOneHourToRTC+0x94>)
 8000e5a:	f002 fd77 	bl	800394c <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <AddOneHourToRTC+0x94>)
 8000e68:	f002 fe68 	bl	8003b3c <HAL_RTC_SetDate>
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <AddOneHourToRTC+0x94>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e7c:	b004      	add	sp, #16
 8000e7e:	4770      	bx	lr
 8000e80:	20000108 	.word	0x20000108

08000e84 <SubtractOneHourFromRTC>:

void SubtractOneHourFromRTC(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000e84:	b084      	sub	sp, #16
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	f107 0c08 	add.w	ip, r7, #8
 8000e8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <SubtractOneHourFromRTC+0xa0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	22ca      	movs	r2, #202	; 0xca
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <SubtractOneHourFromRTC+0xa0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2253      	movs	r2, #83	; 0x53
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f107 0108 	add.w	r1, r7, #8
 8000ea8:	481e      	ldr	r0, [pc, #120]	; (8000f24 <SubtractOneHourFromRTC+0xa0>)
 8000eaa:	f002 fde9 	bl	8003a80 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);  // This is necessary due to the RTC hardware design
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481b      	ldr	r0, [pc, #108]	; (8000f24 <SubtractOneHourFromRTC+0xa0>)
 8000eb8:	f002 fec4 	bl	8003c44 <HAL_RTC_GetDate>



    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <SubtractOneHourFromRTC+0xa0>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b40      	cmp	r3, #64	; 0x40
 8000ec2:	d10a      	bne.n	8000eda <SubtractOneHourFromRTC+0x56>
    	  	  if (Time.Hours == 1)
 8000ec4:	7a3b      	ldrb	r3, [r7, #8]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d102      	bne.n	8000ed0 <SubtractOneHourFromRTC+0x4c>
    	  	  {
    	  		  Time.Hours = 12;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	723b      	strb	r3, [r7, #8]
 8000ece:	e012      	b.n	8000ef6 <SubtractOneHourFromRTC+0x72>
    	  	  }
    	    else
    	    {

              Time.Hours--;
 8000ed0:	7a3b      	ldrb	r3, [r7, #8]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	723b      	strb	r3, [r7, #8]
 8000ed8:	e00d      	b.n	8000ef6 <SubtractOneHourFromRTC+0x72>
    	     }
       }

       else if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <SubtractOneHourFromRTC+0xa0>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <SubtractOneHourFromRTC+0x72>
       {
    	   if (Time.Hours == 0) {
 8000ee2:	7a3b      	ldrb	r3, [r7, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <SubtractOneHourFromRTC+0x6a>
    	           Time.Hours = 23;
 8000ee8:	2317      	movs	r3, #23
 8000eea:	723b      	strb	r3, [r7, #8]
 8000eec:	e003      	b.n	8000ef6 <SubtractOneHourFromRTC+0x72>
    	           // No change to the date
    	       } else {
    	           // Subtract one hour
    	           Time.Hours--;
 8000eee:	7a3b      	ldrb	r3, [r7, #8]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	723b      	strb	r3, [r7, #8]
    	       }
       }
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f107 0108 	add.w	r1, r7, #8
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <SubtractOneHourFromRTC+0xa0>)
 8000efe:	f002 fd25 	bl	800394c <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <SubtractOneHourFromRTC+0xa0>)
 8000f0c:	f002 fe16 	bl	8003b3c <HAL_RTC_SetDate>
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SubtractOneHourFromRTC+0xa0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	22ff      	movs	r2, #255	; 0xff
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr
 8000f24:	20000108 	.word	0x20000108

08000f28 <ShowTimeFormat>:

void ShowTimeFormat(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8000f28:	b084      	sub	sp, #16
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	f107 0c08 	add.w	ip, r7, #8
 8000f32:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000f36:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <ShowTimeFormat+0x98>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	22ca      	movs	r2, #202	; 0xca
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <ShowTimeFormat+0x98>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2253      	movs	r2, #83	; 0x53
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
			FourDigitsWrite(1, 13);
 8000f46:	210d      	movs	r1, #13
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fca3 	bl	8000894 <FourDigitsWrite>
			osDelay(pdMS_TO_TICKS(1));
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f003 fefb 	bl	8004d4a <osDelay>


			FourDigitsWrite(2, 12);
 8000f54:	210c      	movs	r1, #12
 8000f56:	2002      	movs	r0, #2
 8000f58:	f7ff fc9c 	bl	8000894 <FourDigitsWrite>
			osDelay(pdMS_TO_TICKS(1));
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f003 fef4 	bl	8004d4a <osDelay>


		if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <ShowTimeFormat+0x98>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10d      	bne.n	8000f86 <ShowTimeFormat+0x5e>
		{
		    FourDigitsWrite(3, 4);
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f7ff fc91 	bl	8000894 <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1));
 8000f72:	2001      	movs	r0, #1
 8000f74:	f003 fee9 	bl	8004d4a <osDelay>

		    FourDigitsWrite(4, 2);
 8000f78:	2102      	movs	r1, #2
 8000f7a:	2004      	movs	r0, #4
 8000f7c:	f7ff fc8a 	bl	8000894 <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1));
 8000f80:	2001      	movs	r0, #1
 8000f82:	f003 fee2 	bl	8004d4a <osDelay>
		}
		if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <ShowTimeFormat+0x98>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b40      	cmp	r3, #64	; 0x40
 8000f8c:	d10d      	bne.n	8000faa <ShowTimeFormat+0x82>
		{
		    FourDigitsWrite(3, 2);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	2003      	movs	r0, #3
 8000f92:	f7ff fc7f 	bl	8000894 <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1));
 8000f96:	2001      	movs	r0, #1
 8000f98:	f003 fed7 	bl	8004d4a <osDelay>

		    FourDigitsWrite(4, 1);
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	2004      	movs	r0, #4
 8000fa0:	f7ff fc78 	bl	8000894 <FourDigitsWrite>
		    osDelay(pdMS_TO_TICKS(1));
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f003 fed0 	bl	8004d4a <osDelay>
		}
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <ShowTimeFormat+0x98>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	22ff      	movs	r2, #255	; 0xff
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fba:	b004      	add	sp, #16
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000108 	.word	0x20000108

08000fc4 <ChangeTimeFormat>:


void ChangeTimeFormat(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef Time;
    RTC_DateTypeDef Date;

    // Unlock the RTC
    __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <ChangeTimeFormat+0xc0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	22ca      	movs	r2, #202	; 0xca
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <ChangeTimeFormat+0xc0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2253      	movs	r2, #83	; 0x53
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24

    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4828      	ldr	r0, [pc, #160]	; (8001084 <ChangeTimeFormat+0xc0>)
 8000fe2:	f002 fd4d 	bl	8003a80 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Necessary to unlock the shadow registers
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4619      	mov	r1, r3
 8000fec:	4825      	ldr	r0, [pc, #148]	; (8001084 <ChangeTimeFormat+0xc0>)
 8000fee:	f002 fe29 	bl	8003c44 <HAL_RTC_GetDate>

    // Check current format and switch
    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_24) {
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <ChangeTimeFormat+0xc0>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d117      	bne.n	800102a <ChangeTimeFormat+0x66>
        // Switching to 12-hour format
        hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <ChangeTimeFormat+0xc0>)
 8000ffc:	2240      	movs	r2, #64	; 0x40
 8000ffe:	605a      	str	r2, [r3, #4]

        // Convert 13:00 and later to PM
        if (Time.Hours >= 13) {
 8001000:	793b      	ldrb	r3, [r7, #4]
 8001002:	2b0c      	cmp	r3, #12
 8001004:	d906      	bls.n	8001014 <ChangeTimeFormat+0x50>
            Time.Hours -= 12;
 8001006:	793b      	ldrb	r3, [r7, #4]
 8001008:	3b0c      	subs	r3, #12
 800100a:	b2db      	uxtb	r3, r3
 800100c:	713b      	strb	r3, [r7, #4]
            Time.TimeFormat = RTC_HOURFORMAT12_PM;
 800100e:	2301      	movs	r3, #1
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e020      	b.n	8001056 <ChangeTimeFormat+0x92>
        } else if (Time.Hours == 0) {
 8001014:	793b      	ldrb	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d104      	bne.n	8001024 <ChangeTimeFormat+0x60>
            // Convert 00:00 (midnight) to 12 AM
            Time.Hours = 12;
 800101a:	230c      	movs	r3, #12
 800101c:	713b      	strb	r3, [r7, #4]
            Time.TimeFormat = RTC_HOURFORMAT12_AM;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	e018      	b.n	8001056 <ChangeTimeFormat+0x92>
        } else {
            // Morning times remain the same, set to AM
            Time.TimeFormat = RTC_HOURFORMAT12_AM;
 8001024:	2300      	movs	r3, #0
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	e015      	b.n	8001056 <ChangeTimeFormat+0x92>
        }
    } else {
        // Switching to 24-hour format
        hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <ChangeTimeFormat+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]

        // Convert 12 AM to 00
        if (Time.Hours == 12 && Time.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001030:	793b      	ldrb	r3, [r7, #4]
 8001032:	2b0c      	cmp	r3, #12
 8001034:	d105      	bne.n	8001042 <ChangeTimeFormat+0x7e>
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <ChangeTimeFormat+0x7e>
            Time.Hours = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	713b      	strb	r3, [r7, #4]
 8001040:	e009      	b.n	8001056 <ChangeTimeFormat+0x92>
        }
        // Convert PM times (except for 12 PM) by adding 12
        else if (Time.TimeFormat == RTC_HOURFORMAT12_PM && Time.Hours != 12) {
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d106      	bne.n	8001056 <ChangeTimeFormat+0x92>
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	2b0c      	cmp	r3, #12
 800104c:	d003      	beq.n	8001056 <ChangeTimeFormat+0x92>
            Time.Hours += 12;
 800104e:	793b      	ldrb	r3, [r7, #4]
 8001050:	330c      	adds	r3, #12
 8001052:	b2db      	uxtb	r3, r3
 8001054:	713b      	strb	r3, [r7, #4]
        }
    }

    // Re-initialize the RTC with the new settings
    HAL_RTC_Init(&hrtc);
 8001056:	480b      	ldr	r0, [pc, #44]	; (8001084 <ChangeTimeFormat+0xc0>)
 8001058:	f002 fc02 	bl	8003860 <HAL_RTC_Init>

    // Set the updated time and date
    HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	4808      	ldr	r0, [pc, #32]	; (8001084 <ChangeTimeFormat+0xc0>)
 8001064:	f002 fc72 	bl	800394c <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <ChangeTimeFormat+0xc0>)
 8001070:	f002 fd64 	bl	8003b3c <HAL_RTC_SetDate>

    // Lock the RTC
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <ChangeTimeFormat+0xc0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	22ff      	movs	r2, #255	; 0xff
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000108 	.word	0x20000108

08001088 <DisplayAmPm>:




void DisplayAmPm(RTC_TimeTypeDef Time, RTC_DateTypeDef Date)
{
 8001088:	b084      	sub	sp, #16
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
 800108e:	f107 0c08 	add.w	ip, r7, #8
 8001092:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001096:	2200      	movs	r2, #0
 8001098:	f107 0108 	add.w	r1, r7, #8
 800109c:	4820      	ldr	r0, [pc, #128]	; (8001120 <DisplayAmPm+0x98>)
 800109e:	f002 fcef 	bl	8003a80 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	481d      	ldr	r0, [pc, #116]	; (8001120 <DisplayAmPm+0x98>)
 80010ac:	f002 fdca 	bl	8003c44 <HAL_RTC_GetDate>



	    FourDigitsWrite(1, 15); //M
 80010b0:	210f      	movs	r1, #15
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff fbee 	bl	8000894 <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1));
 80010b8:	2001      	movs	r0, #1
 80010ba:	f003 fe46 	bl	8004d4a <osDelay>

	    FourDigitsWrite(3, 11); //OFF
 80010be:	210b      	movs	r1, #11
 80010c0:	2003      	movs	r0, #3
 80010c2:	f7ff fbe7 	bl	8000894 <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1));
 80010c6:	2001      	movs	r0, #1
 80010c8:	f003 fe3f 	bl	8004d4a <osDelay>

	    FourDigitsWrite(4, 11); //OFF
 80010cc:	210b      	movs	r1, #11
 80010ce:	2004      	movs	r0, #4
 80010d0:	f7ff fbe0 	bl	8000894 <FourDigitsWrite>
	    osDelay(pdMS_TO_TICKS(1));
 80010d4:	2001      	movs	r0, #1
 80010d6:	f003 fe38 	bl	8004d4a <osDelay>


	 			if (Time.TimeFormat == RTC_HOURFORMAT12_AM)
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d107      	bne.n	80010f0 <DisplayAmPm+0x68>
	 			{

	 			    FourDigitsWrite(2, 14); //A
 80010e0:	210e      	movs	r1, #14
 80010e2:	2002      	movs	r0, #2
 80010e4:	f7ff fbd6 	bl	8000894 <FourDigitsWrite>
	 			    osDelay(pdMS_TO_TICKS(1));
 80010e8:	2001      	movs	r0, #1
 80010ea:	f003 fe2e 	bl	8004d4a <osDelay>
	 			    FourDigitsWrite(2, 16); //P
	 			    osDelay(pdMS_TO_TICKS(1));
	 			   FourDigitsWrite(1, 10);
	 			  osDelay(pdMS_TO_TICKS(1)); // Show Dp in PM
	 			}
}
 80010ee:	e010      	b.n	8001112 <DisplayAmPm+0x8a>
	 			else if (Time.TimeFormat == RTC_HOURFORMAT12_PM)
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10d      	bne.n	8001112 <DisplayAmPm+0x8a>
	 			    FourDigitsWrite(2, 16); //P
 80010f6:	2110      	movs	r1, #16
 80010f8:	2002      	movs	r0, #2
 80010fa:	f7ff fbcb 	bl	8000894 <FourDigitsWrite>
	 			    osDelay(pdMS_TO_TICKS(1));
 80010fe:	2001      	movs	r0, #1
 8001100:	f003 fe23 	bl	8004d4a <osDelay>
	 			   FourDigitsWrite(1, 10);
 8001104:	210a      	movs	r1, #10
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff fbc4 	bl	8000894 <FourDigitsWrite>
	 			  osDelay(pdMS_TO_TICKS(1)); // Show Dp in PM
 800110c:	2001      	movs	r0, #1
 800110e:	f003 fe1c 	bl	8004d4a <osDelay>
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800111a:	b004      	add	sp, #16
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000108 	.word	0x20000108

08001124 <ChangeAMPMFormat>:

void ChangeAMPMFormat(RTC_TimeTypeDef Time, RTC_DateTypeDef Date) {
 8001124:	b084      	sub	sp, #16
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
 800112a:	f107 0c08 	add.w	ip, r7, #8
 800112e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // No need to declare sTime and sDate since we are using Time and Date passed as arguments

    // Get the current time and date
    HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001132:	2200      	movs	r2, #0
 8001134:	f107 0108 	add.w	r1, r7, #8
 8001138:	4814      	ldr	r0, [pc, #80]	; (800118c <ChangeAMPMFormat+0x68>)
 800113a:	f002 fca1 	bl	8003a80 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Necessary to unlock the shadow registers
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2200      	movs	r2, #0
 8001144:	4619      	mov	r1, r3
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <ChangeAMPMFormat+0x68>)
 8001148:	f002 fd7c 	bl	8003c44 <HAL_RTC_GetDate>

    // Check if the RTC is in 12-hour format
    if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12) {
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <ChangeAMPMFormat+0x68>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b40      	cmp	r3, #64	; 0x40
 8001152:	d114      	bne.n	800117e <ChangeAMPMFormat+0x5a>
        // Toggle AM/PM
        if (Time.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001154:	7afb      	ldrb	r3, [r7, #11]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <ChangeAMPMFormat+0x3c>
            Time.TimeFormat = RTC_HOURFORMAT12_PM;
 800115a:	2301      	movs	r3, #1
 800115c:	72fb      	strb	r3, [r7, #11]
 800115e:	e001      	b.n	8001164 <ChangeAMPMFormat+0x40>
        } else {
            Time.TimeFormat = RTC_HOURFORMAT12_AM;
 8001160:	2300      	movs	r3, #0
 8001162:	72fb      	strb	r3, [r7, #11]
        }

        // Set the new time with updated AM/PM format
        HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001164:	2200      	movs	r2, #0
 8001166:	f107 0108 	add.w	r1, r7, #8
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <ChangeAMPMFormat+0x68>)
 800116c:	f002 fbee 	bl	800394c <HAL_RTC_SetTime>
        HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN); // Set the date again due to RTC hardware design
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <ChangeAMPMFormat+0x68>)
 800117a:	f002 fcdf 	bl	8003b3c <HAL_RTC_SetDate>
    }
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b004      	add	sp, #16
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000108 	.word	0x20000108

08001190 <ReadTemperature>:

uint8_t ReadTemperature(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001196:	4827      	ldr	r0, [pc, #156]	; (8001234 <ReadTemperature+0xa4>)
 8001198:	f000 ff72 	bl	8002080 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 800119c:	210a      	movs	r1, #10
 800119e:	4825      	ldr	r0, [pc, #148]	; (8001234 <ReadTemperature+0xa4>)
 80011a0:	f001 f822 	bl	80021e8 <HAL_ADC_PollForConversion>
    uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 80011a4:	4823      	ldr	r0, [pc, #140]	; (8001234 <ReadTemperature+0xa4>)
 80011a6:	f001 f8aa 	bl	80022fe <HAL_ADC_GetValue>
 80011aa:	4603      	mov	r3, r0
 80011ac:	827b      	strh	r3, [r7, #18]

    //  reference voltage of 3.3V and a 12-bit ADC
    float voltage = ((float)adcValue * 3.3f * 1000) / 4096.0f; // Voltage in mV
 80011ae:	8a7b      	ldrh	r3, [r7, #18]
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001238 <ReadTemperature+0xa8>
 80011bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800123c <ReadTemperature+0xac>
 80011c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011c8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001240 <ReadTemperature+0xb0>
 80011cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d0:	edc7 7a03 	vstr	s15, [r7, #12]

    // Apply temperature conversion formula
    float temperatureFloat = (voltage - 500) / 10;
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001244 <ReadTemperature+0xb4>
 80011dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80011e0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80011e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e8:	edc7 7a05 	vstr	s15, [r7, #20]

    // Ensure temperature is within the range of 0 to 255
    if (temperatureFloat < 0) {
 80011ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	d503      	bpl.n	8001202 <ReadTemperature+0x72>
        temperatureFloat = 0;
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	e00a      	b.n	8001218 <ReadTemperature+0x88>
    } else if (temperatureFloat > 255) {
 8001202:	edd7 7a05 	vldr	s15, [r7, #20]
 8001206:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001248 <ReadTemperature+0xb8>
 800120a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	dd01      	ble.n	8001218 <ReadTemperature+0x88>
        temperatureFloat = 255;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <ReadTemperature+0xbc>)
 8001216:	617b      	str	r3, [r7, #20]
    }

    uint8_t temperature = (uint8_t)temperatureFloat;
 8001218:	edd7 7a05 	vldr	s15, [r7, #20]
 800121c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001220:	edc7 7a01 	vstr	s15, [r7, #4]
 8001224:	793b      	ldrb	r3, [r7, #4]
 8001226:	72fb      	strb	r3, [r7, #11]
    return temperature;
 8001228:	7afb      	ldrb	r3, [r7, #11]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000094 	.word	0x20000094
 8001238:	40533333 	.word	0x40533333
 800123c:	447a0000 	.word	0x447a0000
 8001240:	45800000 	.word	0x45800000
 8001244:	43fa0000 	.word	0x43fa0000
 8001248:	437f0000 	.word	0x437f0000
 800124c:	437f0000 	.word	0x437f0000

08001250 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001264:	4a21      	ldr	r2, [pc, #132]	; (80012ec <MX_ADC1_Init+0x9c>)
 8001266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_ADC1_Init+0x98>)
 800126a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_ADC1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_ADC1_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <MX_ADC1_Init+0xa0>)
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_ADC1_Init+0x98>)
 800129e:	2201      	movs	r2, #1
 80012a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_ADC1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_ADC1_Init+0x98>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_ADC1_Init+0x98>)
 80012b2:	f000 fea1 	bl	8001ff8 <HAL_ADC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012bc:	f000 fbc8 	bl	8001a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012c0:	2305      	movs	r3, #5
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC1_Init+0x98>)
 80012d2:	f001 f821 	bl	8002318 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012dc:	f000 fbb8 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000094 	.word	0x20000094
 80012ec:	40012000 	.word	0x40012000
 80012f0:	0f000001 	.word	0x0f000001

080012f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_ADC_MspInit+0x7c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d127      	bne.n	8001366 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_ADC_MspInit+0x80>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <HAL_ADC_MspInit+0x80>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_ADC_MspInit+0x80>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_ADC_MspInit+0x80>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_ADC_MspInit+0x80>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_ADC_MspInit+0x80>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = TempretureSensor_Pin;
 800134e:	2320      	movs	r3, #32
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001352:	2303      	movs	r3, #3
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TempretureSensor_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_ADC_MspInit+0x84>)
 8001362:	f001 fae9 	bl	8002938 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40012000 	.word	0x40012000
 8001374:	40023800 	.word	0x40023800
 8001378:	40020000 	.word	0x40020000

0800137c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of UartMutex */
  UartMutexHandle = osMutexNew(&UartMutex_attributes);
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <MX_FREERTOS_Init+0x44>)
 8001382:	f003 fcfd 	bl	8004d80 <osMutexNew>
 8001386:	4603      	mov	r3, r0
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <MX_FREERTOS_Init+0x48>)
 800138a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadTempreture */
  ReadTempretureHandle = osThreadNew(ReadTempretureTask, NULL, &ReadTempreture_attributes);
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <MX_FREERTOS_Init+0x4c>)
 800138e:	2100      	movs	r1, #0
 8001390:	480e      	ldr	r0, [pc, #56]	; (80013cc <MX_FREERTOS_Init+0x50>)
 8001392:	f003 fc48 	bl	8004c26 <osThreadNew>
 8001396:	4603      	mov	r3, r0
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <MX_FREERTOS_Init+0x54>)
 800139a:	6013      	str	r3, [r2, #0]

  /* creation of ShowTimeMode */
  ShowTimeModeHandle = osThreadNew(ShowTimeModeTask, NULL, &ShowTimeMode_attributes);
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <MX_FREERTOS_Init+0x58>)
 800139e:	2100      	movs	r1, #0
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_FREERTOS_Init+0x5c>)
 80013a2:	f003 fc40 	bl	8004c26 <osThreadNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <MX_FREERTOS_Init+0x60>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* creation of PushButtons */
  PushButtonsHandle = osThreadNew(PushButtonsTask, NULL, &PushButtons_attributes);
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <MX_FREERTOS_Init+0x64>)
 80013ae:	2100      	movs	r1, #0
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_FREERTOS_Init+0x68>)
 80013b2:	f003 fc38 	bl	8004c26 <osThreadNew>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <MX_FREERTOS_Init+0x6c>)
 80013ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	08008f90 	.word	0x08008f90
 80013c4:	20000104 	.word	0x20000104
 80013c8:	08008f24 	.word	0x08008f24
 80013cc:	080013ed 	.word	0x080013ed
 80013d0:	200000f8 	.word	0x200000f8
 80013d4:	08008f48 	.word	0x08008f48
 80013d8:	08001411 	.word	0x08001411
 80013dc:	200000fc 	.word	0x200000fc
 80013e0:	08008f6c 	.word	0x08008f6c
 80013e4:	080014dd 	.word	0x080014dd
 80013e8:	20000100 	.word	0x20000100

080013ec <ReadTempretureTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadTempretureTask */
void ReadTempretureTask(void *argument)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadTempretureTask */
  /* Infinite loop */
  for(;;)
  {
	  Tempreture = ReadTemperature();
 80013f4:	f7ff fecc 	bl	8001190 <ReadTemperature>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <ReadTempretureTask+0x20>)
 80013fe:	701a      	strb	r2, [r3, #0]
	  osDelay(pdMS_TO_TICKS(1000));
 8001400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001404:	f003 fca1 	bl	8004d4a <osDelay>
  {
 8001408:	e7f4      	b.n	80013f4 <ReadTempretureTask+0x8>
 800140a:	bf00      	nop
 800140c:	200000f4 	.word	0x200000f4

08001410 <ShowTimeModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ShowTimeModeTask */
void ShowTimeModeTask(void *argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af04      	add	r7, sp, #16
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ShowTimeModeTask */
		Time.Hours = 12;
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <ShowTimeModeTask+0xb4>)
 800141a:	220c      	movs	r2, #12
 800141c:	701a      	strb	r2, [r3, #0]
		Time.Minutes = 00;
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <ShowTimeModeTask+0xb4>)
 8001420:	2200      	movs	r2, #0
 8001422:	705a      	strb	r2, [r3, #1]
		Time.Seconds = 00;
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <ShowTimeModeTask+0xb4>)
 8001426:	2200      	movs	r2, #0
 8001428:	709a      	strb	r2, [r3, #2]
		HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800142a:	2200      	movs	r2, #0
 800142c:	4925      	ldr	r1, [pc, #148]	; (80014c4 <ShowTimeModeTask+0xb4>)
 800142e:	4826      	ldr	r0, [pc, #152]	; (80014c8 <ShowTimeModeTask+0xb8>)
 8001430:	f002 fa8c 	bl	800394c <HAL_RTC_SetTime>
	  /* Infinite loop */
	  for(;;)
	  {
		  if(currentState ==ShowTime)
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <ShowTimeModeTask+0xbc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10b      	bne.n	8001456 <ShowTimeModeTask+0x46>
			  DisplayTime(Time,Date,UartMutexHandle);
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <ShowTimeModeTask+0xc0>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <ShowTimeModeTask+0xb4>)
 8001444:	9202      	str	r2, [sp, #8]
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <ShowTimeModeTask+0xc4>)
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	9201      	str	r2, [sp, #4]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001452:	f7ff fa33 	bl	80008bc <DisplayTime>
		  if(currentState == SetMinutes)
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <ShowTimeModeTask+0xbc>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b01      	cmp	r3, #1
 800145e:	d108      	bne.n	8001472 <ShowTimeModeTask+0x62>
		  DisplaySetMinutes(Time, Date);
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <ShowTimeModeTask+0xb4>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <ShowTimeModeTask+0xc4>)
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	9201      	str	r2, [sp, #4]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146e:	f7ff faf7 	bl	8000a60 <DisplaySetMinutes>
		  if(currentState == SetHours)
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <ShowTimeModeTask+0xbc>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d108      	bne.n	800148e <ShowTimeModeTask+0x7e>
		  DisplaySetHours(Time,Date);
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <ShowTimeModeTask+0xb4>)
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <ShowTimeModeTask+0xc4>)
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	9201      	str	r2, [sp, #4]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	f7ff fb99 	bl	8000bc0 <DisplaySetHours>
		  if(currentState == Set24or12)
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <ShowTimeModeTask+0xbc>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b03      	cmp	r3, #3
 8001496:	d108      	bne.n	80014aa <ShowTimeModeTask+0x9a>
			  ShowTimeFormat(Time,Date);
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <ShowTimeModeTask+0xb4>)
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <ShowTimeModeTask+0xc4>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	9201      	str	r2, [sp, #4]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a6:	f7ff fd3f 	bl	8000f28 <ShowTimeFormat>
		  if (currentState == SetAMPM)
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <ShowTimeModeTask+0xbc>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d101      	bne.n	80014b8 <ShowTimeModeTask+0xa8>
		  DisplayAmPm();
 80014b4:	f7ff fde8 	bl	8001088 <DisplayAmPm>
		  //ReadTemperature();
		  WriteNumber(Tempreture);
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <ShowTimeModeTask+0xc8>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f905 	bl	80006cc <WriteNumber>
	  {
 80014c2:	e7b7      	b.n	8001434 <ShowTimeModeTask+0x24>
 80014c4:	200000dc 	.word	0x200000dc
 80014c8:	20000108 	.word	0x20000108
 80014cc:	200000f5 	.word	0x200000f5
 80014d0:	20000104 	.word	0x20000104
 80014d4:	200000f0 	.word	0x200000f0
 80014d8:	200000f4 	.word	0x200000f4

080014dc <PushButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PushButtonsTask */
void PushButtonsTask(void *argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PushButtonsTask */
  /* Infinite loop */
  GPIO_PinState Mode, ModePrev = GPIO_PIN_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  GPIO_PinState Up, UpPrev = GPIO_PIN_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  GPIO_PinState Down, DownPrev = GPIO_PIN_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint32_t LastTimeMode = 0, LastTimeUp = 0, LastTimeDown = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  const uint32_t debounceDelay = 50; // Debounce time in milliseconds
 8001502:	2332      	movs	r3, #50	; 0x32
 8001504:	617b      	str	r3, [r7, #20]
  const uint32_t longPressThreshold = 1000; // Long press threshold in milliseconds for Mode button
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	613b      	str	r3, [r7, #16]


  for(;;)
  {
    // Read the current state of each button
    Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 800150c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001510:	489c      	ldr	r0, [pc, #624]	; (8001784 <PushButtonsTask+0x2a8>)
 8001512:	f001 fb95 	bl	8002c40 <HAL_GPIO_ReadPin>
 8001516:	4603      	mov	r3, r0
 8001518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    Up = HAL_GPIO_ReadPin(PushButtonUp_GPIO_Port, PushButtonUp_Pin);
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	489a      	ldr	r0, [pc, #616]	; (8001788 <PushButtonsTask+0x2ac>)
 8001520:	f001 fb8e 	bl	8002c40 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
    Down = HAL_GPIO_ReadPin(PushButtonDown_GPIO_Port, PushButtonDown_Pin);
 8001528:	2120      	movs	r1, #32
 800152a:	4897      	ldr	r0, [pc, #604]	; (8001788 <PushButtonsTask+0x2ac>)
 800152c:	f001 fb88 	bl	8002c40 <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	73bb      	strb	r3, [r7, #14]

    if (osMutexAcquire(UartMutexHandle, 20) == osOK)
 8001534:	4b95      	ldr	r3, [pc, #596]	; (800178c <PushButtonsTask+0x2b0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2114      	movs	r1, #20
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fca6 	bl	8004e8c <osMutexAcquire>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 8119 	bne.w	800177a <PushButtonsTask+0x29e>
    {
      // Check Mode button for short/long press
      if(Mode != ModePrev && (HAL_GetTick() - LastTimeMode) > debounceDelay)
 8001548:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800154c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001550:	429a      	cmp	r2, r3
 8001552:	d06f      	beq.n	8001634 <PushButtonsTask+0x158>
 8001554:	f000 fd44 	bl	8001fe0 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	d267      	bcs.n	8001634 <PushButtonsTask+0x158>
      {
        if(Mode == GPIO_PIN_SET)
 8001564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001568:	2b01      	cmp	r3, #1
 800156a:	d160      	bne.n	800162e <PushButtonsTask+0x152>
        {
          uint32_t pressTime = HAL_GetTick();
 800156c:	f000 fd38 	bl	8001fe0 <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
          while((Mode == GPIO_PIN_SET) && (HAL_GetTick() - pressTime < longPressThreshold))
 8001572:	e00a      	b.n	800158a <PushButtonsTask+0xae>
          {
            Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 8001574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001578:	4882      	ldr	r0, [pc, #520]	; (8001784 <PushButtonsTask+0x2a8>)
 800157a:	f001 fb61 	bl	8002c40 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            osDelay(1);
 8001584:	2001      	movs	r0, #1
 8001586:	f003 fbe0 	bl	8004d4a <osDelay>
          while((Mode == GPIO_PIN_SET) && (HAL_GetTick() - pressTime < longPressThreshold))
 800158a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <PushButtonsTask+0xc6>
 8001592:	f000 fd25 	bl	8001fe0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d8e8      	bhi.n	8001574 <PushButtonsTask+0x98>
          }
          if(Mode == GPIO_PIN_SET)
 80015a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10f      	bne.n	80015ca <PushButtonsTask+0xee>
          {
        	  if(currentState == ShowTime)
 80015aa:	4b79      	ldr	r3, [pc, #484]	; (8001790 <PushButtonsTask+0x2b4>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <PushButtonsTask+0xe0>
        	  {
        	  currentState = SetMinutes;
 80015b4:	4b76      	ldr	r3, [pc, #472]	; (8001790 <PushButtonsTask+0x2b4>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e002      	b.n	80015c2 <PushButtonsTask+0xe6>
        	  }
        	  else
        	  {
        		  currentState = ShowTime;
 80015bc:	4b74      	ldr	r3, [pc, #464]	; (8001790 <PushButtonsTask+0x2b4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
        	  }
        	  printf("Mode Long Pressed\n\r");
 80015c2:	4874      	ldr	r0, [pc, #464]	; (8001794 <PushButtonsTask+0x2b8>)
 80015c4:	f006 fd64 	bl	8008090 <iprintf>
 80015c8:	e031      	b.n	800162e <PushButtonsTask+0x152>
          }
          else
          {
            printf("Mode Short Pressed\n\r");
 80015ca:	4873      	ldr	r0, [pc, #460]	; (8001798 <PushButtonsTask+0x2bc>)
 80015cc:	f006 fd60 	bl	8008090 <iprintf>
            if (currentState == SetMinutes)
 80015d0:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <PushButtonsTask+0x2b4>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d103      	bne.n	80015e2 <PushButtonsTask+0x106>
            	currentState = SetHours;
 80015da:	4b6d      	ldr	r3, [pc, #436]	; (8001790 <PushButtonsTask+0x2b4>)
 80015dc:	2202      	movs	r2, #2
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e025      	b.n	800162e <PushButtonsTask+0x152>
            else if (currentState == SetHours)
 80015e2:	4b6b      	ldr	r3, [pc, #428]	; (8001790 <PushButtonsTask+0x2b4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d103      	bne.n	80015f4 <PushButtonsTask+0x118>
            	currentState = Set24or12;
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <PushButtonsTask+0x2b4>)
 80015ee:	2203      	movs	r2, #3
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	e01c      	b.n	800162e <PushButtonsTask+0x152>
            else if(currentState == Set24or12)
 80015f4:	4b66      	ldr	r3, [pc, #408]	; (8001790 <PushButtonsTask+0x2b4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d10f      	bne.n	800161e <PushButtonsTask+0x142>
            {
            	if(hrtc.Init.HourFormat == RTC_HOURFORMAT_24)
 80015fe:	4b67      	ldr	r3, [pc, #412]	; (800179c <PushButtonsTask+0x2c0>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d103      	bne.n	800160e <PushButtonsTask+0x132>
            	currentState = SetMinutes;
 8001606:	4b62      	ldr	r3, [pc, #392]	; (8001790 <PushButtonsTask+0x2b4>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
 800160c:	e00f      	b.n	800162e <PushButtonsTask+0x152>
            	else if (hrtc.Init.HourFormat == RTC_HOURFORMAT_12)
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <PushButtonsTask+0x2c0>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b40      	cmp	r3, #64	; 0x40
 8001614:	d10b      	bne.n	800162e <PushButtonsTask+0x152>
            		currentState = SetAMPM;
 8001616:	4b5e      	ldr	r3, [pc, #376]	; (8001790 <PushButtonsTask+0x2b4>)
 8001618:	2204      	movs	r2, #4
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e007      	b.n	800162e <PushButtonsTask+0x152>
            }
            else if (currentState == SetAMPM)
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <PushButtonsTask+0x2b4>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b04      	cmp	r3, #4
 8001626:	d102      	bne.n	800162e <PushButtonsTask+0x152>
            	currentState = SetMinutes;
 8001628:	4b59      	ldr	r3, [pc, #356]	; (8001790 <PushButtonsTask+0x2b4>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
          }
        }
        LastTimeMode = HAL_GetTick();
 800162e:	f000 fcd7 	bl	8001fe0 <HAL_GetTick>
 8001632:	6238      	str	r0, [r7, #32]
      }

      // Check Up button for short press only
      if(Up != UpPrev && (HAL_GetTick() - LastTimeUp) > debounceDelay)
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800163a:	429a      	cmp	r2, r3
 800163c:	d044      	beq.n	80016c8 <PushButtonsTask+0x1ec>
 800163e:	f000 fccf 	bl	8001fe0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	429a      	cmp	r2, r3
 800164c:	d23c      	bcs.n	80016c8 <PushButtonsTask+0x1ec>
      {
        if(Up == GPIO_PIN_SET)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d136      	bne.n	80016c2 <PushButtonsTask+0x1e6>
        {
        		if(currentState == SetMinutes)
 8001654:	4b4e      	ldr	r3, [pc, #312]	; (8001790 <PushButtonsTask+0x2b4>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d109      	bne.n	8001672 <PushButtonsTask+0x196>
        		AddOneMinuteToRTC(Time,Date);
 800165e:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <PushButtonsTask+0x2c4>)
 8001660:	4a50      	ldr	r2, [pc, #320]	; (80017a4 <PushButtonsTask+0x2c8>)
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	9201      	str	r2, [sp, #4]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	9200      	str	r2, [sp, #0]
 800166a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800166c:	f7ff fb58 	bl	8000d20 <AddOneMinuteToRTC>
 8001670:	e024      	b.n	80016bc <PushButtonsTask+0x1e0>
        		else if(currentState == SetHours)
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <PushButtonsTask+0x2b4>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d109      	bne.n	8001690 <PushButtonsTask+0x1b4>
        		{
        			AddOneHourToRTC(Time,Date);
 800167c:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <PushButtonsTask+0x2c4>)
 800167e:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <PushButtonsTask+0x2c8>)
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	9201      	str	r2, [sp, #4]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	9200      	str	r2, [sp, #0]
 8001688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168a:	f7ff fbaf 	bl	8000dec <AddOneHourToRTC>
 800168e:	e015      	b.n	80016bc <PushButtonsTask+0x1e0>
        		}
         		else if (currentState == Set24or12)
 8001690:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <PushButtonsTask+0x2b4>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b03      	cmp	r3, #3
 8001698:	d102      	bne.n	80016a0 <PushButtonsTask+0x1c4>
         			ChangeTimeFormat();
 800169a:	f7ff fc93 	bl	8000fc4 <ChangeTimeFormat>
 800169e:	e00d      	b.n	80016bc <PushButtonsTask+0x1e0>
         		else if(currentState == SetAMPM)
 80016a0:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <PushButtonsTask+0x2b4>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d108      	bne.n	80016bc <PushButtonsTask+0x1e0>
         		{
         			ChangeAMPMFormat(Time,Date);
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <PushButtonsTask+0x2c4>)
 80016ac:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <PushButtonsTask+0x2c8>)
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	9201      	str	r2, [sp, #4]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	9200      	str	r2, [sp, #0]
 80016b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b8:	f7ff fd34 	bl	8001124 <ChangeAMPMFormat>
         		}
          printf("Up Short Pressed\n\r");
 80016bc:	483a      	ldr	r0, [pc, #232]	; (80017a8 <PushButtonsTask+0x2cc>)
 80016be:	f006 fce7 	bl	8008090 <iprintf>
        }
        LastTimeUp = HAL_GetTick();
 80016c2:	f000 fc8d 	bl	8001fe0 <HAL_GetTick>
 80016c6:	61f8      	str	r0, [r7, #28]
      }

      // Check Down button for short press only
      if(Down != DownPrev && (HAL_GetTick() - LastTimeDown) > debounceDelay)
 80016c8:	7bba      	ldrb	r2, [r7, #14]
 80016ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d044      	beq.n	800175c <PushButtonsTask+0x280>
 80016d2:	f000 fc85 	bl	8001fe0 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d23c      	bcs.n	800175c <PushButtonsTask+0x280>
      {
        if(Down == GPIO_PIN_SET)
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d136      	bne.n	8001756 <PushButtonsTask+0x27a>
        {
        	     	 if(currentState == SetMinutes)
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <PushButtonsTask+0x2b4>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d109      	bne.n	8001706 <PushButtonsTask+0x22a>
        	     	 {
        	 		 SubtractOneMinuteFromRTC(Time, Date);
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <PushButtonsTask+0x2c4>)
 80016f4:	4a2b      	ldr	r2, [pc, #172]	; (80017a4 <PushButtonsTask+0x2c8>)
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	9201      	str	r2, [sp, #4]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	9200      	str	r2, [sp, #0]
 80016fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001700:	f7ff fb40 	bl	8000d84 <SubtractOneMinuteFromRTC>
 8001704:	e024      	b.n	8001750 <PushButtonsTask+0x274>
        	     	 }
        	     	 else if(currentState == SetHours)
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <PushButtonsTask+0x2b4>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d109      	bne.n	8001724 <PushButtonsTask+0x248>
        	     	 {
        	     		SubtractOneHourFromRTC(Time, Date);
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <PushButtonsTask+0x2c4>)
 8001712:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <PushButtonsTask+0x2c8>)
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	9201      	str	r2, [sp, #4]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	9200      	str	r2, [sp, #0]
 800171c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171e:	f7ff fbb1 	bl	8000e84 <SubtractOneHourFromRTC>
 8001722:	e015      	b.n	8001750 <PushButtonsTask+0x274>
        	     	 }
              		else if (currentState == Set24or12)
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <PushButtonsTask+0x2b4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b03      	cmp	r3, #3
 800172c:	d102      	bne.n	8001734 <PushButtonsTask+0x258>
              			ChangeTimeFormat();
 800172e:	f7ff fc49 	bl	8000fc4 <ChangeTimeFormat>
 8001732:	e00d      	b.n	8001750 <PushButtonsTask+0x274>
              		else if(currentState == SetAMPM)
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <PushButtonsTask+0x2b4>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b04      	cmp	r3, #4
 800173c:	d108      	bne.n	8001750 <PushButtonsTask+0x274>
              		{
              			ChangeAMPMFormat(Time,Date);
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <PushButtonsTask+0x2c4>)
 8001740:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <PushButtonsTask+0x2c8>)
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	9201      	str	r2, [sp, #4]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	9200      	str	r2, [sp, #0]
 800174a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174c:	f7ff fcea 	bl	8001124 <ChangeAMPMFormat>
              		}
          printf("Down Short Pressed\n\r");
 8001750:	4816      	ldr	r0, [pc, #88]	; (80017ac <PushButtonsTask+0x2d0>)
 8001752:	f006 fc9d 	bl	8008090 <iprintf>
        }
        LastTimeDown = HAL_GetTick();
 8001756:	f000 fc43 	bl	8001fe0 <HAL_GetTick>
 800175a:	61b8      	str	r0, [r7, #24]
      }

      // Update the previous state for each button
      ModePrev = Mode;
 800175c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      UpPrev = Up;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      DownPrev = Down;
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

      osMutexRelease(UartMutexHandle);
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <PushButtonsTask+0x2b0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fbd4 	bl	8004f22 <osMutexRelease>
    }
    osDelay(1); // Adjust this delay as per your requirement
 800177a:	2001      	movs	r0, #1
 800177c:	f003 fae5 	bl	8004d4a <osDelay>
    Mode = HAL_GPIO_ReadPin(PushButtonMode_GPIO_Port, PushButtonMode_Pin);
 8001780:	e6c4      	b.n	800150c <PushButtonsTask+0x30>
 8001782:	bf00      	nop
 8001784:	40020400 	.word	0x40020400
 8001788:	40020800 	.word	0x40020800
 800178c:	20000104 	.word	0x20000104
 8001790:	200000f5 	.word	0x200000f5
 8001794:	08008e94 	.word	0x08008e94
 8001798:	08008ea8 	.word	0x08008ea8
 800179c:	20000108 	.word	0x20000108
 80017a0:	200000dc 	.word	0x200000dc
 80017a4:	200000f0 	.word	0x200000f0
 80017a8:	08008ec0 	.word	0x08008ec0
 80017ac:	08008ed4 	.word	0x08008ed4

080017b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b54      	ldr	r3, [pc, #336]	; (800191c <MX_GPIO_Init+0x16c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a53      	ldr	r2, [pc, #332]	; (800191c <MX_GPIO_Init+0x16c>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b51      	ldr	r3, [pc, #324]	; (800191c <MX_GPIO_Init+0x16c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b4d      	ldr	r3, [pc, #308]	; (800191c <MX_GPIO_Init+0x16c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a4c      	ldr	r2, [pc, #304]	; (800191c <MX_GPIO_Init+0x16c>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b4a      	ldr	r3, [pc, #296]	; (800191c <MX_GPIO_Init+0x16c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b46      	ldr	r3, [pc, #280]	; (800191c <MX_GPIO_Init+0x16c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a45      	ldr	r2, [pc, #276]	; (800191c <MX_GPIO_Init+0x16c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <MX_GPIO_Init+0x16c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b3f      	ldr	r3, [pc, #252]	; (800191c <MX_GPIO_Init+0x16c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a3e      	ldr	r2, [pc, #248]	; (800191c <MX_GPIO_Init+0x16c>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b3c      	ldr	r3, [pc, #240]	; (800191c <MX_GPIO_Init+0x16c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 8001836:	2200      	movs	r2, #0
 8001838:	f241 4117 	movw	r1, #5143	; 0x1417
 800183c:	4838      	ldr	r0, [pc, #224]	; (8001920 <MX_GPIO_Init+0x170>)
 800183e:	f001 fa17 	bl	8002c70 <HAL_GPIO_WritePin>
                          |Cathode_1_Pin|Cathode_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|FourDigitD4_Pin
 8001842:	2200      	movs	r2, #0
 8001844:	f240 7193 	movw	r1, #1939	; 0x793
 8001848:	4836      	ldr	r0, [pc, #216]	; (8001924 <MX_GPIO_Init+0x174>)
 800184a:	f001 fa11 	bl	8002c70 <HAL_GPIO_WritePin>
                          |FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 800184e:	2200      	movs	r2, #0
 8001850:	f24e 0137 	movw	r1, #57399	; 0xe037
 8001854:	4834      	ldr	r0, [pc, #208]	; (8001928 <MX_GPIO_Init+0x178>)
 8001856:	f001 fa0b 	bl	8002c70 <HAL_GPIO_WritePin>
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = F_Pin|E_Pin|G_Pin|FourDigitF_Pin
 800185a:	f241 4317 	movw	r3, #5143	; 0x1417
 800185e:	617b      	str	r3, [r7, #20]
                          |Cathode_1_Pin|Cathode_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	482b      	ldr	r0, [pc, #172]	; (8001920 <MX_GPIO_Init+0x170>)
 8001874:	f001 f860 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|FourDigitD4_Pin
 8001878:	f240 7393 	movw	r3, #1939	; 0x793
 800187c:	617b      	str	r3, [r7, #20]
                          |FourDigitG_Pin|FourDigitD3_Pin|FourDigitD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4824      	ldr	r0, [pc, #144]	; (8001924 <MX_GPIO_Init+0x174>)
 8001892:	f001 f851 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001896:	2340      	movs	r3, #64	; 0x40
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189a:	2303      	movs	r3, #3
 800189c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	481e      	ldr	r0, [pc, #120]	; (8001924 <MX_GPIO_Init+0x174>)
 80018aa:	f001 f845 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PushButtonDown_Pin|PushButtonUp_Pin;
 80018ae:	2360      	movs	r3, #96	; 0x60
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4817      	ldr	r0, [pc, #92]	; (8001920 <MX_GPIO_Init+0x170>)
 80018c4:	f001 f838 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D_Pin|FourDigitB_Pin|FourDigitA_Pin|FourDigitE_Pin
 80018c8:	f24e 0337 	movw	r3, #57399	; 0xe037
 80018cc:	617b      	str	r3, [r7, #20]
                          |FourDigitD_Pin|FourDigitC_Pin|FourDigitDP_Pin|FourDigitD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4811      	ldr	r0, [pc, #68]	; (8001928 <MX_GPIO_Init+0x178>)
 80018e2:	f001 f829 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PushButtonMode_Pin;
 80018e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PushButtonMode_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480a      	ldr	r0, [pc, #40]	; (8001928 <MX_GPIO_Init+0x178>)
 80018fe:	f001 f81b 	bl	8002938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2105      	movs	r1, #5
 8001906:	2017      	movs	r0, #23
 8001908:	f000 ffec 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800190c:	2017      	movs	r0, #23
 800190e:	f001 f805 	bl	800291c <HAL_NVIC_EnableIRQ>

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40020800 	.word	0x40020800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400

0800192c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001930:	f000 fb20 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001934:	f000 f810 	bl	8001958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001938:	f7ff ff3a 	bl	80017b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800193c:	f000 fa7e 	bl	8001e3c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001940:	f000 f88c 	bl	8001a5c <MX_RTC_Init>
  MX_ADC1_Init();
 8001944:	f7ff fc84 	bl	8001250 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001948:	f003 f90e 	bl	8004b68 <osKernelInitialize>
  MX_FREERTOS_Init();
 800194c:	f7ff fd16 	bl	800137c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001950:	f003 f92e 	bl	8004bb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001954:	e7fe      	b.n	8001954 <main+0x28>
	...

08001958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b094      	sub	sp, #80	; 0x50
 800195c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	2230      	movs	r2, #48	; 0x30
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f006 fbe7 	bl	800813a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <SystemClock_Config+0xcc>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <SystemClock_Config+0xcc>)
 8001986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <SystemClock_Config+0xcc>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <SystemClock_Config+0xd0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <SystemClock_Config+0xd0>)
 80019a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <SystemClock_Config+0xd0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019b4:	2309      	movs	r3, #9
 80019b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019be:	2301      	movs	r3, #1
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c2:	2302      	movs	r3, #2
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019cc:	2304      	movs	r3, #4
 80019ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d4:	2302      	movs	r3, #2
 80019d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019d8:	2304      	movs	r3, #4
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 f983 	bl	8002cec <HAL_RCC_OscConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019ec:	f000 f830 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f0:	230f      	movs	r3, #15
 80019f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f4:	2302      	movs	r3, #2
 80019f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 fbe5 	bl	80031dc <HAL_RCC_ClockConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a18:	f000 f81a 	bl	8001a50 <Error_Handler>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3750      	adds	r7, #80	; 0x50
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40007000 	.word	0x40007000

08001a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a3e:	f000 fabb 	bl	8001fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40000400 	.word	0x40000400

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>
	...

08001a5c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_RTC_Init+0x44>)
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <MX_RTC_Init+0x48>)
 8001a64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_RTC_Init+0x44>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_RTC_Init+0x44>)
 8001a6e:	227f      	movs	r2, #127	; 0x7f
 8001a70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_RTC_Init+0x44>)
 8001a74:	22ff      	movs	r2, #255	; 0xff
 8001a76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_RTC_Init+0x44>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_RTC_Init+0x44>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_RTC_Init+0x44>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_RTC_Init+0x44>)
 8001a8c:	f001 fee8 	bl	8003860 <HAL_RTC_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001a96:	f7ff ffdb 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000108 	.word	0x20000108
 8001aa4:	40002800 	.word	0x40002800

08001aa8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab0:	f107 0308 	add.w	r3, r7, #8
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
 8001ac0:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_RTC_MspInit+0x50>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001acc:	2302      	movs	r3, #2
 8001ace:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 fdd0 	bl	8003680 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ae6:	f7ff ffb3 	bl	8001a50 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_RTC_MspInit+0x54>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001af0:	bf00      	nop
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40002800 	.word	0x40002800
 8001afc:	42470e3c 	.word	0x42470e3c

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_MspInit+0x54>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_MspInit+0x54>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_MspInit+0x54>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_MspInit+0x54>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_MspInit+0x54>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_MspInit+0x54>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	210f      	movs	r1, #15
 8001b42:	f06f 0001 	mvn.w	r0, #1
 8001b46:	f000 fecd 	bl	80028e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08e      	sub	sp, #56	; 0x38
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_InitTick+0xe4>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <HAL_InitTick+0xe4>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_InitTick+0xe4>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b84:	f107 0210 	add.w	r2, r7, #16
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 fd44 	bl	800361c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d103      	bne.n	8001ba6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b9e:	f001 fd15 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8001ba2:	6378      	str	r0, [r7, #52]	; 0x34
 8001ba4:	e004      	b.n	8001bb0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ba6:	f001 fd11 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8001baa:	4603      	mov	r3, r0
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <HAL_InitTick+0xe8>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	0c9b      	lsrs	r3, r3, #18
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_InitTick+0xec>)
 8001bc0:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <HAL_InitTick+0xf0>)
 8001bc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_InitTick+0xec>)
 8001bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bca:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_InitTick+0xec>)
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_InitTick+0xec>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_InitTick+0xec>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_InitTick+0xec>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001be4:	4817      	ldr	r0, [pc, #92]	; (8001c44 <HAL_InitTick+0xec>)
 8001be6:	f002 f939 	bl	8003e5c <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11b      	bne.n	8001c30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001bf8:	4812      	ldr	r0, [pc, #72]	; (8001c44 <HAL_InitTick+0xec>)
 8001bfa:	f002 f989 	bl	8003f10 <HAL_TIM_Base_Start_IT>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d111      	bne.n	8001c30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c0c:	201d      	movs	r0, #29
 8001c0e:	f000 fe85 	bl	800291c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d808      	bhi.n	8001c2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	201d      	movs	r0, #29
 8001c1e:	f000 fe61 	bl	80028e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_InitTick+0xf4>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e002      	b.n	8001c30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3738      	adds	r7, #56	; 0x38
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	431bde83 	.word	0x431bde83
 8001c44:	20000128 	.word	0x20000128
 8001c48:	40000400 	.word	0x40000400
 8001c4c:	20000004 	.word	0x20000004

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PushButtonDown_Pin);
 8001c80:	2020      	movs	r0, #32
 8001c82:	f001 f80f 	bl	8002ca4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PushButtonUp_Pin);
 8001c86:	2040      	movs	r0, #64	; 0x40
 8001c88:	f001 f80c 	bl	8002ca4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PushButtonMode_Pin);
 8001c8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c90:	f001 f808 	bl	8002ca4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM3_IRQHandler+0x10>)
 8001c9e:	f002 f999 	bl	8003fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000128 	.word	0x20000128

08001cac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e00a      	b.n	8001cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cbe:	f3af 8000 	nop.w
 8001cc2:	4601      	mov	r1, r0
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	60ba      	str	r2, [r7, #8]
 8001cca:	b2ca      	uxtb	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbf0      	blt.n	8001cbe <_read+0x12>
  }

  return len;
 8001cdc:	687b      	ldr	r3, [r7, #4]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e009      	b.n	8001d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f889 	bl	8001e18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf1      	blt.n	8001cf8 <_write+0x12>
  }
  return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_close>:

int _close(int file)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d46:	605a      	str	r2, [r3, #4]
  return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_isatty>:

int _isatty(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f006 fa64 	bl	8008284 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20020000 	.word	0x20020000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	20000170 	.word	0x20000170
 8001df0:	20004cf0 	.word	0x20004cf0

08001df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <SystemInit+0x20>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <SystemInit+0x20>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__io_putchar>:
#include "usart.h"

/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 8001e20:	1d39      	adds	r1, r7, #4
 8001e22:	230a      	movs	r3, #10
 8001e24:	2201      	movs	r2, #1
 8001e26:	4804      	ldr	r0, [pc, #16]	; (8001e38 <__io_putchar+0x20>)
 8001e28:	f002 fae5 	bl	80043f6 <HAL_UART_Transmit>
	return ch;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000174 	.word	0x20000174

08001e3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <MX_USART2_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e74:	f002 fa72 	bl	800435c <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f7ff fde7 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000174 	.word	0x20000174
 8001e8c:	40004400 	.word	0x40004400

08001e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_UART_MspInit+0x84>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12b      	bne.n	8001f0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eea:	230c      	movs	r3, #12
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efa:	2307      	movs	r3, #7
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_UART_MspInit+0x8c>)
 8001f06:	f000 fd17 	bl	8002938 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f26:	490e      	ldr	r1, [pc, #56]	; (8001f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f3c:	4c0b      	ldr	r4, [pc, #44]	; (8001f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f4a:	f7ff ff53 	bl	8001df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f006 f99f 	bl	8008290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f52:	f7ff fceb 	bl	800192c <main>
  bx  lr    
 8001f56:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8001f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001f64:	08008ffc 	.word	0x08008ffc
  ldr r2, =_sbss
 8001f68:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001f6c:	20004cf0 	.word	0x20004cf0

08001f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <HAL_Init+0x40>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_Init+0x40>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_Init+0x40>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f000 fc96 	bl	80028ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa2:	200f      	movs	r0, #15
 8001fa4:	f7ff fdd8 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa8:	f7ff fdaa 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023c00 	.word	0x40023c00

08001fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x20>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x24>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_IncTick+0x24>)
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	200001b8 	.word	0x200001b8

08001fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_GetTick+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	200001b8 	.word	0x200001b8

08001ff8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e033      	b.n	8002076 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff f96c 	bl	80012f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	d118      	bne.n	8002068 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800203e:	f023 0302 	bic.w	r3, r3, #2
 8002042:	f043 0202 	orr.w	r2, r3, #2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa96 	bl	800257c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
 8002066:	e001      	b.n	800206c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADC_Start+0x1a>
 8002096:	2302      	movs	r3, #2
 8002098:	e097      	b.n	80021ca <HAL_ADC_Start+0x14a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d018      	beq.n	80020e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020c0:	4b45      	ldr	r3, [pc, #276]	; (80021d8 <HAL_ADC_Start+0x158>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a45      	ldr	r2, [pc, #276]	; (80021dc <HAL_ADC_Start+0x15c>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9a      	lsrs	r2, r3, #18
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d15f      	bne.n	80021b0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800211a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212e:	d106      	bne.n	800213e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f023 0206 	bic.w	r2, r3, #6
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
 800213c:	e002      	b.n	8002144 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_ADC_Start+0x160>)
 800214e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002158:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10f      	bne.n	8002186 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d129      	bne.n	80021c8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e020      	b.n	80021c8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_ADC_Start+0x164>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d11b      	bne.n	80021c8 <HAL_ADC_Start+0x148>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d114      	bne.n	80021c8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	e00b      	b.n	80021c8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f043 0210 	orr.w	r2, r3, #16
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000000 	.word	0x20000000
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	40012300 	.word	0x40012300
 80021e4:	40012000 	.word	0x40012000

080021e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002204:	d113      	bne.n	800222e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002214:	d10b      	bne.n	800222e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f043 0220 	orr.w	r2, r3, #32
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e063      	b.n	80022f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800222e:	f7ff fed7 	bl	8001fe0 <HAL_GetTick>
 8002232:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002234:	e021      	b.n	800227a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d01d      	beq.n	800227a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_ADC_PollForConversion+0x6c>
 8002244:	f7ff fecc 	bl	8001fe0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d212      	bcs.n	800227a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d00b      	beq.n	800227a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f043 0204 	orr.w	r2, r3, #4
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e03d      	b.n	80022f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b02      	cmp	r3, #2
 8002286:	d1d6      	bne.n	8002236 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0212 	mvn.w	r2, #18
 8002290:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d123      	bne.n	80022f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11f      	bne.n	80022f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d111      	bne.n	80022f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x1c>
 8002330:	2302      	movs	r3, #2
 8002332:	e113      	b.n	800255c <HAL_ADC_ConfigChannel+0x244>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b09      	cmp	r3, #9
 8002342:	d925      	bls.n	8002390 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68d9      	ldr	r1, [r3, #12]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	3b1e      	subs	r3, #30
 800235a:	2207      	movs	r2, #7
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43da      	mvns	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	400a      	ands	r2, r1
 8002368:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68d9      	ldr	r1, [r3, #12]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	4618      	mov	r0, r3
 800237c:	4603      	mov	r3, r0
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4403      	add	r3, r0
 8002382:	3b1e      	subs	r3, #30
 8002384:	409a      	lsls	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	e022      	b.n	80023d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	2207      	movs	r2, #7
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	400a      	ands	r2, r1
 80023b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	4603      	mov	r3, r0
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4403      	add	r3, r0
 80023cc:	409a      	lsls	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b06      	cmp	r3, #6
 80023dc:	d824      	bhi.n	8002428 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	3b05      	subs	r3, #5
 80023f0:	221f      	movs	r2, #31
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	400a      	ands	r2, r1
 80023fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	3b05      	subs	r3, #5
 800241a:	fa00 f203 	lsl.w	r2, r0, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
 8002426:	e04c      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b0c      	cmp	r3, #12
 800242e:	d824      	bhi.n	800247a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b23      	subs	r3, #35	; 0x23
 8002442:	221f      	movs	r2, #31
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43da      	mvns	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	400a      	ands	r2, r1
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	4618      	mov	r0, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	3b23      	subs	r3, #35	; 0x23
 800246c:	fa00 f203 	lsl.w	r2, r0, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
 8002478:	e023      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	3b41      	subs	r3, #65	; 0x41
 800248c:	221f      	movs	r2, #31
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	400a      	ands	r2, r1
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3b41      	subs	r3, #65	; 0x41
 80024b6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_ADC_ConfigChannel+0x250>)
 80024c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a28      	ldr	r2, [pc, #160]	; (800256c <HAL_ADC_ConfigChannel+0x254>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d10f      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1d8>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b12      	cmp	r3, #18
 80024d6:	d10b      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_ADC_ConfigChannel+0x254>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d12b      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x23a>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_ADC_ConfigChannel+0x258>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d003      	beq.n	800250c <HAL_ADC_ConfigChannel+0x1f4>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b11      	cmp	r3, #17
 800250a:	d122      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a11      	ldr	r2, [pc, #68]	; (8002570 <HAL_ADC_ConfigChannel+0x258>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d111      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_ADC_ConfigChannel+0x25c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_ADC_ConfigChannel+0x260>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	0c9a      	lsrs	r2, r3, #18
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002544:	e002      	b.n	800254c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	3b01      	subs	r3, #1
 800254a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f9      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40012300 	.word	0x40012300
 800256c:	40012000 	.word	0x40012000
 8002570:	10000012 	.word	0x10000012
 8002574:	20000000 	.word	0x20000000
 8002578:	431bde83 	.word	0x431bde83

0800257c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002584:	4b79      	ldr	r3, [pc, #484]	; (800276c <ADC_Init+0x1f0>)
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	021a      	lsls	r2, r3, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	4a58      	ldr	r2, [pc, #352]	; (8002770 <ADC_Init+0x1f4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002622:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6899      	ldr	r1, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	e00f      	b.n	800267a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002678:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0202 	bic.w	r2, r2, #2
 8002688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6899      	ldr	r1, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7e1b      	ldrb	r3, [r3, #24]
 8002694:	005a      	lsls	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	3b01      	subs	r3, #1
 80026d4:	035a      	lsls	r2, r3, #13
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	e007      	b.n	80026f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	3b01      	subs	r3, #1
 800270c:	051a      	lsls	r2, r3, #20
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6899      	ldr	r1, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002732:	025a      	lsls	r2, r3, #9
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	029a      	lsls	r2, r3, #10
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40012300 	.word	0x40012300
 8002770:	0f000001 	.word	0x0f000001

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db0b      	blt.n	8002802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <__NVIC_EnableIRQ+0x38>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2001      	movs	r0, #1
 80027fa:	fa00 f202 	lsl.w	r2, r0, r2
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db0a      	blt.n	800283e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <__NVIC_SetPriority+0x4c>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	440b      	add	r3, r1
 8002838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800283c:	e00a      	b.n	8002854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4908      	ldr	r1, [pc, #32]	; (8002864 <__NVIC_SetPriority+0x50>)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	3b04      	subs	r3, #4
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	440b      	add	r3, r1
 8002852:	761a      	strb	r2, [r3, #24]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f1c3 0307 	rsb	r3, r3, #7
 8002882:	2b04      	cmp	r3, #4
 8002884:	bf28      	it	cs
 8002886:	2304      	movcs	r3, #4
 8002888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3304      	adds	r3, #4
 800288e:	2b06      	cmp	r3, #6
 8002890:	d902      	bls.n	8002898 <NVIC_EncodePriority+0x30>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3b03      	subs	r3, #3
 8002896:	e000      	b.n	800289a <NVIC_EncodePriority+0x32>
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	401a      	ands	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	43d9      	mvns	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	4313      	orrs	r3, r2
         );
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff4c 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f6:	f7ff ff61 	bl	80027bc <__NVIC_GetPriorityGrouping>
 80028fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	6978      	ldr	r0, [r7, #20]
 8002902:	f7ff ffb1 	bl	8002868 <NVIC_EncodePriority>
 8002906:	4602      	mov	r2, r0
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ff80 	bl	8002814 <__NVIC_SetPriority>
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff54 	bl	80027d8 <__NVIC_EnableIRQ>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e159      	b.n	8002c08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	f040 8148 	bne.w	8002c02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d005      	beq.n	800298a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002986:	2b02      	cmp	r3, #2
 8002988:	d130      	bne.n	80029ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0201 	and.w	r2, r3, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d017      	beq.n	8002a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d123      	bne.n	8002a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	08da      	lsrs	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	69b9      	ldr	r1, [r7, #24]
 8002a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0203 	and.w	r2, r3, #3
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80a2 	beq.w	8002c02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b57      	ldr	r3, [pc, #348]	; (8002c20 <HAL_GPIO_Init+0x2e8>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a56      	ldr	r2, [pc, #344]	; (8002c20 <HAL_GPIO_Init+0x2e8>)
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b54      	ldr	r3, [pc, #336]	; (8002c20 <HAL_GPIO_Init+0x2e8>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ada:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_GPIO_Init+0x2ec>)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	220f      	movs	r2, #15
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a49      	ldr	r2, [pc, #292]	; (8002c28 <HAL_GPIO_Init+0x2f0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d019      	beq.n	8002b3a <HAL_GPIO_Init+0x202>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a48      	ldr	r2, [pc, #288]	; (8002c2c <HAL_GPIO_Init+0x2f4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x1fe>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a47      	ldr	r2, [pc, #284]	; (8002c30 <HAL_GPIO_Init+0x2f8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00d      	beq.n	8002b32 <HAL_GPIO_Init+0x1fa>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a46      	ldr	r2, [pc, #280]	; (8002c34 <HAL_GPIO_Init+0x2fc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_Init+0x1f6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a45      	ldr	r2, [pc, #276]	; (8002c38 <HAL_GPIO_Init+0x300>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_GPIO_Init+0x1f2>
 8002b26:	2304      	movs	r3, #4
 8002b28:	e008      	b.n	8002b3c <HAL_GPIO_Init+0x204>
 8002b2a:	2307      	movs	r3, #7
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_Init+0x204>
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e004      	b.n	8002b3c <HAL_GPIO_Init+0x204>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e002      	b.n	8002b3c <HAL_GPIO_Init+0x204>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_GPIO_Init+0x204>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	f002 0203 	and.w	r2, r2, #3
 8002b42:	0092      	lsls	r2, r2, #2
 8002b44:	4093      	lsls	r3, r2
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b4c:	4935      	ldr	r1, [pc, #212]	; (8002c24 <HAL_GPIO_Init+0x2ec>)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	3302      	adds	r3, #2
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5a:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7e:	4a2f      	ldr	r2, [pc, #188]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba8:	4a24      	ldr	r2, [pc, #144]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bae:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd2:	4a1a      	ldr	r2, [pc, #104]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_GPIO_Init+0x304>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3301      	adds	r3, #1
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	f67f aea2 	bls.w	8002954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40013800 	.word	0x40013800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40020800 	.word	0x40020800
 8002c34:	40020c00 	.word	0x40020c00
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40013c00 	.word	0x40013c00

08002c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e001      	b.n	8002c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cba:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f806 	bl	8002cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e267      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d075      	beq.n	8002df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0a:	4b88      	ldr	r3, [pc, #544]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d16:	4b85      	ldr	r3, [pc, #532]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d112      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d22:	4b82      	ldr	r3, [pc, #520]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	4b7e      	ldr	r3, [pc, #504]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05b      	beq.n	8002df4 <HAL_RCC_OscConfig+0x108>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d157      	bne.n	8002df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e242      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d50:	d106      	bne.n	8002d60 <HAL_RCC_OscConfig+0x74>
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a75      	ldr	r2, [pc, #468]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e01d      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4b70      	ldr	r3, [pc, #448]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6f      	ldr	r2, [pc, #444]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b6d      	ldr	r3, [pc, #436]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6c      	ldr	r2, [pc, #432]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d84:	4b69      	ldr	r3, [pc, #420]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a68      	ldr	r2, [pc, #416]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff f91c 	bl	8001fe0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7ff f918 	bl	8001fe0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e207      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0xc0>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7ff f908 	bl	8001fe0 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7ff f904 	bl	8001fe0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1f3      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	4b51      	ldr	r3, [pc, #324]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xe8>
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d11c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1a:	4b44      	ldr	r3, [pc, #272]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1c7      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4937      	ldr	r1, [pc, #220]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	e03a      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCC_OscConfig+0x244>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7ff f8bd 	bl	8001fe0 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7ff f8b9 	bl	8001fe0 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1a8      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4925      	ldr	r1, [pc, #148]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCC_OscConfig+0x244>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f89c 	bl	8001fe0 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eac:	f7ff f898 	bl	8001fe0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e187      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d036      	beq.n	8002f44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_RCC_OscConfig+0x248>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7ff f87c 	bl	8001fe0 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eec:	f7ff f878 	bl	8001fe0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e167      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x200>
 8002f0a:	e01b      	b.n	8002f44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCC_OscConfig+0x248>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7ff f865 	bl	8001fe0 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	e00e      	b.n	8002f38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7ff f861 	bl	8001fe0 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d907      	bls.n	8002f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e150      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	42470000 	.word	0x42470000
 8002f34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f38:	4b88      	ldr	r3, [pc, #544]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ea      	bne.n	8002f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8097 	beq.w	8003080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f56:	4b81      	ldr	r3, [pc, #516]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	4b7d      	ldr	r3, [pc, #500]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a7c      	ldr	r2, [pc, #496]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6413      	str	r3, [r2, #64]	; 0x40
 8002f72:	4b7a      	ldr	r3, [pc, #488]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	4b77      	ldr	r3, [pc, #476]	; (8003160 <HAL_RCC_OscConfig+0x474>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d118      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8e:	4b74      	ldr	r3, [pc, #464]	; (8003160 <HAL_RCC_OscConfig+0x474>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a73      	ldr	r2, [pc, #460]	; (8003160 <HAL_RCC_OscConfig+0x474>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7ff f821 	bl	8001fe0 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7ff f81d 	bl	8001fe0 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e10c      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	4b6a      	ldr	r3, [pc, #424]	; (8003160 <HAL_RCC_OscConfig+0x474>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x2ea>
 8002fc8:	4b64      	ldr	r3, [pc, #400]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a63      	ldr	r2, [pc, #396]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	e01c      	b.n	8003010 <HAL_RCC_OscConfig+0x324>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x30c>
 8002fde:	4b5f      	ldr	r3, [pc, #380]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a5e      	ldr	r2, [pc, #376]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fea:	4b5c      	ldr	r3, [pc, #368]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	4a5b      	ldr	r2, [pc, #364]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0x324>
 8002ff8:	4b58      	ldr	r3, [pc, #352]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a57      	ldr	r2, [pc, #348]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
 8003004:	4b55      	ldr	r3, [pc, #340]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	4a54      	ldr	r2, [pc, #336]	; (800315c <HAL_RCC_OscConfig+0x470>)
 800300a:	f023 0304 	bic.w	r3, r3, #4
 800300e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe ffe2 	bl	8001fe0 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe ffde 	bl	8001fe0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0cb      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ee      	beq.n	8003020 <HAL_RCC_OscConfig+0x334>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fe ffcc 	bl	8001fe0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe ffc8 	bl	8001fe0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0b5      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003062:	4b3e      	ldr	r3, [pc, #248]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ee      	bne.n	800304c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	4a38      	ldr	r2, [pc, #224]	; (800315c <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a1 	beq.w	80031cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCC_OscConfig+0x470>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b08      	cmp	r3, #8
 8003094:	d05c      	beq.n	8003150 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d141      	bne.n	8003122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309e:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_RCC_OscConfig+0x478>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe ff9c 	bl	8001fe0 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fe ff98 	bl	8001fe0 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e087      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_RCC_OscConfig+0x470>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	491b      	ldr	r1, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x470>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x478>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fa:	f7fe ff71 	bl	8001fe0 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe ff6d 	bl	8001fe0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e05c      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x416>
 8003120:	e054      	b.n	80031cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_RCC_OscConfig+0x478>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe ff5a 	bl	8001fe0 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe ff56 	bl	8001fe0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e045      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x444>
 800314e:	e03d      	b.n	80031cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e038      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
 800315c:	40023800 	.word	0x40023800
 8003160:	40007000 	.word	0x40007000
 8003164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x4ec>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d028      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d121      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d11a      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800319e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d111      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	085b      	lsrs	r3, r3, #1
 80031b0:	3b01      	subs	r3, #1
 80031b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d107      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0cc      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d90c      	bls.n	8003218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d044      	beq.n	80032fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d119      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003296:	2b03      	cmp	r3, #3
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032aa:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e067      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4934      	ldr	r1, [pc, #208]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032cc:	f7fe fe88 	bl	8001fe0 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fe fe84 	bl	8001fe0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e04f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d20c      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fbe8 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	08008fa0 	.word	0x08008fa0
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	b094      	sub	sp, #80	; 0x50
 80033ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	647b      	str	r3, [r7, #68]	; 0x44
 80033b4:	2300      	movs	r3, #0
 80033b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b8:	2300      	movs	r3, #0
 80033ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c0:	4b79      	ldr	r3, [pc, #484]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x40>
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	f200 80e1 	bhi.w	8003594 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033da:	e0db      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b73      	ldr	r3, [pc, #460]	; (80035ac <HAL_RCC_GetSysClockFreq+0x204>)
 80033de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033e0:	e0db      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e2:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e6:	e0d8      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e8:	4b6f      	ldr	r3, [pc, #444]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f2:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d063      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	2200      	movs	r2, #0
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
 8003408:	63fa      	str	r2, [r7, #60]	; 0x3c
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003410:	633b      	str	r3, [r7, #48]	; 0x30
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
 8003416:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800341a:	4622      	mov	r2, r4
 800341c:	462b      	mov	r3, r5
 800341e:	f04f 0000 	mov.w	r0, #0
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800342c:	0150      	lsls	r0, r2, #5
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4621      	mov	r1, r4
 8003434:	1a51      	subs	r1, r2, r1
 8003436:	6139      	str	r1, [r7, #16]
 8003438:	4629      	mov	r1, r5
 800343a:	eb63 0301 	sbc.w	r3, r3, r1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800344c:	4659      	mov	r1, fp
 800344e:	018b      	lsls	r3, r1, #6
 8003450:	4651      	mov	r1, sl
 8003452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003456:	4651      	mov	r1, sl
 8003458:	018a      	lsls	r2, r1, #6
 800345a:	4651      	mov	r1, sl
 800345c:	ebb2 0801 	subs.w	r8, r2, r1
 8003460:	4659      	mov	r1, fp
 8003462:	eb63 0901 	sbc.w	r9, r3, r1
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347a:	4690      	mov	r8, r2
 800347c:	4699      	mov	r9, r3
 800347e:	4623      	mov	r3, r4
 8003480:	eb18 0303 	adds.w	r3, r8, r3
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	462b      	mov	r3, r5
 8003488:	eb49 0303 	adc.w	r3, r9, r3
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800349a:	4629      	mov	r1, r5
 800349c:	024b      	lsls	r3, r1, #9
 800349e:	4621      	mov	r1, r4
 80034a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a4:	4621      	mov	r1, r4
 80034a6:	024a      	lsls	r2, r1, #9
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ae:	2200      	movs	r2, #0
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034b8:	f7fc fee2 	bl	8000280 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c4:	e058      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	099b      	lsrs	r3, r3, #6
 80034cc:	2200      	movs	r2, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	4611      	mov	r1, r2
 80034d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	0159      	lsls	r1, r3, #5
 80034ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f2:	0150      	lsls	r0, r2, #5
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4641      	mov	r1, r8
 80034fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80034fe:	4649      	mov	r1, r9
 8003500:	eb63 0b01 	sbc.w	fp, r3, r1
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003518:	ebb2 040a 	subs.w	r4, r2, sl
 800351c:	eb63 050b 	sbc.w	r5, r3, fp
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	00eb      	lsls	r3, r5, #3
 800352a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352e:	00e2      	lsls	r2, r4, #3
 8003530:	4614      	mov	r4, r2
 8003532:	461d      	mov	r5, r3
 8003534:	4643      	mov	r3, r8
 8003536:	18e3      	adds	r3, r4, r3
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	464b      	mov	r3, r9
 800353c:	eb45 0303 	adc.w	r3, r5, r3
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800354e:	4629      	mov	r1, r5
 8003550:	028b      	lsls	r3, r1, #10
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003558:	4621      	mov	r1, r4
 800355a:	028a      	lsls	r2, r1, #10
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003562:	2200      	movs	r2, #0
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	61fa      	str	r2, [r7, #28]
 8003568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800356c:	f7fc fe88 	bl	8000280 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4613      	mov	r3, r2
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	3301      	adds	r3, #1
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003592:	e002      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003596:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800359c:	4618      	mov	r0, r3
 800359e:	3750      	adds	r7, #80	; 0x50
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	007a1200 	.word	0x007a1200

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000000 	.word	0x20000000

080035cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d0:	f7ff fff0 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4903      	ldr	r1, [pc, #12]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	08008fb0 	.word	0x08008fb0

080035f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035f8:	f7ff ffdc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0b5b      	lsrs	r3, r3, #13
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	08008fb0 	.word	0x08008fb0

0800361c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	220f      	movs	r2, #15
 800362a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_RCC_GetClockConfig+0x5c>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0203 	and.w	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <HAL_RCC_GetClockConfig+0x5c>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <HAL_RCC_GetClockConfig+0x5c>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_GetClockConfig+0x5c>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_RCC_GetClockConfig+0x60>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0207 	and.w	r2, r3, #7
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	40023c00 	.word	0x40023c00

08003680 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d038      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036a8:	4b68      	ldr	r3, [pc, #416]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036ae:	f7fe fc97 	bl	8001fe0 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036b6:	f7fe fc93 	bl	8001fe0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0bd      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036c8:	4b61      	ldr	r3, [pc, #388]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	019b      	lsls	r3, r3, #6
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	071b      	lsls	r3, r3, #28
 80036e6:	495a      	ldr	r1, [pc, #360]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036ee:	4b57      	ldr	r3, [pc, #348]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fe fc74 	bl	8001fe0 <HAL_GetTick>
 80036f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036fc:	f7fe fc70 	bl	8001fe0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e09a      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800370e:	4b50      	ldr	r3, [pc, #320]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8083 	beq.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	4b48      	ldr	r3, [pc, #288]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	4a47      	ldr	r2, [pc, #284]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003736:	6413      	str	r3, [r2, #64]	; 0x40
 8003738:	4b45      	ldr	r3, [pc, #276]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003744:	4b43      	ldr	r3, [pc, #268]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a42      	ldr	r2, [pc, #264]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003750:	f7fe fc46 	bl	8001fe0 <HAL_GetTick>
 8003754:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7fe fc42 	bl	8001fe0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e06c      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800376a:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02f      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	429a      	cmp	r2, r3
 8003792:	d028      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003794:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800379e:	4b2e      	ldr	r3, [pc, #184]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a4:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037aa:	4a29      	ldr	r2, [pc, #164]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d114      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fc10 	bl	8001fe0 <HAL_GetTick>
 80037c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c2:	e00a      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fe fc0c 	bl	8001fe0 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e034      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0ee      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f2:	d10d      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80037f4:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	4911      	ldr	r1, [pc, #68]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
 800380e:	e005      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a0e      	ldr	r2, [pc, #56]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003816:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	4909      	ldr	r1, [pc, #36]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382a:	4313      	orrs	r3, r2
 800382c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7d1a      	ldrb	r2, [r3, #20]
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003840:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	42470068 	.word	0x42470068
 8003850:	40023800 	.word	0x40023800
 8003854:	40007000 	.word	0x40007000
 8003858:	42470e40 	.word	0x42470e40
 800385c:	424711e0 	.word	0x424711e0

08003860 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e066      	b.n	8003944 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7f5b      	ldrb	r3, [r3, #29]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe f90e 	bl	8001aa8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	22ca      	movs	r2, #202	; 0xca
 8003898:	625a      	str	r2, [r3, #36]	; 0x24
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2253      	movs	r2, #83	; 0x53
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fa45 	bl	8003d32 <RTC_EnterInitMode>
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d12c      	bne.n	800390c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80038c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68d2      	ldr	r2, [r2, #12]
 80038ec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6919      	ldr	r1, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	041a      	lsls	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa4c 	bl	8003da0 <RTC_ExitInitMode>
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d113      	bne.n	800393a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	7f1b      	ldrb	r3, [r3, #28]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_RTC_SetTime+0x1c>
 8003964:	2302      	movs	r3, #2
 8003966:	e087      	b.n	8003a78 <HAL_RTC_SetTime+0x12c>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2202      	movs	r2, #2
 8003972:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d126      	bne.n	80039c8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2200      	movs	r2, #0
 800398c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fa29 	bl	8003dea <RTC_ByteToBcd2>
 8003998:	4603      	mov	r3, r0
 800399a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fa22 	bl	8003dea <RTC_ByteToBcd2>
 80039a6:	4603      	mov	r3, r0
 80039a8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039aa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	789b      	ldrb	r3, [r3, #2]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fa1a 	bl	8003dea <RTC_ByteToBcd2>
 80039b6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039b8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	78db      	ldrb	r3, [r3, #3]
 80039c0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e018      	b.n	80039fa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039e8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80039ee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	78db      	ldrb	r3, [r3, #3]
 80039f4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	22ca      	movs	r2, #202	; 0xca
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2253      	movs	r2, #83	; 0x53
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f991 	bl	8003d32 <RTC_EnterInitMode>
 8003a10:	4603      	mov	r3, r0
 8003a12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d120      	bne.n	8003a5c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6899      	ldr	r1, [r3, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f9a4 	bl	8003da0 <RTC_ExitInitMode>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	22ff      	movs	r2, #255	; 0xff
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	771a      	strb	r2, [r3, #28]

  return status;
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd90      	pop	{r4, r7, pc}

08003a80 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003ab2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	0c1b      	lsrs	r3, r3, #16
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	0d9b      	lsrs	r3, r3, #22
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d11a      	bne.n	8003b32 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f98f 	bl	8003e24 <RTC_Bcd2ToByte>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f986 	bl	8003e24 <RTC_Bcd2ToByte>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	789b      	ldrb	r3, [r3, #2]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f97d 	bl	8003e24 <RTC_Bcd2ToByte>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	7f1b      	ldrb	r3, [r3, #28]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_RTC_SetDate+0x1c>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e071      	b.n	8003c3c <HAL_RTC_SetDate+0x100>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2202      	movs	r2, #2
 8003b62:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10e      	bne.n	8003b88 <HAL_RTC_SetDate+0x4c>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	785b      	ldrb	r3, [r3, #1]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	f023 0310 	bic.w	r3, r3, #16
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	330a      	adds	r3, #10
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11c      	bne.n	8003bc8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	78db      	ldrb	r3, [r3, #3]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f929 	bl	8003dea <RTC_ByteToBcd2>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 f922 	bl	8003dea <RTC_ByteToBcd2>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003baa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	789b      	ldrb	r3, [r3, #2]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f91a 	bl	8003dea <RTC_ByteToBcd2>
 8003bb6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bb8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e00e      	b.n	8003be6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	78db      	ldrb	r3, [r3, #3]
 8003bcc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bd4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003bda:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	22ca      	movs	r2, #202	; 0xca
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2253      	movs	r2, #83	; 0x53
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f89b 	bl	8003d32 <RTC_EnterInitMode>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f8c2 	bl	8003da0 <RTC_ExitInitMode>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	22ff      	movs	r2, #255	; 0xff
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	771a      	strb	r2, [r3, #28]

  return status;
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd90      	pop	{r4, r7, pc}

08003c44 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	0b5b      	lsrs	r3, r3, #13
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11a      	bne.n	8003cd8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	78db      	ldrb	r3, [r3, #3]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f8bc 	bl	8003e24 <RTC_Bcd2ToByte>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f8b3 	bl	8003e24 <RTC_Bcd2ToByte>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	789b      	ldrb	r3, [r3, #2]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f8aa 	bl	8003e24 <RTC_Bcd2ToByte>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cfc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cfe:	f7fe f96f 	bl	8001fe0 <HAL_GetTick>
 8003d02:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d04:	e009      	b.n	8003d1a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d06:	f7fe f96b 	bl	8001fe0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d14:	d901      	bls.n	8003d1a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e007      	b.n	8003d2a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ee      	beq.n	8003d06 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d122      	bne.n	8003d96 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fe f93e 	bl	8001fe0 <HAL_GetTick>
 8003d64:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d66:	e00c      	b.n	8003d82 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d68:	f7fe f93a 	bl	8001fe0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d76:	d904      	bls.n	8003d82 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <RTC_EnterInitMode+0x64>
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d1e8      	bne.n	8003d68 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff89 	bl	8003ce2 <HAL_RTC_WaitForSynchro>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003df8:	e005      	b.n	8003e06 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	3b0a      	subs	r3, #10
 8003e04:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	d8f6      	bhi.n	8003dfa <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	b2db      	uxtb	r3, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	b2db      	uxtb	r3, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e041      	b.n	8003ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f839 	bl	8003efa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f000 f9ca 	bl	8004234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d001      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e044      	b.n	8003fb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d018      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x6c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f52:	d013      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x6c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00e      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x6c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x6c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_TIM_Base_Start_IT+0xbc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x6c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d111      	bne.n	8003fa0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d010      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9e:	e007      	b.n	8003fb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40000c00 	.word	0x40000c00
 8003fd0:	40014000 	.word	0x40014000

08003fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d122      	bne.n	8004030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d11b      	bne.n	8004030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0202 	mvn.w	r2, #2
 8004000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8ee 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8e0 	bl	80041e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f8f1 	bl	800420c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0204 	mvn.w	r2, #4
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8c4 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8b6 	bl	80041e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f8c7 	bl	800420c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b08      	cmp	r3, #8
 8004090:	d122      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b08      	cmp	r3, #8
 800409e:	d11b      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0208 	mvn.w	r2, #8
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2204      	movs	r2, #4
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f89a 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f88c 	bl	80041e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f89d 	bl	800420c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0210 	mvn.w	r2, #16
 80040fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2208      	movs	r2, #8
 8004102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f870 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f862 	bl	80041e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f873 	bl	800420c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0201 	mvn.w	r2, #1
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd fc6a 	bl	8001a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	2b80      	cmp	r3, #128	; 0x80
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8e2 	bl	8004348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d107      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f838 	bl	8004220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0220 	mvn.w	r2, #32
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8ac 	bl	8004334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a34      	ldr	r2, [pc, #208]	; (8004318 <TIM_Base_SetConfig+0xe4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00f      	beq.n	800426c <TIM_Base_SetConfig+0x38>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004252:	d00b      	beq.n	800426c <TIM_Base_SetConfig+0x38>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a31      	ldr	r2, [pc, #196]	; (800431c <TIM_Base_SetConfig+0xe8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d007      	beq.n	800426c <TIM_Base_SetConfig+0x38>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a30      	ldr	r2, [pc, #192]	; (8004320 <TIM_Base_SetConfig+0xec>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_Base_SetConfig+0x38>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a2f      	ldr	r2, [pc, #188]	; (8004324 <TIM_Base_SetConfig+0xf0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d108      	bne.n	800427e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a25      	ldr	r2, [pc, #148]	; (8004318 <TIM_Base_SetConfig+0xe4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01b      	beq.n	80042be <TIM_Base_SetConfig+0x8a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d017      	beq.n	80042be <TIM_Base_SetConfig+0x8a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a22      	ldr	r2, [pc, #136]	; (800431c <TIM_Base_SetConfig+0xe8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <TIM_Base_SetConfig+0x8a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a21      	ldr	r2, [pc, #132]	; (8004320 <TIM_Base_SetConfig+0xec>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00f      	beq.n	80042be <TIM_Base_SetConfig+0x8a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a20      	ldr	r2, [pc, #128]	; (8004324 <TIM_Base_SetConfig+0xf0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00b      	beq.n	80042be <TIM_Base_SetConfig+0x8a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <TIM_Base_SetConfig+0xf4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <TIM_Base_SetConfig+0x8a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1e      	ldr	r2, [pc, #120]	; (800432c <TIM_Base_SetConfig+0xf8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_Base_SetConfig+0x8a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <TIM_Base_SetConfig+0xfc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a08      	ldr	r2, [pc, #32]	; (8004318 <TIM_Base_SetConfig+0xe4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40010000 	.word	0x40010000
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e03f      	b.n	80043ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd fd84 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	; 0x24
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800439e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f929 	bl	80045f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b08a      	sub	sp, #40	; 0x28
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b20      	cmp	r3, #32
 8004414:	d17c      	bne.n	8004510 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_UART_Transmit+0x2c>
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e075      	b.n	8004512 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_UART_Transmit+0x3e>
 8004430:	2302      	movs	r3, #2
 8004432:	e06e      	b.n	8004512 <HAL_UART_Transmit+0x11c>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2221      	movs	r2, #33	; 0x21
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444a:	f7fd fdc9 	bl	8001fe0 <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004464:	d108      	bne.n	8004478 <HAL_UART_Transmit+0x82>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e003      	b.n	8004480 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004488:	e02a      	b.n	80044e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f840 	bl	800451a <UART_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e036      	b.n	8004512 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	3302      	adds	r3, #2
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	e007      	b.n	80044d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3301      	adds	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1cf      	bne.n	800448a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f810 	bl	800451a <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e006      	b.n	8004512 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b090      	sub	sp, #64	; 0x40
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452a:	e050      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d04c      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0x30>
 800453a:	f7fd fd51 	bl	8001fe0 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004546:	429a      	cmp	r2, r3
 8004548:	d241      	bcs.n	80045ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	330c      	adds	r3, #12
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800456a:	637a      	str	r2, [r7, #52]	; 0x34
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e5      	bne.n	800454a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3314      	adds	r3, #20
 8004584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	613b      	str	r3, [r7, #16]
   return(result);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f023 0301 	bic.w	r3, r3, #1
 8004594:	63bb      	str	r3, [r7, #56]	; 0x38
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3314      	adds	r3, #20
 800459c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800459e:	623a      	str	r2, [r7, #32]
 80045a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	69f9      	ldr	r1, [r7, #28]
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e5      	bne.n	800457e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e00f      	b.n	80045ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4013      	ands	r3, r2
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	bf0c      	ite	eq
 80045de:	2301      	moveq	r3, #1
 80045e0:	2300      	movne	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d09f      	beq.n	800452c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3740      	adds	r7, #64	; 0x40
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045fc:	b0c0      	sub	sp, #256	; 0x100
 80045fe:	af00      	add	r7, sp, #0
 8004600:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	68d9      	ldr	r1, [r3, #12]
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	ea40 0301 	orr.w	r3, r0, r1
 8004620:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	431a      	orrs	r2, r3
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	431a      	orrs	r2, r3
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004650:	f021 010c 	bic.w	r1, r1, #12
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800465e:	430b      	orrs	r3, r1
 8004660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004672:	6999      	ldr	r1, [r3, #24]
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	ea40 0301 	orr.w	r3, r0, r1
 800467e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4b8f      	ldr	r3, [pc, #572]	; (80048c4 <UART_SetConfig+0x2cc>)
 8004688:	429a      	cmp	r2, r3
 800468a:	d005      	beq.n	8004698 <UART_SetConfig+0xa0>
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b8d      	ldr	r3, [pc, #564]	; (80048c8 <UART_SetConfig+0x2d0>)
 8004694:	429a      	cmp	r2, r3
 8004696:	d104      	bne.n	80046a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7fe ffac 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 800469c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046a0:	e003      	b.n	80046aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046a2:	f7fe ff93 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 80046a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b4:	f040 810c 	bne.w	80048d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046ca:	4622      	mov	r2, r4
 80046cc:	462b      	mov	r3, r5
 80046ce:	1891      	adds	r1, r2, r2
 80046d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80046d2:	415b      	adcs	r3, r3
 80046d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046da:	4621      	mov	r1, r4
 80046dc:	eb12 0801 	adds.w	r8, r2, r1
 80046e0:	4629      	mov	r1, r5
 80046e2:	eb43 0901 	adc.w	r9, r3, r1
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046fa:	4690      	mov	r8, r2
 80046fc:	4699      	mov	r9, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	eb18 0303 	adds.w	r3, r8, r3
 8004704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004708:	462b      	mov	r3, r5
 800470a:	eb49 0303 	adc.w	r3, r9, r3
 800470e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800471e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004726:	460b      	mov	r3, r1
 8004728:	18db      	adds	r3, r3, r3
 800472a:	653b      	str	r3, [r7, #80]	; 0x50
 800472c:	4613      	mov	r3, r2
 800472e:	eb42 0303 	adc.w	r3, r2, r3
 8004732:	657b      	str	r3, [r7, #84]	; 0x54
 8004734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800473c:	f7fb fda0 	bl	8000280 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4b61      	ldr	r3, [pc, #388]	; (80048cc <UART_SetConfig+0x2d4>)
 8004746:	fba3 2302 	umull	r2, r3, r3, r2
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	011c      	lsls	r4, r3, #4
 800474e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004758:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800475c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	1891      	adds	r1, r2, r2
 8004766:	64b9      	str	r1, [r7, #72]	; 0x48
 8004768:	415b      	adcs	r3, r3
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004770:	4641      	mov	r1, r8
 8004772:	eb12 0a01 	adds.w	sl, r2, r1
 8004776:	4649      	mov	r1, r9
 8004778:	eb43 0b01 	adc.w	fp, r3, r1
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004788:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800478c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004790:	4692      	mov	sl, r2
 8004792:	469b      	mov	fp, r3
 8004794:	4643      	mov	r3, r8
 8004796:	eb1a 0303 	adds.w	r3, sl, r3
 800479a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800479e:	464b      	mov	r3, r9
 80047a0:	eb4b 0303 	adc.w	r3, fp, r3
 80047a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047bc:	460b      	mov	r3, r1
 80047be:	18db      	adds	r3, r3, r3
 80047c0:	643b      	str	r3, [r7, #64]	; 0x40
 80047c2:	4613      	mov	r3, r2
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047d2:	f7fb fd55 	bl	8000280 <__aeabi_uldivmod>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4611      	mov	r1, r2
 80047dc:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <UART_SetConfig+0x2d4>)
 80047de:	fba3 2301 	umull	r2, r3, r3, r1
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	2264      	movs	r2, #100	; 0x64
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	1acb      	subs	r3, r1, r3
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047f2:	4b36      	ldr	r3, [pc, #216]	; (80048cc <UART_SetConfig+0x2d4>)
 80047f4:	fba3 2302 	umull	r2, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004800:	441c      	add	r4, r3
 8004802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004806:	2200      	movs	r2, #0
 8004808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800480c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004810:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004814:	4642      	mov	r2, r8
 8004816:	464b      	mov	r3, r9
 8004818:	1891      	adds	r1, r2, r2
 800481a:	63b9      	str	r1, [r7, #56]	; 0x38
 800481c:	415b      	adcs	r3, r3
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004824:	4641      	mov	r1, r8
 8004826:	1851      	adds	r1, r2, r1
 8004828:	6339      	str	r1, [r7, #48]	; 0x30
 800482a:	4649      	mov	r1, r9
 800482c:	414b      	adcs	r3, r1
 800482e:	637b      	str	r3, [r7, #52]	; 0x34
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800483c:	4659      	mov	r1, fp
 800483e:	00cb      	lsls	r3, r1, #3
 8004840:	4651      	mov	r1, sl
 8004842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004846:	4651      	mov	r1, sl
 8004848:	00ca      	lsls	r2, r1, #3
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	4603      	mov	r3, r0
 8004850:	4642      	mov	r2, r8
 8004852:	189b      	adds	r3, r3, r2
 8004854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004858:	464b      	mov	r3, r9
 800485a:	460a      	mov	r2, r1
 800485c:	eb42 0303 	adc.w	r3, r2, r3
 8004860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004870:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004874:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004878:	460b      	mov	r3, r1
 800487a:	18db      	adds	r3, r3, r3
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
 800487e:	4613      	mov	r3, r2
 8004880:	eb42 0303 	adc.w	r3, r2, r3
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800488a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800488e:	f7fb fcf7 	bl	8000280 <__aeabi_uldivmod>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <UART_SetConfig+0x2d4>)
 8004898:	fba3 1302 	umull	r1, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	2164      	movs	r1, #100	; 0x64
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	3332      	adds	r3, #50	; 0x32
 80048aa:	4a08      	ldr	r2, [pc, #32]	; (80048cc <UART_SetConfig+0x2d4>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	f003 0207 	and.w	r2, r3, #7
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4422      	add	r2, r4
 80048be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048c0:	e106      	b.n	8004ad0 <UART_SetConfig+0x4d8>
 80048c2:	bf00      	nop
 80048c4:	40011000 	.word	0x40011000
 80048c8:	40011400 	.word	0x40011400
 80048cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048e2:	4642      	mov	r2, r8
 80048e4:	464b      	mov	r3, r9
 80048e6:	1891      	adds	r1, r2, r2
 80048e8:	6239      	str	r1, [r7, #32]
 80048ea:	415b      	adcs	r3, r3
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048f2:	4641      	mov	r1, r8
 80048f4:	1854      	adds	r4, r2, r1
 80048f6:	4649      	mov	r1, r9
 80048f8:	eb43 0501 	adc.w	r5, r3, r1
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	00eb      	lsls	r3, r5, #3
 8004906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800490a:	00e2      	lsls	r2, r4, #3
 800490c:	4614      	mov	r4, r2
 800490e:	461d      	mov	r5, r3
 8004910:	4643      	mov	r3, r8
 8004912:	18e3      	adds	r3, r4, r3
 8004914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004918:	464b      	mov	r3, r9
 800491a:	eb45 0303 	adc.w	r3, r5, r3
 800491e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800492e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800493e:	4629      	mov	r1, r5
 8004940:	008b      	lsls	r3, r1, #2
 8004942:	4621      	mov	r1, r4
 8004944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004948:	4621      	mov	r1, r4
 800494a:	008a      	lsls	r2, r1, #2
 800494c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004950:	f7fb fc96 	bl	8000280 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4b60      	ldr	r3, [pc, #384]	; (8004adc <UART_SetConfig+0x4e4>)
 800495a:	fba3 2302 	umull	r2, r3, r3, r2
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	011c      	lsls	r4, r3, #4
 8004962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004966:	2200      	movs	r2, #0
 8004968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800496c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004974:	4642      	mov	r2, r8
 8004976:	464b      	mov	r3, r9
 8004978:	1891      	adds	r1, r2, r2
 800497a:	61b9      	str	r1, [r7, #24]
 800497c:	415b      	adcs	r3, r3
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004984:	4641      	mov	r1, r8
 8004986:	1851      	adds	r1, r2, r1
 8004988:	6139      	str	r1, [r7, #16]
 800498a:	4649      	mov	r1, r9
 800498c:	414b      	adcs	r3, r1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800499c:	4659      	mov	r1, fp
 800499e:	00cb      	lsls	r3, r1, #3
 80049a0:	4651      	mov	r1, sl
 80049a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a6:	4651      	mov	r1, sl
 80049a8:	00ca      	lsls	r2, r1, #3
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	4642      	mov	r2, r8
 80049b2:	189b      	adds	r3, r3, r2
 80049b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049b8:	464b      	mov	r3, r9
 80049ba:	460a      	mov	r2, r1
 80049bc:	eb42 0303 	adc.w	r3, r2, r3
 80049c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80049ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049dc:	4649      	mov	r1, r9
 80049de:	008b      	lsls	r3, r1, #2
 80049e0:	4641      	mov	r1, r8
 80049e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e6:	4641      	mov	r1, r8
 80049e8:	008a      	lsls	r2, r1, #2
 80049ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049ee:	f7fb fc47 	bl	8000280 <__aeabi_uldivmod>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	4b38      	ldr	r3, [pc, #224]	; (8004adc <UART_SetConfig+0x4e4>)
 80049fa:	fba3 2301 	umull	r2, r3, r3, r1
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	2264      	movs	r2, #100	; 0x64
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	1acb      	subs	r3, r1, r3
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	3332      	adds	r3, #50	; 0x32
 8004a0c:	4a33      	ldr	r2, [pc, #204]	; (8004adc <UART_SetConfig+0x4e4>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a18:	441c      	add	r4, r3
 8004a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a1e:	2200      	movs	r2, #0
 8004a20:	673b      	str	r3, [r7, #112]	; 0x70
 8004a22:	677a      	str	r2, [r7, #116]	; 0x74
 8004a24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	1891      	adds	r1, r2, r2
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	415b      	adcs	r3, r3
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a38:	4641      	mov	r1, r8
 8004a3a:	1851      	adds	r1, r2, r1
 8004a3c:	6039      	str	r1, [r7, #0]
 8004a3e:	4649      	mov	r1, r9
 8004a40:	414b      	adcs	r3, r1
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a50:	4659      	mov	r1, fp
 8004a52:	00cb      	lsls	r3, r1, #3
 8004a54:	4651      	mov	r1, sl
 8004a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a5a:	4651      	mov	r1, sl
 8004a5c:	00ca      	lsls	r2, r1, #3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	4603      	mov	r3, r0
 8004a64:	4642      	mov	r2, r8
 8004a66:	189b      	adds	r3, r3, r2
 8004a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	460a      	mov	r2, r1
 8004a6e:	eb42 0303 	adc.w	r3, r2, r3
 8004a72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a7e:	667a      	str	r2, [r7, #100]	; 0x64
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	008b      	lsls	r3, r1, #2
 8004a90:	4641      	mov	r1, r8
 8004a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a96:	4641      	mov	r1, r8
 8004a98:	008a      	lsls	r2, r1, #2
 8004a9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a9e:	f7fb fbef 	bl	8000280 <__aeabi_uldivmod>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <UART_SetConfig+0x4e4>)
 8004aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	2164      	movs	r1, #100	; 0x64
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	3332      	adds	r3, #50	; 0x32
 8004aba:	4a08      	ldr	r2, [pc, #32]	; (8004adc <UART_SetConfig+0x4e4>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	f003 020f 	and.w	r2, r3, #15
 8004ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4422      	add	r2, r4
 8004ace:	609a      	str	r2, [r3, #8]
}
 8004ad0:	bf00      	nop
 8004ad2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004adc:	51eb851f 	.word	0x51eb851f

08004ae0 <__NVIC_SetPriority>:
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	6039      	str	r1, [r7, #0]
 8004aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	db0a      	blt.n	8004b0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	490c      	ldr	r1, [pc, #48]	; (8004b2c <__NVIC_SetPriority+0x4c>)
 8004afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afe:	0112      	lsls	r2, r2, #4
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	440b      	add	r3, r1
 8004b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b08:	e00a      	b.n	8004b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	4908      	ldr	r1, [pc, #32]	; (8004b30 <__NVIC_SetPriority+0x50>)
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	3b04      	subs	r3, #4
 8004b18:	0112      	lsls	r2, r2, #4
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	761a      	strb	r2, [r3, #24]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	e000e100 	.word	0xe000e100
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <SysTick_Handler+0x1c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b3c:	f002 f880 	bl	8006c40 <xTaskGetSchedulerState>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d001      	beq.n	8004b4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b46:	f002 ff67 	bl	8007a18 <xPortSysTickHandler>
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	e000e010 	.word	0xe000e010

08004b54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f06f 0004 	mvn.w	r0, #4
 8004b5e:	f7ff ffbf 	bl	8004ae0 <__NVIC_SetPriority>
#endif
}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b6e:	f3ef 8305 	mrs	r3, IPSR
 8004b72:	603b      	str	r3, [r7, #0]
  return(result);
 8004b74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b7a:	f06f 0305 	mvn.w	r3, #5
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	e00c      	b.n	8004b9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <osKernelInitialize+0x44>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d105      	bne.n	8004b96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <osKernelInitialize+0x44>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	e002      	b.n	8004b9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b9c:	687b      	ldr	r3, [r7, #4]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	200001bc 	.word	0x200001bc

08004bb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bb6:	f3ef 8305 	mrs	r3, IPSR
 8004bba:	603b      	str	r3, [r7, #0]
  return(result);
 8004bbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <osKernelStart+0x1a>
    stat = osErrorISR;
 8004bc2:	f06f 0305 	mvn.w	r3, #5
 8004bc6:	607b      	str	r3, [r7, #4]
 8004bc8:	e010      	b.n	8004bec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <osKernelStart+0x48>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d109      	bne.n	8004be6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004bd2:	f7ff ffbf 	bl	8004b54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <osKernelStart+0x48>)
 8004bd8:	2202      	movs	r2, #2
 8004bda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004bdc:	f001 fbb2 	bl	8006344 <vTaskStartScheduler>
      stat = osOK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	e002      	b.n	8004bec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004be6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bec:	687b      	ldr	r3, [r7, #4]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	200001bc 	.word	0x200001bc

08004bfc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c02:	f3ef 8305 	mrs	r3, IPSR
 8004c06:	603b      	str	r3, [r7, #0]
  return(result);
 8004c08:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004c0e:	f001 fcc5 	bl	800659c <xTaskGetTickCountFromISR>
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	e002      	b.n	8004c1c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004c16:	f001 fcb1 	bl	800657c <xTaskGetTickCount>
 8004c1a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004c1c:	687b      	ldr	r3, [r7, #4]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b08e      	sub	sp, #56	; 0x38
 8004c2a:	af04      	add	r7, sp, #16
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c36:	f3ef 8305 	mrs	r3, IPSR
 8004c3a:	617b      	str	r3, [r7, #20]
  return(result);
 8004c3c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d17e      	bne.n	8004d40 <osThreadNew+0x11a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d07b      	beq.n	8004d40 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c4c:	2318      	movs	r3, #24
 8004c4e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004c54:	f04f 33ff 	mov.w	r3, #4294967295
 8004c58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d045      	beq.n	8004cec <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <osThreadNew+0x48>
        name = attr->name;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <osThreadNew+0x6e>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b38      	cmp	r3, #56	; 0x38
 8004c86:	d805      	bhi.n	8004c94 <osThreadNew+0x6e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <osThreadNew+0x72>
        return (NULL);
 8004c94:	2300      	movs	r3, #0
 8004c96:	e054      	b.n	8004d42 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	089b      	lsrs	r3, r3, #2
 8004ca6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00e      	beq.n	8004cce <osThreadNew+0xa8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2ba7      	cmp	r3, #167	; 0xa7
 8004cb6:	d90a      	bls.n	8004cce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <osThreadNew+0xa8>
        mem = 1;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	e010      	b.n	8004cf0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <osThreadNew+0xca>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d108      	bne.n	8004cf0 <osThreadNew+0xca>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <osThreadNew+0xca>
          mem = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	e001      	b.n	8004cf0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d110      	bne.n	8004d18 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cfe:	9202      	str	r2, [sp, #8]
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f001 f92d 	bl	8005f6c <xTaskCreateStatic>
 8004d12:	4603      	mov	r3, r0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e013      	b.n	8004d40 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d110      	bne.n	8004d40 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	f107 0310 	add.w	r3, r7, #16
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f001 f978 	bl	8006026 <xTaskCreate>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d001      	beq.n	8004d40 <osThreadNew+0x11a>
            hTask = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d40:	693b      	ldr	r3, [r7, #16]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3728      	adds	r7, #40	; 0x28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d52:	f3ef 8305 	mrs	r3, IPSR
 8004d56:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <osDelay+0x1c>
    stat = osErrorISR;
 8004d5e:	f06f 0305 	mvn.w	r3, #5
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e007      	b.n	8004d76 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f001 fab3 	bl	80062dc <vTaskDelay>
    }
  }

  return (stat);
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d8c:	f3ef 8305 	mrs	r3, IPSR
 8004d90:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d92:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d174      	bne.n	8004e82 <osMutexNew+0x102>
    if (attr != NULL) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	61bb      	str	r3, [r7, #24]
 8004da4:	e001      	b.n	8004daa <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <osMutexNew+0x3a>
      rmtx = 1U;
 8004db4:	2301      	movs	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e001      	b.n	8004dbe <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d15c      	bne.n	8004e82 <osMutexNew+0x102>
      mem = -1;
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dcc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d015      	beq.n	8004e00 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d006      	beq.n	8004dea <osMutexNew+0x6a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b4f      	cmp	r3, #79	; 0x4f
 8004de2:	d902      	bls.n	8004dea <osMutexNew+0x6a>
          mem = 1;
 8004de4:	2301      	movs	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e00c      	b.n	8004e04 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <osMutexNew+0x84>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <osMutexNew+0x84>
            mem = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	e001      	b.n	8004e04 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d112      	bne.n	8004e30 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4619      	mov	r1, r3
 8004e16:	2004      	movs	r0, #4
 8004e18:	f000 fb17 	bl	800544a <xQueueCreateMutexStatic>
 8004e1c:	61f8      	str	r0, [r7, #28]
 8004e1e:	e016      	b.n	8004e4e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4619      	mov	r1, r3
 8004e26:	2001      	movs	r0, #1
 8004e28:	f000 fb0f 	bl	800544a <xQueueCreateMutexStatic>
 8004e2c:	61f8      	str	r0, [r7, #28]
 8004e2e:	e00e      	b.n	8004e4e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004e3c:	2004      	movs	r0, #4
 8004e3e:	f000 faec 	bl	800541a <xQueueCreateMutex>
 8004e42:	61f8      	str	r0, [r7, #28]
 8004e44:	e003      	b.n	8004e4e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004e46:	2001      	movs	r0, #1
 8004e48:	f000 fae7 	bl	800541a <xQueueCreateMutex>
 8004e4c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00c      	beq.n	8004e6e <osMutexNew+0xee>
        if (attr != NULL) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <osMutexNew+0xe2>
          name = attr->name;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e001      	b.n	8004e66 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	69f8      	ldr	r0, [r7, #28]
 8004e6a:	f001 f821 	bl	8005eb0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d006      	beq.n	8004e82 <osMutexNew+0x102>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004e82:	69fb      	ldr	r3, [r7, #28]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eaa:	f3ef 8305 	mrs	r3, IPSR
 8004eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004eb6:	f06f 0305 	mvn.w	r3, #5
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e02c      	b.n	8004f18 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004ec4:	f06f 0303 	mvn.w	r3, #3
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e025      	b.n	8004f18 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d011      	beq.n	8004ef6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004ed2:	6839      	ldr	r1, [r7, #0]
 8004ed4:	6938      	ldr	r0, [r7, #16]
 8004ed6:	f000 fb07 	bl	80054e8 <xQueueTakeMutexRecursive>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d01b      	beq.n	8004f18 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004ee6:	f06f 0301 	mvn.w	r3, #1
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e014      	b.n	8004f18 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004eee:	f06f 0302 	mvn.w	r3, #2
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e010      	b.n	8004f18 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	6938      	ldr	r0, [r7, #16]
 8004efa:	f000 fda5 	bl	8005a48 <xQueueSemaphoreTake>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d009      	beq.n	8004f18 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004f0a:	f06f 0301 	mvn.w	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e002      	b.n	8004f18 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004f12:	f06f 0302 	mvn.w	r3, #2
 8004f16:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004f18:	697b      	ldr	r3, [r7, #20]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f3e:	f3ef 8305 	mrs	r3, IPSR
 8004f42:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f44:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004f4a:	f06f 0305 	mvn.w	r3, #5
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e01f      	b.n	8004f92 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d103      	bne.n	8004f60 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004f58:	f06f 0303 	mvn.w	r3, #3
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e018      	b.n	8004f92 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004f66:	6938      	ldr	r0, [r7, #16]
 8004f68:	f000 fa8a 	bl	8005480 <xQueueGiveMutexRecursive>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d00f      	beq.n	8004f92 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004f72:	f06f 0302 	mvn.w	r3, #2
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e00b      	b.n	8004f92 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2100      	movs	r1, #0
 8004f80:	6938      	ldr	r0, [r7, #16]
 8004f82:	f000 fae7 	bl	8005554 <xQueueGenericSend>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d002      	beq.n	8004f92 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004f8c:	f06f 0302 	mvn.w	r3, #2
 8004f90:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004f92:	697b      	ldr	r3, [r7, #20]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a07      	ldr	r2, [pc, #28]	; (8004fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	4a06      	ldr	r2, [pc, #24]	; (8004fcc <vApplicationGetIdleTaskMemory+0x30>)
 8004fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2280      	movs	r2, #128	; 0x80
 8004fb8:	601a      	str	r2, [r3, #0]
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	200001c0 	.word	0x200001c0
 8004fcc:	20000268 	.word	0x20000268

08004fd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a07      	ldr	r2, [pc, #28]	; (8004ffc <vApplicationGetTimerTaskMemory+0x2c>)
 8004fe0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4a06      	ldr	r2, [pc, #24]	; (8005000 <vApplicationGetTimerTaskMemory+0x30>)
 8004fe6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fee:	601a      	str	r2, [r3, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20000468 	.word	0x20000468
 8005000:	20000510 	.word	0x20000510

08005004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f103 0208 	add.w	r2, r3, #8
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f04f 32ff 	mov.w	r2, #4294967295
 800501c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f103 0208 	add.w	r2, r3, #8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f103 0208 	add.w	r2, r3, #8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d103      	bne.n	80050c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e00c      	b.n	80050e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3308      	adds	r3, #8
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e002      	b.n	80050d4 <vListInsert+0x2e>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d2f6      	bcs.n	80050ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6892      	ldr	r2, [r2, #8]
 800512e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6852      	ldr	r2, [r2, #4]
 8005138:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d103      	bne.n	800514c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	1e5a      	subs	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005196:	f002 fbad 	bl	80078f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	441a      	add	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c6:	3b01      	subs	r3, #1
 80051c8:	68f9      	ldr	r1, [r7, #12]
 80051ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	441a      	add	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	22ff      	movs	r2, #255	; 0xff
 80051da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	22ff      	movs	r2, #255	; 0xff
 80051e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d114      	bne.n	8005216 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01a      	beq.n	800522a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3310      	adds	r3, #16
 80051f8:	4618      	mov	r0, r3
 80051fa:	f001 fb4f 	bl	800689c <xTaskRemoveFromEventList>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d012      	beq.n	800522a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005204:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <xQueueGenericReset+0xcc>)
 8005206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	e009      	b.n	800522a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3310      	adds	r3, #16
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fef2 	bl	8005004 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3324      	adds	r3, #36	; 0x24
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff feed 	bl	8005004 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800522a:	f002 fb93 	bl	8007954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800522e:	2301      	movs	r3, #1
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08e      	sub	sp, #56	; 0x38
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <xQueueGenericCreateStatic+0x52>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <xQueueGenericCreateStatic+0x56>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <xQueueGenericCreateStatic+0x58>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	623b      	str	r3, [r7, #32]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <xQueueGenericCreateStatic+0x7e>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <xQueueGenericCreateStatic+0x82>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <xQueueGenericCreateStatic+0x84>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	61fb      	str	r3, [r7, #28]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052da:	2350      	movs	r3, #80	; 0x50
 80052dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b50      	cmp	r3, #80	; 0x50
 80052e2:	d00a      	beq.n	80052fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	61bb      	str	r3, [r7, #24]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00d      	beq.n	8005322 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800530e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f83f 	bl	80053a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005324:	4618      	mov	r0, r3
 8005326:	3730      	adds	r7, #48	; 0x30
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	; 0x28
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	4613      	mov	r3, r2
 8005338:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	613b      	str	r3, [r7, #16]
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	3350      	adds	r3, #80	; 0x50
 8005364:	4618      	mov	r0, r3
 8005366:	f002 fbe7 	bl	8007b38 <pvPortMalloc>
 800536a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d011      	beq.n	8005396 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	3350      	adds	r3, #80	; 0x50
 800537a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005384:	79fa      	ldrb	r2, [r7, #7]
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	4613      	mov	r3, r2
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f805 	bl	80053a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005396:	69bb      	ldr	r3, [r7, #24]
	}
 8005398:	4618      	mov	r0, r3
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d103      	bne.n	80053bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	e002      	b.n	80053c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053ce:	2101      	movs	r1, #1
 80053d0:	69b8      	ldr	r0, [r7, #24]
 80053d2:	f7ff fecb 	bl	800516c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005406:	2300      	movs	r3, #0
 8005408:	2200      	movs	r2, #0
 800540a:	2100      	movs	r1, #0
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8a1 	bl	8005554 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800541a:	b580      	push	{r7, lr}
 800541c:	b086      	sub	sp, #24
 800541e:	af00      	add	r7, sp, #0
 8005420:	4603      	mov	r3, r0
 8005422:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005424:	2301      	movs	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	461a      	mov	r2, r3
 8005430:	6939      	ldr	r1, [r7, #16]
 8005432:	6978      	ldr	r0, [r7, #20]
 8005434:	f7ff ff7a 	bl	800532c <xQueueGenericCreate>
 8005438:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff ffd3 	bl	80053e6 <prvInitialiseMutex>

		return xNewQueue;
 8005440:	68fb      	ldr	r3, [r7, #12]
	}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800544a:	b580      	push	{r7, lr}
 800544c:	b088      	sub	sp, #32
 800544e:	af02      	add	r7, sp, #8
 8005450:	4603      	mov	r3, r0
 8005452:	6039      	str	r1, [r7, #0]
 8005454:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005456:	2301      	movs	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2200      	movs	r2, #0
 8005466:	6939      	ldr	r1, [r7, #16]
 8005468:	6978      	ldr	r0, [r7, #20]
 800546a:	f7ff fee7 	bl	800523c <xQueueGenericCreateStatic>
 800546e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7ff ffb8 	bl	80053e6 <prvInitialiseMutex>

		return xNewQueue;
 8005476:	68fb      	ldr	r3, [r7, #12]
	}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60fb      	str	r3, [r7, #12]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	689c      	ldr	r4, [r3, #8]
 80054ac:	f001 fbb8 	bl	8006c20 <xTaskGetCurrentTaskHandle>
 80054b0:	4603      	mov	r3, r0
 80054b2:	429c      	cmp	r4, r3
 80054b4:	d111      	bne.n	80054da <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	1e5a      	subs	r2, r3, #1
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80054c8:	2300      	movs	r3, #0
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	6938      	ldr	r0, [r7, #16]
 80054d0:	f000 f840 	bl	8005554 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80054d4:	2301      	movs	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e001      	b.n	80054de <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80054de:	697b      	ldr	r3, [r7, #20]
	}
 80054e0:	4618      	mov	r0, r3
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd90      	pop	{r4, r7, pc}

080054e8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	60fb      	str	r3, [r7, #12]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	689c      	ldr	r4, [r3, #8]
 8005516:	f001 fb83 	bl	8006c20 <xTaskGetCurrentTaskHandle>
 800551a:	4603      	mov	r3, r0
 800551c:	429c      	cmp	r4, r3
 800551e:	d107      	bne.n	8005530 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800552a:	2301      	movs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e00c      	b.n	800554a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	6938      	ldr	r0, [r7, #16]
 8005534:	f000 fa88 	bl	8005a48 <xQueueSemaphoreTake>
 8005538:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d004      	beq.n	800554a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800554a:	697b      	ldr	r3, [r7, #20]
	}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	bd90      	pop	{r4, r7, pc}

08005554 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08e      	sub	sp, #56	; 0x38
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <xQueueGenericSend+0x32>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d103      	bne.n	8005594 <xQueueGenericSend+0x40>
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <xQueueGenericSend+0x44>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <xQueueGenericSend+0x46>
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <xQueueGenericSend+0x60>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d103      	bne.n	80055c2 <xQueueGenericSend+0x6e>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <xQueueGenericSend+0x72>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueGenericSend+0x74>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	623b      	str	r3, [r7, #32]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055e2:	f001 fb2d 	bl	8006c40 <xTaskGetSchedulerState>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <xQueueGenericSend+0x9e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <xQueueGenericSend+0xa2>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <xQueueGenericSend+0xa4>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <xQueueGenericSend+0xbe>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	61fb      	str	r3, [r7, #28]
}
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005612:	f002 f96f 	bl	80078f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <xQueueGenericSend+0xd4>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d129      	bne.n	800567c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800562e:	f000 fb2f 	bl	8005c90 <prvCopyDataToQueue>
 8005632:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	3324      	adds	r3, #36	; 0x24
 8005640:	4618      	mov	r0, r3
 8005642:	f001 f92b 	bl	800689c <xTaskRemoveFromEventList>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800564c:	4b3f      	ldr	r3, [pc, #252]	; (800574c <xQueueGenericSend+0x1f8>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	e00a      	b.n	8005674 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005664:	4b39      	ldr	r3, [pc, #228]	; (800574c <xQueueGenericSend+0x1f8>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005674:	f002 f96e 	bl	8007954 <vPortExitCritical>
				return pdPASS;
 8005678:	2301      	movs	r3, #1
 800567a:	e063      	b.n	8005744 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005682:	f002 f967 	bl	8007954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005686:	2300      	movs	r3, #0
 8005688:	e05c      	b.n	8005744 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	4618      	mov	r0, r3
 8005696:	f001 f965 	bl	8006964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800569a:	2301      	movs	r3, #1
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800569e:	f002 f959 	bl	8007954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056a2:	f000 febf 	bl	8006424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056a6:	f002 f925 	bl	80078f4 <vPortEnterCritical>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b0:	b25b      	sxtb	r3, r3
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d103      	bne.n	80056c0 <xQueueGenericSend+0x16c>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c6:	b25b      	sxtb	r3, r3
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d103      	bne.n	80056d6 <xQueueGenericSend+0x182>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d6:	f002 f93d 	bl	8007954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056da:	1d3a      	adds	r2, r7, #4
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 f954 	bl	8006990 <xTaskCheckForTimeOut>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d124      	bne.n	8005738 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056f0:	f000 fbc6 	bl	8005e80 <prvIsQueueFull>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	3310      	adds	r3, #16
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f001 f87a 	bl	80067fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570a:	f000 fb51 	bl	8005db0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800570e:	f000 fe97 	bl	8006440 <xTaskResumeAll>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	f47f af7c 	bne.w	8005612 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <xQueueGenericSend+0x1f8>)
 800571c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	e772      	b.n	8005612 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800572c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572e:	f000 fb3f 	bl	8005db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005732:	f000 fe85 	bl	8006440 <xTaskResumeAll>
 8005736:	e76c      	b.n	8005612 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800573a:	f000 fb39 	bl	8005db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800573e:	f000 fe7f 	bl	8006440 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005742:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005744:	4618      	mov	r0, r3
 8005746:	3738      	adds	r7, #56	; 0x38
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	e000ed04 	.word	0xe000ed04

08005750 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b090      	sub	sp, #64	; 0x40
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <xQueueGenericSendFromISR+0x3c>
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <xQueueGenericSendFromISR+0x40>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <xQueueGenericSendFromISR+0x42>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d103      	bne.n	80057ba <xQueueGenericSendFromISR+0x6a>
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <xQueueGenericSendFromISR+0x6e>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <xQueueGenericSendFromISR+0x70>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	623b      	str	r3, [r7, #32]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057da:	f002 f96d 	bl	8007ab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057de:	f3ef 8211 	mrs	r2, BASEPRI
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	61fa      	str	r2, [r7, #28]
 80057f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <xQueueGenericSendFromISR+0xbc>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d12f      	bne.n	800586c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005822:	f000 fa35 	bl	8005c90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005826:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d112      	bne.n	8005856 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d016      	beq.n	8005866 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	3324      	adds	r3, #36	; 0x24
 800583c:	4618      	mov	r0, r3
 800583e:	f001 f82d 	bl	800689c <xTaskRemoveFromEventList>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00e      	beq.n	8005866 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e007      	b.n	8005866 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005856:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800585a:	3301      	adds	r3, #1
 800585c:	b2db      	uxtb	r3, r3
 800585e:	b25a      	sxtb	r2, r3
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005866:	2301      	movs	r3, #1
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800586a:	e001      	b.n	8005870 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800586c:	2300      	movs	r3, #0
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005872:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800587a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800587c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800587e:	4618      	mov	r0, r3
 8005880:	3740      	adds	r7, #64	; 0x40
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08c      	sub	sp, #48	; 0x30
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005894:	2300      	movs	r3, #0
 8005896:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <xQueueReceive+0x30>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	623b      	str	r3, [r7, #32]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <xQueueReceive+0x3e>
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <xQueueReceive+0x42>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <xQueueReceive+0x44>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xQueueReceive+0x5e>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	61fb      	str	r3, [r7, #28]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058e6:	f001 f9ab 	bl	8006c40 <xTaskGetSchedulerState>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <xQueueReceive+0x6e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <xQueueReceive+0x72>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <xQueueReceive+0x74>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10a      	bne.n	8005916 <xQueueReceive+0x8e>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	61bb      	str	r3, [r7, #24]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005916:	f001 ffed 	bl	80078f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01f      	beq.n	8005966 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800592a:	f000 fa1b 	bl	8005d64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	1e5a      	subs	r2, r3, #1
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00f      	beq.n	800595e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	3310      	adds	r3, #16
 8005942:	4618      	mov	r0, r3
 8005944:	f000 ffaa 	bl	800689c <xTaskRemoveFromEventList>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800594e:	4b3d      	ldr	r3, [pc, #244]	; (8005a44 <xQueueReceive+0x1bc>)
 8005950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800595e:	f001 fff9 	bl	8007954 <vPortExitCritical>
				return pdPASS;
 8005962:	2301      	movs	r3, #1
 8005964:	e069      	b.n	8005a3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800596c:	f001 fff2 	bl	8007954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005970:	2300      	movs	r3, #0
 8005972:	e062      	b.n	8005a3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800597a:	f107 0310 	add.w	r3, r7, #16
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fff0 	bl	8006964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005984:	2301      	movs	r3, #1
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005988:	f001 ffe4 	bl	8007954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800598c:	f000 fd4a 	bl	8006424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005990:	f001 ffb0 	bl	80078f4 <vPortEnterCritical>
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800599a:	b25b      	sxtb	r3, r3
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d103      	bne.n	80059aa <xQueueReceive+0x122>
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b0:	b25b      	sxtb	r3, r3
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b6:	d103      	bne.n	80059c0 <xQueueReceive+0x138>
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059c0:	f001 ffc8 	bl	8007954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059c4:	1d3a      	adds	r2, r7, #4
 80059c6:	f107 0310 	add.w	r3, r7, #16
 80059ca:	4611      	mov	r1, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 ffdf 	bl	8006990 <xTaskCheckForTimeOut>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d123      	bne.n	8005a20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059da:	f000 fa3b 	bl	8005e54 <prvIsQueueEmpty>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d017      	beq.n	8005a14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	3324      	adds	r3, #36	; 0x24
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 ff05 	bl	80067fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f4:	f000 f9dc 	bl	8005db0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059f8:	f000 fd22 	bl	8006440 <xTaskResumeAll>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d189      	bne.n	8005916 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a02:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <xQueueReceive+0x1bc>)
 8005a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	e780      	b.n	8005916 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a16:	f000 f9cb 	bl	8005db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a1a:	f000 fd11 	bl	8006440 <xTaskResumeAll>
 8005a1e:	e77a      	b.n	8005916 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a22:	f000 f9c5 	bl	8005db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a26:	f000 fd0b 	bl	8006440 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a2c:	f000 fa12 	bl	8005e54 <prvIsQueueEmpty>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f43f af6f 	beq.w	8005916 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3730      	adds	r7, #48	; 0x30
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	e000ed04 	.word	0xe000ed04

08005a48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08e      	sub	sp, #56	; 0x38
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	623b      	str	r3, [r7, #32]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	61fb      	str	r3, [r7, #28]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a98:	f001 f8d2 	bl	8006c40 <xTaskGetSchedulerState>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <xQueueSemaphoreTake+0x60>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <xQueueSemaphoreTake+0x64>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <xQueueSemaphoreTake+0x66>
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	61bb      	str	r3, [r7, #24]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ac8:	f001 ff14 	bl	80078f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d024      	beq.n	8005b22 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	1e5a      	subs	r2, r3, #1
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d104      	bne.n	8005af2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ae8:	f001 fa20 	bl	8006f2c <pvTaskIncrementMutexHeldCount>
 8005aec:	4602      	mov	r2, r0
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00f      	beq.n	8005b1a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	3310      	adds	r3, #16
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fecc 	bl	800689c <xTaskRemoveFromEventList>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b0a:	4b54      	ldr	r3, [pc, #336]	; (8005c5c <xQueueSemaphoreTake+0x214>)
 8005b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b1a:	f001 ff1b 	bl	8007954 <vPortExitCritical>
				return pdPASS;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e097      	b.n	8005c52 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d111      	bne.n	8005b4c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	617b      	str	r3, [r7, #20]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b44:	f001 ff06 	bl	8007954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e082      	b.n	8005c52 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b52:	f107 030c 	add.w	r3, r7, #12
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 ff04 	bl	8006964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b60:	f001 fef8 	bl	8007954 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b64:	f000 fc5e 	bl	8006424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b68:	f001 fec4 	bl	80078f4 <vPortEnterCritical>
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b72:	b25b      	sxtb	r3, r3
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b78:	d103      	bne.n	8005b82 <xQueueSemaphoreTake+0x13a>
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b88:	b25b      	sxtb	r3, r3
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8e:	d103      	bne.n	8005b98 <xQueueSemaphoreTake+0x150>
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b98:	f001 fedc 	bl	8007954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b9c:	463a      	mov	r2, r7
 8005b9e:	f107 030c 	add.w	r3, r7, #12
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fef3 	bl	8006990 <xTaskCheckForTimeOut>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d132      	bne.n	8005c16 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bb2:	f000 f94f 	bl	8005e54 <prvIsQueueEmpty>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d026      	beq.n	8005c0a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005bc4:	f001 fe96 	bl	80078f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 f855 	bl	8006c7c <xTaskPriorityInherit>
 8005bd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005bd4:	f001 febe 	bl	8007954 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	3324      	adds	r3, #36	; 0x24
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fe0b 	bl	80067fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005be6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005be8:	f000 f8e2 	bl	8005db0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bec:	f000 fc28 	bl	8006440 <xTaskResumeAll>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f47f af68 	bne.w	8005ac8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005bf8:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <xQueueSemaphoreTake+0x214>)
 8005bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	e75e      	b.n	8005ac8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c0c:	f000 f8d0 	bl	8005db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c10:	f000 fc16 	bl	8006440 <xTaskResumeAll>
 8005c14:	e758      	b.n	8005ac8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c18:	f000 f8ca 	bl	8005db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c1c:	f000 fc10 	bl	8006440 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c22:	f000 f917 	bl	8005e54 <prvIsQueueEmpty>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f43f af4d 	beq.w	8005ac8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00d      	beq.n	8005c50 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005c34:	f001 fe5e 	bl	80078f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c3a:	f000 f811 	bl	8005c60 <prvGetDisinheritPriorityAfterTimeout>
 8005c3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 f8ee 	bl	8006e28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c4c:	f001 fe82 	bl	8007954 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3738      	adds	r7, #56	; 0x38
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d006      	beq.n	8005c7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	e001      	b.n	8005c82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c82:	68fb      	ldr	r3, [r7, #12]
	}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10d      	bne.n	8005cca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d14d      	bne.n	8005d52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 f846 	bl	8006d4c <xTaskPriorityDisinherit>
 8005cc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	e043      	b.n	8005d52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d119      	bne.n	8005d04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6858      	ldr	r0, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	f002 faff 	bl	80082de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	441a      	add	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d32b      	bcc.n	8005d52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	605a      	str	r2, [r3, #4]
 8005d02:	e026      	b.n	8005d52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68d8      	ldr	r0, [r3, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	f002 fae5 	bl	80082de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	425b      	negs	r3, r3
 8005d1e:	441a      	add	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d207      	bcs.n	8005d40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	425b      	negs	r3, r3
 8005d3a:	441a      	add	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d105      	bne.n	8005d52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d5a:	697b      	ldr	r3, [r7, #20]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d018      	beq.n	8005da8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	441a      	add	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d303      	bcc.n	8005d98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68d9      	ldr	r1, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	461a      	mov	r2, r3
 8005da2:	6838      	ldr	r0, [r7, #0]
 8005da4:	f002 fa9b 	bl	80082de <memcpy>
	}
}
 8005da8:	bf00      	nop
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005db8:	f001 fd9c 	bl	80078f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dc4:	e011      	b.n	8005dea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d012      	beq.n	8005df4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3324      	adds	r3, #36	; 0x24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fd62 	bl	800689c <xTaskRemoveFromEventList>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dde:	f000 fe39 	bl	8006a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dce9      	bgt.n	8005dc6 <prvUnlockQueue+0x16>
 8005df2:	e000      	b.n	8005df6 <prvUnlockQueue+0x46>
					break;
 8005df4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005dfe:	f001 fda9 	bl	8007954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e02:	f001 fd77 	bl	80078f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e0e:	e011      	b.n	8005e34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d012      	beq.n	8005e3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3310      	adds	r3, #16
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fd3d 	bl	800689c <xTaskRemoveFromEventList>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e28:	f000 fe14 	bl	8006a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	dce9      	bgt.n	8005e10 <prvUnlockQueue+0x60>
 8005e3c:	e000      	b.n	8005e40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	22ff      	movs	r2, #255	; 0xff
 8005e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e48:	f001 fd84 	bl	8007954 <vPortExitCritical>
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e5c:	f001 fd4a 	bl	80078f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	e001      	b.n	8005e72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e72:	f001 fd6f 	bl	8007954 <vPortExitCritical>

	return xReturn;
 8005e76:	68fb      	ldr	r3, [r7, #12]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e88:	f001 fd34 	bl	80078f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d102      	bne.n	8005e9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e001      	b.n	8005ea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ea2:	f001 fd57 	bl	8007954 <vPortExitCritical>

	return xReturn;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e014      	b.n	8005eea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ec0:	4a0f      	ldr	r2, [pc, #60]	; (8005f00 <vQueueAddToRegistry+0x50>)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10b      	bne.n	8005ee4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ecc:	490c      	ldr	r1, [pc, #48]	; (8005f00 <vQueueAddToRegistry+0x50>)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ed6:	4a0a      	ldr	r2, [pc, #40]	; (8005f00 <vQueueAddToRegistry+0x50>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4413      	add	r3, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ee2:	e006      	b.n	8005ef2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b07      	cmp	r3, #7
 8005eee:	d9e7      	bls.n	8005ec0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ef0:	bf00      	nop
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000910 	.word	0x20000910

08005f04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f14:	f001 fcee 	bl	80078f4 <vPortEnterCritical>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f1e:	b25b      	sxtb	r3, r3
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d103      	bne.n	8005f2e <vQueueWaitForMessageRestricted+0x2a>
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f34:	b25b      	sxtb	r3, r3
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d103      	bne.n	8005f44 <vQueueWaitForMessageRestricted+0x40>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f44:	f001 fd06 	bl	8007954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	3324      	adds	r3, #36	; 0x24
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fc73 	bl	8006844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f5e:	6978      	ldr	r0, [r7, #20]
 8005f60:	f7ff ff26 	bl	8005db0 <prvUnlockQueue>
	}
 8005f64:	bf00      	nop
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08e      	sub	sp, #56	; 0x38
 8005f70:	af04      	add	r7, sp, #16
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	623b      	str	r3, [r7, #32]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	61fb      	str	r3, [r7, #28]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fb2:	23a8      	movs	r3, #168	; 0xa8
 8005fb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2ba8      	cmp	r3, #168	; 0xa8
 8005fba:	d00a      	beq.n	8005fd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	61bb      	str	r3, [r7, #24]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01e      	beq.n	8006018 <xTaskCreateStatic+0xac>
 8005fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	2202      	movs	r2, #2
 8005fee:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9303      	str	r3, [sp, #12]
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	9302      	str	r3, [sp, #8]
 8005ffa:	f107 0314 	add.w	r3, r7, #20
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f850 	bl	80060b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006012:	f000 f8f3 	bl	80061fc <prvAddNewTaskToReadyList>
 8006016:	e001      	b.n	800601c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800601c:	697b      	ldr	r3, [r7, #20]
	}
 800601e:	4618      	mov	r0, r3
 8006020:	3728      	adds	r7, #40	; 0x28
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006026:	b580      	push	{r7, lr}
 8006028:	b08c      	sub	sp, #48	; 0x30
 800602a:	af04      	add	r7, sp, #16
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4618      	mov	r0, r3
 800603c:	f001 fd7c 	bl	8007b38 <pvPortMalloc>
 8006040:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006048:	20a8      	movs	r0, #168	; 0xa8
 800604a:	f001 fd75 	bl	8007b38 <pvPortMalloc>
 800604e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
 800605c:	e005      	b.n	800606a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	f001 fe36 	bl	8007cd0 <vPortFree>
 8006064:	e001      	b.n	800606a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d017      	beq.n	80060a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006078:	88fa      	ldrh	r2, [r7, #6]
 800607a:	2300      	movs	r3, #0
 800607c:	9303      	str	r3, [sp, #12]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	9302      	str	r3, [sp, #8]
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f80e 	bl	80060b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006094:	69f8      	ldr	r0, [r7, #28]
 8006096:	f000 f8b1 	bl	80061fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800609a:	2301      	movs	r3, #1
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	e002      	b.n	80060a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060a0:	f04f 33ff 	mov.w	r3, #4294967295
 80060a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060a6:	69bb      	ldr	r3, [r7, #24]
	}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	461a      	mov	r2, r3
 80060c8:	21a5      	movs	r1, #165	; 0xa5
 80060ca:	f002 f836 	bl	800813a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060d8:	3b01      	subs	r3, #1
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f023 0307 	bic.w	r3, r3, #7
 80060e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <prvInitialiseNewTask+0x58>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	617b      	str	r3, [r7, #20]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01f      	beq.n	800614e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	e012      	b.n	800613a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	7819      	ldrb	r1, [r3, #0]
 800611c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	3334      	adds	r3, #52	; 0x34
 8006124:	460a      	mov	r2, r1
 8006126:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d006      	beq.n	8006142 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	3301      	adds	r3, #1
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	2b0f      	cmp	r3, #15
 800613e:	d9e9      	bls.n	8006114 <prvInitialiseNewTask+0x64>
 8006140:	e000      	b.n	8006144 <prvInitialiseNewTask+0x94>
			{
				break;
 8006142:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800614c:	e003      	b.n	8006156 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	2b37      	cmp	r3, #55	; 0x37
 800615a:	d901      	bls.n	8006160 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800615c:	2337      	movs	r3, #55	; 0x37
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006164:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800616a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	2200      	movs	r2, #0
 8006170:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	3304      	adds	r3, #4
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe ff64 	bl	8005044 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	3318      	adds	r3, #24
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe ff5f 	bl	8005044 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	3354      	adds	r3, #84	; 0x54
 80061b0:	224c      	movs	r2, #76	; 0x4c
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 ffc0 	bl	800813a <memset>
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	4a0c      	ldr	r2, [pc, #48]	; (80061f0 <prvInitialiseNewTask+0x140>)
 80061be:	659a      	str	r2, [r3, #88]	; 0x58
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <prvInitialiseNewTask+0x144>)
 80061c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	4a0b      	ldr	r2, [pc, #44]	; (80061f8 <prvInitialiseNewTask+0x148>)
 80061ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	69b8      	ldr	r0, [r7, #24]
 80061d2:	f001 fa61 	bl	8007698 <pxPortInitialiseStack>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e8:	bf00      	nop
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20004ba4 	.word	0x20004ba4
 80061f4:	20004c0c 	.word	0x20004c0c
 80061f8:	20004c74 	.word	0x20004c74

080061fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006204:	f001 fb76 	bl	80078f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006208:	4b2d      	ldr	r3, [pc, #180]	; (80062c0 <prvAddNewTaskToReadyList+0xc4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	4a2c      	ldr	r2, [pc, #176]	; (80062c0 <prvAddNewTaskToReadyList+0xc4>)
 8006210:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006212:	4b2c      	ldr	r3, [pc, #176]	; (80062c4 <prvAddNewTaskToReadyList+0xc8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800621a:	4a2a      	ldr	r2, [pc, #168]	; (80062c4 <prvAddNewTaskToReadyList+0xc8>)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <prvAddNewTaskToReadyList+0xc4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d110      	bne.n	800624a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006228:	f000 fc38 	bl	8006a9c <prvInitialiseTaskLists>
 800622c:	e00d      	b.n	800624a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800622e:	4b26      	ldr	r3, [pc, #152]	; (80062c8 <prvAddNewTaskToReadyList+0xcc>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006236:	4b23      	ldr	r3, [pc, #140]	; (80062c4 <prvAddNewTaskToReadyList+0xc8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	429a      	cmp	r2, r3
 8006242:	d802      	bhi.n	800624a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006244:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <prvAddNewTaskToReadyList+0xc8>)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800624a:	4b20      	ldr	r3, [pc, #128]	; (80062cc <prvAddNewTaskToReadyList+0xd0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3301      	adds	r3, #1
 8006250:	4a1e      	ldr	r2, [pc, #120]	; (80062cc <prvAddNewTaskToReadyList+0xd0>)
 8006252:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006254:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <prvAddNewTaskToReadyList+0xd0>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <prvAddNewTaskToReadyList+0xd4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d903      	bls.n	8006270 <prvAddNewTaskToReadyList+0x74>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <prvAddNewTaskToReadyList+0xd4>)
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <prvAddNewTaskToReadyList+0xd8>)
 800627e:	441a      	add	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f7fe fee9 	bl	800505e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800628c:	f001 fb62 	bl	8007954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006290:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <prvAddNewTaskToReadyList+0xcc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00e      	beq.n	80062b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <prvAddNewTaskToReadyList+0xc8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d207      	bcs.n	80062b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <prvAddNewTaskToReadyList+0xdc>)
 80062a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b6:	bf00      	nop
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000e24 	.word	0x20000e24
 80062c4:	20000950 	.word	0x20000950
 80062c8:	20000e30 	.word	0x20000e30
 80062cc:	20000e40 	.word	0x20000e40
 80062d0:	20000e2c 	.word	0x20000e2c
 80062d4:	20000954 	.word	0x20000954
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d017      	beq.n	800631e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <vTaskDelay+0x60>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <vTaskDelay+0x30>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	60bb      	str	r3, [r7, #8]
}
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800630c:	f000 f88a 	bl	8006424 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006310:	2100      	movs	r1, #0
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fe1e 	bl	8006f54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006318:	f000 f892 	bl	8006440 <xTaskResumeAll>
 800631c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d107      	bne.n	8006334 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006324:	4b06      	ldr	r3, [pc, #24]	; (8006340 <vTaskDelay+0x64>)
 8006326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000e4c 	.word	0x20000e4c
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	; 0x28
 8006348:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006352:	463a      	mov	r2, r7
 8006354:	1d39      	adds	r1, r7, #4
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fe1e 	bl	8004f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	9202      	str	r2, [sp, #8]
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	2300      	movs	r3, #0
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	2300      	movs	r3, #0
 8006370:	460a      	mov	r2, r1
 8006372:	4924      	ldr	r1, [pc, #144]	; (8006404 <vTaskStartScheduler+0xc0>)
 8006374:	4824      	ldr	r0, [pc, #144]	; (8006408 <vTaskStartScheduler+0xc4>)
 8006376:	f7ff fdf9 	bl	8005f6c <xTaskCreateStatic>
 800637a:	4603      	mov	r3, r0
 800637c:	4a23      	ldr	r2, [pc, #140]	; (800640c <vTaskStartScheduler+0xc8>)
 800637e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006380:	4b22      	ldr	r3, [pc, #136]	; (800640c <vTaskStartScheduler+0xc8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006388:	2301      	movs	r3, #1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e001      	b.n	8006392 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d102      	bne.n	800639e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006398:	f000 fe30 	bl	8006ffc <xTimerCreateTimerTask>
 800639c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d11b      	bne.n	80063dc <vTaskStartScheduler+0x98>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	613b      	str	r3, [r7, #16]
}
 80063b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063b8:	4b15      	ldr	r3, [pc, #84]	; (8006410 <vTaskStartScheduler+0xcc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3354      	adds	r3, #84	; 0x54
 80063be:	4a15      	ldr	r2, [pc, #84]	; (8006414 <vTaskStartScheduler+0xd0>)
 80063c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <vTaskStartScheduler+0xd4>)
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <vTaskStartScheduler+0xd8>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063d0:	4b13      	ldr	r3, [pc, #76]	; (8006420 <vTaskStartScheduler+0xdc>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063d6:	f001 f9eb 	bl	80077b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063da:	e00e      	b.n	80063fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d10a      	bne.n	80063fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60fb      	str	r3, [r7, #12]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <vTaskStartScheduler+0xb4>
}
 80063fa:	bf00      	nop
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	08008eec 	.word	0x08008eec
 8006408:	08006a6d 	.word	0x08006a6d
 800640c:	20000e48 	.word	0x20000e48
 8006410:	20000950 	.word	0x20000950
 8006414:	20000068 	.word	0x20000068
 8006418:	20000e44 	.word	0x20000e44
 800641c:	20000e30 	.word	0x20000e30
 8006420:	20000e28 	.word	0x20000e28

08006424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006428:	4b04      	ldr	r3, [pc, #16]	; (800643c <vTaskSuspendAll+0x18>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	4a03      	ldr	r2, [pc, #12]	; (800643c <vTaskSuspendAll+0x18>)
 8006430:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006432:	bf00      	nop
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	20000e4c 	.word	0x20000e4c

08006440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800644e:	4b42      	ldr	r3, [pc, #264]	; (8006558 <xTaskResumeAll+0x118>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <xTaskResumeAll+0x2c>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	603b      	str	r3, [r7, #0]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800646c:	f001 fa42 	bl	80078f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006470:	4b39      	ldr	r3, [pc, #228]	; (8006558 <xTaskResumeAll+0x118>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3b01      	subs	r3, #1
 8006476:	4a38      	ldr	r2, [pc, #224]	; (8006558 <xTaskResumeAll+0x118>)
 8006478:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800647a:	4b37      	ldr	r3, [pc, #220]	; (8006558 <xTaskResumeAll+0x118>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d162      	bne.n	8006548 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006482:	4b36      	ldr	r3, [pc, #216]	; (800655c <xTaskResumeAll+0x11c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d05e      	beq.n	8006548 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800648a:	e02f      	b.n	80064ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800648c:	4b34      	ldr	r3, [pc, #208]	; (8006560 <xTaskResumeAll+0x120>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3318      	adds	r3, #24
 8006498:	4618      	mov	r0, r3
 800649a:	f7fe fe3d 	bl	8005118 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fe38 	bl	8005118 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	4b2d      	ldr	r3, [pc, #180]	; (8006564 <xTaskResumeAll+0x124>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d903      	bls.n	80064bc <xTaskResumeAll+0x7c>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4a2a      	ldr	r2, [pc, #168]	; (8006564 <xTaskResumeAll+0x124>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4a27      	ldr	r2, [pc, #156]	; (8006568 <xTaskResumeAll+0x128>)
 80064ca:	441a      	add	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f7fe fdc3 	bl	800505e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064dc:	4b23      	ldr	r3, [pc, #140]	; (800656c <xTaskResumeAll+0x12c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d302      	bcc.n	80064ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064e6:	4b22      	ldr	r3, [pc, #136]	; (8006570 <xTaskResumeAll+0x130>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ec:	4b1c      	ldr	r3, [pc, #112]	; (8006560 <xTaskResumeAll+0x120>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1cb      	bne.n	800648c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064fa:	f000 fb71 	bl	8006be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064fe:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <xTaskResumeAll+0x134>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d010      	beq.n	800652c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800650a:	f000 f859 	bl	80065c0 <xTaskIncrementTick>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006514:	4b16      	ldr	r3, [pc, #88]	; (8006570 <xTaskResumeAll+0x130>)
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3b01      	subs	r3, #1
 800651e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f1      	bne.n	800650a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006526:	4b13      	ldr	r3, [pc, #76]	; (8006574 <xTaskResumeAll+0x134>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <xTaskResumeAll+0x130>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d009      	beq.n	8006548 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006534:	2301      	movs	r3, #1
 8006536:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006538:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <xTaskResumeAll+0x138>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006548:	f001 fa04 	bl	8007954 <vPortExitCritical>

	return xAlreadyYielded;
 800654c:	68bb      	ldr	r3, [r7, #8]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000e4c 	.word	0x20000e4c
 800655c:	20000e24 	.word	0x20000e24
 8006560:	20000de4 	.word	0x20000de4
 8006564:	20000e2c 	.word	0x20000e2c
 8006568:	20000954 	.word	0x20000954
 800656c:	20000950 	.word	0x20000950
 8006570:	20000e38 	.word	0x20000e38
 8006574:	20000e34 	.word	0x20000e34
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <xTaskGetTickCount+0x1c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006588:	687b      	ldr	r3, [r7, #4]
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20000e28 	.word	0x20000e28

0800659c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065a2:	f001 fa89 	bl	8007ab8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80065a6:	2300      	movs	r3, #0
 80065a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80065aa:	4b04      	ldr	r3, [pc, #16]	; (80065bc <xTaskGetTickCountFromISR+0x20>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065b0:	683b      	ldr	r3, [r7, #0]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000e28 	.word	0x20000e28

080065c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ca:	4b4f      	ldr	r3, [pc, #316]	; (8006708 <xTaskIncrementTick+0x148>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 808f 	bne.w	80066f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065d4:	4b4d      	ldr	r3, [pc, #308]	; (800670c <xTaskIncrementTick+0x14c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3301      	adds	r3, #1
 80065da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065dc:	4a4b      	ldr	r2, [pc, #300]	; (800670c <xTaskIncrementTick+0x14c>)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d120      	bne.n	800662a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80065e8:	4b49      	ldr	r3, [pc, #292]	; (8006710 <xTaskIncrementTick+0x150>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <xTaskIncrementTick+0x48>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	603b      	str	r3, [r7, #0]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <xTaskIncrementTick+0x46>
 8006608:	4b41      	ldr	r3, [pc, #260]	; (8006710 <xTaskIncrementTick+0x150>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	4b41      	ldr	r3, [pc, #260]	; (8006714 <xTaskIncrementTick+0x154>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a3f      	ldr	r2, [pc, #252]	; (8006710 <xTaskIncrementTick+0x150>)
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4a3f      	ldr	r2, [pc, #252]	; (8006714 <xTaskIncrementTick+0x154>)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4b3e      	ldr	r3, [pc, #248]	; (8006718 <xTaskIncrementTick+0x158>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	4a3d      	ldr	r2, [pc, #244]	; (8006718 <xTaskIncrementTick+0x158>)
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	f000 fadb 	bl	8006be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800662a:	4b3c      	ldr	r3, [pc, #240]	; (800671c <xTaskIncrementTick+0x15c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	429a      	cmp	r2, r3
 8006632:	d349      	bcc.n	80066c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006634:	4b36      	ldr	r3, [pc, #216]	; (8006710 <xTaskIncrementTick+0x150>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663e:	4b37      	ldr	r3, [pc, #220]	; (800671c <xTaskIncrementTick+0x15c>)
 8006640:	f04f 32ff 	mov.w	r2, #4294967295
 8006644:	601a      	str	r2, [r3, #0]
					break;
 8006646:	e03f      	b.n	80066c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006648:	4b31      	ldr	r3, [pc, #196]	; (8006710 <xTaskIncrementTick+0x150>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d203      	bcs.n	8006668 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006660:	4a2e      	ldr	r2, [pc, #184]	; (800671c <xTaskIncrementTick+0x15c>)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006666:	e02f      	b.n	80066c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	3304      	adds	r3, #4
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe fd53 	bl	8005118 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d004      	beq.n	8006684 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	3318      	adds	r3, #24
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fd4a 	bl	8005118 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <xTaskIncrementTick+0x160>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d903      	bls.n	8006698 <xTaskIncrementTick+0xd8>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	4a22      	ldr	r2, [pc, #136]	; (8006720 <xTaskIncrementTick+0x160>)
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <xTaskIncrementTick+0x164>)
 80066a6:	441a      	add	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4619      	mov	r1, r3
 80066ae:	4610      	mov	r0, r2
 80066b0:	f7fe fcd5 	bl	800505e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <xTaskIncrementTick+0x168>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	429a      	cmp	r2, r3
 80066c0:	d3b8      	bcc.n	8006634 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066c2:	2301      	movs	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066c6:	e7b5      	b.n	8006634 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066c8:	4b17      	ldr	r3, [pc, #92]	; (8006728 <xTaskIncrementTick+0x168>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ce:	4915      	ldr	r1, [pc, #84]	; (8006724 <xTaskIncrementTick+0x164>)
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d901      	bls.n	80066e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066e4:	4b11      	ldr	r3, [pc, #68]	; (800672c <xTaskIncrementTick+0x16c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80066ec:	2301      	movs	r3, #1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e004      	b.n	80066fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <xTaskIncrementTick+0x170>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3301      	adds	r3, #1
 80066f8:	4a0d      	ldr	r2, [pc, #52]	; (8006730 <xTaskIncrementTick+0x170>)
 80066fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066fc:	697b      	ldr	r3, [r7, #20]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000e4c 	.word	0x20000e4c
 800670c:	20000e28 	.word	0x20000e28
 8006710:	20000ddc 	.word	0x20000ddc
 8006714:	20000de0 	.word	0x20000de0
 8006718:	20000e3c 	.word	0x20000e3c
 800671c:	20000e44 	.word	0x20000e44
 8006720:	20000e2c 	.word	0x20000e2c
 8006724:	20000954 	.word	0x20000954
 8006728:	20000950 	.word	0x20000950
 800672c:	20000e38 	.word	0x20000e38
 8006730:	20000e34 	.word	0x20000e34

08006734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800673a:	4b2a      	ldr	r3, [pc, #168]	; (80067e4 <vTaskSwitchContext+0xb0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006742:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <vTaskSwitchContext+0xb4>)
 8006744:	2201      	movs	r2, #1
 8006746:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006748:	e046      	b.n	80067d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800674a:	4b27      	ldr	r3, [pc, #156]	; (80067e8 <vTaskSwitchContext+0xb4>)
 800674c:	2200      	movs	r2, #0
 800674e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006750:	4b26      	ldr	r3, [pc, #152]	; (80067ec <vTaskSwitchContext+0xb8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	e010      	b.n	800677a <vTaskSwitchContext+0x46>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <vTaskSwitchContext+0x40>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	607b      	str	r3, [r7, #4]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <vTaskSwitchContext+0x3e>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3b01      	subs	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	491d      	ldr	r1, [pc, #116]	; (80067f0 <vTaskSwitchContext+0xbc>)
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	440b      	add	r3, r1
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0e4      	beq.n	8006758 <vTaskSwitchContext+0x24>
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <vTaskSwitchContext+0xbc>)
 800679a:	4413      	add	r3, r2
 800679c:	60bb      	str	r3, [r7, #8]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	605a      	str	r2, [r3, #4]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	3308      	adds	r3, #8
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d104      	bne.n	80067be <vTaskSwitchContext+0x8a>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4a0b      	ldr	r2, [pc, #44]	; (80067f4 <vTaskSwitchContext+0xc0>)
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	4a08      	ldr	r2, [pc, #32]	; (80067ec <vTaskSwitchContext+0xb8>)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067ce:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <vTaskSwitchContext+0xc0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3354      	adds	r3, #84	; 0x54
 80067d4:	4a08      	ldr	r2, [pc, #32]	; (80067f8 <vTaskSwitchContext+0xc4>)
 80067d6:	6013      	str	r3, [r2, #0]
}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	20000e4c 	.word	0x20000e4c
 80067e8:	20000e38 	.word	0x20000e38
 80067ec:	20000e2c 	.word	0x20000e2c
 80067f0:	20000954 	.word	0x20000954
 80067f4:	20000950 	.word	0x20000950
 80067f8:	20000068 	.word	0x20000068

080067fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	60fb      	str	r3, [r7, #12]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006822:	4b07      	ldr	r3, [pc, #28]	; (8006840 <vTaskPlaceOnEventList+0x44>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3318      	adds	r3, #24
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fe fc3b 	bl	80050a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006830:	2101      	movs	r1, #1
 8006832:	6838      	ldr	r0, [r7, #0]
 8006834:	f000 fb8e 	bl	8006f54 <prvAddCurrentTaskToDelayedList>
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000950 	.word	0x20000950

08006844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	617b      	str	r3, [r7, #20]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <vTaskPlaceOnEventListRestricted+0x54>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3318      	adds	r3, #24
 8006872:	4619      	mov	r1, r3
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7fe fbf2 	bl	800505e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006880:	f04f 33ff 	mov.w	r3, #4294967295
 8006884:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	68b8      	ldr	r0, [r7, #8]
 800688a:	f000 fb63 	bl	8006f54 <prvAddCurrentTaskToDelayedList>
	}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000950 	.word	0x20000950

0800689c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60fb      	str	r3, [r7, #12]
}
 80068c4:	bf00      	nop
 80068c6:	e7fe      	b.n	80068c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3318      	adds	r3, #24
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe fc23 	bl	8005118 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d2:	4b1e      	ldr	r3, [pc, #120]	; (800694c <xTaskRemoveFromEventList+0xb0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d11d      	bne.n	8006916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3304      	adds	r3, #4
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fc1a 	bl	8005118 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e8:	4b19      	ldr	r3, [pc, #100]	; (8006950 <xTaskRemoveFromEventList+0xb4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d903      	bls.n	80068f8 <xTaskRemoveFromEventList+0x5c>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4a16      	ldr	r2, [pc, #88]	; (8006950 <xTaskRemoveFromEventList+0xb4>)
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4a13      	ldr	r2, [pc, #76]	; (8006954 <xTaskRemoveFromEventList+0xb8>)
 8006906:	441a      	add	r2, r3
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3304      	adds	r3, #4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f7fe fba5 	bl	800505e <vListInsertEnd>
 8006914:	e005      	b.n	8006922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3318      	adds	r3, #24
 800691a:	4619      	mov	r1, r3
 800691c:	480e      	ldr	r0, [pc, #56]	; (8006958 <xTaskRemoveFromEventList+0xbc>)
 800691e:	f7fe fb9e 	bl	800505e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <xTaskRemoveFromEventList+0xc0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	429a      	cmp	r2, r3
 800692e:	d905      	bls.n	800693c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <xTaskRemoveFromEventList+0xc4>)
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e001      	b.n	8006940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006940:	697b      	ldr	r3, [r7, #20]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000e4c 	.word	0x20000e4c
 8006950:	20000e2c 	.word	0x20000e2c
 8006954:	20000954 	.word	0x20000954
 8006958:	20000de4 	.word	0x20000de4
 800695c:	20000950 	.word	0x20000950
 8006960:	20000e38 	.word	0x20000e38

08006964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <vTaskInternalSetTimeOutState+0x24>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <vTaskInternalSetTimeOutState+0x28>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20000e3c 	.word	0x20000e3c
 800698c:	20000e28 	.word	0x20000e28

08006990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	613b      	str	r3, [r7, #16]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	60fb      	str	r3, [r7, #12]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069d2:	f000 ff8f 	bl	80078f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069d6:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <xTaskCheckForTimeOut+0xbc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ee:	d102      	bne.n	80069f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	e023      	b.n	8006a3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	4b15      	ldr	r3, [pc, #84]	; (8006a50 <xTaskCheckForTimeOut+0xc0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d007      	beq.n	8006a12 <xTaskCheckForTimeOut+0x82>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d302      	bcc.n	8006a12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	61fb      	str	r3, [r7, #28]
 8006a10:	e015      	b.n	8006a3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d20b      	bcs.n	8006a34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ff9b 	bl	8006964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61fb      	str	r3, [r7, #28]
 8006a32:	e004      	b.n	8006a3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a3e:	f000 ff89 	bl	8007954 <vPortExitCritical>

	return xReturn;
 8006a42:	69fb      	ldr	r3, [r7, #28]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20000e28 	.word	0x20000e28
 8006a50:	20000e3c 	.word	0x20000e3c

08006a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a58:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <vTaskMissedYield+0x14>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	20000e38 	.word	0x20000e38

08006a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a74:	f000 f852 	bl	8006b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a78:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <prvIdleTask+0x28>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d9f9      	bls.n	8006a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <prvIdleTask+0x2c>)
 8006a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a90:	e7f0      	b.n	8006a74 <prvIdleTask+0x8>
 8006a92:	bf00      	nop
 8006a94:	20000954 	.word	0x20000954
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	607b      	str	r3, [r7, #4]
 8006aa6:	e00c      	b.n	8006ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4a12      	ldr	r2, [pc, #72]	; (8006afc <prvInitialiseTaskLists+0x60>)
 8006ab4:	4413      	add	r3, r2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe faa4 	bl	8005004 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	607b      	str	r3, [r7, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b37      	cmp	r3, #55	; 0x37
 8006ac6:	d9ef      	bls.n	8006aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ac8:	480d      	ldr	r0, [pc, #52]	; (8006b00 <prvInitialiseTaskLists+0x64>)
 8006aca:	f7fe fa9b 	bl	8005004 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ace:	480d      	ldr	r0, [pc, #52]	; (8006b04 <prvInitialiseTaskLists+0x68>)
 8006ad0:	f7fe fa98 	bl	8005004 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ad4:	480c      	ldr	r0, [pc, #48]	; (8006b08 <prvInitialiseTaskLists+0x6c>)
 8006ad6:	f7fe fa95 	bl	8005004 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ada:	480c      	ldr	r0, [pc, #48]	; (8006b0c <prvInitialiseTaskLists+0x70>)
 8006adc:	f7fe fa92 	bl	8005004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ae0:	480b      	ldr	r0, [pc, #44]	; (8006b10 <prvInitialiseTaskLists+0x74>)
 8006ae2:	f7fe fa8f 	bl	8005004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <prvInitialiseTaskLists+0x78>)
 8006ae8:	4a05      	ldr	r2, [pc, #20]	; (8006b00 <prvInitialiseTaskLists+0x64>)
 8006aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <prvInitialiseTaskLists+0x7c>)
 8006aee:	4a05      	ldr	r2, [pc, #20]	; (8006b04 <prvInitialiseTaskLists+0x68>)
 8006af0:	601a      	str	r2, [r3, #0]
}
 8006af2:	bf00      	nop
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000954 	.word	0x20000954
 8006b00:	20000db4 	.word	0x20000db4
 8006b04:	20000dc8 	.word	0x20000dc8
 8006b08:	20000de4 	.word	0x20000de4
 8006b0c:	20000df8 	.word	0x20000df8
 8006b10:	20000e10 	.word	0x20000e10
 8006b14:	20000ddc 	.word	0x20000ddc
 8006b18:	20000de0 	.word	0x20000de0

08006b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b22:	e019      	b.n	8006b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b24:	f000 fee6 	bl	80078f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b28:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <prvCheckTasksWaitingTermination+0x50>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fe faef 	bl	8005118 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <prvCheckTasksWaitingTermination+0x54>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	4a0b      	ldr	r2, [pc, #44]	; (8006b70 <prvCheckTasksWaitingTermination+0x54>)
 8006b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b44:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <prvCheckTasksWaitingTermination+0x58>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	4a0a      	ldr	r2, [pc, #40]	; (8006b74 <prvCheckTasksWaitingTermination+0x58>)
 8006b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b4e:	f000 ff01 	bl	8007954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f810 	bl	8006b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b58:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <prvCheckTasksWaitingTermination+0x58>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e1      	bne.n	8006b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000df8 	.word	0x20000df8
 8006b70:	20000e24 	.word	0x20000e24
 8006b74:	20000e0c 	.word	0x20000e0c

08006b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3354      	adds	r3, #84	; 0x54
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 faf1 	bl	800816c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d108      	bne.n	8006ba6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f001 f899 	bl	8007cd0 <vPortFree>
				vPortFree( pxTCB );
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 f896 	bl	8007cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ba4:	e018      	b.n	8006bd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d103      	bne.n	8006bb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 f88d 	bl	8007cd0 <vPortFree>
	}
 8006bb6:	e00f      	b.n	8006bd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d00a      	beq.n	8006bd8 <prvDeleteTCB+0x60>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	60fb      	str	r3, [r7, #12]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <prvDeleteTCB+0x5e>
	}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006be6:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <prvResetNextTaskUnblockTime+0x38>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <prvResetNextTaskUnblockTime+0x3c>)
 8006bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bf8:	e008      	b.n	8006c0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bfa:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <prvResetNextTaskUnblockTime+0x38>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <prvResetNextTaskUnblockTime+0x3c>)
 8006c0a:	6013      	str	r3, [r2, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	20000ddc 	.word	0x20000ddc
 8006c1c:	20000e44 	.word	0x20000e44

08006c20 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <xTaskGetCurrentTaskHandle+0x1c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006c2c:	687b      	ldr	r3, [r7, #4]
	}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20000950 	.word	0x20000950

08006c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <xTaskGetSchedulerState+0x34>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	607b      	str	r3, [r7, #4]
 8006c52:	e008      	b.n	8006c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c54:	4b08      	ldr	r3, [pc, #32]	; (8006c78 <xTaskGetSchedulerState+0x38>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	607b      	str	r3, [r7, #4]
 8006c60:	e001      	b.n	8006c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c62:	2300      	movs	r3, #0
 8006c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c66:	687b      	ldr	r3, [r7, #4]
	}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	20000e30 	.word	0x20000e30
 8006c78:	20000e4c 	.word	0x20000e4c

08006c7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d051      	beq.n	8006d36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	4b2a      	ldr	r3, [pc, #168]	; (8006d40 <xTaskPriorityInherit+0xc4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d241      	bcs.n	8006d24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	db06      	blt.n	8006cb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca8:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <xTaskPriorityInherit+0xc4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6959      	ldr	r1, [r3, #20]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4a1f      	ldr	r2, [pc, #124]	; (8006d44 <xTaskPriorityInherit+0xc8>)
 8006cc8:	4413      	add	r3, r2
 8006cca:	4299      	cmp	r1, r3
 8006ccc:	d122      	bne.n	8006d14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe fa20 	bl	8005118 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cd8:	4b19      	ldr	r3, [pc, #100]	; (8006d40 <xTaskPriorityInherit+0xc4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce6:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <xTaskPriorityInherit+0xcc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d903      	bls.n	8006cf6 <xTaskPriorityInherit+0x7a>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	4a15      	ldr	r2, [pc, #84]	; (8006d48 <xTaskPriorityInherit+0xcc>)
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4a10      	ldr	r2, [pc, #64]	; (8006d44 <xTaskPriorityInherit+0xc8>)
 8006d04:	441a      	add	r2, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	f7fe f9a6 	bl	800505e <vListInsertEnd>
 8006d12:	e004      	b.n	8006d1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d14:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <xTaskPriorityInherit+0xc4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	e008      	b.n	8006d36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <xTaskPriorityInherit+0xc4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d201      	bcs.n	8006d36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d32:	2301      	movs	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d36:	68fb      	ldr	r3, [r7, #12]
	}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000950 	.word	0x20000950
 8006d44:	20000954 	.word	0x20000954
 8006d48:	20000e2c 	.word	0x20000e2c

08006d4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d056      	beq.n	8006e10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d62:	4b2e      	ldr	r3, [pc, #184]	; (8006e1c <xTaskPriorityDisinherit+0xd0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d00a      	beq.n	8006d82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	60fb      	str	r3, [r7, #12]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	60bb      	str	r3, [r7, #8]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da4:	1e5a      	subs	r2, r3, #1
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d02c      	beq.n	8006e10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d128      	bne.n	8006e10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe f9a8 	bl	8005118 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <xTaskPriorityDisinherit+0xd4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d903      	bls.n	8006df0 <xTaskPriorityDisinherit+0xa4>
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	4a0c      	ldr	r2, [pc, #48]	; (8006e20 <xTaskPriorityDisinherit+0xd4>)
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4a09      	ldr	r2, [pc, #36]	; (8006e24 <xTaskPriorityDisinherit+0xd8>)
 8006dfe:	441a      	add	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f7fe f929 	bl	800505e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e10:	697b      	ldr	r3, [r7, #20]
	}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000950 	.word	0x20000950
 8006e20:	20000e2c 	.word	0x20000e2c
 8006e24:	20000954 	.word	0x20000954

08006e28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e36:	2301      	movs	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d06a      	beq.n	8006f16 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60fb      	str	r3, [r7, #12]
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d902      	bls.n	8006e6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	e002      	b.n	8006e74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d04b      	beq.n	8006f16 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d146      	bne.n	8006f16 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e88:	4b25      	ldr	r3, [pc, #148]	; (8006f20 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d10a      	bne.n	8006ea8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60bb      	str	r3, [r7, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	db04      	blt.n	8006ec6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	6959      	ldr	r1, [r3, #20]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006ed6:	4413      	add	r3, r2
 8006ed8:	4299      	cmp	r1, r3
 8006eda:	d11c      	bne.n	8006f16 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe f919 	bl	8005118 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eea:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d903      	bls.n	8006efa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4a07      	ldr	r2, [pc, #28]	; (8006f24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f08:	441a      	add	r2, r3
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f7fe f8a4 	bl	800505e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f16:	bf00      	nop
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000950 	.word	0x20000950
 8006f24:	20000954 	.word	0x20000954
 8006f28:	20000e2c 	.word	0x20000e2c

08006f2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f3e:	3201      	adds	r2, #1
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006f42:	4b03      	ldr	r3, [pc, #12]	; (8006f50 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f44:	681b      	ldr	r3, [r3, #0]
	}
 8006f46:	4618      	mov	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	20000950 	.word	0x20000950

08006f54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f5e:	4b21      	ldr	r3, [pc, #132]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f64:	4b20      	ldr	r3, [pc, #128]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe f8d4 	bl	8005118 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f76:	d10a      	bne.n	8006f8e <prvAddCurrentTaskToDelayedList+0x3a>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7e:	4b1a      	ldr	r3, [pc, #104]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4819      	ldr	r0, [pc, #100]	; (8006fec <prvAddCurrentTaskToDelayedList+0x98>)
 8006f88:	f7fe f869 	bl	800505e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f8c:	e026      	b.n	8006fdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d209      	bcs.n	8006fba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa6:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f7fe f877 	bl	80050a6 <vListInsert>
}
 8006fb8:	e010      	b.n	8006fdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fba:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f7fe f86d 	bl	80050a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d202      	bcs.n	8006fdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fd6:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6013      	str	r3, [r2, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000e28 	.word	0x20000e28
 8006fe8:	20000950 	.word	0x20000950
 8006fec:	20000e10 	.word	0x20000e10
 8006ff0:	20000de0 	.word	0x20000de0
 8006ff4:	20000ddc 	.word	0x20000ddc
 8006ff8:	20000e44 	.word	0x20000e44

08006ffc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	; 0x28
 8007000:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007006:	f000 fb07 	bl	8007618 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800700a:	4b1c      	ldr	r3, [pc, #112]	; (800707c <xTimerCreateTimerTask+0x80>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d021      	beq.n	8007056 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800701a:	1d3a      	adds	r2, r7, #4
 800701c:	f107 0108 	add.w	r1, r7, #8
 8007020:	f107 030c 	add.w	r3, r7, #12
 8007024:	4618      	mov	r0, r3
 8007026:	f7fd ffd3 	bl	8004fd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	9202      	str	r2, [sp, #8]
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	2302      	movs	r3, #2
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	2300      	movs	r3, #0
 800703a:	460a      	mov	r2, r1
 800703c:	4910      	ldr	r1, [pc, #64]	; (8007080 <xTimerCreateTimerTask+0x84>)
 800703e:	4811      	ldr	r0, [pc, #68]	; (8007084 <xTimerCreateTimerTask+0x88>)
 8007040:	f7fe ff94 	bl	8005f6c <xTaskCreateStatic>
 8007044:	4603      	mov	r3, r0
 8007046:	4a10      	ldr	r2, [pc, #64]	; (8007088 <xTimerCreateTimerTask+0x8c>)
 8007048:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <xTimerCreateTimerTask+0x8c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007052:	2301      	movs	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	613b      	str	r3, [r7, #16]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007072:	697b      	ldr	r3, [r7, #20]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000e80 	.word	0x20000e80
 8007080:	08008ef4 	.word	0x08008ef4
 8007084:	080071c1 	.word	0x080071c1
 8007088:	20000e84 	.word	0x20000e84

0800708c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	623b      	str	r3, [r7, #32]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070ba:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <xTimerGenericCommand+0x98>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d02a      	beq.n	8007118 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b05      	cmp	r3, #5
 80070d2:	dc18      	bgt.n	8007106 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070d4:	f7ff fdb4 	bl	8006c40 <xTaskGetSchedulerState>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d109      	bne.n	80070f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070de:	4b11      	ldr	r3, [pc, #68]	; (8007124 <xTimerGenericCommand+0x98>)
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	f107 0110 	add.w	r1, r7, #16
 80070e6:	2300      	movs	r3, #0
 80070e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ea:	f7fe fa33 	bl	8005554 <xQueueGenericSend>
 80070ee:	6278      	str	r0, [r7, #36]	; 0x24
 80070f0:	e012      	b.n	8007118 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070f2:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <xTimerGenericCommand+0x98>)
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	f107 0110 	add.w	r1, r7, #16
 80070fa:	2300      	movs	r3, #0
 80070fc:	2200      	movs	r2, #0
 80070fe:	f7fe fa29 	bl	8005554 <xQueueGenericSend>
 8007102:	6278      	str	r0, [r7, #36]	; 0x24
 8007104:	e008      	b.n	8007118 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007106:	4b07      	ldr	r3, [pc, #28]	; (8007124 <xTimerGenericCommand+0x98>)
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	f107 0110 	add.w	r1, r7, #16
 800710e:	2300      	movs	r3, #0
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	f7fe fb1d 	bl	8005750 <xQueueGenericSendFromISR>
 8007116:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800711a:	4618      	mov	r0, r3
 800711c:	3728      	adds	r7, #40	; 0x28
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000e80 	.word	0x20000e80

08007128 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af02      	add	r7, sp, #8
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007132:	4b22      	ldr	r3, [pc, #136]	; (80071bc <prvProcessExpiredTimer+0x94>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	3304      	adds	r3, #4
 8007140:	4618      	mov	r0, r3
 8007142:	f7fd ffe9 	bl	8005118 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d022      	beq.n	800719a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	699a      	ldr	r2, [r3, #24]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	18d1      	adds	r1, r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	6978      	ldr	r0, [r7, #20]
 8007162:	f000 f8d1 	bl	8007308 <prvInsertTimerInActiveList>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01f      	beq.n	80071ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800716c:	2300      	movs	r3, #0
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	2300      	movs	r3, #0
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	2100      	movs	r1, #0
 8007176:	6978      	ldr	r0, [r7, #20]
 8007178:	f7ff ff88 	bl	800708c <xTimerGenericCommand>
 800717c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d113      	bne.n	80071ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	60fb      	str	r3, [r7, #12]
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	6978      	ldr	r0, [r7, #20]
 80071b2:	4798      	blx	r3
}
 80071b4:	bf00      	nop
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000e78 	.word	0x20000e78

080071c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071c8:	f107 0308 	add.w	r3, r7, #8
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 f857 	bl	8007280 <prvGetNextExpireTime>
 80071d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4619      	mov	r1, r3
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f803 	bl	80071e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071de:	f000 f8d5 	bl	800738c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071e2:	e7f1      	b.n	80071c8 <prvTimerTask+0x8>

080071e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071ee:	f7ff f919 	bl	8006424 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071f2:	f107 0308 	add.w	r3, r7, #8
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 f866 	bl	80072c8 <prvSampleTimeNow>
 80071fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d130      	bne.n	8007266 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <prvProcessTimerOrBlockTask+0x3c>
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	429a      	cmp	r2, r3
 8007210:	d806      	bhi.n	8007220 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007212:	f7ff f915 	bl	8006440 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff ff85 	bl	8007128 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800721e:	e024      	b.n	800726a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d008      	beq.n	8007238 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007226:	4b13      	ldr	r3, [pc, #76]	; (8007274 <prvProcessTimerOrBlockTask+0x90>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <prvProcessTimerOrBlockTask+0x50>
 8007230:	2301      	movs	r3, #1
 8007232:	e000      	b.n	8007236 <prvProcessTimerOrBlockTask+0x52>
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <prvProcessTimerOrBlockTask+0x94>)
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	4619      	mov	r1, r3
 8007246:	f7fe fe5d 	bl	8005f04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800724a:	f7ff f8f9 	bl	8006440 <xTaskResumeAll>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007254:	4b09      	ldr	r3, [pc, #36]	; (800727c <prvProcessTimerOrBlockTask+0x98>)
 8007256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	f3bf 8f6f 	isb	sy
}
 8007264:	e001      	b.n	800726a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007266:	f7ff f8eb 	bl	8006440 <xTaskResumeAll>
}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000e7c 	.word	0x20000e7c
 8007278:	20000e80 	.word	0x20000e80
 800727c:	e000ed04 	.word	0xe000ed04

08007280 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007288:	4b0e      	ldr	r3, [pc, #56]	; (80072c4 <prvGetNextExpireTime+0x44>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <prvGetNextExpireTime+0x16>
 8007292:	2201      	movs	r2, #1
 8007294:	e000      	b.n	8007298 <prvGetNextExpireTime+0x18>
 8007296:	2200      	movs	r2, #0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d105      	bne.n	80072b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072a4:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <prvGetNextExpireTime+0x44>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e001      	b.n	80072b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072b4:	68fb      	ldr	r3, [r7, #12]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20000e78 	.word	0x20000e78

080072c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072d0:	f7ff f954 	bl	800657c <xTaskGetTickCount>
 80072d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072d6:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <prvSampleTimeNow+0x3c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d205      	bcs.n	80072ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072e0:	f000 f936 	bl	8007550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	e002      	b.n	80072f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072f2:	4a04      	ldr	r2, [pc, #16]	; (8007304 <prvSampleTimeNow+0x3c>)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072f8:	68fb      	ldr	r3, [r7, #12]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000e88 	.word	0x20000e88

08007308 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	429a      	cmp	r2, r3
 800732c:	d812      	bhi.n	8007354 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	1ad2      	subs	r2, r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	429a      	cmp	r2, r3
 800733a:	d302      	bcc.n	8007342 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800733c:	2301      	movs	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	e01b      	b.n	800737a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007342:	4b10      	ldr	r3, [pc, #64]	; (8007384 <prvInsertTimerInActiveList+0x7c>)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3304      	adds	r3, #4
 800734a:	4619      	mov	r1, r3
 800734c:	4610      	mov	r0, r2
 800734e:	f7fd feaa 	bl	80050a6 <vListInsert>
 8007352:	e012      	b.n	800737a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d206      	bcs.n	800736a <prvInsertTimerInActiveList+0x62>
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d302      	bcc.n	800736a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e007      	b.n	800737a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800736a:	4b07      	ldr	r3, [pc, #28]	; (8007388 <prvInsertTimerInActiveList+0x80>)
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3304      	adds	r3, #4
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f7fd fe96 	bl	80050a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800737a:	697b      	ldr	r3, [r7, #20]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000e7c 	.word	0x20000e7c
 8007388:	20000e78 	.word	0x20000e78

0800738c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08e      	sub	sp, #56	; 0x38
 8007390:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007392:	e0ca      	b.n	800752a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	da18      	bge.n	80073cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800739a:	1d3b      	adds	r3, r7, #4
 800739c:	3304      	adds	r3, #4
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	61fb      	str	r3, [r7, #28]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c2:	6850      	ldr	r0, [r2, #4]
 80073c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c6:	6892      	ldr	r2, [r2, #8]
 80073c8:	4611      	mov	r1, r2
 80073ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f2c0 80ab 	blt.w	800752a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	3304      	adds	r3, #4
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fd fe97 	bl	8005118 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073ea:	463b      	mov	r3, r7
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff ff6b 	bl	80072c8 <prvSampleTimeNow>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b09      	cmp	r3, #9
 80073f8:	f200 8096 	bhi.w	8007528 <prvProcessReceivedCommands+0x19c>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <prvProcessReceivedCommands+0x78>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	0800742d 	.word	0x0800742d
 8007408:	0800742d 	.word	0x0800742d
 800740c:	0800742d 	.word	0x0800742d
 8007410:	080074a1 	.word	0x080074a1
 8007414:	080074b5 	.word	0x080074b5
 8007418:	080074ff 	.word	0x080074ff
 800741c:	0800742d 	.word	0x0800742d
 8007420:	0800742d 	.word	0x0800742d
 8007424:	080074a1 	.word	0x080074a1
 8007428:	080074b5 	.word	0x080074b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	b2da      	uxtb	r2, r3
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	18d1      	adds	r1, r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800744c:	f7ff ff5c 	bl	8007308 <prvInsertTimerInActiveList>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d069      	beq.n	800752a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d05e      	beq.n	800752a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	441a      	add	r2, r3
 8007474:	2300      	movs	r3, #0
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	2300      	movs	r3, #0
 800747a:	2100      	movs	r1, #0
 800747c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800747e:	f7ff fe05 	bl	800708c <xTimerGenericCommand>
 8007482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d14f      	bne.n	800752a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	61bb      	str	r3, [r7, #24]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a6:	f023 0301 	bic.w	r3, r3, #1
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80074b2:	e03a      	b.n	800752a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10a      	bne.n	80074ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	617b      	str	r3, [r7, #20]
}
 80074e6:	bf00      	nop
 80074e8:	e7fe      	b.n	80074e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	699a      	ldr	r2, [r3, #24]
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	18d1      	adds	r1, r2, r3
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f8:	f7ff ff06 	bl	8007308 <prvInsertTimerInActiveList>
					break;
 80074fc:	e015      	b.n	800752a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800750c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750e:	f000 fbdf 	bl	8007cd0 <vPortFree>
 8007512:	e00a      	b.n	800752a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	b2da      	uxtb	r2, r3
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007526:	e000      	b.n	800752a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007528:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800752a:	4b08      	ldr	r3, [pc, #32]	; (800754c <prvProcessReceivedCommands+0x1c0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	1d39      	adds	r1, r7, #4
 8007530:	2200      	movs	r2, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe f9a8 	bl	8005888 <xQueueReceive>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	f47f af2a 	bne.w	8007394 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	3730      	adds	r7, #48	; 0x30
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000e80 	.word	0x20000e80

08007550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007556:	e048      	b.n	80075ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007558:	4b2d      	ldr	r3, [pc, #180]	; (8007610 <prvSwitchTimerLists+0xc0>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007562:	4b2b      	ldr	r3, [pc, #172]	; (8007610 <prvSwitchTimerLists+0xc0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3304      	adds	r3, #4
 8007570:	4618      	mov	r0, r3
 8007572:	f7fd fdd1 	bl	8005118 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	2b00      	cmp	r3, #0
 800758a:	d02e      	beq.n	80075ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4413      	add	r3, r2
 8007594:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	429a      	cmp	r2, r3
 800759c:	d90e      	bls.n	80075bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075aa:	4b19      	ldr	r3, [pc, #100]	; (8007610 <prvSwitchTimerLists+0xc0>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7fd fd76 	bl	80050a6 <vListInsert>
 80075ba:	e016      	b.n	80075ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075bc:	2300      	movs	r3, #0
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	2300      	movs	r3, #0
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	2100      	movs	r1, #0
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7ff fd60 	bl	800708c <xTimerGenericCommand>
 80075cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	603b      	str	r3, [r7, #0]
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <prvSwitchTimerLists+0xc0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1b1      	bne.n	8007558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075f4:	4b06      	ldr	r3, [pc, #24]	; (8007610 <prvSwitchTimerLists+0xc0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075fa:	4b06      	ldr	r3, [pc, #24]	; (8007614 <prvSwitchTimerLists+0xc4>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a04      	ldr	r2, [pc, #16]	; (8007610 <prvSwitchTimerLists+0xc0>)
 8007600:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007602:	4a04      	ldr	r2, [pc, #16]	; (8007614 <prvSwitchTimerLists+0xc4>)
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	6013      	str	r3, [r2, #0]
}
 8007608:	bf00      	nop
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20000e78 	.word	0x20000e78
 8007614:	20000e7c 	.word	0x20000e7c

08007618 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800761e:	f000 f969 	bl	80078f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007622:	4b15      	ldr	r3, [pc, #84]	; (8007678 <prvCheckForValidListAndQueue+0x60>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d120      	bne.n	800766c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800762a:	4814      	ldr	r0, [pc, #80]	; (800767c <prvCheckForValidListAndQueue+0x64>)
 800762c:	f7fd fcea 	bl	8005004 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007630:	4813      	ldr	r0, [pc, #76]	; (8007680 <prvCheckForValidListAndQueue+0x68>)
 8007632:	f7fd fce7 	bl	8005004 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <prvCheckForValidListAndQueue+0x6c>)
 8007638:	4a10      	ldr	r2, [pc, #64]	; (800767c <prvCheckForValidListAndQueue+0x64>)
 800763a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800763c:	4b12      	ldr	r3, [pc, #72]	; (8007688 <prvCheckForValidListAndQueue+0x70>)
 800763e:	4a10      	ldr	r2, [pc, #64]	; (8007680 <prvCheckForValidListAndQueue+0x68>)
 8007640:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007642:	2300      	movs	r3, #0
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	4b11      	ldr	r3, [pc, #68]	; (800768c <prvCheckForValidListAndQueue+0x74>)
 8007648:	4a11      	ldr	r2, [pc, #68]	; (8007690 <prvCheckForValidListAndQueue+0x78>)
 800764a:	2110      	movs	r1, #16
 800764c:	200a      	movs	r0, #10
 800764e:	f7fd fdf5 	bl	800523c <xQueueGenericCreateStatic>
 8007652:	4603      	mov	r3, r0
 8007654:	4a08      	ldr	r2, [pc, #32]	; (8007678 <prvCheckForValidListAndQueue+0x60>)
 8007656:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007658:	4b07      	ldr	r3, [pc, #28]	; (8007678 <prvCheckForValidListAndQueue+0x60>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d005      	beq.n	800766c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <prvCheckForValidListAndQueue+0x60>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	490b      	ldr	r1, [pc, #44]	; (8007694 <prvCheckForValidListAndQueue+0x7c>)
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fc22 	bl	8005eb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800766c:	f000 f972 	bl	8007954 <vPortExitCritical>
}
 8007670:	bf00      	nop
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000e80 	.word	0x20000e80
 800767c:	20000e50 	.word	0x20000e50
 8007680:	20000e64 	.word	0x20000e64
 8007684:	20000e78 	.word	0x20000e78
 8007688:	20000e7c 	.word	0x20000e7c
 800768c:	20000f2c 	.word	0x20000f2c
 8007690:	20000e8c 	.word	0x20000e8c
 8007694:	08008efc 	.word	0x08008efc

08007698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3b04      	subs	r3, #4
 80076a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3b04      	subs	r3, #4
 80076b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f023 0201 	bic.w	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3b04      	subs	r3, #4
 80076c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076c8:	4a0c      	ldr	r2, [pc, #48]	; (80076fc <pxPortInitialiseStack+0x64>)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3b14      	subs	r3, #20
 80076d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3b04      	subs	r3, #4
 80076de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f06f 0202 	mvn.w	r2, #2
 80076e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3b20      	subs	r3, #32
 80076ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076ee:	68fb      	ldr	r3, [r7, #12]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	08007701 	.word	0x08007701

08007700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800770a:	4b12      	ldr	r3, [pc, #72]	; (8007754 <prvTaskExitError+0x54>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007712:	d00a      	beq.n	800772a <prvTaskExitError+0x2a>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60fb      	str	r3, [r7, #12]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <prvTaskExitError+0x28>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60bb      	str	r3, [r7, #8]
}
 800773c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800773e:	bf00      	nop
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0fc      	beq.n	8007740 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	2000000c 	.word	0x2000000c
	...

08007760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <pxCurrentTCBConst2>)
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	6808      	ldr	r0, [r1, #0]
 8007766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	f380 8809 	msr	PSP, r0
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8811 	msr	BASEPRI, r0
 800777a:	4770      	bx	lr
 800777c:	f3af 8000 	nop.w

08007780 <pxCurrentTCBConst2>:
 8007780:	20000950 	.word	0x20000950
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop

08007788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007788:	4808      	ldr	r0, [pc, #32]	; (80077ac <prvPortStartFirstTask+0x24>)
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	6800      	ldr	r0, [r0, #0]
 800778e:	f380 8808 	msr	MSP, r0
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8814 	msr	CONTROL, r0
 800779a:	b662      	cpsie	i
 800779c:	b661      	cpsie	f
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	df00      	svc	0
 80077a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077aa:	bf00      	nop
 80077ac:	e000ed08 	.word	0xe000ed08

080077b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077b6:	4b46      	ldr	r3, [pc, #280]	; (80078d0 <xPortStartScheduler+0x120>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a46      	ldr	r2, [pc, #280]	; (80078d4 <xPortStartScheduler+0x124>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10a      	bne.n	80077d6 <xPortStartScheduler+0x26>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	613b      	str	r3, [r7, #16]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077d6:	4b3e      	ldr	r3, [pc, #248]	; (80078d0 <xPortStartScheduler+0x120>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a3f      	ldr	r2, [pc, #252]	; (80078d8 <xPortStartScheduler+0x128>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10a      	bne.n	80077f6 <xPortStartScheduler+0x46>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	60fb      	str	r3, [r7, #12]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077f6:	4b39      	ldr	r3, [pc, #228]	; (80078dc <xPortStartScheduler+0x12c>)
 80077f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	22ff      	movs	r2, #255	; 0xff
 8007806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007818:	b2da      	uxtb	r2, r3
 800781a:	4b31      	ldr	r3, [pc, #196]	; (80078e0 <xPortStartScheduler+0x130>)
 800781c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800781e:	4b31      	ldr	r3, [pc, #196]	; (80078e4 <xPortStartScheduler+0x134>)
 8007820:	2207      	movs	r2, #7
 8007822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007824:	e009      	b.n	800783a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007826:	4b2f      	ldr	r3, [pc, #188]	; (80078e4 <xPortStartScheduler+0x134>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3b01      	subs	r3, #1
 800782c:	4a2d      	ldr	r2, [pc, #180]	; (80078e4 <xPortStartScheduler+0x134>)
 800782e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	b2db      	uxtb	r3, r3
 8007838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d0ef      	beq.n	8007826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007846:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <xPortStartScheduler+0x134>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f1c3 0307 	rsb	r3, r3, #7
 800784e:	2b04      	cmp	r3, #4
 8007850:	d00a      	beq.n	8007868 <xPortStartScheduler+0xb8>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	60bb      	str	r3, [r7, #8]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007868:	4b1e      	ldr	r3, [pc, #120]	; (80078e4 <xPortStartScheduler+0x134>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	4a1d      	ldr	r2, [pc, #116]	; (80078e4 <xPortStartScheduler+0x134>)
 8007870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007872:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <xPortStartScheduler+0x134>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800787a:	4a1a      	ldr	r2, [pc, #104]	; (80078e4 <xPortStartScheduler+0x134>)
 800787c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	b2da      	uxtb	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007886:	4b18      	ldr	r3, [pc, #96]	; (80078e8 <xPortStartScheduler+0x138>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a17      	ldr	r2, [pc, #92]	; (80078e8 <xPortStartScheduler+0x138>)
 800788c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007892:	4b15      	ldr	r3, [pc, #84]	; (80078e8 <xPortStartScheduler+0x138>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a14      	ldr	r2, [pc, #80]	; (80078e8 <xPortStartScheduler+0x138>)
 8007898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800789c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800789e:	f000 f8dd 	bl	8007a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078a2:	4b12      	ldr	r3, [pc, #72]	; (80078ec <xPortStartScheduler+0x13c>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078a8:	f000 f8fc 	bl	8007aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078ac:	4b10      	ldr	r3, [pc, #64]	; (80078f0 <xPortStartScheduler+0x140>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a0f      	ldr	r2, [pc, #60]	; (80078f0 <xPortStartScheduler+0x140>)
 80078b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078b8:	f7ff ff66 	bl	8007788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078bc:	f7fe ff3a 	bl	8006734 <vTaskSwitchContext>
	prvTaskExitError();
 80078c0:	f7ff ff1e 	bl	8007700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	e000ed00 	.word	0xe000ed00
 80078d4:	410fc271 	.word	0x410fc271
 80078d8:	410fc270 	.word	0x410fc270
 80078dc:	e000e400 	.word	0xe000e400
 80078e0:	20000f7c 	.word	0x20000f7c
 80078e4:	20000f80 	.word	0x20000f80
 80078e8:	e000ed20 	.word	0xe000ed20
 80078ec:	2000000c 	.word	0x2000000c
 80078f0:	e000ef34 	.word	0xe000ef34

080078f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	607b      	str	r3, [r7, #4]
}
 800790c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800790e:	4b0f      	ldr	r3, [pc, #60]	; (800794c <vPortEnterCritical+0x58>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3301      	adds	r3, #1
 8007914:	4a0d      	ldr	r2, [pc, #52]	; (800794c <vPortEnterCritical+0x58>)
 8007916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007918:	4b0c      	ldr	r3, [pc, #48]	; (800794c <vPortEnterCritical+0x58>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d10f      	bne.n	8007940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <vPortEnterCritical+0x5c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <vPortEnterCritical+0x4c>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	603b      	str	r3, [r7, #0]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <vPortEnterCritical+0x4a>
	}
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	2000000c 	.word	0x2000000c
 8007950:	e000ed04 	.word	0xe000ed04

08007954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800795a:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <vPortExitCritical+0x50>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <vPortExitCritical+0x24>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	607b      	str	r3, [r7, #4]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007978:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <vPortExitCritical+0x50>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3b01      	subs	r3, #1
 800797e:	4a09      	ldr	r2, [pc, #36]	; (80079a4 <vPortExitCritical+0x50>)
 8007980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007982:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <vPortExitCritical+0x50>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <vPortExitCritical+0x42>
 800798a:	2300      	movs	r3, #0
 800798c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	f383 8811 	msr	BASEPRI, r3
}
 8007994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	2000000c 	.word	0x2000000c
	...

080079b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079b0:	f3ef 8009 	mrs	r0, PSP
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	4b15      	ldr	r3, [pc, #84]	; (8007a10 <pxCurrentTCBConst>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	f01e 0f10 	tst.w	lr, #16
 80079c0:	bf08      	it	eq
 80079c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	6010      	str	r0, [r2, #0]
 80079cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079d4:	f380 8811 	msr	BASEPRI, r0
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f7fe fea8 	bl	8006734 <vTaskSwitchContext>
 80079e4:	f04f 0000 	mov.w	r0, #0
 80079e8:	f380 8811 	msr	BASEPRI, r0
 80079ec:	bc09      	pop	{r0, r3}
 80079ee:	6819      	ldr	r1, [r3, #0]
 80079f0:	6808      	ldr	r0, [r1, #0]
 80079f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f6:	f01e 0f10 	tst.w	lr, #16
 80079fa:	bf08      	it	eq
 80079fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a00:	f380 8809 	msr	PSP, r0
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	f3af 8000 	nop.w

08007a10 <pxCurrentTCBConst>:
 8007a10:	20000950 	.word	0x20000950
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop

08007a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	607b      	str	r3, [r7, #4]
}
 8007a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a32:	f7fe fdc5 	bl	80065c0 <xTaskIncrementTick>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a3c:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <xPortSysTickHandler+0x40>)
 8007a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f383 8811 	msr	BASEPRI, r3
}
 8007a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a60:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <vPortSetupTimerInterrupt+0x34>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a66:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <vPortSetupTimerInterrupt+0x38>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <vPortSetupTimerInterrupt+0x3c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	; (8007a9c <vPortSetupTimerInterrupt+0x40>)
 8007a72:	fba2 2303 	umull	r2, r3, r2, r3
 8007a76:	099b      	lsrs	r3, r3, #6
 8007a78:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <vPortSetupTimerInterrupt+0x44>)
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a7e:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <vPortSetupTimerInterrupt+0x34>)
 8007a80:	2207      	movs	r2, #7
 8007a82:	601a      	str	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	e000e010 	.word	0xe000e010
 8007a94:	e000e018 	.word	0xe000e018
 8007a98:	20000000 	.word	0x20000000
 8007a9c:	10624dd3 	.word	0x10624dd3
 8007aa0:	e000e014 	.word	0xe000e014

08007aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ab4 <vPortEnableVFP+0x10>
 8007aa8:	6801      	ldr	r1, [r0, #0]
 8007aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007aae:	6001      	str	r1, [r0, #0]
 8007ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ab2:	bf00      	nop
 8007ab4:	e000ed88 	.word	0xe000ed88

08007ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007abe:	f3ef 8305 	mrs	r3, IPSR
 8007ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	d914      	bls.n	8007af4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aca:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <vPortValidateInterruptPriority+0x70>)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ad4:	4b15      	ldr	r3, [pc, #84]	; (8007b2c <vPortValidateInterruptPriority+0x74>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	7afa      	ldrb	r2, [r7, #11]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d20a      	bcs.n	8007af4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	607b      	str	r3, [r7, #4]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007af4:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <vPortValidateInterruptPriority+0x78>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007afc:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <vPortValidateInterruptPriority+0x7c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d90a      	bls.n	8007b1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	603b      	str	r3, [r7, #0]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <vPortValidateInterruptPriority+0x60>
	}
 8007b1a:	bf00      	nop
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	e000e3f0 	.word	0xe000e3f0
 8007b2c:	20000f7c 	.word	0x20000f7c
 8007b30:	e000ed0c 	.word	0xe000ed0c
 8007b34:	20000f80 	.word	0x20000f80

08007b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b44:	f7fe fc6e 	bl	8006424 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b48:	4b5b      	ldr	r3, [pc, #364]	; (8007cb8 <pvPortMalloc+0x180>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b50:	f000 f920 	bl	8007d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b54:	4b59      	ldr	r3, [pc, #356]	; (8007cbc <pvPortMalloc+0x184>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 8093 	bne.w	8007c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01d      	beq.n	8007ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b68:	2208      	movs	r2, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f023 0307 	bic.w	r3, r3, #7
 8007b80:	3308      	adds	r3, #8
 8007b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	617b      	str	r3, [r7, #20]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d06e      	beq.n	8007c88 <pvPortMalloc+0x150>
 8007baa:	4b45      	ldr	r3, [pc, #276]	; (8007cc0 <pvPortMalloc+0x188>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d869      	bhi.n	8007c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bb4:	4b43      	ldr	r3, [pc, #268]	; (8007cc4 <pvPortMalloc+0x18c>)
 8007bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bb8:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <pvPortMalloc+0x18c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bbe:	e004      	b.n	8007bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d903      	bls.n	8007bdc <pvPortMalloc+0xa4>
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f1      	bne.n	8007bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bdc:	4b36      	ldr	r3, [pc, #216]	; (8007cb8 <pvPortMalloc+0x180>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d050      	beq.n	8007c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2208      	movs	r2, #8
 8007bec:	4413      	add	r3, r2
 8007bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	2308      	movs	r3, #8
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d91f      	bls.n	8007c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <pvPortMalloc+0xf8>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	613b      	str	r3, [r7, #16]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	1ad2      	subs	r2, r2, r3
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c42:	69b8      	ldr	r0, [r7, #24]
 8007c44:	f000 f908 	bl	8007e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c48:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c56:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <pvPortMalloc+0x190>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d203      	bcs.n	8007c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c62:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <pvPortMalloc+0x190>)
 8007c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <pvPortMalloc+0x184>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <pvPortMalloc+0x194>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3301      	adds	r3, #1
 8007c84:	4a11      	ldr	r2, [pc, #68]	; (8007ccc <pvPortMalloc+0x194>)
 8007c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c88:	f7fe fbda 	bl	8006440 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <pvPortMalloc+0x174>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	60fb      	str	r3, [r7, #12]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <pvPortMalloc+0x172>
	return pvReturn;
 8007cac:	69fb      	ldr	r3, [r7, #28]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3728      	adds	r7, #40	; 0x28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20004b8c 	.word	0x20004b8c
 8007cbc:	20004ba0 	.word	0x20004ba0
 8007cc0:	20004b90 	.word	0x20004b90
 8007cc4:	20004b84 	.word	0x20004b84
 8007cc8:	20004b94 	.word	0x20004b94
 8007ccc:	20004b98 	.word	0x20004b98

08007cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d04d      	beq.n	8007d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	425b      	negs	r3, r3
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4413      	add	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <vPortFree+0xb8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <vPortFree+0x44>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60fb      	str	r3, [r7, #12]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <vPortFree+0x62>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	60bb      	str	r3, [r7, #8]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <vPortFree+0xb8>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01e      	beq.n	8007d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d11a      	bne.n	8007d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <vPortFree+0xb8>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	43db      	mvns	r3, r3
 8007d52:	401a      	ands	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d58:	f7fe fb64 	bl	8006424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <vPortFree+0xbc>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4413      	add	r3, r2
 8007d66:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <vPortFree+0xbc>)
 8007d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d6a:	6938      	ldr	r0, [r7, #16]
 8007d6c:	f000 f874 	bl	8007e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d70:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <vPortFree+0xc0>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	4a06      	ldr	r2, [pc, #24]	; (8007d90 <vPortFree+0xc0>)
 8007d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d7a:	f7fe fb61 	bl	8006440 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d7e:	bf00      	nop
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20004ba0 	.word	0x20004ba0
 8007d8c:	20004b90 	.word	0x20004b90
 8007d90:	20004b9c 	.word	0x20004b9c

08007d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007da0:	4b27      	ldr	r3, [pc, #156]	; (8007e40 <prvHeapInit+0xac>)
 8007da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00c      	beq.n	8007dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3307      	adds	r3, #7
 8007db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	; (8007e40 <prvHeapInit+0xac>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dcc:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <prvHeapInit+0xb0>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dd2:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <prvHeapInit+0xb0>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4413      	add	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007de0:	2208      	movs	r2, #8
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0307 	bic.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a15      	ldr	r2, [pc, #84]	; (8007e48 <prvHeapInit+0xb4>)
 8007df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <prvHeapInit+0xb4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <prvHeapInit+0xb4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e14:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <prvHeapInit+0xb4>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <prvHeapInit+0xb8>)
 8007e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <prvHeapInit+0xbc>)
 8007e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <prvHeapInit+0xc0>)
 8007e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e32:	601a      	str	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	20000f84 	.word	0x20000f84
 8007e44:	20004b84 	.word	0x20004b84
 8007e48:	20004b8c 	.word	0x20004b8c
 8007e4c:	20004b94 	.word	0x20004b94
 8007e50:	20004b90 	.word	0x20004b90
 8007e54:	20004ba0 	.word	0x20004ba0

08007e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e60:	4b28      	ldr	r3, [pc, #160]	; (8007f04 <prvInsertBlockIntoFreeList+0xac>)
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e002      	b.n	8007e6c <prvInsertBlockIntoFreeList+0x14>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d8f7      	bhi.n	8007e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	4413      	add	r3, r2
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d108      	bne.n	8007e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	441a      	add	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d118      	bne.n	8007ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d00d      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e008      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e003      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d002      	beq.n	8007ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20004b84 	.word	0x20004b84
 8007f08:	20004b8c 	.word	0x20004b8c

08007f0c <std>:
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	b510      	push	{r4, lr}
 8007f10:	4604      	mov	r4, r0
 8007f12:	e9c0 3300 	strd	r3, r3, [r0]
 8007f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f1a:	6083      	str	r3, [r0, #8]
 8007f1c:	8181      	strh	r1, [r0, #12]
 8007f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f20:	81c2      	strh	r2, [r0, #14]
 8007f22:	6183      	str	r3, [r0, #24]
 8007f24:	4619      	mov	r1, r3
 8007f26:	2208      	movs	r2, #8
 8007f28:	305c      	adds	r0, #92	; 0x5c
 8007f2a:	f000 f906 	bl	800813a <memset>
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <std+0x58>)
 8007f30:	6263      	str	r3, [r4, #36]	; 0x24
 8007f32:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <std+0x5c>)
 8007f34:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f36:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <std+0x60>)
 8007f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	; (8007f70 <std+0x64>)
 8007f3c:	6323      	str	r3, [r4, #48]	; 0x30
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <std+0x68>)
 8007f40:	6224      	str	r4, [r4, #32]
 8007f42:	429c      	cmp	r4, r3
 8007f44:	d006      	beq.n	8007f54 <std+0x48>
 8007f46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007f4a:	4294      	cmp	r4, r2
 8007f4c:	d002      	beq.n	8007f54 <std+0x48>
 8007f4e:	33d0      	adds	r3, #208	; 0xd0
 8007f50:	429c      	cmp	r4, r3
 8007f52:	d105      	bne.n	8007f60 <std+0x54>
 8007f54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f5c:	f000 b9bc 	b.w	80082d8 <__retarget_lock_init_recursive>
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	bf00      	nop
 8007f64:	080080b5 	.word	0x080080b5
 8007f68:	080080d7 	.word	0x080080d7
 8007f6c:	0800810f 	.word	0x0800810f
 8007f70:	08008133 	.word	0x08008133
 8007f74:	20004ba4 	.word	0x20004ba4

08007f78 <stdio_exit_handler>:
 8007f78:	4a02      	ldr	r2, [pc, #8]	; (8007f84 <stdio_exit_handler+0xc>)
 8007f7a:	4903      	ldr	r1, [pc, #12]	; (8007f88 <stdio_exit_handler+0x10>)
 8007f7c:	4803      	ldr	r0, [pc, #12]	; (8007f8c <stdio_exit_handler+0x14>)
 8007f7e:	f000 b869 	b.w	8008054 <_fwalk_sglue>
 8007f82:	bf00      	nop
 8007f84:	20000010 	.word	0x20000010
 8007f88:	08008ba1 	.word	0x08008ba1
 8007f8c:	2000001c 	.word	0x2000001c

08007f90 <cleanup_stdio>:
 8007f90:	6841      	ldr	r1, [r0, #4]
 8007f92:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <cleanup_stdio+0x34>)
 8007f94:	4299      	cmp	r1, r3
 8007f96:	b510      	push	{r4, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	d001      	beq.n	8007fa0 <cleanup_stdio+0x10>
 8007f9c:	f000 fe00 	bl	8008ba0 <_fflush_r>
 8007fa0:	68a1      	ldr	r1, [r4, #8]
 8007fa2:	4b09      	ldr	r3, [pc, #36]	; (8007fc8 <cleanup_stdio+0x38>)
 8007fa4:	4299      	cmp	r1, r3
 8007fa6:	d002      	beq.n	8007fae <cleanup_stdio+0x1e>
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fdf9 	bl	8008ba0 <_fflush_r>
 8007fae:	68e1      	ldr	r1, [r4, #12]
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <cleanup_stdio+0x3c>)
 8007fb2:	4299      	cmp	r1, r3
 8007fb4:	d004      	beq.n	8007fc0 <cleanup_stdio+0x30>
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f000 bdf0 	b.w	8008ba0 <_fflush_r>
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20004ba4 	.word	0x20004ba4
 8007fc8:	20004c0c 	.word	0x20004c0c
 8007fcc:	20004c74 	.word	0x20004c74

08007fd0 <global_stdio_init.part.0>:
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <global_stdio_init.part.0+0x30>)
 8007fd4:	4c0b      	ldr	r4, [pc, #44]	; (8008004 <global_stdio_init.part.0+0x34>)
 8007fd6:	4a0c      	ldr	r2, [pc, #48]	; (8008008 <global_stdio_init.part.0+0x38>)
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	4620      	mov	r0, r4
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2104      	movs	r1, #4
 8007fe0:	f7ff ff94 	bl	8007f0c <std>
 8007fe4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fe8:	2201      	movs	r2, #1
 8007fea:	2109      	movs	r1, #9
 8007fec:	f7ff ff8e 	bl	8007f0c <std>
 8007ff0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ffa:	2112      	movs	r1, #18
 8007ffc:	f7ff bf86 	b.w	8007f0c <std>
 8008000:	20004cdc 	.word	0x20004cdc
 8008004:	20004ba4 	.word	0x20004ba4
 8008008:	08007f79 	.word	0x08007f79

0800800c <__sfp_lock_acquire>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__sfp_lock_acquire+0x8>)
 800800e:	f000 b964 	b.w	80082da <__retarget_lock_acquire_recursive>
 8008012:	bf00      	nop
 8008014:	20004ce5 	.word	0x20004ce5

08008018 <__sfp_lock_release>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__sfp_lock_release+0x8>)
 800801a:	f000 b95f 	b.w	80082dc <__retarget_lock_release_recursive>
 800801e:	bf00      	nop
 8008020:	20004ce5 	.word	0x20004ce5

08008024 <__sinit>:
 8008024:	b510      	push	{r4, lr}
 8008026:	4604      	mov	r4, r0
 8008028:	f7ff fff0 	bl	800800c <__sfp_lock_acquire>
 800802c:	6a23      	ldr	r3, [r4, #32]
 800802e:	b11b      	cbz	r3, 8008038 <__sinit+0x14>
 8008030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008034:	f7ff bff0 	b.w	8008018 <__sfp_lock_release>
 8008038:	4b04      	ldr	r3, [pc, #16]	; (800804c <__sinit+0x28>)
 800803a:	6223      	str	r3, [r4, #32]
 800803c:	4b04      	ldr	r3, [pc, #16]	; (8008050 <__sinit+0x2c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1f5      	bne.n	8008030 <__sinit+0xc>
 8008044:	f7ff ffc4 	bl	8007fd0 <global_stdio_init.part.0>
 8008048:	e7f2      	b.n	8008030 <__sinit+0xc>
 800804a:	bf00      	nop
 800804c:	08007f91 	.word	0x08007f91
 8008050:	20004cdc 	.word	0x20004cdc

08008054 <_fwalk_sglue>:
 8008054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008058:	4607      	mov	r7, r0
 800805a:	4688      	mov	r8, r1
 800805c:	4614      	mov	r4, r2
 800805e:	2600      	movs	r6, #0
 8008060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008064:	f1b9 0901 	subs.w	r9, r9, #1
 8008068:	d505      	bpl.n	8008076 <_fwalk_sglue+0x22>
 800806a:	6824      	ldr	r4, [r4, #0]
 800806c:	2c00      	cmp	r4, #0
 800806e:	d1f7      	bne.n	8008060 <_fwalk_sglue+0xc>
 8008070:	4630      	mov	r0, r6
 8008072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d907      	bls.n	800808c <_fwalk_sglue+0x38>
 800807c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008080:	3301      	adds	r3, #1
 8008082:	d003      	beq.n	800808c <_fwalk_sglue+0x38>
 8008084:	4629      	mov	r1, r5
 8008086:	4638      	mov	r0, r7
 8008088:	47c0      	blx	r8
 800808a:	4306      	orrs	r6, r0
 800808c:	3568      	adds	r5, #104	; 0x68
 800808e:	e7e9      	b.n	8008064 <_fwalk_sglue+0x10>

08008090 <iprintf>:
 8008090:	b40f      	push	{r0, r1, r2, r3}
 8008092:	b507      	push	{r0, r1, r2, lr}
 8008094:	4906      	ldr	r1, [pc, #24]	; (80080b0 <iprintf+0x20>)
 8008096:	ab04      	add	r3, sp, #16
 8008098:	6808      	ldr	r0, [r1, #0]
 800809a:	f853 2b04 	ldr.w	r2, [r3], #4
 800809e:	6881      	ldr	r1, [r0, #8]
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	f000 fa4d 	bl	8008540 <_vfiprintf_r>
 80080a6:	b003      	add	sp, #12
 80080a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080ac:	b004      	add	sp, #16
 80080ae:	4770      	bx	lr
 80080b0:	20000068 	.word	0x20000068

080080b4 <__sread>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	460c      	mov	r4, r1
 80080b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080bc:	f000 f8be 	bl	800823c <_read_r>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	bfab      	itete	ge
 80080c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080c6:	89a3      	ldrhlt	r3, [r4, #12]
 80080c8:	181b      	addge	r3, r3, r0
 80080ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080ce:	bfac      	ite	ge
 80080d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80080d2:	81a3      	strhlt	r3, [r4, #12]
 80080d4:	bd10      	pop	{r4, pc}

080080d6 <__swrite>:
 80080d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080da:	461f      	mov	r7, r3
 80080dc:	898b      	ldrh	r3, [r1, #12]
 80080de:	05db      	lsls	r3, r3, #23
 80080e0:	4605      	mov	r5, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	4616      	mov	r6, r2
 80080e6:	d505      	bpl.n	80080f4 <__swrite+0x1e>
 80080e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ec:	2302      	movs	r3, #2
 80080ee:	2200      	movs	r2, #0
 80080f0:	f000 f892 	bl	8008218 <_lseek_r>
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	4632      	mov	r2, r6
 8008102:	463b      	mov	r3, r7
 8008104:	4628      	mov	r0, r5
 8008106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	f000 b8a9 	b.w	8008260 <_write_r>

0800810e <__sseek>:
 800810e:	b510      	push	{r4, lr}
 8008110:	460c      	mov	r4, r1
 8008112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008116:	f000 f87f 	bl	8008218 <_lseek_r>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	bf15      	itete	ne
 8008120:	6560      	strne	r0, [r4, #84]	; 0x54
 8008122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800812a:	81a3      	strheq	r3, [r4, #12]
 800812c:	bf18      	it	ne
 800812e:	81a3      	strhne	r3, [r4, #12]
 8008130:	bd10      	pop	{r4, pc}

08008132 <__sclose>:
 8008132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008136:	f000 b809 	b.w	800814c <_close_r>

0800813a <memset>:
 800813a:	4402      	add	r2, r0
 800813c:	4603      	mov	r3, r0
 800813e:	4293      	cmp	r3, r2
 8008140:	d100      	bne.n	8008144 <memset+0xa>
 8008142:	4770      	bx	lr
 8008144:	f803 1b01 	strb.w	r1, [r3], #1
 8008148:	e7f9      	b.n	800813e <memset+0x4>
	...

0800814c <_close_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d06      	ldr	r5, [pc, #24]	; (8008168 <_close_r+0x1c>)
 8008150:	2300      	movs	r3, #0
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	f7f9 fde1 	bl	8001d1e <_close>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_close_r+0x1a>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_close_r+0x1a>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	20004ce0 	.word	0x20004ce0

0800816c <_reclaim_reent>:
 800816c:	4b29      	ldr	r3, [pc, #164]	; (8008214 <_reclaim_reent+0xa8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4283      	cmp	r3, r0
 8008172:	b570      	push	{r4, r5, r6, lr}
 8008174:	4604      	mov	r4, r0
 8008176:	d04b      	beq.n	8008210 <_reclaim_reent+0xa4>
 8008178:	69c3      	ldr	r3, [r0, #28]
 800817a:	b143      	cbz	r3, 800818e <_reclaim_reent+0x22>
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d144      	bne.n	800820c <_reclaim_reent+0xa0>
 8008182:	69e3      	ldr	r3, [r4, #28]
 8008184:	6819      	ldr	r1, [r3, #0]
 8008186:	b111      	cbz	r1, 800818e <_reclaim_reent+0x22>
 8008188:	4620      	mov	r0, r4
 800818a:	f000 f8b7 	bl	80082fc <_free_r>
 800818e:	6961      	ldr	r1, [r4, #20]
 8008190:	b111      	cbz	r1, 8008198 <_reclaim_reent+0x2c>
 8008192:	4620      	mov	r0, r4
 8008194:	f000 f8b2 	bl	80082fc <_free_r>
 8008198:	69e1      	ldr	r1, [r4, #28]
 800819a:	b111      	cbz	r1, 80081a2 <_reclaim_reent+0x36>
 800819c:	4620      	mov	r0, r4
 800819e:	f000 f8ad 	bl	80082fc <_free_r>
 80081a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80081a4:	b111      	cbz	r1, 80081ac <_reclaim_reent+0x40>
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 f8a8 	bl	80082fc <_free_r>
 80081ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ae:	b111      	cbz	r1, 80081b6 <_reclaim_reent+0x4a>
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 f8a3 	bl	80082fc <_free_r>
 80081b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80081b8:	b111      	cbz	r1, 80081c0 <_reclaim_reent+0x54>
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 f89e 	bl	80082fc <_free_r>
 80081c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80081c2:	b111      	cbz	r1, 80081ca <_reclaim_reent+0x5e>
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 f899 	bl	80082fc <_free_r>
 80081ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80081cc:	b111      	cbz	r1, 80081d4 <_reclaim_reent+0x68>
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 f894 	bl	80082fc <_free_r>
 80081d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80081d6:	b111      	cbz	r1, 80081de <_reclaim_reent+0x72>
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 f88f 	bl	80082fc <_free_r>
 80081de:	6a23      	ldr	r3, [r4, #32]
 80081e0:	b1b3      	cbz	r3, 8008210 <_reclaim_reent+0xa4>
 80081e2:	4620      	mov	r0, r4
 80081e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081e8:	4718      	bx	r3
 80081ea:	5949      	ldr	r1, [r1, r5]
 80081ec:	b941      	cbnz	r1, 8008200 <_reclaim_reent+0x94>
 80081ee:	3504      	adds	r5, #4
 80081f0:	69e3      	ldr	r3, [r4, #28]
 80081f2:	2d80      	cmp	r5, #128	; 0x80
 80081f4:	68d9      	ldr	r1, [r3, #12]
 80081f6:	d1f8      	bne.n	80081ea <_reclaim_reent+0x7e>
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 f87f 	bl	80082fc <_free_r>
 80081fe:	e7c0      	b.n	8008182 <_reclaim_reent+0x16>
 8008200:	680e      	ldr	r6, [r1, #0]
 8008202:	4620      	mov	r0, r4
 8008204:	f000 f87a 	bl	80082fc <_free_r>
 8008208:	4631      	mov	r1, r6
 800820a:	e7ef      	b.n	80081ec <_reclaim_reent+0x80>
 800820c:	2500      	movs	r5, #0
 800820e:	e7ef      	b.n	80081f0 <_reclaim_reent+0x84>
 8008210:	bd70      	pop	{r4, r5, r6, pc}
 8008212:	bf00      	nop
 8008214:	20000068 	.word	0x20000068

08008218 <_lseek_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d07      	ldr	r5, [pc, #28]	; (8008238 <_lseek_r+0x20>)
 800821c:	4604      	mov	r4, r0
 800821e:	4608      	mov	r0, r1
 8008220:	4611      	mov	r1, r2
 8008222:	2200      	movs	r2, #0
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	f7f9 fda0 	bl	8001d6c <_lseek>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_lseek_r+0x1e>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_lseek_r+0x1e>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20004ce0 	.word	0x20004ce0

0800823c <_read_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d07      	ldr	r5, [pc, #28]	; (800825c <_read_r+0x20>)
 8008240:	4604      	mov	r4, r0
 8008242:	4608      	mov	r0, r1
 8008244:	4611      	mov	r1, r2
 8008246:	2200      	movs	r2, #0
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f7f9 fd2e 	bl	8001cac <_read>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_read_r+0x1e>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_read_r+0x1e>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	20004ce0 	.word	0x20004ce0

08008260 <_write_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d07      	ldr	r5, [pc, #28]	; (8008280 <_write_r+0x20>)
 8008264:	4604      	mov	r4, r0
 8008266:	4608      	mov	r0, r1
 8008268:	4611      	mov	r1, r2
 800826a:	2200      	movs	r2, #0
 800826c:	602a      	str	r2, [r5, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	f7f9 fd39 	bl	8001ce6 <_write>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_write_r+0x1e>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_write_r+0x1e>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	20004ce0 	.word	0x20004ce0

08008284 <__errno>:
 8008284:	4b01      	ldr	r3, [pc, #4]	; (800828c <__errno+0x8>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000068 	.word	0x20000068

08008290 <__libc_init_array>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	4d0d      	ldr	r5, [pc, #52]	; (80082c8 <__libc_init_array+0x38>)
 8008294:	4c0d      	ldr	r4, [pc, #52]	; (80082cc <__libc_init_array+0x3c>)
 8008296:	1b64      	subs	r4, r4, r5
 8008298:	10a4      	asrs	r4, r4, #2
 800829a:	2600      	movs	r6, #0
 800829c:	42a6      	cmp	r6, r4
 800829e:	d109      	bne.n	80082b4 <__libc_init_array+0x24>
 80082a0:	4d0b      	ldr	r5, [pc, #44]	; (80082d0 <__libc_init_array+0x40>)
 80082a2:	4c0c      	ldr	r4, [pc, #48]	; (80082d4 <__libc_init_array+0x44>)
 80082a4:	f000 fdce 	bl	8008e44 <_init>
 80082a8:	1b64      	subs	r4, r4, r5
 80082aa:	10a4      	asrs	r4, r4, #2
 80082ac:	2600      	movs	r6, #0
 80082ae:	42a6      	cmp	r6, r4
 80082b0:	d105      	bne.n	80082be <__libc_init_array+0x2e>
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b8:	4798      	blx	r3
 80082ba:	3601      	adds	r6, #1
 80082bc:	e7ee      	b.n	800829c <__libc_init_array+0xc>
 80082be:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c2:	4798      	blx	r3
 80082c4:	3601      	adds	r6, #1
 80082c6:	e7f2      	b.n	80082ae <__libc_init_array+0x1e>
 80082c8:	08008ff4 	.word	0x08008ff4
 80082cc:	08008ff4 	.word	0x08008ff4
 80082d0:	08008ff4 	.word	0x08008ff4
 80082d4:	08008ff8 	.word	0x08008ff8

080082d8 <__retarget_lock_init_recursive>:
 80082d8:	4770      	bx	lr

080082da <__retarget_lock_acquire_recursive>:
 80082da:	4770      	bx	lr

080082dc <__retarget_lock_release_recursive>:
 80082dc:	4770      	bx	lr

080082de <memcpy>:
 80082de:	440a      	add	r2, r1
 80082e0:	4291      	cmp	r1, r2
 80082e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80082e6:	d100      	bne.n	80082ea <memcpy+0xc>
 80082e8:	4770      	bx	lr
 80082ea:	b510      	push	{r4, lr}
 80082ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082f4:	4291      	cmp	r1, r2
 80082f6:	d1f9      	bne.n	80082ec <memcpy+0xe>
 80082f8:	bd10      	pop	{r4, pc}
	...

080082fc <_free_r>:
 80082fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082fe:	2900      	cmp	r1, #0
 8008300:	d044      	beq.n	800838c <_free_r+0x90>
 8008302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008306:	9001      	str	r0, [sp, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f1a1 0404 	sub.w	r4, r1, #4
 800830e:	bfb8      	it	lt
 8008310:	18e4      	addlt	r4, r4, r3
 8008312:	f000 f8df 	bl	80084d4 <__malloc_lock>
 8008316:	4a1e      	ldr	r2, [pc, #120]	; (8008390 <_free_r+0x94>)
 8008318:	9801      	ldr	r0, [sp, #4]
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	b933      	cbnz	r3, 800832c <_free_r+0x30>
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	b003      	add	sp, #12
 8008324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008328:	f000 b8da 	b.w	80084e0 <__malloc_unlock>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d908      	bls.n	8008342 <_free_r+0x46>
 8008330:	6825      	ldr	r5, [r4, #0]
 8008332:	1961      	adds	r1, r4, r5
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1949      	addeq	r1, r1, r5
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	e7ed      	b.n	800831e <_free_r+0x22>
 8008342:	461a      	mov	r2, r3
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b10b      	cbz	r3, 800834c <_free_r+0x50>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x46>
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	1855      	adds	r5, r2, r1
 8008350:	42a5      	cmp	r5, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x70>
 8008354:	6824      	ldr	r4, [r4, #0]
 8008356:	4421      	add	r1, r4
 8008358:	1854      	adds	r4, r2, r1
 800835a:	42a3      	cmp	r3, r4
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	d1e0      	bne.n	8008322 <_free_r+0x26>
 8008360:	681c      	ldr	r4, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	6053      	str	r3, [r2, #4]
 8008366:	440c      	add	r4, r1
 8008368:	6014      	str	r4, [r2, #0]
 800836a:	e7da      	b.n	8008322 <_free_r+0x26>
 800836c:	d902      	bls.n	8008374 <_free_r+0x78>
 800836e:	230c      	movs	r3, #12
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	e7d6      	b.n	8008322 <_free_r+0x26>
 8008374:	6825      	ldr	r5, [r4, #0]
 8008376:	1961      	adds	r1, r4, r5
 8008378:	428b      	cmp	r3, r1
 800837a:	bf04      	itt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	bf04      	itt	eq
 8008384:	1949      	addeq	r1, r1, r5
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	6054      	str	r4, [r2, #4]
 800838a:	e7ca      	b.n	8008322 <_free_r+0x26>
 800838c:	b003      	add	sp, #12
 800838e:	bd30      	pop	{r4, r5, pc}
 8008390:	20004ce8 	.word	0x20004ce8

08008394 <sbrk_aligned>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4e0e      	ldr	r6, [pc, #56]	; (80083d0 <sbrk_aligned+0x3c>)
 8008398:	460c      	mov	r4, r1
 800839a:	6831      	ldr	r1, [r6, #0]
 800839c:	4605      	mov	r5, r0
 800839e:	b911      	cbnz	r1, 80083a6 <sbrk_aligned+0x12>
 80083a0:	f000 fcbc 	bl	8008d1c <_sbrk_r>
 80083a4:	6030      	str	r0, [r6, #0]
 80083a6:	4621      	mov	r1, r4
 80083a8:	4628      	mov	r0, r5
 80083aa:	f000 fcb7 	bl	8008d1c <_sbrk_r>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d00a      	beq.n	80083c8 <sbrk_aligned+0x34>
 80083b2:	1cc4      	adds	r4, r0, #3
 80083b4:	f024 0403 	bic.w	r4, r4, #3
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d007      	beq.n	80083cc <sbrk_aligned+0x38>
 80083bc:	1a21      	subs	r1, r4, r0
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 fcac 	bl	8008d1c <_sbrk_r>
 80083c4:	3001      	adds	r0, #1
 80083c6:	d101      	bne.n	80083cc <sbrk_aligned+0x38>
 80083c8:	f04f 34ff 	mov.w	r4, #4294967295
 80083cc:	4620      	mov	r0, r4
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	20004cec 	.word	0x20004cec

080083d4 <_malloc_r>:
 80083d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d8:	1ccd      	adds	r5, r1, #3
 80083da:	f025 0503 	bic.w	r5, r5, #3
 80083de:	3508      	adds	r5, #8
 80083e0:	2d0c      	cmp	r5, #12
 80083e2:	bf38      	it	cc
 80083e4:	250c      	movcc	r5, #12
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	4607      	mov	r7, r0
 80083ea:	db01      	blt.n	80083f0 <_malloc_r+0x1c>
 80083ec:	42a9      	cmp	r1, r5
 80083ee:	d905      	bls.n	80083fc <_malloc_r+0x28>
 80083f0:	230c      	movs	r3, #12
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	2600      	movs	r6, #0
 80083f6:	4630      	mov	r0, r6
 80083f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084d0 <_malloc_r+0xfc>
 8008400:	f000 f868 	bl	80084d4 <__malloc_lock>
 8008404:	f8d8 3000 	ldr.w	r3, [r8]
 8008408:	461c      	mov	r4, r3
 800840a:	bb5c      	cbnz	r4, 8008464 <_malloc_r+0x90>
 800840c:	4629      	mov	r1, r5
 800840e:	4638      	mov	r0, r7
 8008410:	f7ff ffc0 	bl	8008394 <sbrk_aligned>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	4604      	mov	r4, r0
 8008418:	d155      	bne.n	80084c6 <_malloc_r+0xf2>
 800841a:	f8d8 4000 	ldr.w	r4, [r8]
 800841e:	4626      	mov	r6, r4
 8008420:	2e00      	cmp	r6, #0
 8008422:	d145      	bne.n	80084b0 <_malloc_r+0xdc>
 8008424:	2c00      	cmp	r4, #0
 8008426:	d048      	beq.n	80084ba <_malloc_r+0xe6>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	4631      	mov	r1, r6
 800842c:	4638      	mov	r0, r7
 800842e:	eb04 0903 	add.w	r9, r4, r3
 8008432:	f000 fc73 	bl	8008d1c <_sbrk_r>
 8008436:	4581      	cmp	r9, r0
 8008438:	d13f      	bne.n	80084ba <_malloc_r+0xe6>
 800843a:	6821      	ldr	r1, [r4, #0]
 800843c:	1a6d      	subs	r5, r5, r1
 800843e:	4629      	mov	r1, r5
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff ffa7 	bl	8008394 <sbrk_aligned>
 8008446:	3001      	adds	r0, #1
 8008448:	d037      	beq.n	80084ba <_malloc_r+0xe6>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	442b      	add	r3, r5
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	f8d8 3000 	ldr.w	r3, [r8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d038      	beq.n	80084ca <_malloc_r+0xf6>
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	42a2      	cmp	r2, r4
 800845c:	d12b      	bne.n	80084b6 <_malloc_r+0xe2>
 800845e:	2200      	movs	r2, #0
 8008460:	605a      	str	r2, [r3, #4]
 8008462:	e00f      	b.n	8008484 <_malloc_r+0xb0>
 8008464:	6822      	ldr	r2, [r4, #0]
 8008466:	1b52      	subs	r2, r2, r5
 8008468:	d41f      	bmi.n	80084aa <_malloc_r+0xd6>
 800846a:	2a0b      	cmp	r2, #11
 800846c:	d917      	bls.n	800849e <_malloc_r+0xca>
 800846e:	1961      	adds	r1, r4, r5
 8008470:	42a3      	cmp	r3, r4
 8008472:	6025      	str	r5, [r4, #0]
 8008474:	bf18      	it	ne
 8008476:	6059      	strne	r1, [r3, #4]
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	bf08      	it	eq
 800847c:	f8c8 1000 	streq.w	r1, [r8]
 8008480:	5162      	str	r2, [r4, r5]
 8008482:	604b      	str	r3, [r1, #4]
 8008484:	4638      	mov	r0, r7
 8008486:	f104 060b 	add.w	r6, r4, #11
 800848a:	f000 f829 	bl	80084e0 <__malloc_unlock>
 800848e:	f026 0607 	bic.w	r6, r6, #7
 8008492:	1d23      	adds	r3, r4, #4
 8008494:	1af2      	subs	r2, r6, r3
 8008496:	d0ae      	beq.n	80083f6 <_malloc_r+0x22>
 8008498:	1b9b      	subs	r3, r3, r6
 800849a:	50a3      	str	r3, [r4, r2]
 800849c:	e7ab      	b.n	80083f6 <_malloc_r+0x22>
 800849e:	42a3      	cmp	r3, r4
 80084a0:	6862      	ldr	r2, [r4, #4]
 80084a2:	d1dd      	bne.n	8008460 <_malloc_r+0x8c>
 80084a4:	f8c8 2000 	str.w	r2, [r8]
 80084a8:	e7ec      	b.n	8008484 <_malloc_r+0xb0>
 80084aa:	4623      	mov	r3, r4
 80084ac:	6864      	ldr	r4, [r4, #4]
 80084ae:	e7ac      	b.n	800840a <_malloc_r+0x36>
 80084b0:	4634      	mov	r4, r6
 80084b2:	6876      	ldr	r6, [r6, #4]
 80084b4:	e7b4      	b.n	8008420 <_malloc_r+0x4c>
 80084b6:	4613      	mov	r3, r2
 80084b8:	e7cc      	b.n	8008454 <_malloc_r+0x80>
 80084ba:	230c      	movs	r3, #12
 80084bc:	603b      	str	r3, [r7, #0]
 80084be:	4638      	mov	r0, r7
 80084c0:	f000 f80e 	bl	80084e0 <__malloc_unlock>
 80084c4:	e797      	b.n	80083f6 <_malloc_r+0x22>
 80084c6:	6025      	str	r5, [r4, #0]
 80084c8:	e7dc      	b.n	8008484 <_malloc_r+0xb0>
 80084ca:	605b      	str	r3, [r3, #4]
 80084cc:	deff      	udf	#255	; 0xff
 80084ce:	bf00      	nop
 80084d0:	20004ce8 	.word	0x20004ce8

080084d4 <__malloc_lock>:
 80084d4:	4801      	ldr	r0, [pc, #4]	; (80084dc <__malloc_lock+0x8>)
 80084d6:	f7ff bf00 	b.w	80082da <__retarget_lock_acquire_recursive>
 80084da:	bf00      	nop
 80084dc:	20004ce4 	.word	0x20004ce4

080084e0 <__malloc_unlock>:
 80084e0:	4801      	ldr	r0, [pc, #4]	; (80084e8 <__malloc_unlock+0x8>)
 80084e2:	f7ff befb 	b.w	80082dc <__retarget_lock_release_recursive>
 80084e6:	bf00      	nop
 80084e8:	20004ce4 	.word	0x20004ce4

080084ec <__sfputc_r>:
 80084ec:	6893      	ldr	r3, [r2, #8]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	b410      	push	{r4}
 80084f4:	6093      	str	r3, [r2, #8]
 80084f6:	da08      	bge.n	800850a <__sfputc_r+0x1e>
 80084f8:	6994      	ldr	r4, [r2, #24]
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	db01      	blt.n	8008502 <__sfputc_r+0x16>
 80084fe:	290a      	cmp	r1, #10
 8008500:	d103      	bne.n	800850a <__sfputc_r+0x1e>
 8008502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008506:	f000 bb73 	b.w	8008bf0 <__swbuf_r>
 800850a:	6813      	ldr	r3, [r2, #0]
 800850c:	1c58      	adds	r0, r3, #1
 800850e:	6010      	str	r0, [r2, #0]
 8008510:	7019      	strb	r1, [r3, #0]
 8008512:	4608      	mov	r0, r1
 8008514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008518:	4770      	bx	lr

0800851a <__sfputs_r>:
 800851a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851c:	4606      	mov	r6, r0
 800851e:	460f      	mov	r7, r1
 8008520:	4614      	mov	r4, r2
 8008522:	18d5      	adds	r5, r2, r3
 8008524:	42ac      	cmp	r4, r5
 8008526:	d101      	bne.n	800852c <__sfputs_r+0x12>
 8008528:	2000      	movs	r0, #0
 800852a:	e007      	b.n	800853c <__sfputs_r+0x22>
 800852c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008530:	463a      	mov	r2, r7
 8008532:	4630      	mov	r0, r6
 8008534:	f7ff ffda 	bl	80084ec <__sfputc_r>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d1f3      	bne.n	8008524 <__sfputs_r+0xa>
 800853c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008540 <_vfiprintf_r>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	460d      	mov	r5, r1
 8008546:	b09d      	sub	sp, #116	; 0x74
 8008548:	4614      	mov	r4, r2
 800854a:	4698      	mov	r8, r3
 800854c:	4606      	mov	r6, r0
 800854e:	b118      	cbz	r0, 8008558 <_vfiprintf_r+0x18>
 8008550:	6a03      	ldr	r3, [r0, #32]
 8008552:	b90b      	cbnz	r3, 8008558 <_vfiprintf_r+0x18>
 8008554:	f7ff fd66 	bl	8008024 <__sinit>
 8008558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800855a:	07d9      	lsls	r1, r3, #31
 800855c:	d405      	bmi.n	800856a <_vfiprintf_r+0x2a>
 800855e:	89ab      	ldrh	r3, [r5, #12]
 8008560:	059a      	lsls	r2, r3, #22
 8008562:	d402      	bmi.n	800856a <_vfiprintf_r+0x2a>
 8008564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008566:	f7ff feb8 	bl	80082da <__retarget_lock_acquire_recursive>
 800856a:	89ab      	ldrh	r3, [r5, #12]
 800856c:	071b      	lsls	r3, r3, #28
 800856e:	d501      	bpl.n	8008574 <_vfiprintf_r+0x34>
 8008570:	692b      	ldr	r3, [r5, #16]
 8008572:	b99b      	cbnz	r3, 800859c <_vfiprintf_r+0x5c>
 8008574:	4629      	mov	r1, r5
 8008576:	4630      	mov	r0, r6
 8008578:	f000 fb78 	bl	8008c6c <__swsetup_r>
 800857c:	b170      	cbz	r0, 800859c <_vfiprintf_r+0x5c>
 800857e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008580:	07dc      	lsls	r4, r3, #31
 8008582:	d504      	bpl.n	800858e <_vfiprintf_r+0x4e>
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	b01d      	add	sp, #116	; 0x74
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	0598      	lsls	r0, r3, #22
 8008592:	d4f7      	bmi.n	8008584 <_vfiprintf_r+0x44>
 8008594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008596:	f7ff fea1 	bl	80082dc <__retarget_lock_release_recursive>
 800859a:	e7f3      	b.n	8008584 <_vfiprintf_r+0x44>
 800859c:	2300      	movs	r3, #0
 800859e:	9309      	str	r3, [sp, #36]	; 0x24
 80085a0:	2320      	movs	r3, #32
 80085a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085aa:	2330      	movs	r3, #48	; 0x30
 80085ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008760 <_vfiprintf_r+0x220>
 80085b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085b4:	f04f 0901 	mov.w	r9, #1
 80085b8:	4623      	mov	r3, r4
 80085ba:	469a      	mov	sl, r3
 80085bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085c0:	b10a      	cbz	r2, 80085c6 <_vfiprintf_r+0x86>
 80085c2:	2a25      	cmp	r2, #37	; 0x25
 80085c4:	d1f9      	bne.n	80085ba <_vfiprintf_r+0x7a>
 80085c6:	ebba 0b04 	subs.w	fp, sl, r4
 80085ca:	d00b      	beq.n	80085e4 <_vfiprintf_r+0xa4>
 80085cc:	465b      	mov	r3, fp
 80085ce:	4622      	mov	r2, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7ff ffa1 	bl	800851a <__sfputs_r>
 80085d8:	3001      	adds	r0, #1
 80085da:	f000 80a9 	beq.w	8008730 <_vfiprintf_r+0x1f0>
 80085de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085e0:	445a      	add	r2, fp
 80085e2:	9209      	str	r2, [sp, #36]	; 0x24
 80085e4:	f89a 3000 	ldrb.w	r3, [sl]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80a1 	beq.w	8008730 <_vfiprintf_r+0x1f0>
 80085ee:	2300      	movs	r3, #0
 80085f0:	f04f 32ff 	mov.w	r2, #4294967295
 80085f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085f8:	f10a 0a01 	add.w	sl, sl, #1
 80085fc:	9304      	str	r3, [sp, #16]
 80085fe:	9307      	str	r3, [sp, #28]
 8008600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008604:	931a      	str	r3, [sp, #104]	; 0x68
 8008606:	4654      	mov	r4, sl
 8008608:	2205      	movs	r2, #5
 800860a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800860e:	4854      	ldr	r0, [pc, #336]	; (8008760 <_vfiprintf_r+0x220>)
 8008610:	f7f7 fde6 	bl	80001e0 <memchr>
 8008614:	9a04      	ldr	r2, [sp, #16]
 8008616:	b9d8      	cbnz	r0, 8008650 <_vfiprintf_r+0x110>
 8008618:	06d1      	lsls	r1, r2, #27
 800861a:	bf44      	itt	mi
 800861c:	2320      	movmi	r3, #32
 800861e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008622:	0713      	lsls	r3, r2, #28
 8008624:	bf44      	itt	mi
 8008626:	232b      	movmi	r3, #43	; 0x2b
 8008628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800862c:	f89a 3000 	ldrb.w	r3, [sl]
 8008630:	2b2a      	cmp	r3, #42	; 0x2a
 8008632:	d015      	beq.n	8008660 <_vfiprintf_r+0x120>
 8008634:	9a07      	ldr	r2, [sp, #28]
 8008636:	4654      	mov	r4, sl
 8008638:	2000      	movs	r0, #0
 800863a:	f04f 0c0a 	mov.w	ip, #10
 800863e:	4621      	mov	r1, r4
 8008640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008644:	3b30      	subs	r3, #48	; 0x30
 8008646:	2b09      	cmp	r3, #9
 8008648:	d94d      	bls.n	80086e6 <_vfiprintf_r+0x1a6>
 800864a:	b1b0      	cbz	r0, 800867a <_vfiprintf_r+0x13a>
 800864c:	9207      	str	r2, [sp, #28]
 800864e:	e014      	b.n	800867a <_vfiprintf_r+0x13a>
 8008650:	eba0 0308 	sub.w	r3, r0, r8
 8008654:	fa09 f303 	lsl.w	r3, r9, r3
 8008658:	4313      	orrs	r3, r2
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	46a2      	mov	sl, r4
 800865e:	e7d2      	b.n	8008606 <_vfiprintf_r+0xc6>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	1d19      	adds	r1, r3, #4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	9103      	str	r1, [sp, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	bfbb      	ittet	lt
 800866c:	425b      	neglt	r3, r3
 800866e:	f042 0202 	orrlt.w	r2, r2, #2
 8008672:	9307      	strge	r3, [sp, #28]
 8008674:	9307      	strlt	r3, [sp, #28]
 8008676:	bfb8      	it	lt
 8008678:	9204      	strlt	r2, [sp, #16]
 800867a:	7823      	ldrb	r3, [r4, #0]
 800867c:	2b2e      	cmp	r3, #46	; 0x2e
 800867e:	d10c      	bne.n	800869a <_vfiprintf_r+0x15a>
 8008680:	7863      	ldrb	r3, [r4, #1]
 8008682:	2b2a      	cmp	r3, #42	; 0x2a
 8008684:	d134      	bne.n	80086f0 <_vfiprintf_r+0x1b0>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	1d1a      	adds	r2, r3, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	9203      	str	r2, [sp, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfb8      	it	lt
 8008692:	f04f 33ff 	movlt.w	r3, #4294967295
 8008696:	3402      	adds	r4, #2
 8008698:	9305      	str	r3, [sp, #20]
 800869a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008770 <_vfiprintf_r+0x230>
 800869e:	7821      	ldrb	r1, [r4, #0]
 80086a0:	2203      	movs	r2, #3
 80086a2:	4650      	mov	r0, sl
 80086a4:	f7f7 fd9c 	bl	80001e0 <memchr>
 80086a8:	b138      	cbz	r0, 80086ba <_vfiprintf_r+0x17a>
 80086aa:	9b04      	ldr	r3, [sp, #16]
 80086ac:	eba0 000a 	sub.w	r0, r0, sl
 80086b0:	2240      	movs	r2, #64	; 0x40
 80086b2:	4082      	lsls	r2, r0
 80086b4:	4313      	orrs	r3, r2
 80086b6:	3401      	adds	r4, #1
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086be:	4829      	ldr	r0, [pc, #164]	; (8008764 <_vfiprintf_r+0x224>)
 80086c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086c4:	2206      	movs	r2, #6
 80086c6:	f7f7 fd8b 	bl	80001e0 <memchr>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d03f      	beq.n	800874e <_vfiprintf_r+0x20e>
 80086ce:	4b26      	ldr	r3, [pc, #152]	; (8008768 <_vfiprintf_r+0x228>)
 80086d0:	bb1b      	cbnz	r3, 800871a <_vfiprintf_r+0x1da>
 80086d2:	9b03      	ldr	r3, [sp, #12]
 80086d4:	3307      	adds	r3, #7
 80086d6:	f023 0307 	bic.w	r3, r3, #7
 80086da:	3308      	adds	r3, #8
 80086dc:	9303      	str	r3, [sp, #12]
 80086de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e0:	443b      	add	r3, r7
 80086e2:	9309      	str	r3, [sp, #36]	; 0x24
 80086e4:	e768      	b.n	80085b8 <_vfiprintf_r+0x78>
 80086e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086ea:	460c      	mov	r4, r1
 80086ec:	2001      	movs	r0, #1
 80086ee:	e7a6      	b.n	800863e <_vfiprintf_r+0xfe>
 80086f0:	2300      	movs	r3, #0
 80086f2:	3401      	adds	r4, #1
 80086f4:	9305      	str	r3, [sp, #20]
 80086f6:	4619      	mov	r1, r3
 80086f8:	f04f 0c0a 	mov.w	ip, #10
 80086fc:	4620      	mov	r0, r4
 80086fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008702:	3a30      	subs	r2, #48	; 0x30
 8008704:	2a09      	cmp	r2, #9
 8008706:	d903      	bls.n	8008710 <_vfiprintf_r+0x1d0>
 8008708:	2b00      	cmp	r3, #0
 800870a:	d0c6      	beq.n	800869a <_vfiprintf_r+0x15a>
 800870c:	9105      	str	r1, [sp, #20]
 800870e:	e7c4      	b.n	800869a <_vfiprintf_r+0x15a>
 8008710:	fb0c 2101 	mla	r1, ip, r1, r2
 8008714:	4604      	mov	r4, r0
 8008716:	2301      	movs	r3, #1
 8008718:	e7f0      	b.n	80086fc <_vfiprintf_r+0x1bc>
 800871a:	ab03      	add	r3, sp, #12
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	462a      	mov	r2, r5
 8008720:	4b12      	ldr	r3, [pc, #72]	; (800876c <_vfiprintf_r+0x22c>)
 8008722:	a904      	add	r1, sp, #16
 8008724:	4630      	mov	r0, r6
 8008726:	f3af 8000 	nop.w
 800872a:	4607      	mov	r7, r0
 800872c:	1c78      	adds	r0, r7, #1
 800872e:	d1d6      	bne.n	80086de <_vfiprintf_r+0x19e>
 8008730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008732:	07d9      	lsls	r1, r3, #31
 8008734:	d405      	bmi.n	8008742 <_vfiprintf_r+0x202>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	059a      	lsls	r2, r3, #22
 800873a:	d402      	bmi.n	8008742 <_vfiprintf_r+0x202>
 800873c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800873e:	f7ff fdcd 	bl	80082dc <__retarget_lock_release_recursive>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	065b      	lsls	r3, r3, #25
 8008746:	f53f af1d 	bmi.w	8008584 <_vfiprintf_r+0x44>
 800874a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800874c:	e71c      	b.n	8008588 <_vfiprintf_r+0x48>
 800874e:	ab03      	add	r3, sp, #12
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	462a      	mov	r2, r5
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <_vfiprintf_r+0x22c>)
 8008756:	a904      	add	r1, sp, #16
 8008758:	4630      	mov	r0, r6
 800875a:	f000 f879 	bl	8008850 <_printf_i>
 800875e:	e7e4      	b.n	800872a <_vfiprintf_r+0x1ea>
 8008760:	08008fb8 	.word	0x08008fb8
 8008764:	08008fc2 	.word	0x08008fc2
 8008768:	00000000 	.word	0x00000000
 800876c:	0800851b 	.word	0x0800851b
 8008770:	08008fbe 	.word	0x08008fbe

08008774 <_printf_common>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	4616      	mov	r6, r2
 800877a:	4699      	mov	r9, r3
 800877c:	688a      	ldr	r2, [r1, #8]
 800877e:	690b      	ldr	r3, [r1, #16]
 8008780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008784:	4293      	cmp	r3, r2
 8008786:	bfb8      	it	lt
 8008788:	4613      	movlt	r3, r2
 800878a:	6033      	str	r3, [r6, #0]
 800878c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008790:	4607      	mov	r7, r0
 8008792:	460c      	mov	r4, r1
 8008794:	b10a      	cbz	r2, 800879a <_printf_common+0x26>
 8008796:	3301      	adds	r3, #1
 8008798:	6033      	str	r3, [r6, #0]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	0699      	lsls	r1, r3, #26
 800879e:	bf42      	ittt	mi
 80087a0:	6833      	ldrmi	r3, [r6, #0]
 80087a2:	3302      	addmi	r3, #2
 80087a4:	6033      	strmi	r3, [r6, #0]
 80087a6:	6825      	ldr	r5, [r4, #0]
 80087a8:	f015 0506 	ands.w	r5, r5, #6
 80087ac:	d106      	bne.n	80087bc <_printf_common+0x48>
 80087ae:	f104 0a19 	add.w	sl, r4, #25
 80087b2:	68e3      	ldr	r3, [r4, #12]
 80087b4:	6832      	ldr	r2, [r6, #0]
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	42ab      	cmp	r3, r5
 80087ba:	dc26      	bgt.n	800880a <_printf_common+0x96>
 80087bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087c0:	1e13      	subs	r3, r2, #0
 80087c2:	6822      	ldr	r2, [r4, #0]
 80087c4:	bf18      	it	ne
 80087c6:	2301      	movne	r3, #1
 80087c8:	0692      	lsls	r2, r2, #26
 80087ca:	d42b      	bmi.n	8008824 <_printf_common+0xb0>
 80087cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087d0:	4649      	mov	r1, r9
 80087d2:	4638      	mov	r0, r7
 80087d4:	47c0      	blx	r8
 80087d6:	3001      	adds	r0, #1
 80087d8:	d01e      	beq.n	8008818 <_printf_common+0xa4>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	6922      	ldr	r2, [r4, #16]
 80087de:	f003 0306 	and.w	r3, r3, #6
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	bf02      	ittt	eq
 80087e6:	68e5      	ldreq	r5, [r4, #12]
 80087e8:	6833      	ldreq	r3, [r6, #0]
 80087ea:	1aed      	subeq	r5, r5, r3
 80087ec:	68a3      	ldr	r3, [r4, #8]
 80087ee:	bf0c      	ite	eq
 80087f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f4:	2500      	movne	r5, #0
 80087f6:	4293      	cmp	r3, r2
 80087f8:	bfc4      	itt	gt
 80087fa:	1a9b      	subgt	r3, r3, r2
 80087fc:	18ed      	addgt	r5, r5, r3
 80087fe:	2600      	movs	r6, #0
 8008800:	341a      	adds	r4, #26
 8008802:	42b5      	cmp	r5, r6
 8008804:	d11a      	bne.n	800883c <_printf_common+0xc8>
 8008806:	2000      	movs	r0, #0
 8008808:	e008      	b.n	800881c <_printf_common+0xa8>
 800880a:	2301      	movs	r3, #1
 800880c:	4652      	mov	r2, sl
 800880e:	4649      	mov	r1, r9
 8008810:	4638      	mov	r0, r7
 8008812:	47c0      	blx	r8
 8008814:	3001      	adds	r0, #1
 8008816:	d103      	bne.n	8008820 <_printf_common+0xac>
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008820:	3501      	adds	r5, #1
 8008822:	e7c6      	b.n	80087b2 <_printf_common+0x3e>
 8008824:	18e1      	adds	r1, r4, r3
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	2030      	movs	r0, #48	; 0x30
 800882a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800882e:	4422      	add	r2, r4
 8008830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008838:	3302      	adds	r3, #2
 800883a:	e7c7      	b.n	80087cc <_printf_common+0x58>
 800883c:	2301      	movs	r3, #1
 800883e:	4622      	mov	r2, r4
 8008840:	4649      	mov	r1, r9
 8008842:	4638      	mov	r0, r7
 8008844:	47c0      	blx	r8
 8008846:	3001      	adds	r0, #1
 8008848:	d0e6      	beq.n	8008818 <_printf_common+0xa4>
 800884a:	3601      	adds	r6, #1
 800884c:	e7d9      	b.n	8008802 <_printf_common+0x8e>
	...

08008850 <_printf_i>:
 8008850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	7e0f      	ldrb	r7, [r1, #24]
 8008856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008858:	2f78      	cmp	r7, #120	; 0x78
 800885a:	4691      	mov	r9, r2
 800885c:	4680      	mov	r8, r0
 800885e:	460c      	mov	r4, r1
 8008860:	469a      	mov	sl, r3
 8008862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008866:	d807      	bhi.n	8008878 <_printf_i+0x28>
 8008868:	2f62      	cmp	r7, #98	; 0x62
 800886a:	d80a      	bhi.n	8008882 <_printf_i+0x32>
 800886c:	2f00      	cmp	r7, #0
 800886e:	f000 80d4 	beq.w	8008a1a <_printf_i+0x1ca>
 8008872:	2f58      	cmp	r7, #88	; 0x58
 8008874:	f000 80c0 	beq.w	80089f8 <_printf_i+0x1a8>
 8008878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800887c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008880:	e03a      	b.n	80088f8 <_printf_i+0xa8>
 8008882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008886:	2b15      	cmp	r3, #21
 8008888:	d8f6      	bhi.n	8008878 <_printf_i+0x28>
 800888a:	a101      	add	r1, pc, #4	; (adr r1, 8008890 <_printf_i+0x40>)
 800888c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088fd 	.word	0x080088fd
 8008898:	08008879 	.word	0x08008879
 800889c:	08008879 	.word	0x08008879
 80088a0:	08008879 	.word	0x08008879
 80088a4:	08008879 	.word	0x08008879
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008879 	.word	0x08008879
 80088b0:	08008879 	.word	0x08008879
 80088b4:	08008879 	.word	0x08008879
 80088b8:	08008879 	.word	0x08008879
 80088bc:	08008a01 	.word	0x08008a01
 80088c0:	08008929 	.word	0x08008929
 80088c4:	080089bb 	.word	0x080089bb
 80088c8:	08008879 	.word	0x08008879
 80088cc:	08008879 	.word	0x08008879
 80088d0:	08008a23 	.word	0x08008a23
 80088d4:	08008879 	.word	0x08008879
 80088d8:	08008929 	.word	0x08008929
 80088dc:	08008879 	.word	0x08008879
 80088e0:	08008879 	.word	0x08008879
 80088e4:	080089c3 	.word	0x080089c3
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	1d1a      	adds	r2, r3, #4
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	602a      	str	r2, [r5, #0]
 80088f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088f8:	2301      	movs	r3, #1
 80088fa:	e09f      	b.n	8008a3c <_printf_i+0x1ec>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	0607      	lsls	r7, r0, #24
 8008902:	f103 0104 	add.w	r1, r3, #4
 8008906:	6029      	str	r1, [r5, #0]
 8008908:	d501      	bpl.n	800890e <_printf_i+0xbe>
 800890a:	681e      	ldr	r6, [r3, #0]
 800890c:	e003      	b.n	8008916 <_printf_i+0xc6>
 800890e:	0646      	lsls	r6, r0, #25
 8008910:	d5fb      	bpl.n	800890a <_printf_i+0xba>
 8008912:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008916:	2e00      	cmp	r6, #0
 8008918:	da03      	bge.n	8008922 <_printf_i+0xd2>
 800891a:	232d      	movs	r3, #45	; 0x2d
 800891c:	4276      	negs	r6, r6
 800891e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008922:	485a      	ldr	r0, [pc, #360]	; (8008a8c <_printf_i+0x23c>)
 8008924:	230a      	movs	r3, #10
 8008926:	e012      	b.n	800894e <_printf_i+0xfe>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	6820      	ldr	r0, [r4, #0]
 800892c:	1d19      	adds	r1, r3, #4
 800892e:	6029      	str	r1, [r5, #0]
 8008930:	0605      	lsls	r5, r0, #24
 8008932:	d501      	bpl.n	8008938 <_printf_i+0xe8>
 8008934:	681e      	ldr	r6, [r3, #0]
 8008936:	e002      	b.n	800893e <_printf_i+0xee>
 8008938:	0641      	lsls	r1, r0, #25
 800893a:	d5fb      	bpl.n	8008934 <_printf_i+0xe4>
 800893c:	881e      	ldrh	r6, [r3, #0]
 800893e:	4853      	ldr	r0, [pc, #332]	; (8008a8c <_printf_i+0x23c>)
 8008940:	2f6f      	cmp	r7, #111	; 0x6f
 8008942:	bf0c      	ite	eq
 8008944:	2308      	moveq	r3, #8
 8008946:	230a      	movne	r3, #10
 8008948:	2100      	movs	r1, #0
 800894a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800894e:	6865      	ldr	r5, [r4, #4]
 8008950:	60a5      	str	r5, [r4, #8]
 8008952:	2d00      	cmp	r5, #0
 8008954:	bfa2      	ittt	ge
 8008956:	6821      	ldrge	r1, [r4, #0]
 8008958:	f021 0104 	bicge.w	r1, r1, #4
 800895c:	6021      	strge	r1, [r4, #0]
 800895e:	b90e      	cbnz	r6, 8008964 <_printf_i+0x114>
 8008960:	2d00      	cmp	r5, #0
 8008962:	d04b      	beq.n	80089fc <_printf_i+0x1ac>
 8008964:	4615      	mov	r5, r2
 8008966:	fbb6 f1f3 	udiv	r1, r6, r3
 800896a:	fb03 6711 	mls	r7, r3, r1, r6
 800896e:	5dc7      	ldrb	r7, [r0, r7]
 8008970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008974:	4637      	mov	r7, r6
 8008976:	42bb      	cmp	r3, r7
 8008978:	460e      	mov	r6, r1
 800897a:	d9f4      	bls.n	8008966 <_printf_i+0x116>
 800897c:	2b08      	cmp	r3, #8
 800897e:	d10b      	bne.n	8008998 <_printf_i+0x148>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	07de      	lsls	r6, r3, #31
 8008984:	d508      	bpl.n	8008998 <_printf_i+0x148>
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	6861      	ldr	r1, [r4, #4]
 800898a:	4299      	cmp	r1, r3
 800898c:	bfde      	ittt	le
 800898e:	2330      	movle	r3, #48	; 0x30
 8008990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008994:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008998:	1b52      	subs	r2, r2, r5
 800899a:	6122      	str	r2, [r4, #16]
 800899c:	f8cd a000 	str.w	sl, [sp]
 80089a0:	464b      	mov	r3, r9
 80089a2:	aa03      	add	r2, sp, #12
 80089a4:	4621      	mov	r1, r4
 80089a6:	4640      	mov	r0, r8
 80089a8:	f7ff fee4 	bl	8008774 <_printf_common>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d14a      	bne.n	8008a46 <_printf_i+0x1f6>
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	b004      	add	sp, #16
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	f043 0320 	orr.w	r3, r3, #32
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	4833      	ldr	r0, [pc, #204]	; (8008a90 <_printf_i+0x240>)
 80089c4:	2778      	movs	r7, #120	; 0x78
 80089c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	6829      	ldr	r1, [r5, #0]
 80089ce:	061f      	lsls	r7, r3, #24
 80089d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80089d4:	d402      	bmi.n	80089dc <_printf_i+0x18c>
 80089d6:	065f      	lsls	r7, r3, #25
 80089d8:	bf48      	it	mi
 80089da:	b2b6      	uxthmi	r6, r6
 80089dc:	07df      	lsls	r7, r3, #31
 80089de:	bf48      	it	mi
 80089e0:	f043 0320 	orrmi.w	r3, r3, #32
 80089e4:	6029      	str	r1, [r5, #0]
 80089e6:	bf48      	it	mi
 80089e8:	6023      	strmi	r3, [r4, #0]
 80089ea:	b91e      	cbnz	r6, 80089f4 <_printf_i+0x1a4>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	f023 0320 	bic.w	r3, r3, #32
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	2310      	movs	r3, #16
 80089f6:	e7a7      	b.n	8008948 <_printf_i+0xf8>
 80089f8:	4824      	ldr	r0, [pc, #144]	; (8008a8c <_printf_i+0x23c>)
 80089fa:	e7e4      	b.n	80089c6 <_printf_i+0x176>
 80089fc:	4615      	mov	r5, r2
 80089fe:	e7bd      	b.n	800897c <_printf_i+0x12c>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	6826      	ldr	r6, [r4, #0]
 8008a04:	6961      	ldr	r1, [r4, #20]
 8008a06:	1d18      	adds	r0, r3, #4
 8008a08:	6028      	str	r0, [r5, #0]
 8008a0a:	0635      	lsls	r5, r6, #24
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	d501      	bpl.n	8008a14 <_printf_i+0x1c4>
 8008a10:	6019      	str	r1, [r3, #0]
 8008a12:	e002      	b.n	8008a1a <_printf_i+0x1ca>
 8008a14:	0670      	lsls	r0, r6, #25
 8008a16:	d5fb      	bpl.n	8008a10 <_printf_i+0x1c0>
 8008a18:	8019      	strh	r1, [r3, #0]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6123      	str	r3, [r4, #16]
 8008a1e:	4615      	mov	r5, r2
 8008a20:	e7bc      	b.n	800899c <_printf_i+0x14c>
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	681d      	ldr	r5, [r3, #0]
 8008a2a:	6862      	ldr	r2, [r4, #4]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7f7 fbd6 	bl	80001e0 <memchr>
 8008a34:	b108      	cbz	r0, 8008a3a <_printf_i+0x1ea>
 8008a36:	1b40      	subs	r0, r0, r5
 8008a38:	6060      	str	r0, [r4, #4]
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	6123      	str	r3, [r4, #16]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a44:	e7aa      	b.n	800899c <_printf_i+0x14c>
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	462a      	mov	r2, r5
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	47d0      	blx	sl
 8008a50:	3001      	adds	r0, #1
 8008a52:	d0ad      	beq.n	80089b0 <_printf_i+0x160>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	079b      	lsls	r3, r3, #30
 8008a58:	d413      	bmi.n	8008a82 <_printf_i+0x232>
 8008a5a:	68e0      	ldr	r0, [r4, #12]
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	4298      	cmp	r0, r3
 8008a60:	bfb8      	it	lt
 8008a62:	4618      	movlt	r0, r3
 8008a64:	e7a6      	b.n	80089b4 <_printf_i+0x164>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	47d0      	blx	sl
 8008a70:	3001      	adds	r0, #1
 8008a72:	d09d      	beq.n	80089b0 <_printf_i+0x160>
 8008a74:	3501      	adds	r5, #1
 8008a76:	68e3      	ldr	r3, [r4, #12]
 8008a78:	9903      	ldr	r1, [sp, #12]
 8008a7a:	1a5b      	subs	r3, r3, r1
 8008a7c:	42ab      	cmp	r3, r5
 8008a7e:	dcf2      	bgt.n	8008a66 <_printf_i+0x216>
 8008a80:	e7eb      	b.n	8008a5a <_printf_i+0x20a>
 8008a82:	2500      	movs	r5, #0
 8008a84:	f104 0619 	add.w	r6, r4, #25
 8008a88:	e7f5      	b.n	8008a76 <_printf_i+0x226>
 8008a8a:	bf00      	nop
 8008a8c:	08008fc9 	.word	0x08008fc9
 8008a90:	08008fda 	.word	0x08008fda

08008a94 <__sflush_r>:
 8008a94:	898a      	ldrh	r2, [r1, #12]
 8008a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	0710      	lsls	r0, r2, #28
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	d458      	bmi.n	8008b54 <__sflush_r+0xc0>
 8008aa2:	684b      	ldr	r3, [r1, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dc05      	bgt.n	8008ab4 <__sflush_r+0x20>
 8008aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dc02      	bgt.n	8008ab4 <__sflush_r+0x20>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	d0f9      	beq.n	8008aae <__sflush_r+0x1a>
 8008aba:	2300      	movs	r3, #0
 8008abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ac0:	682f      	ldr	r7, [r5, #0]
 8008ac2:	6a21      	ldr	r1, [r4, #32]
 8008ac4:	602b      	str	r3, [r5, #0]
 8008ac6:	d032      	beq.n	8008b2e <__sflush_r+0x9a>
 8008ac8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	075a      	lsls	r2, r3, #29
 8008ace:	d505      	bpl.n	8008adc <__sflush_r+0x48>
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	1ac0      	subs	r0, r0, r3
 8008ad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ad6:	b10b      	cbz	r3, 8008adc <__sflush_r+0x48>
 8008ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ada:	1ac0      	subs	r0, r0, r3
 8008adc:	2300      	movs	r3, #0
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ae2:	6a21      	ldr	r1, [r4, #32]
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b0      	blx	r6
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	d106      	bne.n	8008afc <__sflush_r+0x68>
 8008aee:	6829      	ldr	r1, [r5, #0]
 8008af0:	291d      	cmp	r1, #29
 8008af2:	d82b      	bhi.n	8008b4c <__sflush_r+0xb8>
 8008af4:	4a29      	ldr	r2, [pc, #164]	; (8008b9c <__sflush_r+0x108>)
 8008af6:	410a      	asrs	r2, r1
 8008af8:	07d6      	lsls	r6, r2, #31
 8008afa:	d427      	bmi.n	8008b4c <__sflush_r+0xb8>
 8008afc:	2200      	movs	r2, #0
 8008afe:	6062      	str	r2, [r4, #4]
 8008b00:	04d9      	lsls	r1, r3, #19
 8008b02:	6922      	ldr	r2, [r4, #16]
 8008b04:	6022      	str	r2, [r4, #0]
 8008b06:	d504      	bpl.n	8008b12 <__sflush_r+0x7e>
 8008b08:	1c42      	adds	r2, r0, #1
 8008b0a:	d101      	bne.n	8008b10 <__sflush_r+0x7c>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b903      	cbnz	r3, 8008b12 <__sflush_r+0x7e>
 8008b10:	6560      	str	r0, [r4, #84]	; 0x54
 8008b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b14:	602f      	str	r7, [r5, #0]
 8008b16:	2900      	cmp	r1, #0
 8008b18:	d0c9      	beq.n	8008aae <__sflush_r+0x1a>
 8008b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b1e:	4299      	cmp	r1, r3
 8008b20:	d002      	beq.n	8008b28 <__sflush_r+0x94>
 8008b22:	4628      	mov	r0, r5
 8008b24:	f7ff fbea 	bl	80082fc <_free_r>
 8008b28:	2000      	movs	r0, #0
 8008b2a:	6360      	str	r0, [r4, #52]	; 0x34
 8008b2c:	e7c0      	b.n	8008ab0 <__sflush_r+0x1c>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4628      	mov	r0, r5
 8008b32:	47b0      	blx	r6
 8008b34:	1c41      	adds	r1, r0, #1
 8008b36:	d1c8      	bne.n	8008aca <__sflush_r+0x36>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0c5      	beq.n	8008aca <__sflush_r+0x36>
 8008b3e:	2b1d      	cmp	r3, #29
 8008b40:	d001      	beq.n	8008b46 <__sflush_r+0xb2>
 8008b42:	2b16      	cmp	r3, #22
 8008b44:	d101      	bne.n	8008b4a <__sflush_r+0xb6>
 8008b46:	602f      	str	r7, [r5, #0]
 8008b48:	e7b1      	b.n	8008aae <__sflush_r+0x1a>
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	e7ad      	b.n	8008ab0 <__sflush_r+0x1c>
 8008b54:	690f      	ldr	r7, [r1, #16]
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d0a9      	beq.n	8008aae <__sflush_r+0x1a>
 8008b5a:	0793      	lsls	r3, r2, #30
 8008b5c:	680e      	ldr	r6, [r1, #0]
 8008b5e:	bf08      	it	eq
 8008b60:	694b      	ldreq	r3, [r1, #20]
 8008b62:	600f      	str	r7, [r1, #0]
 8008b64:	bf18      	it	ne
 8008b66:	2300      	movne	r3, #0
 8008b68:	eba6 0807 	sub.w	r8, r6, r7
 8008b6c:	608b      	str	r3, [r1, #8]
 8008b6e:	f1b8 0f00 	cmp.w	r8, #0
 8008b72:	dd9c      	ble.n	8008aae <__sflush_r+0x1a>
 8008b74:	6a21      	ldr	r1, [r4, #32]
 8008b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b78:	4643      	mov	r3, r8
 8008b7a:	463a      	mov	r2, r7
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b0      	blx	r6
 8008b80:	2800      	cmp	r0, #0
 8008b82:	dc06      	bgt.n	8008b92 <__sflush_r+0xfe>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b90:	e78e      	b.n	8008ab0 <__sflush_r+0x1c>
 8008b92:	4407      	add	r7, r0
 8008b94:	eba8 0800 	sub.w	r8, r8, r0
 8008b98:	e7e9      	b.n	8008b6e <__sflush_r+0xda>
 8008b9a:	bf00      	nop
 8008b9c:	dfbffffe 	.word	0xdfbffffe

08008ba0 <_fflush_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	690b      	ldr	r3, [r1, #16]
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	b913      	cbnz	r3, 8008bb0 <_fflush_r+0x10>
 8008baa:	2500      	movs	r5, #0
 8008bac:	4628      	mov	r0, r5
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	b118      	cbz	r0, 8008bba <_fflush_r+0x1a>
 8008bb2:	6a03      	ldr	r3, [r0, #32]
 8008bb4:	b90b      	cbnz	r3, 8008bba <_fflush_r+0x1a>
 8008bb6:	f7ff fa35 	bl	8008024 <__sinit>
 8008bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f3      	beq.n	8008baa <_fflush_r+0xa>
 8008bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bc4:	07d0      	lsls	r0, r2, #31
 8008bc6:	d404      	bmi.n	8008bd2 <_fflush_r+0x32>
 8008bc8:	0599      	lsls	r1, r3, #22
 8008bca:	d402      	bmi.n	8008bd2 <_fflush_r+0x32>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bce:	f7ff fb84 	bl	80082da <__retarget_lock_acquire_recursive>
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	f7ff ff5d 	bl	8008a94 <__sflush_r>
 8008bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bdc:	07da      	lsls	r2, r3, #31
 8008bde:	4605      	mov	r5, r0
 8008be0:	d4e4      	bmi.n	8008bac <_fflush_r+0xc>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	059b      	lsls	r3, r3, #22
 8008be6:	d4e1      	bmi.n	8008bac <_fflush_r+0xc>
 8008be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bea:	f7ff fb77 	bl	80082dc <__retarget_lock_release_recursive>
 8008bee:	e7dd      	b.n	8008bac <_fflush_r+0xc>

08008bf0 <__swbuf_r>:
 8008bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf2:	460e      	mov	r6, r1
 8008bf4:	4614      	mov	r4, r2
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	b118      	cbz	r0, 8008c02 <__swbuf_r+0x12>
 8008bfa:	6a03      	ldr	r3, [r0, #32]
 8008bfc:	b90b      	cbnz	r3, 8008c02 <__swbuf_r+0x12>
 8008bfe:	f7ff fa11 	bl	8008024 <__sinit>
 8008c02:	69a3      	ldr	r3, [r4, #24]
 8008c04:	60a3      	str	r3, [r4, #8]
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	071a      	lsls	r2, r3, #28
 8008c0a:	d525      	bpl.n	8008c58 <__swbuf_r+0x68>
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	b31b      	cbz	r3, 8008c58 <__swbuf_r+0x68>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	6922      	ldr	r2, [r4, #16]
 8008c14:	1a98      	subs	r0, r3, r2
 8008c16:	6963      	ldr	r3, [r4, #20]
 8008c18:	b2f6      	uxtb	r6, r6
 8008c1a:	4283      	cmp	r3, r0
 8008c1c:	4637      	mov	r7, r6
 8008c1e:	dc04      	bgt.n	8008c2a <__swbuf_r+0x3a>
 8008c20:	4621      	mov	r1, r4
 8008c22:	4628      	mov	r0, r5
 8008c24:	f7ff ffbc 	bl	8008ba0 <_fflush_r>
 8008c28:	b9e0      	cbnz	r0, 8008c64 <__swbuf_r+0x74>
 8008c2a:	68a3      	ldr	r3, [r4, #8]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	60a3      	str	r3, [r4, #8]
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	701e      	strb	r6, [r3, #0]
 8008c38:	6962      	ldr	r2, [r4, #20]
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d004      	beq.n	8008c4a <__swbuf_r+0x5a>
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	07db      	lsls	r3, r3, #31
 8008c44:	d506      	bpl.n	8008c54 <__swbuf_r+0x64>
 8008c46:	2e0a      	cmp	r6, #10
 8008c48:	d104      	bne.n	8008c54 <__swbuf_r+0x64>
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f7ff ffa7 	bl	8008ba0 <_fflush_r>
 8008c52:	b938      	cbnz	r0, 8008c64 <__swbuf_r+0x74>
 8008c54:	4638      	mov	r0, r7
 8008c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c58:	4621      	mov	r1, r4
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f000 f806 	bl	8008c6c <__swsetup_r>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d0d5      	beq.n	8008c10 <__swbuf_r+0x20>
 8008c64:	f04f 37ff 	mov.w	r7, #4294967295
 8008c68:	e7f4      	b.n	8008c54 <__swbuf_r+0x64>
	...

08008c6c <__swsetup_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4b2a      	ldr	r3, [pc, #168]	; (8008d18 <__swsetup_r+0xac>)
 8008c70:	4605      	mov	r5, r0
 8008c72:	6818      	ldr	r0, [r3, #0]
 8008c74:	460c      	mov	r4, r1
 8008c76:	b118      	cbz	r0, 8008c80 <__swsetup_r+0x14>
 8008c78:	6a03      	ldr	r3, [r0, #32]
 8008c7a:	b90b      	cbnz	r3, 8008c80 <__swsetup_r+0x14>
 8008c7c:	f7ff f9d2 	bl	8008024 <__sinit>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c86:	0718      	lsls	r0, r3, #28
 8008c88:	d422      	bmi.n	8008cd0 <__swsetup_r+0x64>
 8008c8a:	06d9      	lsls	r1, r3, #27
 8008c8c:	d407      	bmi.n	8008c9e <__swsetup_r+0x32>
 8008c8e:	2309      	movs	r3, #9
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	e034      	b.n	8008d08 <__swsetup_r+0x9c>
 8008c9e:	0758      	lsls	r0, r3, #29
 8008ca0:	d512      	bpl.n	8008cc8 <__swsetup_r+0x5c>
 8008ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ca4:	b141      	cbz	r1, 8008cb8 <__swsetup_r+0x4c>
 8008ca6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008caa:	4299      	cmp	r1, r3
 8008cac:	d002      	beq.n	8008cb4 <__swsetup_r+0x48>
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f7ff fb24 	bl	80082fc <_free_r>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6363      	str	r3, [r4, #52]	; 0x34
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6063      	str	r3, [r4, #4]
 8008cc4:	6923      	ldr	r3, [r4, #16]
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	f043 0308 	orr.w	r3, r3, #8
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	b94b      	cbnz	r3, 8008ce8 <__swsetup_r+0x7c>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cde:	d003      	beq.n	8008ce8 <__swsetup_r+0x7c>
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 f850 	bl	8008d88 <__smakebuf_r>
 8008ce8:	89a0      	ldrh	r0, [r4, #12]
 8008cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cee:	f010 0301 	ands.w	r3, r0, #1
 8008cf2:	d00a      	beq.n	8008d0a <__swsetup_r+0x9e>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60a3      	str	r3, [r4, #8]
 8008cf8:	6963      	ldr	r3, [r4, #20]
 8008cfa:	425b      	negs	r3, r3
 8008cfc:	61a3      	str	r3, [r4, #24]
 8008cfe:	6923      	ldr	r3, [r4, #16]
 8008d00:	b943      	cbnz	r3, 8008d14 <__swsetup_r+0xa8>
 8008d02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d06:	d1c4      	bne.n	8008c92 <__swsetup_r+0x26>
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
 8008d0a:	0781      	lsls	r1, r0, #30
 8008d0c:	bf58      	it	pl
 8008d0e:	6963      	ldrpl	r3, [r4, #20]
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	e7f4      	b.n	8008cfe <__swsetup_r+0x92>
 8008d14:	2000      	movs	r0, #0
 8008d16:	e7f7      	b.n	8008d08 <__swsetup_r+0x9c>
 8008d18:	20000068 	.word	0x20000068

08008d1c <_sbrk_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4d06      	ldr	r5, [pc, #24]	; (8008d38 <_sbrk_r+0x1c>)
 8008d20:	2300      	movs	r3, #0
 8008d22:	4604      	mov	r4, r0
 8008d24:	4608      	mov	r0, r1
 8008d26:	602b      	str	r3, [r5, #0]
 8008d28:	f7f9 f82e 	bl	8001d88 <_sbrk>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	d102      	bne.n	8008d36 <_sbrk_r+0x1a>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b103      	cbz	r3, 8008d36 <_sbrk_r+0x1a>
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	20004ce0 	.word	0x20004ce0

08008d3c <__swhatbuf_r>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	460c      	mov	r4, r1
 8008d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d44:	2900      	cmp	r1, #0
 8008d46:	b096      	sub	sp, #88	; 0x58
 8008d48:	4615      	mov	r5, r2
 8008d4a:	461e      	mov	r6, r3
 8008d4c:	da0d      	bge.n	8008d6a <__swhatbuf_r+0x2e>
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d54:	f04f 0100 	mov.w	r1, #0
 8008d58:	bf0c      	ite	eq
 8008d5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008d5e:	2340      	movne	r3, #64	; 0x40
 8008d60:	2000      	movs	r0, #0
 8008d62:	6031      	str	r1, [r6, #0]
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	b016      	add	sp, #88	; 0x58
 8008d68:	bd70      	pop	{r4, r5, r6, pc}
 8008d6a:	466a      	mov	r2, sp
 8008d6c:	f000 f848 	bl	8008e00 <_fstat_r>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	dbec      	blt.n	8008d4e <__swhatbuf_r+0x12>
 8008d74:	9901      	ldr	r1, [sp, #4]
 8008d76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008d7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d7e:	4259      	negs	r1, r3
 8008d80:	4159      	adcs	r1, r3
 8008d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d86:	e7eb      	b.n	8008d60 <__swhatbuf_r+0x24>

08008d88 <__smakebuf_r>:
 8008d88:	898b      	ldrh	r3, [r1, #12]
 8008d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d8c:	079d      	lsls	r5, r3, #30
 8008d8e:	4606      	mov	r6, r0
 8008d90:	460c      	mov	r4, r1
 8008d92:	d507      	bpl.n	8008da4 <__smakebuf_r+0x1c>
 8008d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	6123      	str	r3, [r4, #16]
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	6163      	str	r3, [r4, #20]
 8008da0:	b002      	add	sp, #8
 8008da2:	bd70      	pop	{r4, r5, r6, pc}
 8008da4:	ab01      	add	r3, sp, #4
 8008da6:	466a      	mov	r2, sp
 8008da8:	f7ff ffc8 	bl	8008d3c <__swhatbuf_r>
 8008dac:	9900      	ldr	r1, [sp, #0]
 8008dae:	4605      	mov	r5, r0
 8008db0:	4630      	mov	r0, r6
 8008db2:	f7ff fb0f 	bl	80083d4 <_malloc_r>
 8008db6:	b948      	cbnz	r0, 8008dcc <__smakebuf_r+0x44>
 8008db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dbc:	059a      	lsls	r2, r3, #22
 8008dbe:	d4ef      	bmi.n	8008da0 <__smakebuf_r+0x18>
 8008dc0:	f023 0303 	bic.w	r3, r3, #3
 8008dc4:	f043 0302 	orr.w	r3, r3, #2
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	e7e3      	b.n	8008d94 <__smakebuf_r+0xc>
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	6020      	str	r0, [r4, #0]
 8008dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	9b00      	ldr	r3, [sp, #0]
 8008dd8:	6163      	str	r3, [r4, #20]
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	6120      	str	r0, [r4, #16]
 8008dde:	b15b      	cbz	r3, 8008df8 <__smakebuf_r+0x70>
 8008de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de4:	4630      	mov	r0, r6
 8008de6:	f000 f81d 	bl	8008e24 <_isatty_r>
 8008dea:	b128      	cbz	r0, 8008df8 <__smakebuf_r+0x70>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f023 0303 	bic.w	r3, r3, #3
 8008df2:	f043 0301 	orr.w	r3, r3, #1
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	431d      	orrs	r5, r3
 8008dfc:	81a5      	strh	r5, [r4, #12]
 8008dfe:	e7cf      	b.n	8008da0 <__smakebuf_r+0x18>

08008e00 <_fstat_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d07      	ldr	r5, [pc, #28]	; (8008e20 <_fstat_r+0x20>)
 8008e04:	2300      	movs	r3, #0
 8008e06:	4604      	mov	r4, r0
 8008e08:	4608      	mov	r0, r1
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	602b      	str	r3, [r5, #0]
 8008e0e:	f7f8 ff92 	bl	8001d36 <_fstat>
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	d102      	bne.n	8008e1c <_fstat_r+0x1c>
 8008e16:	682b      	ldr	r3, [r5, #0]
 8008e18:	b103      	cbz	r3, 8008e1c <_fstat_r+0x1c>
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	bd38      	pop	{r3, r4, r5, pc}
 8008e1e:	bf00      	nop
 8008e20:	20004ce0 	.word	0x20004ce0

08008e24 <_isatty_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d06      	ldr	r5, [pc, #24]	; (8008e40 <_isatty_r+0x1c>)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	602b      	str	r3, [r5, #0]
 8008e30:	f7f8 ff91 	bl	8001d56 <_isatty>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_isatty_r+0x1a>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_isatty_r+0x1a>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20004ce0 	.word	0x20004ce0

08008e44 <_init>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr

08008e50 <_fini>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr
